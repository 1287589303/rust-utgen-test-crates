[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"?query=param\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query_start, Some(19));",
          "    assert_eq!(url.serialization, \"http://example.com?query=param\");",
          "    assert_eq!(url.query(), Some(\"query=param\"));",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.port().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"?query=param\");",
          "    assert_eq!(url.query_start, Some(19));",
          "    assert_eq!(url.serialization, \"http://example.com?query=param\");",
          "    assert_eq!(url.query(), Some(\"query=param\"));",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.port().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"query=param\");",
          "}"
        ],
        "oracle": [
          "    url.set_query.call(new_search) == Some(\"query=param\")",
          "    url.query() == Some(\"query=param\")",
          "    url.serialization.contains(\"?\") == true",
          "    url.serialization == \"http://example.com?query=param\""
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"query=param\");",
          "    url.set_query.call(new_search) == Some(\"query=param\")",
          "    url.query() == Some(\"query=param\")",
          "    url.serialization.contains(\"?\") == true",
          "    url.serialization == \"http://example.com?query=param\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"?\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query_start, Some(26));",
          "    assert_eq!(url.serialization, \"http://example.com?\");",
          "    assert!(url.query().is_some());",
          "    assert_eq!(url.query().unwrap(), \"\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::from_str(\"example.com\").unwrap(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_search(&mut url, \"?\");",
          "    assert_eq!(url.query_start, Some(26));",
          "    assert_eq!(url.serialization, \"http://example.com?\");",
          "    assert!(url.query().is_some());",
          "    assert_eq!(url.query().unwrap(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]