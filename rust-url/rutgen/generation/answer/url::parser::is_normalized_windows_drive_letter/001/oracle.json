[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"C:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(is_windows_drive_letter(segment));",
          "    assert!(segment.len() == 2);"
        ],
        "code": [
          "{",
          "    let segment = \"C:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(result == true);",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(is_windows_drive_letter(segment));",
          "    assert!(segment.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"c:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    assert_eq!(result, true);",
          "    assert_eq!(segment.as_bytes()[1], b':');"
        ],
        "code": [
          "{",
          "    let segment = \"c:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(result);",
          "    assert_eq!(result, true);",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"C\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(is_windows_drive_letter(\"C:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"C:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"D:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"Z:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"C\") == false);",
          "    assert!(is_normalized_windows_drive_letter(\"C:/path\") == false);",
          "    assert!(is_normalized_windows_drive_letter(\"C:extra\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"C:\\\\path\") == false);"
        ],
        "code": [
          "{",
          "    let segment = \"C\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(is_windows_drive_letter(\"C:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"C:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"D:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"Z:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"C\") == false);",
          "    assert!(is_normalized_windows_drive_letter(\"C:/path\") == false);",
          "    assert!(is_normalized_windows_drive_letter(\"C:extra\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"C:\\\\path\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"1:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    assert!(segment.as_bytes()[1] == b':');",
          "    assert!(is_windows_drive_letter(segment) == true);",
          "    assert_eq!(result, is_normalized_windows_drive_letter(\"C:\"));",
          "    assert_eq!(result, is_normalized_windows_drive_letter(\"Z:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"D:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"A:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"X:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"1:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"Y:\") == true);"
        ],
        "code": [
          "{",
          "    let segment = \"1:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(result == true);",
          "    assert!(segment.as_bytes()[1] == b':');",
          "    assert!(is_windows_drive_letter(segment) == true);",
          "    assert_eq!(result, is_normalized_windows_drive_letter(\"C:\"));",
          "    assert_eq!(result, is_normalized_windows_drive_letter(\"Z:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"D:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"A:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"X:\"));",
          "    assert!(is_normalized_windows_drive_letter(\"1:\") == true);",
          "    assert!(is_normalized_windows_drive_letter(\"Y:\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"C-\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false); // Test when segment is not in the expected format",
          "    let segment = \"C:\"; // Valid case for normalized drive letter",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, true); // Test when segment is correctly formatted as a normalized drive letter",
          "    let segment = \"D:\"; // Another valid case for normalized drive letter",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, true); // Test for different valid normalized drive letter",
          "    let segment = \"E\"; // Missing colon, should be invalid",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, false); // Test when segment is formatted incorrectly",
          "    let segment = \"Z1:\"; // Incorrect drive letter format, should return false",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, false); // Test for invalid normalized drive letter format"
        ],
        "code": [
          "{",
          "    let segment = \"C-\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, false); // Test when segment is not in the expected format",
          "    let segment = \"C:\"; // Valid case for normalized drive letter",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, true); // Test when segment is correctly formatted as a normalized drive letter",
          "    let segment = \"D:\"; // Another valid case for normalized drive letter",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, true); // Test for different valid normalized drive letter",
          "    let segment = \"E\"; // Missing colon, should be invalid",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, false); // Test when segment is formatted incorrectly",
          "    let segment = \"Z1:\"; // Incorrect drive letter format, should return false",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert_eq!(result, false); // Test for invalid normalized drive letter format",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"Z:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(is_windows_drive_letter(segment));",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let segment = \"Z:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(is_windows_drive_letter(segment));",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"z:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    assert_eq!(result, true);",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(is_windows_drive_letter(segment));",
          "    assert_eq!(segment.len(), 2);"
        ],
        "code": [
          "{",
          "    let segment = \"z:\";",
          "    let result = is_normalized_windows_drive_letter(segment);",
          "    assert!(result);",
          "    assert_eq!(result, true);",
          "    assert_eq!(segment.as_bytes()[1], b':');",
          "    assert!(is_windows_drive_letter(segment));",
          "    assert_eq!(segment.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]