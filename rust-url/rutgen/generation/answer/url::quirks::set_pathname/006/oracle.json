[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"http://example.com\".to_string(), ",
          "        scheme_end: 4, ",
          "        username_end: 0, ",
          "        host_start: 7, ",
          "        host_end: 14, ",
          "        host: HostInternal::Some(\"example.com\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert!(url.has_host());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(!url.password().is_some());",
          "    assert!(url.query().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.path_segments().is_none(), true);",
          "    assert_eq!(url.domain(), Some(\"example.com\"));"
        ],
        "code": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"http://example.com\".to_string(), ",
          "        scheme_end: 4, ",
          "        username_end: 0, ",
          "        host_start: 7, ",
          "        host_end: 14, ",
          "        host: HostInternal::Some(\"example.com\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert!(url.has_host());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(!url.password().is_some());",
          "    assert!(url.query().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.path_segments().is_none(), true);",
          "    assert_eq!(url.domain(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"http://localhost\".to_string(), ",
          "        scheme_end: 4, ",
          "        username_end: 0, ",
          "        host_start: 7, ",
          "        host_end: 12, ",
          "        host: HostInternal::Some(\"localhost\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.has_host());",
          "    assert!(url.cannot_be_a_base());",
          "    assert_eq!(url.serialization, \"http://localhost/\");"
        ],
        "code": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"http://localhost\".to_string(), ",
          "        scheme_end: 4, ",
          "        username_end: 0, ",
          "        host_start: 7, ",
          "        host_end: 12, ",
          "        host: HostInternal::Some(\"localhost\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.has_host());",
          "    assert!(url.cannot_be_a_base());",
          "    assert_eq!(url.serialization, \"http://localhost/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"https://example.org\".to_string(), ",
          "        scheme_end: 5, ",
          "        username_end: 0, ",
          "        host_start: 8, ",
          "        host_end: 16, ",
          "        host: HostInternal::Some(\"example.org\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.serialization, \"https://example.org/\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.org\"));",
          "    assert!(url.port().is_none());",
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(!url.cannot_be_a_base());",
          "    assert!(!url.is_special());"
        ],
        "code": [
          "{ ",
          "    let mut url = Url { ",
          "        serialization: \"https://example.org\".to_string(), ",
          "        scheme_end: 5, ",
          "        username_end: 0, ",
          "        host_start: 8, ",
          "        host_end: 16, ",
          "        host: HostInternal::Some(\"example.org\".to_string()), ",
          "        port: None, ",
          "        path_start: 0, ",
          "        query_start: None, ",
          "        fragment_start: None ",
          "    }; ",
          "    let new_pathname = \"\"; ",
          "    set_pathname(&mut url, new_pathname); ",
          "    assert_eq!(url.path(), \"/\");",
          "    assert_eq!(url.serialization, \"https://example.org/\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.org\"));",
          "    assert!(url.port().is_none());",
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(!url.cannot_be_a_base());",
          "    assert!(!url.is_special());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]