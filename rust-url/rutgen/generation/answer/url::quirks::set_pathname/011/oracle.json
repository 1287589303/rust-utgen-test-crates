[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"path/to/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/path/to/resource\");",
          "    assert_eq!(url.serialization, \"http://example.com/path/to/resource\");",
          "    assert!(url.has_host());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(!url.is_special());",
          "    assert!(!new_pathname.is_empty());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"path/to/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "    assert_eq!(url.path(), \"/path/to/resource\");",
          "    assert_eq!(url.serialization, \"http://example.com/path/to/resource\");",
          "    assert!(url.has_host());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(!url.is_special());",
          "    assert!(!new_pathname.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"another/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/another/resource\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.scheme(), \"ftp\");",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.username(), \"\");",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.query().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert!(url.is_special());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"another/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "    assert_eq!(url.path(), \"/another/resource\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.scheme(), \"ftp\");",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.username(), \"\");",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.query().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert!(!url.cannot_be_a_base());",
          "    assert!(url.is_special());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://localhost\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"localhost\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"non-empty-path\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    url.has_host() == true",
          "    url.path() == \"/non-empty-path\"",
          "    url.scheme() == \"http\"",
          "    url.port() == Some(8080)",
          "    url.username() == \"\"",
          "    url.fragment() == None",
          "    url.query() == None",
          "    url.host_str() == Some(\"localhost\")"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://localhost\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain(String::from(\"localhost\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"non-empty-path\";",
          "    set_pathname(&mut url, new_pathname);",
          "    url.has_host() == true",
          "    url.path() == \"/non-empty-path\"",
          "    url.scheme() == \"http\"",
          "    url.port() == Some(8080)",
          "    url.username() == \"\"",
          "    url.fragment() == None",
          "    url.query() == None",
          "    url.host_str() == Some(\"localhost\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]