[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"path/to/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"path/to/resource\");",
          "    assert_eq!(url.cannot_be_a_base(), true);",
          "    assert_eq!(url.has_host(), false);",
          "    assert!(url.serialization.contains(\"path/to/resource\"));",
          "    assert_eq!(url.scheme(), \"http\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"path/to/resource\";",
          "    set_pathname(&mut url, new_pathname);",
          "    assert_eq!(url.path(), \"path/to/resource\");",
          "    assert_eq!(url.cannot_be_a_base(), true);",
          "    assert_eq!(url.has_host(), false);",
          "    assert!(url.serialization.contains(\"path/to/resource\"));",
          "    assert_eq!(url.scheme(), \"http\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"\");",
          "    assert!(url.has_authority());",
          "    assert!(url.host().is_none());",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert_eq!(url.serialization, \"http://example.com\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"\";",
          "    set_pathname(&mut url, new_pathname);",
          "    assert_eq!(url.path(), \"\");",
          "    assert!(url.has_authority());",
          "    assert!(url.host().is_none());",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert_eq!(url.serialization, \"http://example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"ftp://example.com\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 15,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"another/path\";",
          "    set_pathname(&mut url, new_pathname);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.path(), \"/another/path\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"ftp://example.com\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 15,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let new_pathname = \"another/path\";",
          "    set_pathname(&mut url, new_pathname);",
          "    assert_eq!(url.path(), \"/another/path\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]