[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHost;",
          "    let host: Option<&str> = Some(\"hostname\");",
          "    let estimated_capacity: usize = 10;",
          "    let segments = \"C:\\\\some\\\\invalid\\\\%ZZsegment\".split('/');",
          "    ",
          "    let _ = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:%aa\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:invalid\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:\\\\some\\\\invalid\\\\%ZZsegment\".split('/')), Err(()));"
        ],
        "code": [
          "{",
          "    struct DummyHost;",
          "    let host: Option<&str> = Some(\"hostname\");",
          "    let estimated_capacity: usize = 10;",
          "    let segments = \"C:\\\\some\\\\invalid\\\\%ZZsegment\".split('/');",
          "    ",
          "    let _ = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:%aa\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:invalid\".split('/')), Err(()));",
          "    assert_eq!(file_url_segments_to_pathbuf_windows(10, Some(\"hostname\"), \"C:\\\\some\\\\invalid\\\\%ZZsegment\".split('/')), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyHost;",
          "    let host: Option<&str> = Some(\"example\");",
          "    let estimated_capacity: usize = 20;",
          "    let segments = \"D:\\\\folder\\\\not_unicode\\\\%G2segment\".split('/');",
          "    ",
          "    let _ = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    let host: Option<&str> = Some(\"example\");",
          "    let estimated_capacity: usize = 20;",
          "    let segments = \"D:\\\\folder\\\\not_unicode\\\\%G2segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "    let segments = \"invalid_segment/another_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Err(())));",
          "    let segments = \"A:folder/segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"B:folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"DO:folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"D%3a/folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    struct DummyHost;",
          "    let host: Option<&str> = Some(\"example\");",
          "    let estimated_capacity: usize = 20;",
          "    let segments = \"D:\\\\folder\\\\not_unicode\\\\%G2segment\".split('/');",
          "    ",
          "    let _ = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    let host: Option<&str> = Some(\"example\");",
          "    let estimated_capacity: usize = 20;",
          "    let segments = \"D:\\\\folder\\\\not_unicode\\\\%G2segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "    let segments = \"invalid_segment/another_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Err(())));",
          "    let segments = \"A:folder/segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"B:folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"DO:folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(matches!(result, Ok(_)));",
          "    let segments = \"D%3a/folder/valid_segment\".split('/');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]