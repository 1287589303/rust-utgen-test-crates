[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 10;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(()));",
          "    assert!(result.is_err() && result.err().is_none());"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 10;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(()));",
          "    assert!(result.is_err() && result.err().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 15;",
          "    let host = Some(\"my-computer\");",
          "    let segments = \"C:\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 15;",
          "    let host = Some(\"my-computer\");",
          "    let segments = \"C:\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 100;",
          "    let host = Some(\"example.com\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ());"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 100;",
          "    let host = Some(\"example.com\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 1;",
          "    let host = Some(\"SERVER\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert!(string.is_empty());",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is_none());",
          "    assert_eq!(estimated_capacity, 1);",
          "    assert_eq!(host, Some(\"SERVER\"));"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 1;",
          "    let host = Some(\"SERVER\");",
          "    let segments = \"\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "    assert!(string.is_empty());",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is_none());",
          "    assert_eq!(estimated_capacity, 1);",
          "    assert_eq!(host, Some(\"SERVER\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 50;",
          "    let host = Some(\"host_name_with_special_chars!@#\");",
          "    let segments = \"C:\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert!(result.is_err());",
          "    assert!(string.len() <= estimated_capacity);",
          "    assert!(path.is_absolute());"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 50;",
          "    let host = Some(\"host_name_with_special_chars!@#\");",
          "    let segments = \"C:\".split(',');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "    assert!(result.is_err());",
          "    assert!(string.len() <= estimated_capacity);",
          "    assert!(path.is_absolute());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]