[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|'); // valid segment of length 4, with '%3A'",
          "",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    // No assertions, only function call",
          "}"
        ],
        "oracle": [
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|'); // valid segment of length 4, with '%3A'",
          "",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    // No assertions, only function call",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|'); // valid segment of length 4, with '%3A'",
          "",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    // No assertions, only function call",
          "}"
        ],
        "oracle": [
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|'); // valid segment of length 4, with '%3A'",
          "",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    // No assertions, only function call",
          "    let estimated_capacity = 8;",
          "    let host = Some(\"localhost\");",
          "    let segments = \"te%3A\".splitn(2, '|');",
          "    let result = file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]