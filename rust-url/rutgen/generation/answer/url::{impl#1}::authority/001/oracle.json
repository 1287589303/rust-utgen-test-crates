[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://user:password@domain.com:8080/path\").unwrap();",
          "    let authority = url.authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(authority, \"user:password@domain.com:8080\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://user:password@domain.com:8080/path\").unwrap();",
          "    let authority = url.authority();",
          "    assert_eq!(authority, \"user:password@domain.com:8080\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com:8000/path\").unwrap();",
          "    let authority = url.authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(authority, \"example.com:8000\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com:8000/path\").unwrap();",
          "    let authority = url.authority();",
          "    assert_eq!(authority, \"example.com:8000\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"irc://user@xn--example-dk0b.com:6667/path\").unwrap();",
          "    let authority = url.authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(authority, \"user@xn--example-dk0b.com:6667\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"irc://user@xn--example-dk0b.com:6667/path\").unwrap();",
          "    let authority = url.authority();",
          "    assert_eq!(authority, \"user@xn--example-dk0b.com:6667\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://xn--lex-8ka.xn--p1ai:80/path\").unwrap();",
          "    let authority = url.authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(authority, \"xn--lex-8ka.xn--p1ai:80\");",
          "    assert_eq!(authority.len(), 22);",
          "    assert!(authority.contains(\"xn--lex-8ka\"));",
          "    assert!(authority.contains(\"xn--p1ai\"));",
          "    assert!(authority.ends_with(\":80\"));",
          "    assert!(authority.starts_with(\"xn--lex-8ka\"));",
          "    assert!(!authority.is_empty());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://xn--lex-8ka.xn--p1ai:80/path\").unwrap();",
          "    let authority = url.authority();",
          "    assert_eq!(authority, \"xn--lex-8ka.xn--p1ai:80\");",
          "    assert_eq!(authority.len(), 22);",
          "    assert!(authority.contains(\"xn--lex-8ka\"));",
          "    assert!(authority.contains(\"xn--p1ai\"));",
          "    assert!(authority.ends_with(\":80\"));",
          "    assert!(authority.starts_with(\"xn--lex-8ka\"));",
          "    assert!(!authority.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://:@domain.com:21/path\").unwrap();",
          "    let authority = url.authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(authority, \":@domain.com:21\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://:@domain.com:21/path\").unwrap();",
          "    let authority = url.authority();",
          "    assert_eq!(authority, \":@domain.com:21\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]