[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"/var/www\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(Url::from_directory_path(std::path::Path::new(\"/var/www\")), Ok(_)));",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"/var/www\")).unwrap().serialization.ends_with('/'));",
          "    assert_eq!(Url::from_directory_path(std::path::Path::new(\"/var/www\")).unwrap().serialization, \"file:///var/www/\");",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"C:/Users\")).is_ok());",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"\\\\\\\\Server\\\\Share\")).is_ok());",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"relative/path\")).is_err());"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"/var/www\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "    assert!(matches!(Url::from_directory_path(std::path::Path::new(\"/var/www\")), Ok(_)));",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"/var/www\")).unwrap().serialization.ends_with('/'));",
          "    assert_eq!(Url::from_directory_path(std::path::Path::new(\"/var/www\")).unwrap().serialization, \"file:///var/www/\");",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"C:/Users\")).is_ok());",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"\\\\\\\\Server\\\\Share\")).is_ok());",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"relative/path\")).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(Url::from_directory_path(std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\")).is_ok());",
          "    let url = Url::from_directory_path(std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\")).unwrap();",
          "    assert!(!url.serialization.ends_with('/'));",
          "    assert_eq!(url.serialization, \"file:///C:/Users/Username/Documents/\");"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "    assert!(Url::from_directory_path(std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\")).is_ok());",
          "    let url = Url::from_directory_path(std::path::Path::new(\"C:\\\\Users\\\\Username\\\\Documents\")).unwrap();",
          "    assert!(!url.serialization.ends_with('/'));",
          "    assert_eq!(url.serialization, \"file:///C:/Users/Username/Documents/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.host_str(), Some(\"\\\\\\\\Server\\\\Share\"));",
          "    assert_eq!(url.path(), \"/Folder/\");"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "    let _ = result.unwrap();",
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.host_str(), Some(\"\\\\\\\\Server\\\\Share\"));",
          "    assert_eq!(url.path(), \"/Folder/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]