[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"C:/Users/User/Documents\"); ",
          "    let result = Url::from_directory_path(&path);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.serialization, \"file:///C:/Users/User/Documents/\");",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert!(url.path().ends_with('/'));",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.scheme(), \"file\");"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"C:/Users/User/Documents\"); ",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.serialization, \"file:///C:/Users/User/Documents/\");",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert!(url.path().ends_with('/'));",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.scheme(), \"file\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert_eq!(url.host_str(), None);",
          "    assert_eq!(url.path(), \"/Server/Share/Folder/\");"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"\\\\\\\\Server\\\\Share\\\\Folder\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert_eq!(url.host_str(), None);",
          "    assert_eq!(url.path(), \"/Server/Share/Folder/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"D:/Projects/Rust\");",
          "    let result = Url::from_directory_path(&path);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().serialization, \"file:///D:/Projects/Rust/\");",
          "    assert!(result.unwrap().serialization.ends_with('/'));",
          "    assert!(result.unwrap().serialization.starts_with(\"file:///\"));",
          "    assert_eq!(result.unwrap().host(), Some(Host::Domain));",
          "    assert_eq!(result.unwrap().port(), None);"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"D:/Projects/Rust\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().serialization, \"file:///D:/Projects/Rust/\");",
          "    assert!(result.unwrap().serialization.ends_with('/'));",
          "    assert!(result.unwrap().serialization.starts_with(\"file:///\"));",
          "    assert_eq!(result.unwrap().host(), Some(Host::Domain));",
          "    assert_eq!(result.unwrap().port(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"/home/user/projects\");",
          "    let result = Url::from_directory_path(&path);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.serialization, \"file:///home/user/projects/\");"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"/home/user/projects\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert_eq!(url.serialization, \"file:///home/user/projects/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let path = std::path::Path::new(\"/Users/User/Documents\");",
          "    let result = Url::from_directory_path(&path);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.serialization, \"file:///Users/User/Documents/\");",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert!(url.path().is_empty());",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert_eq!(url.host_str(), None);",
          "    assert_eq!(url.port(), None);"
        ],
        "code": [
          "{",
          "    let path = std::path::Path::new(\"/Users/User/Documents\");",
          "    let result = Url::from_directory_path(&path);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.serialization, \"file:///Users/User/Documents/\");",
          "    assert!(url.serialization.ends_with('/'));",
          "    assert!(url.path().is_empty());",
          "    assert!(url.has_authority());",
          "    assert_eq!(url.scheme(), \"file\");",
          "    assert_eq!(url.host_str(), None);",
          "    assert_eq!(url.port(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]