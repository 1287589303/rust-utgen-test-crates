[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"/non/existing/directory\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"/non/existing/directory\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"Z:\\\\non\\\\existing\\\\directory\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"Z:\\\\non\\\\existing\\\\directory\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"\\\\\\\\server\\\\non\\\\existing\\\\share\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(Url::from_directory_path(\"C:non_existing_path\").is_err());",
          "    assert!(Url::from_directory_path(\"/non_absolute_path\").is_err());",
          "    assert!(Url::from_directory_path(\"\").is_err());",
          "    assert!(Url::from_directory_path(\"index.html\").is_err());"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"\\\\\\\\server\\\\non\\\\existing\\\\share\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(Url::from_directory_path(\"C:non_existing_path\").is_err());",
          "    assert!(Url::from_directory_path(\"/non_absolute_path\").is_err());",
          "    assert!(Url::from_directory_path(\"\").is_err());",
          "    assert!(Url::from_directory_path(\"index.html\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(Url::from_directory_path(Path::new(\"index.html\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"/non/absolute/path\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"\\\\non/absolute/path\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"C:index.html\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"C:\\\\\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(\"C:/\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(r\"\\\\servername\\share\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(r\"\\\\\")), \"Should succeed for UNC path without trailing slash\");",
          "    assert!(Url::from_directory_path(Path::new(\"/var/www\")).is_ok());",
          "    assert_eq!(Url::from_directory_path(\"/var/www\").unwrap().as_str(), \"file:///var/www/\");"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(Url::from_directory_path(Path::new(\"index.html\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"/non/absolute/path\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"\\\\non/absolute/path\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"C:index.html\")).is_err());",
          "    assert!(Url::from_directory_path(Path::new(\"C:\\\\\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(\"C:/\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(r\"\\\\servername\\share\")).is_ok());",
          "    assert!(Url::from_directory_path(Path::new(r\"\\\\\")), \"Should succeed for UNC path without trailing slash\");",
          "    assert!(Url::from_directory_path(Path::new(\"/var/www\")).is_ok());",
          "    assert_eq!(Url::from_directory_path(\"/var/www\").unwrap().as_str(), \"file:///var/www/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"/var/www/invalid:path\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"/var/www/invalid:path\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::from_directory_path(\"/var/www\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.is_err() == true);",
          "    assert!(result.unwrap_or_else(|_| Url::default()).path().is_empty());"
        ],
        "code": [
          "{",
          "    let result = Url::from_directory_path(\"/var/www\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.is_err() == true);",
          "    assert!(result.unwrap_or_else(|_| Url::default()).path().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]