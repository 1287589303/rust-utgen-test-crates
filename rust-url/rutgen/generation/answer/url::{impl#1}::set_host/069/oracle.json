[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://[::1]\")?;",
          "    let result = url.set_host(Some(\"[]\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"ftp://[::1]\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://[::1]\")?;",
          "    let result = url.set_host(Some(\"[]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"ftp://[::1]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.com\")?;",
          "    let result = url.set_host(Some(\"[]\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"http://example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.com\")?;",
          "    let result = url.set_host(Some(\"[]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"http://example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.com\")?;",
          "    let result = url.set_host(Some(\"[invalid:host]\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"https://example.com/\");",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.com\")?;",
          "    let result = url.set_host(Some(\"[invalid:host]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"https://example.com/\");",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"mailto:user@example.com\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"mailto:user@example.com\");",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"mailto:user@example.com\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"mailto:user@example.com\");",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"urn:example\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"urn:example\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"urn:example\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"urn:example\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "    let mut url = Url::parse(\"urn:example\")?;",
          "    let result = url.set_host(Some(\"[opaque]\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"urn:example\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]