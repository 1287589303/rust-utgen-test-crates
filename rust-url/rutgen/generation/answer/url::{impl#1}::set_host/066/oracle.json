[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseError::EmptyHost));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "    assert_eq!(result, Err(ParseError::EmptyHost));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://user@example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::EmptyHost);"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://user@example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::EmptyHost);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"file://example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(ParseError::EmptyHost));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"file://example.net\").unwrap();",
          "    let result = url.set_host(Some(\"\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(ParseError::EmptyHost));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]