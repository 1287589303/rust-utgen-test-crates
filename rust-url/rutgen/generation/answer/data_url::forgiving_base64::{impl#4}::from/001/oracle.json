[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(b'!');",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "}"
        ],
        "oracle": [
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(b'!');",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    assert_eq!(decode_error, DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(b'!'))));"
        ],
        "code": [
          "{",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(b'!');",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(b'!');",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    assert_eq!(decode_error, DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(b'!'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_detail = InvalidBase64Details::AlphabetSymbolAfterPadding;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "}"
        ],
        "oracle": [
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(0xFF); let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol; let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));",
          "    let error_detail = InvalidBase64Details::Padding; let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));"
        ],
        "code": [
          "{",
          "    let error_detail = InvalidBase64Details::AlphabetSymbolAfterPadding;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(0xFF); let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol; let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));",
          "    let error_detail = InvalidBase64Details::Padding; let decode_error: DecodeError<()> = error_detail.into(); assert!(matches!(decode_error, DecodeError::InvalidBase64(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "}"
        ],
        "oracle": [
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol))"
        ],
        "code": [
          "{",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_detail = InvalidBase64Details::Padding;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "}"
        ],
        "oracle": [
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding)) == decode_error",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(42);",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))) == error_detail.into()",
          "    let error_detail = InvalidBase64Details::AlphabetSymbolAfterPadding;",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)) == error_detail.into()",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol;",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol)) == error_detail.into()"
        ],
        "code": [
          "{",
          "    let error_detail = InvalidBase64Details::Padding;",
          "    let decode_error: DecodeError<()> = error_detail.into();",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding)) == decode_error",
          "    let error_detail = InvalidBase64Details::UnexpectedSymbol(42);",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))) == error_detail.into()",
          "    let error_detail = InvalidBase64Details::AlphabetSymbolAfterPadding;",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)) == error_detail.into()",
          "    let error_detail = InvalidBase64Details::LoneAlphabetSymbol;",
          "    DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol)) == error_detail.into()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]