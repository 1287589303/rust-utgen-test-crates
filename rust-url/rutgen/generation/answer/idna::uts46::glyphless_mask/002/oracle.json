[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    const fn glyphless_mask() -> u128 {",
          "        let mut accu = 0u128;",
          "        let mut b = 65; // Arbitrary value in the range (0, 127)",
          "        while b < 128 {",
          "            if (b <= b' ') || (b == 0x7F) {",
          "                accu |= 1u128 << b;",
          "            }",
          "            b += 1;",
          "        }",
          "        accu",
          "    }",
          "    let _ = glyphless_mask();",
          "}"
        ],
        "oracle": [
          "    assert!(glyphless_mask() == 0u128); // When b starts at 65, no glyphless bits should be set",
          "    assert!(glyphless_mask() == 0u128); // Verify that no glyphless masks are set for b = 66 to 127",
          "    assert!(glyphless_mask() == 0u128); // Verify that the returned value is still 0 when maximum input length is reached"
        ],
        "code": [
          "{",
          "    const fn glyphless_mask() -> u128 {",
          "        let mut accu = 0u128;",
          "        let mut b = 65; // Arbitrary value in the range (0, 127)",
          "        while b < 128 {",
          "            if (b <= b' ') || (b == 0x7F) {",
          "                accu |= 1u128 << b;",
          "            }",
          "            b += 1;",
          "        }",
          "        accu",
          "    }",
          "    let _ = glyphless_mask();",
          "    assert!(glyphless_mask() == 0u128); // When b starts at 65, no glyphless bits should be set",
          "    assert!(glyphless_mask() == 0u128); // Verify that no glyphless masks are set for b = 66 to 127",
          "    assert!(glyphless_mask() == 0u128); // Verify that the returned value is still 0 when maximum input length is reached",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    const fn glyphless_mask() -> u128 {",
          "        let mut accu = 0u128;",
          "        let mut b = 128; // Boundary case",
          "        while b < 128 {",
          "            if (b <= b' ') || (b == 0x7F) {",
          "                accu |= 1u128 << b;",
          "            }",
          "            b += 1;",
          "        }",
          "        accu",
          "    }",
          "    let _ = glyphless_mask();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(glyphless_mask(), 0u128);"
        ],
        "code": [
          "{",
          "    const fn glyphless_mask() -> u128 {",
          "        let mut accu = 0u128;",
          "        let mut b = 128; // Boundary case",
          "        while b < 128 {",
          "            if (b <= b' ') || (b == 0x7F) {",
          "                accu |= 1u128 << b;",
          "            }",
          "            b += 1;",
          "        }",
          "        accu",
          "    }",
          "    let _ = glyphless_mask();",
          "    assert_eq!(glyphless_mask(), 0u128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]