[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "}"
        ],
        "oracle": [
          "    let host = Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "    let host = Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(0, 0, 0, 0));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    assert_eq!(_result, expected);",
          "    ",
          "    let host = Host::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    let expected = HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)));"
        ],
        "code": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "    assert_eq!(_result, HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)));"
        ],
        "code": [
          "{",
          "    let host = Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255));",
          "    let _result: HostInternal = HostInternal::from(host);",
          "    assert_eq!(_result, HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]