[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user:pass@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.password(), Some(\"pass\"));",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"ftp://:secret123@example.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret123\"));",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"https://example.com\").unwrap();",
          "    assert_eq!(url.password(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user:pass@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "    assert_eq!(url.password(), Some(\"pass\"));",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"ftp://:secret123@example.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret123\"));",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"https://example.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://:pass@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.password(), Some(\"pass\"));",
          "    let url = Url::parse(\"http://:secret@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret\"));",
          "    let url = Url::parse(\"ftp://user:secret@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret\"));",
          "    let url = Url::parse(\"http://username:@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"ftp://user@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"https://hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://:pass@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "    assert_eq!(url.password(), Some(\"pass\"));",
          "    let url = Url::parse(\"http://:secret@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret\"));",
          "    let url = Url::parse(\"ftp://user:secret@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), Some(\"secret\"));",
          "    let url = Url::parse(\"http://username:@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"ftp://user@hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "    let url = Url::parse(\"https://hostname.com\").unwrap();",
          "    assert_eq!(url.password(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.password(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user@hostname.com\").unwrap();",
          "    let _ = url.password();",
          "    assert_eq!(url.password(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://hostname.com\").unwrap();",
          "    let _ = url.password();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.password(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://hostname.com\").unwrap();",
          "    let _ = url.password();",
          "    assert_eq!(url.password(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]