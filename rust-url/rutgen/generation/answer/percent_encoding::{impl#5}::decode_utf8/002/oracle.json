[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = b\"Hello%20World\".to_vec(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let decoded = result.unwrap();",
          "    assert_eq!(decoded, Cow::Owned(\"Hello World\".to_string()));"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = b\"Hello%20World\".to_vec(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert!(result.is_ok());",
          "    let decoded = result.unwrap();",
          "    assert_eq!(decoded, Cow::Owned(\"Hello World\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_length_string = \"A%20\".repeat(341); // 341 * 3 = 1023 bytes (valid percent-encoded)",
          "    let bytes: Vec<u8> = max_length_string.into_bytes(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Owned(\"A \".repeat(341).as_str().into()));"
        ],
        "code": [
          "{",
          "    let max_length_string = \"A%20\".repeat(341); // 341 * 3 = 1023 bytes (valid percent-encoded)",
          "    let bytes: Vec<u8> = max_length_string.into_bytes(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Owned(\"A \".repeat(341).as_str().into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = b\"%E2%9C%94%20Hello%20World\".to_vec(); // Contains valid UTF-8 and percent-encoded characters",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Owned(\"✅ Hello World\".into()));"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = b\"%E2%9C%94%20Hello%20World\".to_vec(); // Contains valid UTF-8 and percent-encoded characters",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Owned(\"✅ Hello World\".into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = b\"%C3%89l%C3%A9phant%20en%20%26%40%23\".to_vec(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cow::Owned(\"Éléphant en &@#\".to_owned())));"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = b\"%C3%89l%C3%A9phant%20en%20%26%40%23\".to_vec(); ",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert_eq!(result, Ok(Cow::Owned(\"Éléphant en &@#\".to_owned())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]