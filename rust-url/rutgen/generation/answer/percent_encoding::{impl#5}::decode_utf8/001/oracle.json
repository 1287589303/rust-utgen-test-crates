[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![0xFF, 0xFE, 0xFD];",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(e) => {",
          "    assert_eq!(e, str::Utf8Error::from_bytes_iter(&[0xFF, 0xFE, 0xFD]));",
          "    }",
          "    _ => panic!(\"Expected an error but got a different result\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![0xFF, 0xFE, 0xFD];",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(e) => {",
          "    assert_eq!(e, str::Utf8Error::from_bytes_iter(&[0xFF, 0xFE, 0xFD]));",
          "    }",
          "    _ => panic!(\"Expected an error but got a different result\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![0x80, 0x81, 0xFE];",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().utf8_error().valid_up_to(), 0);",
          "    assert_eq!(result.unwrap_err().utf8_error().into_inner(), &[0x80, 0x81, 0xFE]);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![0x80, 0x81, 0xFE];",
          "    let decoder = PercentDecode { bytes: bytes.iter() };",
          "    let result = decoder.decode_utf8();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().utf8_error().valid_up_to(), 0);",
          "    assert_eq!(result.unwrap_err().utf8_error().into_inner(), &[0x80, 0x81, 0xFE]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]