[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"fooßbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"fooßbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foossbar\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"fooßbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"fooßbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foossbar\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"fooςbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"fooςbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foosbar\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"fooςbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"fooςbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foosbar\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"fooß\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"fooß\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"fooss\".to_string()));",
          "    ",
          "    let domain = \"foop\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foop\"));",
          "    ",
          "    let domain = \"fooẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"fooss\".to_string()));",
          "    ",
          "    let domain = \"fooς\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foος\".to_string()));",
          "    ",
          "    let domain = \"foοC\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foοC\"));",
          "    ",
          "    let domain = \"foo\\u{200D}bar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foobar\".to_string()));",
          "    ",
          "    let domain = \"foo\\u{200C}bar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foobar\".to_string()));",
          "    ",
          "    let domain = \"foo\";",
          "    let transitional = false;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foo\"));",
          "    ",
          "    let domain = \"foo\\u{200D}\";",
          "    let transitional = false;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foo\\u{200D}\".to_string()));",
          "    ",
          "    let domain = \"\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"\"));"
        ],
        "code": [
          "{",
          "    let domain = \"fooß\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"fooß\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"fooss\".to_string()));",
          "    ",
          "    let domain = \"foop\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foop\"));",
          "    ",
          "    let domain = \"fooẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"fooss\".to_string()));",
          "    ",
          "    let domain = \"fooς\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foος\".to_string()));",
          "    ",
          "    let domain = \"foοC\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foοC\"));",
          "    ",
          "    let domain = \"foo\\u{200D}bar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foobar\".to_string()));",
          "    ",
          "    let domain = \"foo\\u{200C}bar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foobar\".to_string()));",
          "    ",
          "    let domain = \"foo\";",
          "    let transitional = false;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foo\"));",
          "    ",
          "    let domain = \"foo\\u{200D}\";",
          "    let transitional = false;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"foo\\u{200D}\".to_string()));",
          "    ",
          "    let domain = \"\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Borrowed(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"foo\\u{200C}bar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Cow::Owned(\"foobar\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"foo\\u{200C}bar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, Cow::Owned(\"foobar\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"fooẞbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"fooẞbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foossbar\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"fooẞbar\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"fooẞbar\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"foossbar\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"fooßbarςbaz\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Cow::Owned(\"foossbarσbaz\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"fooßbarςbaz\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, Cow::Owned(\"foossbarσbaz\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]