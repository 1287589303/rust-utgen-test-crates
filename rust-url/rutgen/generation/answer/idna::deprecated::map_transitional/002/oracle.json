[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example-√ü.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\"));",
          "    assert_eq!(map_transitional(\"example-√ü-·∫û.example.com\", true), Cow::Owned(\"example-ss-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-êçà.example.com\", true), Cow::Owned(\"example-êçà.example.com\"));",
          "    assert_eq!(map_transitional(\"example-ùì¢.example.com\", true), Cow::Owned(\"example-ùì¢.example.com\"));",
          "    assert_eq!(map_transitional(\"example-êçà-œÇ.example.com\", true), Cow::Owned(\"example-êçà-œÉ.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}.example.com\", true), Cow::Owned(\"example-.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\"));",
          "    assert_eq!(map_transitional(\"example-a.example.com\", true), Cow::Borrowed(\"example-a.example.com\"));",
          "    assert_eq!(map_transitional(\"example.example.com\", true), Cow::Borrowed(\"example.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}a.example.com\", true), Cow::Owned(\"example-a.example.com\"));",
          "    assert_eq!(map_transitional(\"example-√ü-—Å—Ç.example.com\", true), Cow::Owned(\"example-ss-—Å—Ç.example.com\"));"
        ],
        "code": [
          "{",
          "    let domain = \"example-√ü.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\"));",
          "    assert_eq!(map_transitional(\"example-√ü-·∫û.example.com\", true), Cow::Owned(\"example-ss-ss.example.com\"));",
          "    assert_eq!(map_transitional(\"example-êçà.example.com\", true), Cow::Owned(\"example-êçà.example.com\"));",
          "    assert_eq!(map_transitional(\"example-ùì¢.example.com\", true), Cow::Owned(\"example-ùì¢.example.com\"));",
          "    assert_eq!(map_transitional(\"example-êçà-œÇ.example.com\", true), Cow::Owned(\"example-êçà-œÉ.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}.example.com\", true), Cow::Owned(\"example-.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\"));",
          "    assert_eq!(map_transitional(\"example-a.example.com\", true), Cow::Borrowed(\"example-a.example.com\"));",
          "    assert_eq!(map_transitional(\"example.example.com\", true), Cow::Borrowed(\"example.example.com\"));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}a.example.com\", true), Cow::Owned(\"example-a.example.com\"));",
          "    assert_eq!(map_transitional(\"example-√ü-—Å—Ç.example.com\", true), Cow::Owned(\"example-ss-—Å—Ç.example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example-·∫û.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain_1 = \"example-·∫û.example.com\"; assert_eq!(map_transitional(domain_1, true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    let domain_2 = \"example-√ü.example.com\"; assert_eq!(map_transitional(domain_2, true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    let domain_3 = \"example-œÇ.example.com\"; assert_eq!(map_transitional(domain_3, true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    let domain_4 = \"example-\\u{200C}.example.com\"; assert_eq!(map_transitional(domain_4, true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    let domain_5 = \"example-√ü-·∫û-œÇ.example.com\"; assert_eq!(map_transitional(domain_5, true), Cow::Owned(\"example-ss-ss-œÉ.example.com\".to_string()));",
          "    let domain_6 = \"example-foo.example.com\"; assert_eq!(map_transitional(domain_6, true), Cow::Borrowed(domain_6));"
        ],
        "code": [
          "{",
          "    let domain = \"example-·∫û.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    let domain_1 = \"example-·∫û.example.com\"; assert_eq!(map_transitional(domain_1, true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    let domain_2 = \"example-√ü.example.com\"; assert_eq!(map_transitional(domain_2, true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    let domain_3 = \"example-œÇ.example.com\"; assert_eq!(map_transitional(domain_3, true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    let domain_4 = \"example-\\u{200C}.example.com\"; assert_eq!(map_transitional(domain_4, true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    let domain_5 = \"example-√ü-·∫û-œÇ.example.com\"; assert_eq!(map_transitional(domain_5, true), Cow::Owned(\"example-ss-ss-œÉ.example.com\".to_string()));",
          "    let domain_6 = \"example-foo.example.com\"; assert_eq!(map_transitional(domain_6, true), Cow::Borrowed(domain_6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example-œÇ.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    map_transitional(\"example-œÇ.example.com\", true); // should return Cow::Owned(\"example-œÉ.example.com\")",
          "    map_transitional(\"example-·∫û.example.com\", true); // should return Cow::Owned(\"example-ss.example.com\")",
          "    map_transitional(\"example-√ü.example.com\", true); // should return Cow::Owned(\"example-ss.example.com\")",
          "    map_transitional(\"example-œê.example.com\", true); // should return Cow::Borrowed(\"example-œê.example.com\")",
          "    map_transitional(\"example-200C.example.com\", true); // should return Cow::Borrowed(\"example-200C.example.com\")",
          "    map_transitional(\"example-200D.example.com\", true); // should return Cow::Borrowed(\"example-200D.example.com\")",
          "    map_transitional(\"example.example.com\", true); // should return Cow::Borrowed(\"example.example.com\")"
        ],
        "code": [
          "{",
          "    let domain = \"example-œÇ.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    map_transitional(\"example-œÇ.example.com\", true); // should return Cow::Owned(\"example-œÉ.example.com\")",
          "    map_transitional(\"example-·∫û.example.com\", true); // should return Cow::Owned(\"example-ss.example.com\")",
          "    map_transitional(\"example-√ü.example.com\", true); // should return Cow::Owned(\"example-ss.example.com\")",
          "    map_transitional(\"example-œê.example.com\", true); // should return Cow::Borrowed(\"example-œê.example.com\")",
          "    map_transitional(\"example-200C.example.com\", true); // should return Cow::Borrowed(\"example-200C.example.com\")",
          "    map_transitional(\"example-200D.example.com\", true); // should return Cow::Borrowed(\"example-200D.example.com\")",
          "    map_transitional(\"example.example.com\", true); // should return Cow::Borrowed(\"example.example.com\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example-\\u{200C}.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"example-\\u{200C}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example.example.com\", true), Cow::Borrowed(\"example.example.com\"));"
        ],
        "code": [
          "{",
          "    let domain = \"example-\\u{200C}.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"example-\\u{200C}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example.example.com\", true), Cow::Borrowed(\"example.example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example-\\u{200D}.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ-·∫û.example.com\", true), Cow::Owned(\"example-œÉ-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-.\\u{200C}.example.com\", true), Cow::Owned(\"example-..example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}-example.com\", true), Cow::Owned(\"example--example.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"example-\\u{200D}.example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"example-\\u{200D}.example.com\", true), Cow::Owned(\"example-.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-√ü.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-·∫û.example.com\", true), Cow::Owned(\"example-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ.example.com\", true), Cow::Owned(\"example-œÉ.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-œÇ-·∫û.example.com\", true), Cow::Owned(\"example-œÉ-ss.example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-.\\u{200C}.example.com\", true), Cow::Owned(\"example-..example.com\".to_string()));",
          "    assert_eq!(map_transitional(\"example-\\u{200C}-example.com\", true), Cow::Owned(\"example--example.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"√ü·∫ûœÇ\\u{200C}\\u{200D}\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"√ü·∫ûœÇ\\u{200C}\\u{200D}\", true), Cow::Owned(\"ssœÉ\"));",
          "    assert_eq!(map_transitional(\"example.com\", false), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"test \\u{200C} test\", true), Cow::Owned(\"test  test\"));",
          "    assert_eq!(map_transitional(\"√ü example\", true), Cow::Owned(\"ss example\"));",
          "    assert_eq!(map_transitional(\"·∫û example\", true), Cow::Owned(\"ss example\"));",
          "    assert_eq!(map_transitional(\"example œÇ\", true), Cow::Owned(\"example œÉ\"));",
          "    assert_eq!(map_transitional(\"test\\u{200D}\", true), Cow::Owned(\"test\"));"
        ],
        "code": [
          "{",
          "    let domain = \"√ü·∫ûœÇ\\u{200C}\\u{200D}\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"√ü·∫ûœÇ\\u{200C}\\u{200D}\", true), Cow::Owned(\"ssœÉ\"));",
          "    assert_eq!(map_transitional(\"example.com\", false), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"test \\u{200C} test\", true), Cow::Owned(\"test  test\"));",
          "    assert_eq!(map_transitional(\"√ü example\", true), Cow::Owned(\"ss example\"));",
          "    assert_eq!(map_transitional(\"·∫û example\", true), Cow::Owned(\"ss example\"));",
          "    assert_eq!(map_transitional(\"example œÇ\", true), Cow::Owned(\"example œÉ\"));",
          "    assert_eq!(map_transitional(\"test\\u{200D}\", true), Cow::Owned(\"test\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"example.√ü.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.ss.com\".to_string()));",
          "    ",
          "    let domain = \"example.·∫û.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.ss.com\".to_string()));",
          "    ",
          "    let domain = \"example.œÇ.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.œÉ.com\".to_string()));",
          "    ",
          "    let domain = \"example.\\u{200C}com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.com\".to_string()));",
          "    ",
          "    let domain = \"example.\\u{200D}com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.com\".to_string()));",
          "    ",
          "    let domain = \"example.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Borrowed(domain));",
          "    ",
          "    let domain = \"example.abc.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Borrowed(domain));"
        ],
        "code": [
          "{",
          "    let domain = \"\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    let domain = \"example.√ü.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.ss.com\".to_string()));",
          "    ",
          "    let domain = \"example.·∫û.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.ss.com\".to_string()));",
          "    ",
          "    let domain = \"example.œÇ.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.œÉ.com\".to_string()));",
          "    ",
          "    let domain = \"example.\\u{200C}com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.com\".to_string()));",
          "    ",
          "    let domain = \"example.\\u{200D}com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Owned(\"example.com\".to_string()));",
          "    ",
          "    let domain = \"example.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Borrowed(domain));",
          "    ",
          "    let domain = \"example.abc.com\";",
          "    let transitional = true;",
          "    assert_eq!(map_transitional(domain, transitional), Cow::Borrowed(domain));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"example.com\", true), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"√üexample.com\", true), Cow::Owned(\"ssexample.com\"));",
          "    assert_eq!(map_transitional(\"·∫ûexample.com\", true), Cow::Owned(\"ssexample.com\"));",
          "    assert_eq!(map_transitional(\"œÇexample.com\", true), Cow::Owned(\"œÉexample.com\"));",
          "    assert_eq!(map_transitional(\"example.com\\u{200C}\", true), Cow::Owned(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com\\u{200D}\", true), Cow::Owned(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com\", false), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com√ü\", true), Cow::Owned(\"example.comss\"));",
          "    assert_eq!(map_transitional(\"example.com·∫û\", true), Cow::Owned(\"example.comss\"));"
        ],
        "code": [
          "{",
          "    let domain = \"example.com\";",
          "    let transitional = true;",
          "    map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"example.com\", true), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"√üexample.com\", true), Cow::Owned(\"ssexample.com\"));",
          "    assert_eq!(map_transitional(\"·∫ûexample.com\", true), Cow::Owned(\"ssexample.com\"));",
          "    assert_eq!(map_transitional(\"œÇexample.com\", true), Cow::Owned(\"œÉexample.com\"));",
          "    assert_eq!(map_transitional(\"example.com\\u{200C}\", true), Cow::Owned(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com\\u{200D}\", true), Cow::Owned(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com\", false), Cow::Borrowed(\"example.com\"));",
          "    assert_eq!(map_transitional(\"example.com√ü\", true), Cow::Owned(\"example.comss\"));",
          "    assert_eq!(map_transitional(\"example.com·∫û\", true), Cow::Owned(\"example.comss\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"a\".repeat(253); // assuming 253 is the maximum allowed length for a domain label",
          "    let transitional = true;",
          "    map_transitional(&domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(&\"a\".repeat(253), true), Cow::Owned(\"a\".repeat(253)));",
          "    assert_eq!(map_transitional(\"√ü\", true), Cow::Owned(\"ss\"));",
          "    assert_eq!(map_transitional(\"·∫û\", true), Cow::Owned(\"ss\"));",
          "    assert_eq!(map_transitional(\"œÇ\", true), Cow::Owned(\"œÉ\"));",
          "    assert_eq!(map_transitional(\"aœÇb\", true), Cow::Owned(\"aœÉb\"));",
          "    assert_eq!(map_transitional(\"a√üb\", true), Cow::Owned(\"assb\"));",
          "    assert_eq!(map_transitional(\"a·∫ûb\", true), Cow::Owned(\"assb\"));",
          "    assert_eq!(map_transitional(\"\\u{200C}\", true), Cow::Owned(\"\"));",
          "    assert_eq!(map_transitional(\"\\u{200D}\", true), Cow::Owned(\"\"));"
        ],
        "code": [
          "{",
          "    let domain = \"a\".repeat(253); // assuming 253 is the maximum allowed length for a domain label",
          "    let transitional = true;",
          "    map_transitional(&domain, transitional);",
          "    assert_eq!(map_transitional(&\"a\".repeat(253), true), Cow::Owned(\"a\".repeat(253)));",
          "    assert_eq!(map_transitional(\"√ü\", true), Cow::Owned(\"ss\"));",
          "    assert_eq!(map_transitional(\"·∫û\", true), Cow::Owned(\"ss\"));",
          "    assert_eq!(map_transitional(\"œÇ\", true), Cow::Owned(\"œÉ\"));",
          "    assert_eq!(map_transitional(\"aœÇb\", true), Cow::Owned(\"aœÉb\"));",
          "    assert_eq!(map_transitional(\"a√üb\", true), Cow::Owned(\"assb\"));",
          "    assert_eq!(map_transitional(\"a·∫ûb\", true), Cow::Owned(\"assb\"));",
          "    assert_eq!(map_transitional(\"\\u{200C}\", true), Cow::Owned(\"\"));",
          "    assert_eq!(map_transitional(\"\\u{200D}\", true), Cow::Owned(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]