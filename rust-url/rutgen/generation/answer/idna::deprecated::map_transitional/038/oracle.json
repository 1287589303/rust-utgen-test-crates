[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"\";",
          "    let transitional = false;",
          "    let expected = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let domain = \"\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"\";",
          "    let transitional = false;",
          "    let expected = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Cow::Borrowed(domain));"
        ],
        "code": [
          "{",
          "    let domain = \"example.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, Cow::Borrowed(domain));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"12345.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"12345.com\";",
          "    let transitional = false;",
          "    let expected = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let domain = \"12345.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"12345.com\";",
          "    let transitional = false;",
          "    let expected = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"!@#$%^&*()_+\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"!@#$%^&*()_+\";",
          "    let transitional = false;",
          "    let expected: Cow<str> = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let domain = \"!@#$%^&*()_+\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"!@#$%^&*()_+\";",
          "    let transitional = false;",
          "    let expected: Cow<str> = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"my domain.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"my domain.com\";",
          "    let transitional = false;",
          "    let expected_result = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let domain = \"my domain.com\";",
          "    let transitional = false;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"my domain.com\";",
          "    let transitional = false;",
          "    let expected_result = Cow::Borrowed(domain);",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]