[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"test-ß-domain\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert!(result == Cow::Owned(\"test-ss-domain\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"test-ß-domain\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert!(result == Cow::Owned(\"test-ss-domain\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"ß-test-ß-domain\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"ss-test-ss-domain\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"ß-test-ß-domain\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"ss-test-ss-domain\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"hello-ẞ-world\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"hello-ss-world\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"hello-ẞ-world\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"hello-ss-world\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"ß-something-else-ẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"ss-something-else-ss\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"ß-something-else-ẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"ss-something-else-ss\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"final-ẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"final-ss\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"final-ẞ\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"final-ss\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]