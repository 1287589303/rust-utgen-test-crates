[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"exampßle\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"exampßle\";",
          "    let transitional = true;",
          "    let expected = Cow::Owned(\"example\".to_string());",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let domain = \"exampßle\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"exampßle\";",
          "    let transitional = true;",
          "    let expected = Cow::Owned(\"example\".to_string());",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"exampleςdomain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_transitional(\"exampleςdomain\", true), Cow::Owned(\"examplesσdomain\".into()));",
          "    assert_eq!(map_transitional(\"exampleßdomain\", true), Cow::Owned(\"examples.domain\".into()));",
          "    assert_eq!(map_transitional(\"exampleẞdomain\", true), Cow::Owned(\"examples.domain\".into()));",
          "    assert_eq!(map_transitional(\"example\\u{200C}domain\", true), Cow::Owned(\"example.domain\".into()));",
          "    assert_eq!(map_transitional(\"example\\u{200D}domain\", true), Cow::Owned(\"example.domain\".into()));"
        ],
        "code": [
          "{",
          "    let domain = \"exampleςdomain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(map_transitional(\"exampleςdomain\", true), Cow::Owned(\"examplesσdomain\".into()));",
          "    assert_eq!(map_transitional(\"exampleßdomain\", true), Cow::Owned(\"examples.domain\".into()));",
          "    assert_eq!(map_transitional(\"exampleẞdomain\", true), Cow::Owned(\"examples.domain\".into()));",
          "    assert_eq!(map_transitional(\"example\\u{200C}domain\", true), Cow::Owned(\"example.domain\".into()));",
          "    assert_eq!(map_transitional(\"example\\u{200D}domain\", true), Cow::Owned(\"example.domain\".into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example\\u{200C}domain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Cow::Owned(\"exampledomain\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"example\\u{200C}domain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    assert_eq!(_result, Cow::Owned(\"exampledomain\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"exampleẞdomain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"exampleẞdomain\";",
          "    let transitional = true;",
          "    let expected_result = Cow::Owned(\"examplesdomaind\".to_string());",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let domain = \"exampleẞdomain\";",
          "    let transitional = true;",
          "    let _result = map_transitional(domain, transitional);",
          "    let domain = \"exampleẞdomain\";",
          "    let transitional = true;",
          "    let expected_result = Cow::Owned(\"examplesdomaind\".to_string());",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]