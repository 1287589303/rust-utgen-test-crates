[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"bäßchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"bäßchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"baesschen\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"bäßchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    let domain = \"bäßchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"baesschen\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"bςäb\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"bσäb\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"bςäb\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bσäb\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"b\\u{200C}a\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    let domain = \"bßa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));",
          "    ",
          "    let domain = \"bẞa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));",
          "    ",
          "    let domain = \"bςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200D}a\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"ba\".to_string()));",
          "    ",
          "    let domain = \"bßςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200C}ςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200D}ßa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"b\\u{200C}a\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    let domain = \"bßa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));",
          "    ",
          "    let domain = \"bẞa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));",
          "    ",
          "    let domain = \"bςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200D}a\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"ba\".to_string()));",
          "    ",
          "    let domain = \"bßςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200C}ςa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bσa\".to_string()));",
          "    ",
          "    let domain = \"b\\u{200D}ßa\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bssa\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"bẞchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Owned(\"bsschen\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"bẞchen\";",
          "    let transitional = true;",
          "    let result = map_transitional(domain, transitional);",
          "    assert_eq!(result, Cow::Owned(\"bsschen\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]