[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"http\".to_owned();",
          "    let host = Host::Domain(\"example.com\".to_owned());",
          "    let port = 8080;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "}"
        ],
        "oracle": [
          "    let scheme = \"http\".to_owned();",
          "    let host = Host::Domain(\"example.com\".to_owned());",
          "    let port = 8080;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let expected = \"http://example.com:8080\".to_owned();",
          "    assert_eq!(origin.ascii_serialization(), expected);"
        ],
        "code": [
          "{",
          "    let scheme = \"http\".to_owned();",
          "    let host = Host::Domain(\"example.com\".to_owned());",
          "    let port = 8080;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "    let scheme = \"http\".to_owned();",
          "    let host = Host::Domain(\"example.com\".to_owned());",
          "    let port = 8080;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let expected = \"http://example.com:8080\".to_owned();",
          "    assert_eq!(origin.ascii_serialization(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"ftp\".to_owned();",
          "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
          "    let port = 22;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin.ascii_serialization(), \"ftp://192.168.1.1:22\".to_owned());"
        ],
        "code": [
          "{",
          "    let scheme = \"ftp\".to_owned();",
          "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
          "    let port = 22;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "    assert_eq!(origin.ascii_serialization(), \"ftp://192.168.1.1:22\".to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"https\".to_owned();",
          "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
          "    let port = 4443;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin.ascii_serialization(), \"https://[::1]:4443\");"
        ],
        "code": [
          "{",
          "    let scheme = \"https\".to_owned();",
          "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
          "    let port = 4443;",
          "    let origin = Origin::Tuple(scheme, host, port);",
          "    let _ = origin.ascii_serialization();",
          "    assert_eq!(origin.ascii_serialization(), \"https://[::1]:4443\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]