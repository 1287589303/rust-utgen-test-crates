[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut accu: u128 = 0;",
          "    for b in 0..128 {",
          "        if (b >= b'A') && (b <= b'Z') {",
          "            accu |= 1u128 << b;",
          "        }",
          "        // Call the function to observe behavior with b",
          "        let _ = upper_case_mask();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(upper_case_mask() & !UPPER_CASE_MASK, 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << b'A'), 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << 128), 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << b'Z'), 1u128 << b'Z');",
          "    assert_eq!(upper_case_mask() & (1u128 << (b'A' - 1)), 0);",
          "    assert_eq!(upper_case_mask(), UPPER_CASE_MASK);"
        ],
        "code": [
          "{",
          "    let mut accu: u128 = 0;",
          "    for b in 0..128 {",
          "        if (b >= b'A') && (b <= b'Z') {",
          "            accu |= 1u128 << b;",
          "        }",
          "        // Call the function to observe behavior with b",
          "        let _ = upper_case_mask();",
          "    }",
          "    assert_eq!(upper_case_mask() & !UPPER_CASE_MASK, 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << b'A'), 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << 128), 0);",
          "    assert_eq!(upper_case_mask() & (1u128 << b'Z'), 1u128 << b'Z');",
          "    assert_eq!(upper_case_mask() & (1u128 << (b'A' - 1)), 0);",
          "    assert_eq!(upper_case_mask(), UPPER_CASE_MASK);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Set b to 128 directly to check the boundary condition",
          "    let b: u8 = 128;",
          "    let mut accu: u128 = 0;",
          "    if (b >= b'A') && (b <= b'Z') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // Call the function to observe behavior with b at the boundary",
          "    let _ = upper_case_mask();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(upper_case_mask(), 0); // Testing with b < 128 at false for upper case letters, expecting accu to be 0.",
          "    assert_eq!(upper_case_mask(), 0); // Testing with b == 128, expecting accu to still be 0 since b not in A-Z."
        ],
        "code": [
          "{",
          "    // Set b to 128 directly to check the boundary condition",
          "    let b: u8 = 128;",
          "    let mut accu: u128 = 0;",
          "    if (b >= b'A') && (b <= b'Z') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // Call the function to observe behavior with b at the boundary",
          "    let _ = upper_case_mask();",
          "    assert_eq!(upper_case_mask(), 0); // Testing with b < 128 at false for upper case letters, expecting accu to be 0.",
          "    assert_eq!(upper_case_mask(), 0); // Testing with b == 128, expecting accu to still be 0 since b not in A-Z.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]