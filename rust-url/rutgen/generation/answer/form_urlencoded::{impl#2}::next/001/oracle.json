[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"name%3Dvalue&key%40example\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_owned.next(), Some((String::from(\"name=value\"), String::from(\"key@example\"))));",
          "    assert!(parse_owned.next().is_some());",
          "    assert!(parse_owned.next().is_none());",
          "    assert!(parse_owned.next().is_none());"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"name%3Dvalue&key%40example\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"name=value\"), String::from(\"key@example\"))));",
          "    assert!(parse_owned.next().is_some());",
          "    assert!(parse_owned.next().is_none());",
          "    assert!(parse_owned.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_owned.next(), None);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    assert_eq!(parse_owned.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"key%20with%20spaces&value%21%40%23%24%25\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "}"
        ],
        "oracle": [
          "    assert!(parse_owned.next().is_some());",
          "    let (key, value) = parse_owned.next().unwrap();",
          "    assert_eq!(key, \"key with spaces\");",
          "    assert_eq!(value, \"value!@#$%\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"key%20with%20spaces&value%21%40%23%24%25\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    assert!(parse_owned.next().is_some());",
          "    let (key, value) = parse_owned.next().unwrap();",
          "    assert_eq!(key, \"key with spaces\");",
          "    assert_eq!(value, \"value!@#$%\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"key%2Fwith%2Fslashes&value%3Awith%3Acolons\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_owned.next().is_some(), true);",
          "    assert_eq!(parse_owned.next().unwrap().0, \"key/with/slashes\");",
          "    assert_eq!(parse_owned.next().unwrap().1, \"value:with:colons\");",
          "    assert_eq!(parse_owned.next().is_none(), true);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"key%2Fwith%2Fslashes&value%3Awith%3Acolons\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    assert_eq!(parse_owned.next().is_some(), true);",
          "    assert_eq!(parse_owned.next().unwrap().0, \"key/with/slashes\");",
          "    assert_eq!(parse_owned.next().unwrap().1, \"value:with:colons\");",
          "    assert_eq!(parse_owned.next().is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"first%3D1&second%3D2&third%3D3\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    let _ = parse_owned.next();",
          "    let _ = parse_owned.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_owned.next(), Some((String::from(\"first\"), String::from(\"1\"))));",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"second\"), String::from(\"2\"))));",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"third\"), String::from(\"3\"))));",
          "    assert_eq!(parse_owned.next(), None);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"first%3D1&second%3D2&third%3D3\";",
          "    let parse = Parse { input };",
          "    let mut parse_owned = ParseIntoOwned { inner: parse };",
          "    let _ = parse_owned.next();",
          "    let _ = parse_owned.next();",
          "    let _ = parse_owned.next();",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"first\"), String::from(\"1\"))));",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"second\"), String::from(\"2\"))));",
          "    assert_eq!(parse_owned.next(), Some((String::from(\"third\"), String::from(\"3\"))));",
          "    assert_eq!(parse_owned.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]