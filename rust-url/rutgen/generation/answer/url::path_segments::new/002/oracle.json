[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"special://path\");",
          "    assert_eq!(url.scheme(), \"special\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert_eq!(url.byte_at(url.path_start), b'/');"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "    assert_eq!(url.serialization, \"special://path\");",
          "    assert_eq!(url.scheme(), \"special\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert_eq!(url.byte_at(url.path_start), b'/');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://segment\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    debug_assert!(SchemeType::from(url.scheme()).is_special() == true);",
          "    debug_assert!(url.byte_at(url.path_start) == b'/');",
          "    debug_assert!(url.take_after_path().is_empty() == false);",
          "    debug_assert!(to_u32(url.serialization.len()).is_ok());",
          "    assert!(url.path_start as usize + \"/\".len() == _path_segments.after_first_slash);",
          "    assert_eq!(_path_segments.url, &url);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://segment\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "    debug_assert!(SchemeType::from(url.scheme()).is_special() == true);",
          "    debug_assert!(url.byte_at(url.path_start) == b'/');",
          "    debug_assert!(url.take_after_path().is_empty() == false);",
          "    debug_assert!(to_u32(url.serialization.len()).is_ok());",
          "    assert!(url.path_start as usize + \"/\".len() == _path_segments.after_first_slash);",
          "    assert_eq!(_path_segments.url, &url);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://segment1/segment2\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"special://segment1/segment2\");",
          "    assert_eq!(url.scheme_end, 8);",
          "    assert_eq!(url.path_start, 8);",
          "    assert_eq!(url.byte_at(url.path_start), b'/');",
          "    assert!(SchemeType::from(url.scheme()).is_special());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://segment1/segment2\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "    assert_eq!(url.serialization, \"special://segment1/segment2\");",
          "    assert_eq!(url.scheme_end, 8);",
          "    assert_eq!(url.path_start, 8);",
          "    assert_eq!(url.byte_at(url.path_start), b'/');",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path?query=value\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: Some(12),",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"special://path?query=value\");",
          "    assert_eq!(url.scheme(), \"special\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert_eq!(url.byte_at(url.path_start), b'/');",
          "    assert_eq!(_path_segments.after_first_slash, 9);",
          "    assert_eq!(_path_segments.old_after_path_position, 31);",
          "    assert_eq!(_path_segments.after_path, \"?query=value\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path?query=value\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: Some(12),",
          "        fragment_start: None,",
          "    };",
          "    let _path_segments = new(&mut url);",
          "    assert_eq!(url.serialization, \"special://path?query=value\");",
          "    assert_eq!(url.scheme(), \"special\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert_eq!(url.byte_at(url.path_start), b'/');",
          "    assert_eq!(_path_segments.after_first_slash, 9);",
          "    assert_eq!(_path_segments.old_after_path_position, 31);",
          "    assert_eq!(_path_segments.after_path, \"?query=value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path#fragment\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: Some(12),",
          "    };",
          "    let _path_segments = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"special://path#fragment\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert_eq!(url.byte_at(8), b'/');",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert!(url.path_segments().is_some());",
          "    assert_eq!(url.take_after_path(), \"#fragment\");",
          "    assert_eq!(_path_segments.after_first_slash, 9);",
          "    assert_eq!(_path_segments.old_after_path_position, 30);",
          "    assert!(_path_segments.url.host.is_empty());",
          "    assert_eq!(_path_segments.after_path, \"#fragment\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"special://path#fragment\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: Some(12),",
          "    };",
          "    let _path_segments = new(&mut url);",
          "    assert_eq!(url.serialization, \"special://path#fragment\");",
          "    assert_eq!(url.path_start, 8);",
          "    assert_eq!(url.byte_at(8), b'/');",
          "    assert!(SchemeType::from(url.scheme()).is_special());",
          "    assert!(url.path_segments().is_some());",
          "    assert_eq!(url.take_after_path(), \"#fragment\");",
          "    assert_eq!(_path_segments.after_first_slash, 9);",
          "    assert_eq!(_path_segments.old_after_path_position, 30);",
          "    assert!(_path_segments.url.host.is_empty());",
          "    assert_eq!(_path_segments.after_path, \"#fragment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]