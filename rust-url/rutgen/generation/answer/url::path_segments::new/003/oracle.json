[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.after_first_slash, url.path_start as usize + 1);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, to_u32(url.serialization.len()).unwrap());",
          "    assert_eq!(result.after_path, \"\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "    assert_eq!(result.after_first_slash, url.path_start as usize + 1);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, to_u32(url.serialization.len()).unwrap());",
          "    assert_eq!(result.after_path, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.after_first_slash, 15);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, 29);",
          "    assert_eq!(result.after_path, \"\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "    assert_eq!(result.after_first_slash, 15);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, 29);",
          "    assert_eq!(result.after_path, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    let mut url = Url { serialization: String::from(\"ftp://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 14, host: HostInternal {}, port: None, path_start: 14, query_start: None, fragment_start: None, }; assert_eq!(result.after_first_slash, 15); assert_eq!(result.url, &url); assert_eq!(result.old_after_path_position, 19); assert_eq!(result.after_path, \"\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "    let mut url = Url { serialization: String::from(\"ftp://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 14, host: HostInternal {}, port: None, path_start: 14, query_start: None, fragment_start: None, }; assert_eq!(result.after_first_slash, 15); assert_eq!(result.url, &url); assert_eq!(result.old_after_path_position, 19); assert_eq!(result.after_path, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.after_first_slash, 15);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, 43);",
          "    assert_eq!(result.after_path, \"\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal {},",
          "        port: None,",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = new(&mut url);",
          "    assert_eq!(result.after_first_slash, 15);",
          "    assert_eq!(result.url, &url);",
          "    assert_eq!(result.old_after_path_position, 43);",
          "    assert_eq!(result.after_path, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]