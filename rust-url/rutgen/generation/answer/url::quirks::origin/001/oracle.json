[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"http://example.com\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"http://example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com:8080\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: Some(8080),",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"https://example.com:8080\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com:8080\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: Some(8080),",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"https://example.com:8080\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:pass@example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 10,",
          "        host_start: 15,",
          "        host_end: 25,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 25,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"http://example.com\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:pass@example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 10,",
          "        host_start: 15,",
          "        host_end: 25,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 25,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"http://example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 7,",
          "        host: HostInternal::new(\"\".to_string()),",
          "        port: None,",
          "        path_start: 7,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"null\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 7,",
          "        host: HostInternal::new(\"\".to_string()),",
          "        port: None,",
          "        path_start: 7,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"null\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://localhost\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::new(\"localhost\".to_string()),",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"http://localhost\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://localhost\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::new(\"localhost\".to_string()),",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"http://localhost\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user%20name:pass%40word@example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 27,",
          "        host_end: 37,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 37,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin(&url), \"http://example.com\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user%20name:pass%40word@example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 27,",
          "        host_end: 37,",
          "        host: HostInternal::new(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 37,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = origin(&url);",
          "    assert_eq!(origin(&url), \"http://example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]