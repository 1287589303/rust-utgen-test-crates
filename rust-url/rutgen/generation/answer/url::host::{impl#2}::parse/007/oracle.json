[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"example.com\";",
          "    let result = Host::parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"example.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"example.com\";",
          "    let result = Host::parse(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"example.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"my-site\";",
          "    let result = Host::parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"my-site\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"my-site\";",
          "    let result = Host::parse(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"my-site\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"test-domain-abc\"; // number is not at the end",
          "    let result = Host::parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"test-domain-abc\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"test-domain-abc\"; // number is not at the end",
          "    let result = Host::parse(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"test-domain-abc\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"ExAmPle.Com\";",
          "    let result = Host::parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"ExAmPle.Com\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"ExAmPle.Com\";",
          "    let result = Host::parse(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"ExAmPle.Com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"sub.example.com\";",
          "    let result = Host::parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"sub.example.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"sub.example.com\";",
          "    let result = Host::parse(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"sub.example.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]