[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"hello world\";",
          "    let separator = 'x';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split2(\"hello world\", 'x'), (\"hello world\", None));",
          "    assert_eq!(split2(\"hello world\", ' '), (\"hello\", Some(\"world\")));",
          "    assert_eq!(split2(\"hello,world\", ','), (\"hello\", Some(\"world\")));",
          "    assert_eq!(split2(\"abc\", 'a'), (\"\", Some(\"bc\")));",
          "    assert_eq!(split2(\"abc\", 'b'), (\"a\", Some(\"c\")));",
          "    assert_eq!(split2(\"abc\", 'c'), (\"ab\", None));",
          "    assert_eq!(split2(\"\", 'x'), (\"\", None));",
          "    assert_eq!(split2(\"a\", 'x'), (\"a\", None));",
          "    assert_eq!(split2(\"a b c\", ' '), (\"a\", Some(\"b c\")));",
          "    assert_eq!(split2(\"hello\", 'l'), (\"he\", Some(\"llo\")));"
        ],
        "code": [
          "{",
          "    let s = \"hello world\";",
          "    let separator = 'x';",
          "    split2(s, separator);",
          "    assert_eq!(split2(\"hello world\", 'x'), (\"hello world\", None));",
          "    assert_eq!(split2(\"hello world\", ' '), (\"hello\", Some(\"world\")));",
          "    assert_eq!(split2(\"hello,world\", ','), (\"hello\", Some(\"world\")));",
          "    assert_eq!(split2(\"abc\", 'a'), (\"\", Some(\"bc\")));",
          "    assert_eq!(split2(\"abc\", 'b'), (\"a\", Some(\"c\")));",
          "    assert_eq!(split2(\"abc\", 'c'), (\"ab\", None));",
          "    assert_eq!(split2(\"\", 'x'), (\"\", None));",
          "    assert_eq!(split2(\"a\", 'x'), (\"a\", None));",
          "    assert_eq!(split2(\"a b c\", ' '), (\"a\", Some(\"b c\")));",
          "    assert_eq!(split2(\"hello\", 'l'), (\"he\", Some(\"llo\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"hello:world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let (first, second) = split2(\"hello:world\", ':'); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"hello world\", ' '); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"hello:world:again\", ':'); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"no_separator\", ':'); assert_eq!(first, \"no_separator\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", ':'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\":\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\"single\", 'x'); assert_eq!(first, \"single\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"a:b:c\", ':'); assert_eq!(first, \"a\"); assert_eq!(second, Some(\"b\"));"
        ],
        "code": [
          "{",
          "    let s = \"hello:world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let (first, second) = split2(\"hello:world\", ':'); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"hello world\", ' '); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"hello:world:again\", ':'); assert_eq!(first, \"hello\"); assert_eq!(second, Some(\"world\"));",
          "    let (first, second) = split2(\"no_separator\", ':'); assert_eq!(first, \"no_separator\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", ':'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\":\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\"single\", 'x'); assert_eq!(first, \"single\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"a:b:c\", ':'); assert_eq!(first, \"a\"); assert_eq!(second, Some(\"b\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"hello::world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let result = split2(\"hello::world\", ':');",
          "    assert_eq!(result, (\"hello\", Some(\"world\")));",
          "    ",
          "    let result = split2(\"test:split:here\", ':');",
          "    assert_eq!(result, (\"test\", Some(\"split:here\")));",
          "    ",
          "    let result = split2(\"single\", ':');",
          "    assert_eq!(result, (\"single\", None));",
          "    ",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\"\")));",
          "    ",
          "    let result = split2(\"\", ':');",
          "    assert_eq!(result, (\"\", None));"
        ],
        "code": [
          "{",
          "    let s = \"hello::world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let result = split2(\"hello::world\", ':');",
          "    assert_eq!(result, (\"hello\", Some(\"world\")));",
          "    ",
          "    let result = split2(\"test:split:here\", ':');",
          "    assert_eq!(result, (\"test\", Some(\"split:here\")));",
          "    ",
          "    let result = split2(\"single\", ':');",
          "    assert_eq!(result, (\"single\", None));",
          "    ",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\"\")));",
          "    ",
          "    let result = split2(\"\", ':');",
          "    assert_eq!(result, (\"\", None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \":hello world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let result = split2(\":hello world\", ':');",
          "    assert_eq!(result, (\"\", Some(\"hello world\")));",
          "    ",
          "    let result = split2(\"hello:world\", ':');",
          "    assert_eq!(result, (\"hello\", Some(\"world\")));",
          "    ",
          "    let result = split2(\"singleword\", ':');",
          "    assert_eq!(result, (\"singleword\", None));",
          "    ",
          "    let result = split2(\"a:b:c\", ':');",
          "    assert_eq!(result, (\"a\", Some(\"b:c\")));",
          "    ",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":\")));"
        ],
        "code": [
          "{",
          "    let s = \":hello world\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let result = split2(\":hello world\", ':');",
          "    assert_eq!(result, (\"\", Some(\"hello world\")));",
          "    ",
          "    let result = split2(\"hello:world\", ':');",
          "    assert_eq!(result, (\"hello\", Some(\"world\")));",
          "    ",
          "    let result = split2(\"singleword\", ':');",
          "    assert_eq!(result, (\"singleword\", None));",
          "    ",
          "    let result = split2(\"a:b:c\", ':');",
          "    assert_eq!(result, (\"a\", Some(\"b:c\")));",
          "    ",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"hello world:\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let (first, second) = split2(\"hello world:\", ':');",
          "    assert_eq!(first, \"hello world\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"hello:world:\", ':');",
          "    assert_eq!(first, \"hello\");",
          "    assert_eq!(second, Some(\"world\"));",
          "    ",
          "    let (first, second) = split2(\":\", ':');",
          "    assert_eq!(first, \"\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"hello world\", ' ');",
          "    assert_eq!(first, \"hello\");",
          "    assert_eq!(second, Some(\"world\"));",
          "    ",
          "    let (first, second) = split2(\"single_word\", ':');",
          "    assert_eq!(first, \"single_word\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"\", ':');",
          "    assert_eq!(first, \"\");",
          "    assert_eq!(second, None);"
        ],
        "code": [
          "{",
          "    let s = \"hello world:\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let (first, second) = split2(\"hello world:\", ':');",
          "    assert_eq!(first, \"hello world\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"hello:world:\", ':');",
          "    assert_eq!(first, \"hello\");",
          "    assert_eq!(second, Some(\"world\"));",
          "    ",
          "    let (first, second) = split2(\":\", ':');",
          "    assert_eq!(first, \"\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"hello world\", ' ');",
          "    assert_eq!(first, \"hello\");",
          "    assert_eq!(second, Some(\"world\"));",
          "    ",
          "    let (first, second) = split2(\"single_word\", ':');",
          "    assert_eq!(first, \"single_word\");",
          "    assert_eq!(second, None);",
          "    ",
          "    let (first, second) = split2(\"\", ':');",
          "    assert_eq!(first, \"\");",
          "    assert_eq!(second, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"\";",
          "    let separator = 'x';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split2(\"\", 'x'), (\"\", None));",
          "    assert_eq!(split2(\"abc\", 'x'), (\"abc\", None));",
          "    assert_eq!(split2(\"abcxdef\", 'x'), (\"abc\", Some(\"def\")));",
          "    assert_eq!(split2(\"axbcxdef\", 'x'), (\"a\", Some(\"bcxdef\")));",
          "    assert_eq!(split2(\"abcx\", 'x'), (\"abc\", Some(\"\")));",
          "    assert_eq!(split2(\"abc\", 'a'), (\"\", Some(\"bc\")));",
          "    assert_eq!(split2(\"abc\", 'b'), (\"a\", Some(\"c\")));",
          "    assert_eq!(split2(\"abc\", 'c'), (\"ab\", None));",
          "    assert_eq!(split2(\"abcabc\", 'a'), (\"\", Some(\"bcabc\")));",
          "    assert_eq!(split2(\"abcabc\", 'b'), (\"a\", Some(\"cabc\")));",
          "    assert_eq!(split2(\"abcabc\", 'c'), (\"ab\", Some(\"abc\")));"
        ],
        "code": [
          "{",
          "    let s = \"\";",
          "    let separator = 'x';",
          "    split2(s, separator);",
          "    assert_eq!(split2(\"\", 'x'), (\"\", None));",
          "    assert_eq!(split2(\"abc\", 'x'), (\"abc\", None));",
          "    assert_eq!(split2(\"abcxdef\", 'x'), (\"abc\", Some(\"def\")));",
          "    assert_eq!(split2(\"axbcxdef\", 'x'), (\"a\", Some(\"bcxdef\")));",
          "    assert_eq!(split2(\"abcx\", 'x'), (\"abc\", Some(\"\")));",
          "    assert_eq!(split2(\"abc\", 'a'), (\"\", Some(\"bc\")));",
          "    assert_eq!(split2(\"abc\", 'b'), (\"a\", Some(\"c\")));",
          "    assert_eq!(split2(\"abc\", 'c'), (\"ab\", None));",
          "    assert_eq!(split2(\"abcabc\", 'a'), (\"\", Some(\"bcabc\")));",
          "    assert_eq!(split2(\"abcabc\", 'b'), (\"a\", Some(\"cabc\")));",
          "    assert_eq!(split2(\"abcabc\", 'c'), (\"ab\", Some(\"abc\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \":::::\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let result = split2(\":::::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":::\")));",
          "    let result = split2(\"abc:def\", ':');",
          "    assert_eq!(result, (\"abc\", Some(\"def\")));",
          "    let result = split2(\"a:b:c\", ':');",
          "    assert_eq!(result, (\"a\", Some(\"b:c\")));",
          "    let result = split2(\"single\", ':');",
          "    assert_eq!(result, (\"single\", None));",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":\")));",
          "    let result = split2(\"\", ':');",
          "    assert_eq!(result, (\"\", None));",
          "    let result = split2(\":::\", ':');",
          "    assert_eq!(result, (\"\", Some(\"::\")));",
          "    let result = split2(\"text;data\", ';');",
          "    assert_eq!(result, (\"text\", Some(\"data\")));",
          "    let result = split2(\"no separator here\", 'x');",
          "    assert_eq!(result, (\"no separator here\", None));",
          "    let result = split2(\"1:2:3\", ':');",
          "    assert_eq!(result, (\"1\", Some(\"2:3\")));"
        ],
        "code": [
          "{",
          "    let s = \":::::\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let result = split2(\":::::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":::\")));",
          "    let result = split2(\"abc:def\", ':');",
          "    assert_eq!(result, (\"abc\", Some(\"def\")));",
          "    let result = split2(\"a:b:c\", ':');",
          "    assert_eq!(result, (\"a\", Some(\"b:c\")));",
          "    let result = split2(\"single\", ':');",
          "    assert_eq!(result, (\"single\", None));",
          "    let result = split2(\"::\", ':');",
          "    assert_eq!(result, (\"\", Some(\":\")));",
          "    let result = split2(\"\", ':');",
          "    assert_eq!(result, (\"\", None));",
          "    let result = split2(\":::\", ':');",
          "    assert_eq!(result, (\"\", Some(\"::\")));",
          "    let result = split2(\"text;data\", ';');",
          "    assert_eq!(result, (\"text\", Some(\"data\")));",
          "    let result = split2(\"no separator here\", 'x');",
          "    assert_eq!(result, (\"no separator here\", None));",
          "    let result = split2(\"1:2:3\", ':');",
          "    assert_eq!(result, (\"1\", Some(\"2:3\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"123:456\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let (first, second) = split2(\"123:456\", ':'); assert_eq!(first, \"123\"); assert_eq!(second, Some(\"456\"));",
          "    let (first, second) = split2(\"foo,bar,baz\", ','); assert_eq!(first, \"foo\"); assert_eq!(second, Some(\"bar\"));",
          "    let (first, second) = split2(\"rust programming\", ' '); assert_eq!(first, \"rust\"); assert_eq!(second, Some(\"programming\"));",
          "    let (first, second) = split2(\"singleWord\", ':'); assert_eq!(first, \"singleWord\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", ':'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"abc:def:ghi\", ':'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def\"));",
          "    let (first, second) = split2(\"12345\", '5'); assert_eq!(first, \"1234\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\":::separator:::\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"separator:::\"));",
          "    let (first, second) = split2(\"end:\", ':'); assert_eq!(first, \"end\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\":::\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"\"));"
        ],
        "code": [
          "{",
          "    let s = \"123:456\";",
          "    let separator = ':';",
          "    split2(s, separator);",
          "    let (first, second) = split2(\"123:456\", ':'); assert_eq!(first, \"123\"); assert_eq!(second, Some(\"456\"));",
          "    let (first, second) = split2(\"foo,bar,baz\", ','); assert_eq!(first, \"foo\"); assert_eq!(second, Some(\"bar\"));",
          "    let (first, second) = split2(\"rust programming\", ' '); assert_eq!(first, \"rust\"); assert_eq!(second, Some(\"programming\"));",
          "    let (first, second) = split2(\"singleWord\", ':'); assert_eq!(first, \"singleWord\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", ':'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"abc:def:ghi\", ':'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def\"));",
          "    let (first, second) = split2(\"12345\", '5'); assert_eq!(first, \"1234\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\":::separator:::\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"separator:::\"));",
          "    let (first, second) = split2(\"end:\", ':'); assert_eq!(first, \"end\"); assert_eq!(second, Some(\"\"));",
          "    let (first, second) = split2(\":::\", ':'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = \"abc#def\";",
          "    let separator = '#';",
          "    split2(s, separator);",
          "}"
        ],
        "oracle": [
          "    let (first, second) = split2(\"abc#def\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def\"));",
          "    let (first, second) = split2(\"abc##def\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"#def\"));",
          "    let (first, second) = split2(\"abc\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", '#'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"abc#def#ghi\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi\"));",
          "    let (first, second) = split2(\"a#b#c\", '#'); assert_eq!(first, \"a\"); assert_eq!(second, Some(\"b#c\"));",
          "    let (first, second) = split2(\"#abc\", '#'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"abc\"));",
          "    let (first, second) = split2(\"abc#def#ghi#jkl\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi#jkl\"));",
          "    let (first, second) = split2(\"abc#def#ghi#\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi#\"));",
          "    let (first, second) = split2(\"#####\", '#'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"####\"));"
        ],
        "code": [
          "{",
          "    let s = \"abc#def\";",
          "    let separator = '#';",
          "    split2(s, separator);",
          "    let (first, second) = split2(\"abc#def\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def\"));",
          "    let (first, second) = split2(\"abc##def\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"#def\"));",
          "    let (first, second) = split2(\"abc\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"\", '#'); assert_eq!(first, \"\"); assert_eq!(second, None);",
          "    let (first, second) = split2(\"abc#def#ghi\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi\"));",
          "    let (first, second) = split2(\"a#b#c\", '#'); assert_eq!(first, \"a\"); assert_eq!(second, Some(\"b#c\"));",
          "    let (first, second) = split2(\"#abc\", '#'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"abc\"));",
          "    let (first, second) = split2(\"abc#def#ghi#jkl\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi#jkl\"));",
          "    let (first, second) = split2(\"abc#def#ghi#\", '#'); assert_eq!(first, \"abc\"); assert_eq!(second, Some(\"def#ghi#\"));",
          "    let (first, second) = split2(\"#####\", '#'); assert_eq!(first, \"\"); assert_eq!(second, Some(\"####\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]