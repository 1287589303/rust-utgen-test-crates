[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_host());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "    assert!(!url.has_host());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host() == true);",
          "    let url_no_host = Url {",
          "    serialization: String::from(\"http://\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 7,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 7,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_no_host.has_host() == false);",
          "    let url_ipv4 = Url {",
          "    serialization: String::from(\"http://192.168.1.1\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "    port: None,",
          "    path_start: 19,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_ipv4.has_host() == true);",
          "    let url_ipv6 = Url {",
          "    serialization: String::from(\"http://[::1]\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 13,",
          "    host: HostInternal::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)),",
          "    port: None,",
          "    path_start: 14,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_ipv6.has_host() == true);",
          "    let url_special = Url {",
          "    serialization: String::from(\"http://example.com/path\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 19,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_special.has_host() == true);",
          "    let url_no_authority = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 0,",
          "    host_end: 0,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_no_authority.has_host() == false);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "    assert!(url.has_host() == true);",
          "    let url_no_host = Url {",
          "    serialization: String::from(\"http://\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 7,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 7,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_no_host.has_host() == false);",
          "    let url_ipv4 = Url {",
          "    serialization: String::from(\"http://192.168.1.1\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "    port: None,",
          "    path_start: 19,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_ipv4.has_host() == true);",
          "    let url_ipv6 = Url {",
          "    serialization: String::from(\"http://[::1]\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 13,",
          "    host: HostInternal::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)),",
          "    port: None,",
          "    path_start: 14,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_ipv6.has_host() == true);",
          "    let url_special = Url {",
          "    serialization: String::from(\"http://example.com/path\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 19,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_special.has_host() == true);",
          "    let url_no_authority = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 0,",
          "    host_end: 0,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url_no_authority.has_host() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://192.168.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host());",
          "    let url = Url {",
          "    serialization: String::from(\"http://192.168.1.1\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 17,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 18,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url.has_host());",
          "    let url = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url.has_host());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://192.168.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "    assert!(url.has_host());",
          "    let url = Url {",
          "    serialization: String::from(\"http://192.168.1.1\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 17,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 18,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url.has_host());",
          "    let url = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url.has_host());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://[::1]\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 13,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host());",
          "    let url_none = Url {",
          "    serialization: String::from(\"unix:/run/foo.socket\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url_none.has_host());",
          "    let url_data = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url_data.has_host());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://[::1]\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 13,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.has_host();",
          "    assert!(url.has_host());",
          "    let url_none = Url {",
          "    serialization: String::from(\"unix:/run/foo.socket\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url_none.has_host());",
          "    let url_data = Url {",
          "    serialization: String::from(\"data:text/plain,Stuff\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 5,",
          "    host: HostInternal::None,",
          "    port: None,",
          "    path_start: 6,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(!url_data.has_host());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]