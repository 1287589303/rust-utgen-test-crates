[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host());",
          "    assert!(!matches!(url.host, HostInternal::None));",
          "    assert_eq!(url.host, HostInternal::Domain);",
          "    assert!(url.host_str().is_some());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "    assert!(url.has_host());",
          "    assert!(!matches!(url.host, HostInternal::None));",
          "    assert_eq!(url.host, HostInternal::Domain);",
          "    assert!(url.host_str().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://192.168.1.1/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 15,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"http://example.com/path\".to_string(),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 11,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 12,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"ftp://rms@example.com\".to_string(),",
          "    scheme_end: 6,",
          "    username_end: 3,",
          "    host_start: 10,",
          "    host_end: 19,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"mailto:user@example.com\".to_string(),",
          "    scheme_end: 6,",
          "    username_end: 4,",
          "    host_start: 10,",
          "    host_end: 19,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://192.168.1.1/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 15,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"http://example.com/path\".to_string(),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 11,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 12,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"ftp://rms@example.com\".to_string(),",
          "    scheme_end: 6,",
          "    username_end: 3,",
          "    host_start: 10,",
          "    host_end: 19,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);",
          "    let url = Url {",
          "    serialization: \"mailto:user@example.com\".to_string(),",
          "    scheme_end: 6,",
          "    username_end: 4,",
          "    host_start: 10,",
          "    host_end: 19,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert!(url.has_host() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://[2001:db8::1]/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001)),",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host());",
          "    assert_eq!(url.has_host(), true);",
          "    assert_eq!(url.host, HostInternal::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001)));",
          "    assert!(!matches!(url.host, HostInternal::None));",
          "    assert!(matches!(url.host, HostInternal::Ipv6(_)));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://[2001:db8::1]/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001)),",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.has_host();",
          "    assert!(url.has_host());",
          "    assert_eq!(url.has_host(), true);",
          "    assert_eq!(url.host, HostInternal::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001)));",
          "    assert!(!matches!(url.host, HostInternal::None));",
          "    assert!(matches!(url.host, HostInternal::Ipv6(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]