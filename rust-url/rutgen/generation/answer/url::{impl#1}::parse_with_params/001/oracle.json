[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com?existing=query\",",
          "        &[(\"key1\", \"value1\"), (\"key2\", \"value2\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/?existing=query&key1=value1&key2=value2\", url.as_str());"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com?existing=query\",",
          "        &[(\"key1\", \"value1\"), (\"key2\", \"value2\")],",
          "    );",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/?existing=query&key1=value1&key2=value2\", url.as_str());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"http://example.org\",",
          "        &[(\"param1\", \"value1\"), (\"param2\", \"value2\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.as_str(), \"http://example.org/?param1=value1&param2=value2\");"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"http://example.org\",",
          "        &[(\"param1\", \"value1\"), (\"param2\", \"value2\")],",
          "    );",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(url.as_str(), \"http://example.org/?param1=value1&param2=value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.net/path/to/resource?dont=clobberme\",",
          "        &[(\"lang\", \"rust\"), (\"browser\", \"servo\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.net/path/to/resource/?dont=clobberme&lang=rust&browser=servo\", url.as_str());",
          "    assert!(url.query_pairs().any(|(k, v)| k == \"lang\" && v == \"rust\"));",
          "    assert!(url.query_pairs().any(|(k, v)| k == \"browser\" && v == \"servo\"));"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.net/path/to/resource?dont=clobberme\",",
          "        &[(\"lang\", \"rust\"), (\"browser\", \"servo\")],",
          "    );",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.net/path/to/resource/?dont=clobberme&lang=rust&browser=servo\", url.as_str());",
          "    assert!(url.query_pairs().any(|(k, v)| k == \"lang\" && v == \"rust\"));",
          "    assert!(url.query_pairs().any(|(k, v)| k == \"browser\" && v == \"servo\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com/path?key=value&another_key=another_value\",",
          "        &[(\"additional_key\", \"additional_value\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    let result = Url::parse_with_params(\"https://example.com/path?key=value&another_key=another_value\", &[(\"additional_key\", \"additional_value\")]);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/path?key=value&another_key=another_value&additional_key=additional_value\", url.as_str());"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com/path?key=value&another_key=another_value\",",
          "        &[(\"additional_key\", \"additional_value\")],",
          "    );",
          "    let result = Url::parse_with_params(\"https://example.com/path?key=value&another_key=another_value\", &[(\"additional_key\", \"additional_value\")]);",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/path?key=value&another_key=another_value&additional_key=additional_value\", url.as_str());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com/path?query=testing%20url\",",
          "        &[(\"key\", \"value%20encoded\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/path?query=testing%20url&key=value%20encoded\", url.as_str());"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"https://example.com/path?query=testing%20url\",",
          "        &[(\"key\", \"value%20encoded\")],",
          "    );",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"https://example.com/path?query=testing%20url&key=value%20encoded\", url.as_str());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"http://example.org?existing1=value1&existing2=value2\",",
          "        &[(\"new_key1\", \"new_value1\"), (\"new_key2\", \"new_value2\")],",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"http://example.org/?existing1=value1&existing2=value2&new_key1=new_value1&new_key2=new_value2\", url.as_str());"
        ],
        "code": [
          "{",
          "    let result = Url::parse_with_params(",
          "        \"http://example.org?existing1=value1&existing2=value2\",",
          "        &[(\"new_key1\", \"new_value1\"), (\"new_key2\", \"new_value2\")],",
          "    );",
          "    assert!(result.is_ok());",
          "    let url = result.unwrap();",
          "    assert_eq!(\"http://example.org/?existing1=value1&existing2=value2&new_key1=new_value1&new_key2=new_value2\", url.as_str());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]