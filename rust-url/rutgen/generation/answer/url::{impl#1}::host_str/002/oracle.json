[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"mailto:email@example.com\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"mailto:email@example.com\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"file:///home/user/file.txt\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"mailto:user@localhost\").unwrap();",
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"file:///home/user/file.txt\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "    let url = Url::parse(\"mailto:user@localhost\").unwrap();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\":/\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\":/\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"example.com/path\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"example.com/path\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"path/to/resource\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"path/to/resource\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
          "    let _ = url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), None);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
          "    let _ = url.host_str();",
          "    assert_eq!(url.host_str(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]