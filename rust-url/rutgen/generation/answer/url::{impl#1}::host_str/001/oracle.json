[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com/index.html\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com/index.html\").unwrap();",
          "    url.host_str();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://example.com/resource\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(url.slice(url.host_start..url.host_end)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://example.com/resource\").unwrap();",
          "    url.host_str();",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(url.slice(url.host_start..url.host_end)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://localhost:3000\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    assert!(url.has_host());",
          "    assert!(url.host_start < url.host_end);",
          "    assert!(url.host_str().is_some());",
          "    assert_eq!(url.host_str().unwrap(), \"localhost\");",
          "    assert!(url.host().is_some());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://localhost:3000\").unwrap();",
          "    url.host_str();",
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    assert!(url.has_host());",
          "    assert!(url.host_start < url.host_end);",
          "    assert!(url.host_str().is_some());",
          "    assert_eq!(url.host_str().unwrap(), \"localhost\");",
          "    assert!(url.host().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://192.168.0.1/download\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), Some(\"192.168.0.1\"));",
          "    let url = Url::parse(\"https://example.com/path\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    let url = Url::parse(\"http://localhost:8080\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    let url = Url::parse(\"http://[::1]/\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"[::1]\"));",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://192.168.0.1/download\").unwrap();",
          "    url.host_str();",
          "    assert_eq!(url.host_str(), Some(\"192.168.0.1\"));",
          "    let url = Url::parse(\"https://example.com/path\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    let url = Url::parse(\"http://localhost:8080\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"localhost\"));",
          "    let url = Url::parse(\"http://[::1]/\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"[::1]\"));",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://[::1]/path\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), Some(\"[::1]\"));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://[::1]/path\").unwrap();",
          "    url.host_str();",
          "    assert_eq!(url.host_str(), Some(\"[::1]\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://example.com:8080/resource\").unwrap();",
          "    url.host_str();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host_str(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://example.com:8080/resource\").unwrap();",
          "    url.host_str();",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]