[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialization = \"https://example.com/products?page=2#fragment\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: Some(37),",
          "    };",
          "    let _ = url.query();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query(), Some(\"page=2\"));",
          "    assert_eq!(url.query(), Some(\"page=2#fragment\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), None);",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"products?page=2\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"fragment\"));"
        ],
        "code": [
          "{",
          "    let serialization = \"https://example.com/products?page=2#fragment\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: Some(37),",
          "    };",
          "    let _ = url.query();",
          "    assert_eq!(url.query(), Some(\"page=2\"));",
          "    assert_eq!(url.query(), Some(\"page=2#fragment\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), None);",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"products?page=2\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"fragment\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialization = \"https://example.com/products?page=2\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.query();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query(), Some(\"page=2\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));"
        ],
        "code": [
          "{",
          "    let serialization = \"https://example.com/products?page=2\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.query();",
          "    assert_eq!(url.query(), Some(\"page=2\"));",
          "    assert!(url.query().is_none());",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialization = \"https://example.com/?country=espa単ol#somefragment\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: Some(50),",
          "    };",
          "    let _ = url.query();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert!(self.byte_at(query_start) != b'?');",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert_eq!(url.query(), Some(\"country=espa単ol\"));",
          "    assert!(url.query().is_some());"
        ],
        "code": [
          "{",
          "    let serialization = \"https://example.com/?country=espa単ol#somefragment\".to_string();",
          "    let url = Url {",
          "        serialization,",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 30,",
          "        query_start: Some(30),",
          "        fragment_start: Some(50),",
          "    };",
          "    let _ = url.query();",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert!(self.byte_at(query_start) != b'?');",
          "    assert_eq!(url.query(), Some(\"country=espa%C3%B1ol\"));",
          "    assert_eq!(url.query(), Some(\"country=espa単ol\"));",
          "    assert!(url.query().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]