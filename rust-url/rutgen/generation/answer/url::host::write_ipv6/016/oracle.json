[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 2, 3, 4, 5, 6, 7, 8],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\");",
          "    assert!(write_ipv6(&addr, &mut formatter).is_ok());",
          "    assert!(formatter.as_str().len() > 0);",
          "    assert_eq!(addr.segments(), &[1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(longest_zero_sequence(&addr.segments()), (-1, -2));",
          "    assert!(output.contains(':'));",
          "    assert!(output.chars().all(|c| c.is_ascii_hexdigit() || c == ':'));"
        ],
        "code": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 2, 3, 4, 5, 6, 7, 8],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\");",
          "    assert!(write_ipv6(&addr, &mut formatter).is_ok());",
          "    assert!(formatter.as_str().len() > 0);",
          "    assert_eq!(addr.segments(), &[1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(longest_zero_sequence(&addr.segments()), (-1, -2));",
          "    assert!(output.contains(':'));",
          "    assert!(output.chars().all(|c| c.is_ascii_hexdigit() || c == ':'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [0, 2, 3, 4, 5, 6, 7, 8],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(output, \"0:2:3:4:5:6:7:8\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_with_compression = TestIpv6Addr { segments: [0, 0, 0, 4, 5, 6, 7, 8] };",
          "    let _ = write_ipv6(&addr_with_compression, &mut formatter);",
          "    assert_eq!(output, \"::4:5:6:7:8\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_all_zeros = TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = write_ipv6(&addr_all_zeros, &mut formatter);",
          "    assert_eq!(output, \"::\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_two_segments = TestIpv6Addr { segments: [1, 0, 0, 0, 1, 0, 0, 0] };",
          "    let _ = write_ipv6(&addr_two_segments, &mut formatter);",
          "    assert_eq!(output, \"1:0:0:0:1:0:0:0\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_single_zero = TestIpv6Addr { segments: [0, 1, 2, 3, 4, 5, 6, 7] };",
          "    let _ = write_ipv6(&addr_single_zero, &mut formatter);",
          "    assert_eq!(output, \"0:1:2:3:4:5:6:7\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_full_segments = TestIpv6Addr { segments: [1, 2, 3, 4, 5, 6, 7, 8] };",
          "    let _ = write_ipv6(&addr_full_segments, &mut formatter);",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\");"
        ],
        "code": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [0, 2, 3, 4, 5, 6, 7, 8],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(output, \"0:2:3:4:5:6:7:8\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_with_compression = TestIpv6Addr { segments: [0, 0, 0, 4, 5, 6, 7, 8] };",
          "    let _ = write_ipv6(&addr_with_compression, &mut formatter);",
          "    assert_eq!(output, \"::4:5:6:7:8\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_all_zeros = TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let _ = write_ipv6(&addr_all_zeros, &mut formatter);",
          "    assert_eq!(output, \"::\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_two_segments = TestIpv6Addr { segments: [1, 0, 0, 0, 1, 0, 0, 0] };",
          "    let _ = write_ipv6(&addr_two_segments, &mut formatter);",
          "    assert_eq!(output, \"1:0:0:0:1:0:0:0\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_single_zero = TestIpv6Addr { segments: [0, 1, 2, 3, 4, 5, 6, 7] };",
          "    let _ = write_ipv6(&addr_single_zero, &mut formatter);",
          "    assert_eq!(output, \"0:1:2:3:4:5:6:7\");",
          "    formatter = Formatter::new(&mut output);",
          "    let addr_full_segments = TestIpv6Addr { segments: [1, 2, 3, 4, 5, 6, 7, 8] };",
          "    let _ = write_ipv6(&addr_full_segments, &mut formatter);",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 2, 3, 4, 5, 6, 7, 0],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    write_ipv6(&addr, &mut formatter).is_ok()",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:0\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 1, 0, 0, 0] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1:0:0:0\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 1] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::\")",
          "    write_ipv6(&TestIpv6Addr { segments: [1, 2, 3, 4, 5, 6, 7, 8] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 1, 0, 2, 0, 3, 0, 4] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1:0:2:0:3:0:4\")"
        ],
        "code": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 2, 3, 4, 5, 6, 7, 0],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    write_ipv6(&addr, &mut formatter).is_ok()",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:0\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 1, 0, 0, 0] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1:0:0:0\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 1] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::\")",
          "    write_ipv6(&TestIpv6Addr { segments: [1, 2, 3, 4, 5, 6, 7, 8] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"1:2:3:4:5:6:7:8\")",
          "    write_ipv6(&TestIpv6Addr { segments: [0, 1, 0, 2, 0, 3, 0, 4] }, &mut formatter).is_ok()",
          "    assert_eq!(output, \"::1:0:2:0:3:0:4\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 1, 1, 1, 1, 1, 1, 1],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(output, \"1:1:1:1:1:1:1:1\");",
          "    let addr_with_zero_sequence = TestIpv6Addr { segments: [0, 0, 1, 1, 1, 1, 1, 1] };",
          "    let mut output_zero_sequence = String::new();",
          "    let mut formatter_zero_sequence = Formatter::new(&mut output_zero_sequence);",
          "    assert_eq!(write_ipv6(&addr_with_zero_sequence, &mut formatter_zero_sequence), Ok(()));",
          "    assert_eq!(output_zero_sequence, \"::1:1:1:1:1:1\");",
          "    let addr_all_zero = TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output_all_zero = String::new();",
          "    let mut formatter_all_zero = Formatter::new(&mut output_all_zero);",
          "    assert_eq!(write_ipv6(&addr_all_zero, &mut formatter_all_zero), Ok(()));",
          "    assert_eq!(output_all_zero, \"::\");",
          "    let addr_with_bound_i7 = TestIpv6Addr { segments: [1, 1, 1, 1, 1, 1, 1, 0] };",
          "    let mut output_bound_i7 = String::new();",
          "    let mut formatter_bound_i7 = Formatter::new(&mut output_bound_i7);",
          "    assert_eq!(write_ipv6(&addr_with_bound_i7, &mut formatter_bound_i7), Ok(()));",
          "    assert_eq!(output_bound_i7, \"1:1:1:1:1:1:1:0\");",
          "    let addr_with_bound_i8 = TestIpv6Addr { segments: [1, 1, 1, 1, 1, 1, 1, 2] };",
          "    let mut output_bound_i8 = String::new();",
          "    let mut formatter_bound_i8 = Formatter::new(&mut output_bound_i8);",
          "    assert_eq!(write_ipv6(&addr_with_bound_i8, &mut formatter_bound_i8), Ok(()));",
          "    assert_eq!(output_bound_i8, \"1:1:1:1:1:1:1:2\");"
        ],
        "code": [
          "{",
          "    struct TestIpv6Addr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestIpv6Addr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestIpv6Addr {",
          "        segments: [1, 1, 1, 1, 1, 1, 1, 1],",
          "    };",
          "    let mut output = String::new();",
          "    let mut formatter = Formatter::new(&mut output);",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(output, \"1:1:1:1:1:1:1:1\");",
          "    let addr_with_zero_sequence = TestIpv6Addr { segments: [0, 0, 1, 1, 1, 1, 1, 1] };",
          "    let mut output_zero_sequence = String::new();",
          "    let mut formatter_zero_sequence = Formatter::new(&mut output_zero_sequence);",
          "    assert_eq!(write_ipv6(&addr_with_zero_sequence, &mut formatter_zero_sequence), Ok(()));",
          "    assert_eq!(output_zero_sequence, \"::1:1:1:1:1:1\");",
          "    let addr_all_zero = TestIpv6Addr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output_all_zero = String::new();",
          "    let mut formatter_all_zero = Formatter::new(&mut output_all_zero);",
          "    assert_eq!(write_ipv6(&addr_all_zero, &mut formatter_all_zero), Ok(()));",
          "    assert_eq!(output_all_zero, \"::\");",
          "    let addr_with_bound_i7 = TestIpv6Addr { segments: [1, 1, 1, 1, 1, 1, 1, 0] };",
          "    let mut output_bound_i7 = String::new();",
          "    let mut formatter_bound_i7 = Formatter::new(&mut output_bound_i7);",
          "    assert_eq!(write_ipv6(&addr_with_bound_i7, &mut formatter_bound_i7), Ok(()));",
          "    assert_eq!(output_bound_i7, \"1:1:1:1:1:1:1:0\");",
          "    let addr_with_bound_i8 = TestIpv6Addr { segments: [1, 1, 1, 1, 1, 1, 1, 2] };",
          "    let mut output_bound_i8 = String::new();",
          "    let mut formatter_bound_i8 = Formatter::new(&mut output_bound_i8);",
          "    assert_eq!(write_ipv6(&addr_with_bound_i8, &mut formatter_bound_i8), Ok(()));",
          "    assert_eq!(output_bound_i8, \"1:1:1:1:1:1:1:2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]