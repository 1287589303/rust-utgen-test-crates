[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "    ",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0x1234, 0x5678, 0x9abc, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = TestAddr { segments: [0, 0, 0x1234, 0x5678, 0x9abc, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1234:5678:9abc::\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0x1234, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1234:0:0:0\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0x5678, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::5678:0:0:0\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:9abc::\");"
        ],
        "code": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "    ",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0x1234, 0x5678, 0x9abc, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = TestAddr { segments: [0, 0, 0x1234, 0x5678, 0x9abc, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1234:5678:9abc::\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0x1234, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::1234:0:0:0\");",
          "    ",
          "    let addr = TestAddr { segments: [0, 0, 0x5678, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::5678:0:0:0\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:9abc::\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4] };",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"abcd:0:0:0:1:2:3:4\");",
          "    let addr = TestAddr { segments: [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"::1\");",
          "    let addr = TestAddr { segments: [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"::\");",
          "    let addr = TestAddr { segments: [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"1:2:3:4:5:6:7\");",
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"abcd::1\");"
        ],
        "code": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4] };",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"abcd:0:0:0:1:2:3:4\");",
          "    let addr = TestAddr { segments: [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"::1\");",
          "    let addr = TestAddr { segments: [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"::\");",
          "    let addr = TestAddr { segments: [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"1:2:3:4:5:6:7\");",
          "    let addr = TestAddr { segments: [0xabcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"abcd::1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0x1234, 0x5678, 0x9abc] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"::1234:5678:9abc\");",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0x1234, 0x5678, 0x9abc] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(output, \"::1234:5678:9abc\");",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    assert_eq!(write_ipv6(&addr, &mut output), Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    assert!(matches!(write_ipv6(&addr, &mut output), Ok(_)));",
          "    assert!(output.contains(\":\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.starts_with(\":\"));",
          "    assert!(output.ends_with(\":\"));"
        ],
        "code": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    assert_eq!(write_ipv6(&addr, &mut output), Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    assert!(matches!(write_ipv6(&addr, &mut output), Ok(_)));",
          "    assert!(output.contains(\":\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.starts_with(\":\"));",
          "    assert!(output.ends_with(\":\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0xdeef, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0xabcd, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:abcd::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0xabcd, 0xdeef, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:abcd:deef::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0, 0, 0, 0, 0, 0, 0x5678] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:0:0:0:0:0:0:5678\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0xdeef, 0, 0, 0, 0x5678] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:9abc:deef:0:0:0:5678\");"
        ],
        "code": [
          "{",
          "    struct TestAddr {",
          "        segments: [u16; 8],",
          "    }",
          "",
          "    impl Ipv6Addr for TestAddr {",
          "        fn segments(&self) -> &[u16; 8] {",
          "            &self.segments",
          "        }",
          "    }",
          "",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0xdeef, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = TestAddr { segments: [0, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0xabcd, 0, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:abcd::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0xabcd, 0xdeef, 0, 0, 0, 0] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:abcd:deef::\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0, 0, 0, 0, 0, 0, 0x5678] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:0:0:0:0:0:0:5678\");",
          "    ",
          "    let addr = TestAddr { segments: [0x1234, 0x5678, 0x9abc, 0xdeef, 0, 0, 0, 0x5678] };",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"1234:5678:9abc:deef:0:0:0:5678\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]