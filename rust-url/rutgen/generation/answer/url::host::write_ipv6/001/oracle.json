[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 1, 2, 3, 4);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert!(f.should_fail);",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 0, 0, 1, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 1, 0, 0, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 1, 0, 0, 0, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(1, 0, 0, 0, 0, 0, 0, 0), &mut f), Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 1, 2, 3, 4);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert!(f.should_fail);",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 0, 0, 1, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 1, 0, 0, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 1, 0, 0, 0, 0, 0), &mut f), Err(fmt::Error));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(1, 0, 0, 0, 0, 0, 0, 0), &mut f), Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 1, 2, 0, 0, 3);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 1, 2, 0, 0, 3), &mut MockFormatter { should_fail: true }), Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 1, 2, 0, 0, 3);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments(0, 0, 0, 1, 2, 0, 0, 3), &mut MockFormatter { should_fail: true }), Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 0);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    f.should_fail = false;",
          "    assert_eq!(write_ipv6(&addr, &mut f), Ok(()));",
          "    f.should_fail = true;",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    let addr_with_zones = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let mut f2 = MockFormatter { should_fail: true };",
          "    assert_eq!(write_ipv6(&addr_with_zones, &mut f2), Err(fmt::Error));",
          "    f2.should_fail = false;",
          "    assert_eq!(write_ipv6(&addr_with_zones, &mut f2), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 0);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    f.should_fail = false;",
          "    assert_eq!(write_ipv6(&addr, &mut f), Ok(()));",
          "    f.should_fail = true;",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    let addr_with_zones = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let mut f2 = MockFormatter { should_fail: true };",
          "    assert_eq!(write_ipv6(&addr_with_zones, &mut f2), Err(fmt::Error));",
          "    f2.should_fail = false;",
          "    assert_eq!(write_ipv6(&addr_with_zones, &mut f2), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(1, 2, 3, 4, 5, 6, 7, 8);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert_eq!(f.should_fail, true);",
          "    assert!(write_ipv6(&addr, &mut f).is_err());",
          "    assert!(f.write_str(\":\").is_err());",
          "    assert!(f.write_str(\":\").is_err());"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(1, 2, 3, 4, 5, 6, 7, 8);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert_eq!(f.should_fail, true);",
          "    assert!(write_ipv6(&addr, &mut f).is_err());",
          "    assert!(f.write_str(\":\").is_err());",
          "    assert!(f.write_str(\":\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert!(f.should_fail);",
          "    assert!(i < 8);",
          "    assert!(i == compress_start);",
          "    assert_eq!(f.write_str(\":\"), Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        should_fail: bool,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            if self.should_fail {",
          "                return Err(fmt::Error);",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let mut f = MockFormatter { should_fail: true };",
          "    let _ = write_ipv6(&addr, &mut f);",
          "    assert_eq!(write_ipv6(&addr, &mut f), Err(fmt::Error));",
          "    assert!(f.should_fail);",
          "    assert!(i < 8);",
          "    assert!(i == compress_start);",
          "    assert_eq!(f.write_str(\":\"), Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]