[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Write for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let mut formatter = DummyFormatter;",
          "    write_ipv6(&addr, &mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([1, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 1, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 1, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 1, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 1, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 1, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 1, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 1]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Write for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let mut formatter = DummyFormatter;",
          "    write_ipv6(&addr, &mut formatter).unwrap();",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([1, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 1, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 1, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 1, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 1, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 1, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 1, 0]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 1]), &mut DummyFormatter), Ok(()));",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Write for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let mut formatter = DummyFormatter;",
          "    write_ipv6(&addr, &mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter).unwrap();",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 1, 2, 3, 4]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 1, 2]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 1]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Write for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let mut formatter = DummyFormatter;",
          "    write_ipv6(&addr, &mut formatter).unwrap();",
          "    write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter).unwrap();",
          "    assert_eq!(write_ipv6(&Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 0]), &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 1, 2, 3, 4]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 1, 2]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "    let addr = Ipv6Addr::from_segments([0, 0, 0, 0, 0, 0, 0, 1]);",
          "    assert_eq!(write_ipv6(&addr, &mut DummyFormatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]