[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0003, 0x0004];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::1:2:3:4\");",
          "    ",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::\");",
          "    ",
          "    let segments = [0x0000, 0x0000, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::a:b:c:d:e:f\");",
          "    ",
          "    let segments = [0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"1::\");",
          "    ",
          "    let segments = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"1:2:3:4:5:6:7:8\");"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0003, 0x0004];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::1:2:3:4\");",
          "    ",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::\");",
          "    ",
          "    let segments = [0x0000, 0x0000, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::a:b:c:d:e:f\");",
          "    ",
          "    let segments = [0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"1::\");",
          "    ",
          "    let segments = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"1:2:3:4:5:6:7:8\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write_ipv6(&addr, &mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.output, \"0:1:2:3:4:5:6:8:\");",
          "    assert!(write!(formatter, \"{:x}\", segments[7]).is_err());",
          "    assert!(formatter.output.contains(\":\"));",
          "    assert!(formatter.output.ends_with(\":\"));",
          "    assert!(formatter.output.len() > 0);"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0008];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert_eq!(write_ipv6(&addr, &mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.output, \"0:1:2:3:4:5:6:8:\");",
          "    assert!(write!(formatter, \"{:x}\", segments[7]).is_err());",
          "    assert!(formatter.output.contains(\":\"));",
          "    assert!(formatter.output.ends_with(\":\"));",
          "    assert!(formatter.output.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0003, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"::::1:2:3:ffff\");",
          "    assert!(write!(formatter, \"{:x}\", segments[i as usize]).is_ok());",
          "    assert_eq!(longest_zero_sequence(&segments), (0, 3));",
          "    _formatter.write_str(\":\").unwrap();",
          "    assert!(write!(formatter, \"{:x}\", segments[i as usize]).is_err());",
          "    formatter.output.clear();",
          "    assert!(formatter.output.is_empty());",
          "    assert_eq!(f.write_str(\":\").is_ok(), true);",
          "    assert_eq!(f.write_str(\":\").is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0003, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert_eq!(formatter.output, \"::::1:2:3:ffff\");",
          "    assert!(write!(formatter, \"{:x}\", segments[i as usize]).is_ok());",
          "    assert_eq!(longest_zero_sequence(&segments), (0, 3));",
          "    _formatter.write_str(\":\").unwrap();",
          "    assert!(write!(formatter, \"{:x}\", segments[i as usize]).is_err());",
          "    formatter.output.clear();",
          "    assert!(formatter.output.is_empty());",
          "    assert_eq!(f.write_str(\":\").is_ok(), true);",
          "    assert_eq!(f.write_str(\":\").is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:0:ffff:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:ffff::ffff:ffff\");",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::\");",
          "    let segments = [0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:0:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert!(formatter.output.len() > 0);",
          "    let invalid_segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(invalid_segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert!(write!(formatter, \"{:x}\", segments[8]).is_err());"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:0:ffff:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:ffff::ffff:ffff\");",
          "    let segments = [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"::\");",
          "    let segments = [0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert_eq!(write_ipv6(&addr, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"ffff:ffff:0:ffff:ffff:ffff:ffff:ffff\");",
          "    let segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let _ = write_ipv6(&addr, &mut formatter);",
          "    assert!(formatter.output.len() > 0);",
          "    let invalid_segments = [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF];",
          "    let addr = Ipv6Addr::new(invalid_segments);",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    assert!(write!(formatter, \"{:x}\", segments[8]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]