[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(output == \"2001:db8:0:0:0:0:1:1\");",
          "    assert!(output.contains(\":\"));",
          "    assert!(output.chars().count() > 0);",
          "    assert!(output.split(':').count() == 8);",
          "    assert!(output[0..5] == \"2001:\");",
          "    assert!(output.ends_with(\"1\"));"
        ],
        "code": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(output == \"2001:db8:0:0:0:0:1:1\");",
          "    assert!(output.contains(\":\"));",
          "    assert!(output.chars().count() > 0);",
          "    assert!(output.split(':').count() == 8);",
          "    assert!(output[0..5] == \"2001:\");",
          "    assert!(output.ends_with(\"1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"2001:db8:1::2\");"
        ],
        "code": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"2001:db8:1::2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0, 0x0, 0x0, 0x0001, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0, 0x0, 0x0, 0x0001, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(output == \"2001:db8::1:2\");",
          "    assert!(output.len() > 0);",
          "    assert!(output.contains(':'));",
          "    assert!(!output.contains(\":::\" ));",
          "    assert!(output.matches(':').count() <= 7);"
        ],
        "code": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0, 0x0, 0x0, 0x0001, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0, 0x0, 0x0, 0x0001, 0x0002);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(output == \"2001:db8::1:2\");",
          "    assert!(output.len() > 0);",
          "    assert!(output.contains(':'));",
          "    assert!(!output.contains(\":::\" ));",
          "    assert!(output.matches(':').count() <= 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"2001:db8:1:2:3:4:5:6\");",
          "    assert!(i < 8);",
          "    assert!(i != compress_start);",
          "    assert!(write!(f, \"{:x}\", segments[i as usize]).is_ok());",
          "    assert!(i < 7);",
          "    assert!(f.write_str(\":\").is_ok());",
          "    assert!(result == Ok(()));"
        ],
        "code": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"2001:db8:1:2:3:4:5:6\");",
          "    assert!(i < 8);",
          "    assert!(i != compress_start);",
          "    assert!(write!(f, \"{:x}\", segments[i as usize]).is_ok());",
          "    assert!(i < 7);",
          "    assert!(f.write_str(\":\").is_ok());",
          "    assert!(result == Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0002, 0x0003, 0x0004, 0x0, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "}"
        ],
        "oracle": [
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0002, 0x0003, 0x0004, 0x0, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"2001:db8:0:2:3:4:0:6\");",
          "    output.clear();",
          "    let addr_zero = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0);",
          "    let result_zero = write_ipv6(&addr_zero, &mut output);",
          "    assert_eq!(result_zero, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    output.clear();",
          "    let addr_compress = Ipv6Addr::new(0x2001, 0x0db8, 0, 0, 0, 0, 0, 1);",
          "    let result_compress = write_ipv6(&addr_compress, &mut output);",
          "    assert_eq!(result_compress, Ok(()));",
          "    assert_eq!(output, \"2001:db8::1\");",
          "    output.clear();",
          "    let addr_full_zero = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let result_full_zero = write_ipv6(&addr_full_zero, &mut output);",
          "    assert_eq!(result_full_zero, Ok(()));",
          "    assert_eq!(output, \"::1\");"
        ],
        "code": [
          "{",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0002, 0x0003, 0x0004, 0x0, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    let addr = Ipv6Addr::new(0x2001, 0x0db8, 0x0, 0x0002, 0x0003, 0x0004, 0x0, 0x0006);",
          "    let mut output = String::new();",
          "    let result = write_ipv6(&addr, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"2001:db8:0:2:3:4:0:6\");",
          "    output.clear();",
          "    let addr_zero = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0);",
          "    let result_zero = write_ipv6(&addr_zero, &mut output);",
          "    assert_eq!(result_zero, Ok(()));",
          "    assert_eq!(output, \"::\");",
          "    output.clear();",
          "    let addr_compress = Ipv6Addr::new(0x2001, 0x0db8, 0, 0, 0, 0, 0, 1);",
          "    let result_compress = write_ipv6(&addr_compress, &mut output);",
          "    assert_eq!(result_compress, Ok(()));",
          "    assert_eq!(output, \"2001:db8::1\");",
          "    output.clear();",
          "    let addr_full_zero = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);",
          "    let result_full_zero = write_ipv6(&addr_full_zero, &mut output);",
          "    assert_eq!(result_full_zero, Ok(()));",
          "    assert_eq!(output, \"::1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]