[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"example.org:8080\";",
          "    let result = set_host(&mut url, new_host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(url.host_str(), Some(\"example.org\"));",
          "    assert_eq!(url.port(), Some(8080));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"example.org:8080\";",
          "    let result = set_host(&mut url, new_host);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(url.host_str(), Some(\"example.org\"));",
          "    assert_eq!(url.port(), Some(8080));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"opaque_host:3000\";",
          "    let result = set_host(&mut url, new_host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(url.host(), Some(Host::Domain(\"opaque_host\".to_string())));",
          "    assert_eq!(url.port(), Some(3000));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"opaque_host:3000\";",
          "    let result = set_host(&mut url, new_host);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(url.host(), Some(Host::Domain(\"opaque_host\".to_string())));",
          "    assert_eq!(url.port(), Some(3000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"test.com:4000\";",
          "    let result = set_host(&mut url, new_host);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(url.host(), Some(Host::Domain(\"test.com\".to_string())));",
          "    assert_eq!(url.port(), Some(4000));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(\"example.com\".to_string()),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let new_host = \"test.com:4000\";",
          "    let result = set_host(&mut url, new_host);",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.host(), Some(Host::Domain(\"test.com\".to_string())));",
          "    assert_eq!(url.port(), Some(4000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]