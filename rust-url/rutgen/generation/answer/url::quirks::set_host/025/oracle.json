[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://username:password@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 17,",
          "        host_end: 27,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 29,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"example.org:81\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.port().is_some());",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.username(), \"username\");",
          "    assert_eq!(url.password(), Some(\"password\"));",
          "    assert_eq!(url.path(), \"/path\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://username:password@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 17,",
          "        host_end: 27,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 29,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"example.org:81\");",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert!(url.port().is_some());",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.username(), \"username\");",
          "    assert_eq!(url.password(), Some(\"password\"));",
          "    assert_eq!(url.path(), \"/path\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://username@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 11,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 24,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.username(), \"username\");",
          "    assert_eq!(url.serialization, \"http://username@example.com:80/path\");",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.has_host());",
          "    assert!(url.has_authority());",
          "    assert!(!url.cannot_be_a_base());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://username@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 11,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 24,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.username(), \"username\");",
          "    assert_eq!(url.serialization, \"http://username@example.com:80/path\");",
          "    assert_eq!(url.scheme(), \"http\");",
          "    assert!(url.has_host());",
          "    assert!(url.has_authority());",
          "    assert!(!url.cannot_be_a_base());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"ftp://user:pass@192.168.0.1:8080/path\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 10,",
          "        host_start: 11,",
          "        host_end: 21,",
          "        host: Host::Ipv4(\"192.168.0.1\".parse().unwrap()).into(),",
          "        port: Some(8080),",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"192.168.0.2:9090\");",
          "}"
        ],
        "oracle": [
          "    let mut url = Url { serialization: \"ftp://user:pass@192.168.0.1:8080/path\".to_string(), scheme_end: 6, username_end: 10, host_start: 11, host_end: 21, host: Host::Ipv4(\"192.168.0.1\".parse().unwrap()).into(), port: Some(8080), path_start: 23, query_start: None, fragment_start: None, }; assert_eq!(set_host(&mut url, \"192.168.0.2:9090\"), Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"ftp://user:pass@192.168.0.1:8080/path\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 10,",
          "        host_start: 11,",
          "        host_end: 21,",
          "        host: Host::Ipv4(\"192.168.0.1\".parse().unwrap()).into(),",
          "        port: Some(8080),",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"192.168.0.2:9090\");",
          "    let mut url = Url { serialization: \"ftp://user:pass@192.168.0.1:8080/path\".to_string(), scheme_end: 6, username_end: 10, host_start: 11, host_end: 21, host: Host::Ipv4(\"192.168.0.1\".parse().unwrap()).into(), port: Some(8080), path_start: 23, query_start: None, fragment_start: None, }; assert_eq!(set_host(&mut url, \"192.168.0.2:9090\"), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://user@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 9,",
          "        host_end: 19,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");   ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(username(&url), \"user\");",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://user@example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 9,",
          "        host_end: 19,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");   ",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(username(&url), \"user\");",
          "    assert_eq!(url.port(), Some(80));",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 5,",
          "        host_end: 15,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");   ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com:80/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 5,",
          "        host_end: 15,",
          "        host: Host::Domain(\"example.com\".to_string()).into(),",
          "        port: Some(80),",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = set_host(&mut url, \"\");   ",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]