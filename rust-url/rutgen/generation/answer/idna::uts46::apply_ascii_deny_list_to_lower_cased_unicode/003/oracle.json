[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32));",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32));",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'b';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let c = 'b';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32)); // Deny 'A' and 'Z'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'Z';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    ",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    ",
          "    let c = 'a';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, 'a');",
          "    ",
          "    let c = '3';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '3');",
          "    ",
          "    let c = '.';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '.');",
          "    ",
          "    let c = ' ';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, ' ');"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32)); // Deny 'A' and 'Z'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'Z';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    ",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    ",
          "    let c = 'a';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, 'a');",
          "    ",
          "    let c = '3';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '3');",
          "    ",
          "    let c = '.';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, '.');",
          "    ",
          "    let c = ' ';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
          "    assert_eq!(result, ' ');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32)); // Deny 'A' and 'C'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32));",
          "    let expected = '\\u{FFFD}';",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32)); // Deny 'A' and 'C'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'A';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32));",
          "    let expected = '\\u{FFFD}';",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'B';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let c = 'B';",
          "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'Z';",
          "    let deny_list: u128 = (1u128 << (b'Z' as u32)) | (1u128 << (b'Y' as u32)); // Deny 'Z' and 'Y'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let c = 'Z';",
          "    let deny_list: u128 = (1u128 << (b'Z' as u32)) | (1u128 << (b'Y' as u32)); // Deny 'Z' and 'Y'",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]