[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'a';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'a';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'b';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'b';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'b';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'b';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'c';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'c');"
        ],
        "code": [
          "{",
          "    let c = 'c';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'c');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'd';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'd';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'd';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'd';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'e';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'e';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'e';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'e';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'f';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'f');"
        ],
        "code": [
          "{",
          "    let c = 'f';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'f');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'g';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'g');"
        ],
        "code": [
          "{",
          "    let c = 'g';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'g');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'h';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'h';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'h';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'h';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'i';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'i');"
        ],
        "code": [
          "{",
          "    let c = 'i';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'i');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'j';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'j';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'k';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'k';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'k';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'k';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'l';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'l');"
        ],
        "code": [
          "{",
          "    let c = 'l';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'l');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'm';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'm');"
        ],
        "code": [
          "{",
          "    let c = 'm';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'm');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'n';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'n');"
        ],
        "code": [
          "{",
          "    let c = 'n';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'o';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'o');"
        ],
        "code": [
          "{",
          "    let c = 'o';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'o');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'p';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'p');"
        ],
        "code": [
          "{",
          "    let c = 'p';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'p');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'q';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'q';",
          "    let deny_list = (1u128 << u32::from(c)) | (1u128 << u32::from('a'));",
          "    let expected_result = c;",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let c = 'q';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'q';",
          "    let deny_list = (1u128 << u32::from(c)) | (1u128 << u32::from('a'));",
          "    let expected_result = c;",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'r';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'r');"
        ],
        "code": [
          "{",
          "    let c = 'r';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 's';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 's');"
        ],
        "code": [
          "{",
          "    let c = 's';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 's');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 't';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 't';",
          "    let deny_list = 1u128 << u32::from(c) | (1u128 << u32::from('t'));",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 't');"
        ],
        "code": [
          "{",
          "    let c = 't';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 't';",
          "    let deny_list = 1u128 << u32::from(c) | (1u128 << u32::from('t'));",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 't');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'u';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'u');"
        ],
        "code": [
          "{",
          "    let c = 'u';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'u');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'v';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'v';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'w';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'w');"
        ],
        "code": [
          "{",
          "    let c = 'w';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'w');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'x';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    let c = 'x';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'x';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    let c = 'x';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'y';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, c);"
        ],
        "code": [
          "{",
          "    let c = 'y';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, c);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'z');"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let deny_list = 1u128 << u32::from(c);",
          "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
          "    assert_eq!(result, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]