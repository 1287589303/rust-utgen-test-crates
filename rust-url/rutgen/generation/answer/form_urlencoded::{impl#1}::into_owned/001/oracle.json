[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = b\"example input\";",
          "    let parse = Parse { input: input_data };",
          "    let result = parse.into_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.inner.input, input_data);"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = b\"example input\";",
          "    let parse = Parse { input: input_data };",
          "    let result = parse.into_owned();",
          "    assert_eq!(result.inner.input, input_data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_data: &[u8] = b\"a\"; // single byte, valid input",
          "    let parse = Parse { input: input_data };",
          "    let result = parse.into_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.inner.input, b\"a\");",
          "    assert!(matches!(result, ParseIntoOwned { inner: Parse { input: _ } }));",
          "    assert_eq!(result.inner, parse);"
        ],
        "code": [
          "{",
          "    let input_data: &[u8] = b\"a\"; // single byte, valid input",
          "    let parse = Parse { input: input_data };",
          "    let result = parse.into_owned();",
          "    assert_eq!(result.inner.input, b\"a\");",
          "    assert!(matches!(result, ParseIntoOwned { inner: Parse { input: _ } }));",
          "    assert_eq!(result.inner, parse);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]