[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"example.com\");",
          "    assert!(Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut output, None).unwrap() == ProcessingSuccess::Passthrough);",
          "    assert!(output.is_empty() || output == \"example.com\");"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"example.com\");",
          "    assert!(Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut output, None).unwrap() == ProcessingSuccess::Passthrough);",
          "    assert!(output.is_empty() || output == \"example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"exämple.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"exämple.com\";",
          "    let mut output = String::new();",
          "    assert_eq!(idna.to_unicode(domain, &mut output), Ok(()));",
          "    assert_eq!(output, \"example.com\");",
          "    let domain_invalid = \"exämple..com\";",
          "    let mut output_invalid = String::new();",
          "    assert_eq!(idna.to_unicode(domain_invalid, &mut output_invalid).is_err(), true);",
          "    let domain_another = \"exämplé.com\";",
          "    let mut output_another = String::new();",
          "    assert_eq!(idna.to_unicode(domain_another, &mut output_another), Ok(()));",
          "    assert_eq!(output_another, \"exämplé.com\");"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"exämple.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"exämple.com\";",
          "    let mut output = String::new();",
          "    assert_eq!(idna.to_unicode(domain, &mut output), Ok(()));",
          "    assert_eq!(output, \"example.com\");",
          "    let domain_invalid = \"exämple..com\";",
          "    let mut output_invalid = String::new();",
          "    assert_eq!(idna.to_unicode(domain_invalid, &mut output_invalid).is_err(), true);",
          "    let domain_another = \"exämplé.com\";",
          "    let mut output_another = String::new();",
          "    assert_eq!(idna.to_unicode(domain_another, &mut output_another), Ok(()));",
          "    assert_eq!(output_another, \"exämplé.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"x\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"x\");",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(true));",
          "    let domain = \"x\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"x\");",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"test.domain.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"test.domain.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"test.domain.com\");",
          "    let mapped = map_transitional(domain, idna.config.transitional_processing);",
          "    let expected = mapped.as_bytes();",
          "    let deny_list = idna.config.deny_list();",
          "    let hyphens = idna.config.hyphens();",
          "    let success = Uts46::new()",
          "    .process(expected, deny_list, hyphens, ErrorPolicy::MarkErrors, |_, _, _| true, &mut output, None)",
          "    .unwrap();",
          "    assert!(success == ProcessingSuccess::Passthrough || success == ProcessingSuccess::WroteToSink);"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"test.domain.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"test.domain.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"test.domain.com\");",
          "    let mapped = map_transitional(domain, idna.config.transitional_processing);",
          "    let expected = mapped.as_bytes();",
          "    let deny_list = idna.config.deny_list();",
          "    let hyphens = idna.config.hyphens();",
          "    let success = Uts46::new()",
          "    .process(expected, deny_list, hyphens, ErrorPolicy::MarkErrors, |_, _, _| true, &mut output, None)",
          "    .unwrap();",
          "    assert!(success == ProcessingSuccess::Passthrough || success == ProcessingSuccess::WroteToSink);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default()",
          "        .transitional_processing(true)",
          "        .use_std3_ascii_rules(true));",
          "    let domain = \"müller.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"müller.com\");",
          "    assert!(output.contains(\"ü\"));",
          "    assert!(output.contains(\"müller\"));",
          "    assert!(output.len() > 0);",
          "    assert!(mapped.as_bytes().iter().all(|&byte| byte.is_ascii() || byte.is_ascii_alphabetic()));",
          "    assert!(idna.config.transitional_processing);",
          "    assert!(idna.config.use_std3_ascii_rules);"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default()",
          "        .transitional_processing(true)",
          "        .use_std3_ascii_rules(true));",
          "    let domain = \"müller.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"müller.com\");",
          "    assert!(output.contains(\"ü\"));",
          "    assert!(output.contains(\"müller\"));",
          "    assert!(output.len() > 0);",
          "    assert!(mapped.as_bytes().iter().all(|&byte| byte.is_ascii() || byte.is_ascii_alphabetic()));",
          "    assert!(idna.config.transitional_processing);",
          "    assert!(idna.config.use_std3_ascii_rules);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"é.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"é.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"é.com\");"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"é.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    let mut idna = Idna::new(Config::default().transitional_processing(false));",
          "    let domain = \"é.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"é.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut idna = Idna::new(Config::default()",
          "        .transitional_processing(true)",
          "        .check_hyphens(true));",
          "    let domain = \"my-website.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"my-website.com\");",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.as_str(), domain);",
          "    assert!(Uts46::new().process(",
          "    mapped.as_bytes(),",
          "    idna.config.deny_list(),",
          "    idna.config.hyphens(),",
          "    ErrorPolicy::MarkErrors,",
          "    |_, _, _| true,",
          "    &mut output,",
          "    None,",
          "    ).is_ok());"
        ],
        "code": [
          "{",
          "    let mut idna = Idna::new(Config::default()",
          "        .transitional_processing(true)",
          "        .check_hyphens(true));",
          "    let domain = \"my-website.com\";",
          "    let mut output = String::new();",
          "    let result = idna.to_unicode(domain, &mut output);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"my-website.com\");",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.as_str(), domain);",
          "    assert!(Uts46::new().process(",
          "    mapped.as_bytes(),",
          "    idna.config.deny_list(),",
          "    idna.config.hyphens(),",
          "    ErrorPolicy::MarkErrors,",
          "    |_, _, _| true,",
          "    &mut output,",
          "    None,",
          "    ).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]