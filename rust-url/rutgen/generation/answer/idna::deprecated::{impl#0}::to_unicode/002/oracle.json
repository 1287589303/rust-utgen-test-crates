[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(b\"\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    idna.config.transitional_processing = true;",
          "    let result_transitional = idna.to_unicode(\"ß\", &mut out);",
          "    assert_eq!(result_transitional, Err(crate::Errors::default()));",
          "    assert_eq!(out, \"ss\");",
          "    idna.config.transitional_processing = false;",
          "    let result_no_transitional = idna.to_unicode(\"test\", &mut out);",
          "    assert!(out.contains(\"test\"));",
          "    assert!(result_no_transitional.is_ok());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(b\"\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    idna.config.transitional_processing = true;",
          "    let result_transitional = idna.to_unicode(\"ß\", &mut out);",
          "    assert_eq!(result_transitional, Err(crate::Errors::default()));",
          "    assert_eq!(out, \"ss\");",
          "    idna.config.transitional_processing = false;",
          "    let result_no_transitional = idna.to_unicode(\"test\", &mut out);",
          "    assert!(out.contains(\"test\"));",
          "    assert!(result_no_transitional.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"a\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"ß\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"test-.com\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"valid-domain\", &mut out);",
          "    assert!(result.is_ok());",
          "    assert!(!out.is_empty());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"a\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"ß\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"test-.com\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    let config = Config::default().check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"valid-domain\", &mut out);",
          "    assert!(result.is_ok());",
          "    assert!(!out.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"xn--\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"xn--\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).unwrap_err() == ProcessingError::ValidityError);",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"xn--\", &mut out);",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"xn--\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).unwrap_err() == ProcessingError::ValidityError);",
          "    assert!(Uts46::new().process(\"xn--\".as_bytes(), config.deny_list(), config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"invalid_domain_with_invalid_chars!@\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Err(ProcessingError::ValidityError)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Err(ProcessingError::SinkError)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Ok(ProcessingSuccess::Passthrough)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Ok(ProcessingSuccess::WroteToSink)));"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"invalid_domain_with_invalid_chars!@\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Err(ProcessingError::ValidityError)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Err(ProcessingError::SinkError)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Ok(ProcessingSuccess::Passthrough)));",
          "    assert!(matches!(Uts46::new().process(b\"invalid_domain_with_invalid_chars!@\", idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None), Ok(ProcessingSuccess::WroteToSink)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"example.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"example.com\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"example.com\", &mut out);",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"example.com\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"exemplar.日本\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"exemplar.日本\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(\"exemplar.日本\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    let result_validity_error = Uts46::new().process(\"invalid_domain\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None);",
          "    assert!(result_validity_error.is_err() && result_validity_error.unwrap_err() == ProcessingError::ValidityError);",
          "    let result_passthrough = Uts46::new().process(\"validdomain.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None);",
          "    assert!(result_passthrough.is_ok());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"exemplar.日本\", &mut out);",
          "    let mut out = String::new();",
          "    let config = Config::default().use_std3_ascii_rules(false).transitional_processing(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_unicode(\"exemplar.日本\", &mut out);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    assert!(out.is_empty());",
          "    assert!(Uts46::new().process(\"exemplar.日本\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None).is_err());",
          "    let result_validity_error = Uts46::new().process(\"invalid_domain\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None);",
          "    assert!(result_validity_error.is_err() && result_validity_error.unwrap_err() == ProcessingError::ValidityError);",
          "    let result_passthrough = Uts46::new().process(\"validdomain.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::MarkErrors, |_, _, _| true, &mut out, None);",
          "    assert!(result_passthrough.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]