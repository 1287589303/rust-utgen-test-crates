[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/html; charset=UTF-8\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().type_, \"text\");",
          "    assert_eq!(result.unwrap().subtype, \"html\");",
          "    assert_eq!(result.unwrap().parameters.len(), 1);",
          "    assert_eq!(result.unwrap().parameters[0].0, \"charset\");",
          "    assert_eq!(result.unwrap().parameters[0].1, \"UTF-8\");"
        ],
        "code": [
          "{",
          "    let input = \"text/html; charset=UTF-8\";",
          "    let result = parse(input);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().type_, \"text\");",
          "    assert_eq!(result.unwrap().subtype, \"html\");",
          "    assert_eq!(result.unwrap().parameters.len(), 1);",
          "    assert_eq!(result.unwrap().parameters[0].0, \"charset\");",
          "    assert_eq!(result.unwrap().parameters[0].1, \"UTF-8\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"  text/html ; charset=UTF-8  \";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"  text/html ; charset=UTF-8  \";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"application/json\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));"
        ],
        "code": [
          "{",
          "    let input = \"application/json\";",
          "    let result = parse(input);",
          "    assert_eq!(result, Some(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"application/ ; charset=UTF-8\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"application/ ; charset=UTF-8\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/json; charset=UTF-8\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let input = \"/json; charset=UTF-8\";",
          "    let result = parse(input);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/; charset=UTF-8\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"text/; charset=UTF-8\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]