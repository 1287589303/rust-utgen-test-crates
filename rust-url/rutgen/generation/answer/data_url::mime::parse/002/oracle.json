[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/html\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().type_, \"text\");",
          "    assert_eq!(result.unwrap().subtype, \"html\");",
          "    assert_eq!(result.unwrap().parameters, Vec::<(String, String)>::new());"
        ],
        "code": [
          "{",
          "    let input = \"text/html\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().type_, \"text\");",
          "    assert_eq!(result.unwrap().subtype, \"html\");",
          "    assert_eq!(result.unwrap().parameters, Vec::<(String, String)>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"application/json\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));"
        ],
        "code": [
          "{",
          "    let input = \"application/json\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result, Some(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"audio/mpeg\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().type_, \"audio\");",
          "    assert_eq!(result.unwrap().subtype, \"mpeg\");",
          "    assert!(result.unwrap().parameters.is_empty());"
        ],
        "code": [
          "{",
          "    let input = \"audio/mpeg\"; ",
          "    let result = parse(input);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().type_, \"audio\");",
          "    assert_eq!(result.unwrap().subtype, \"mpeg\");",
          "    assert!(result.unwrap().parameters.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/json\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"/json\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"text/\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"application /json\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Mime {",
          "    type_: \"application\".to_string(),",
          "    subtype: \"json\".to_string(),",
          "    parameters: Vec::new()",
          "    }));"
        ],
        "code": [
          "{",
          "    let input = \"application /json\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result, Some(Mime {",
          "    type_: \"application\".to_string(),",
          "    subtype: \"json\".to_string(),",
          "    parameters: Vec::new()",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/plain;\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Mime { type_: \"text\".to_owned(), subtype: \"plain\".to_owned(), parameters: vec![] }));"
        ],
        "code": [
          "{",
          "    let input = \"text/plain;\"; ",
          "    let result = parse(input);",
          "    assert_eq!(result, Some(Mime { type_: \"text\".to_owned(), subtype: \"plain\".to_owned(), parameters: vec![] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"video/mp4; name=value\"; ",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"video/mp4; name=value\";",
          "    let result = parse(input);",
          "    assert!(result.is_some());",
          "    let mime = result.unwrap();",
          "    assert_eq!(mime.type_, \"video\");",
          "    assert_eq!(mime.subtype, \"mp4\");",
          "    assert_eq!(mime.parameters.len(), 1);",
          "    assert_eq!(mime.parameters[0], (\"name\".to_string(), \"value\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"video/mp4; name=value\"; ",
          "    let result = parse(input);",
          "    let input = \"video/mp4; name=value\";",
          "    let result = parse(input);",
          "    assert!(result.is_some());",
          "    let mime = result.unwrap();",
          "    assert_eq!(mime.type_, \"video\");",
          "    assert_eq!(mime.subtype, \"mp4\");",
          "    assert_eq!(mime.parameters.len(), 1);",
          "    assert_eq!(mime.parameters[0], (\"name\".to_string(), \"value\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]