[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse(\"text/\"), None);",
          "    assert_eq!(parse(\"text/;param=value\"), None);",
          "    assert_eq!(parse(\"text/;param=\"), None);",
          "    assert_eq!(parse(\"text/ ;param=value\"), None);",
          "    assert_eq!(parse(\"text/; ;param=value\"), None);",
          "    assert_eq!(parse(\"text/null\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value;\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value\\\\\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value\\\\n\\\"\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value without closing quote\"), None);",
          "    assert_eq!(parse(\"text/;param=non-http-token-!@#$\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"\";",
          "    let result = parse(input);",
          "    assert_eq!(parse(\"text/\"), None);",
          "    assert_eq!(parse(\"text/;param=value\"), None);",
          "    assert_eq!(parse(\"text/;param=\"), None);",
          "    assert_eq!(parse(\"text/ ;param=value\"), None);",
          "    assert_eq!(parse(\"text/; ;param=value\"), None);",
          "    assert_eq!(parse(\"text/null\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value;\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value\\\\\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value\\\\n\\\"\"), None);",
          "    assert_eq!(parse(\"text/;param=\\\"value without closing quote\"), None);",
          "    assert_eq!(parse(\"text/;param=non-http-token-!@#$\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   \";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"   \";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"   \";",
          "    let result = parse(input);",
          "    let input = \"   \";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/;param=value\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"text/;param=value\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text//param=value\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"text//param=value\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"text//param=value\";",
          "    let result = parse(input);",
          "    let input = \"text//param=value\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"text/invalid^subtype;param=value\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"text/invalid^subtype;param=value\";",
          "    let result = parse(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]