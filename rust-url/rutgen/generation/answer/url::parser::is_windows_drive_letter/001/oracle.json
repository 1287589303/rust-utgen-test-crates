[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"\"; // Length is 0",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"\"; // Length is 0",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"A\"; // Length is 1",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"ABCD\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"A\"; // Length is 1",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"ABCD\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"ABC\"; // Length is 3",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false); // Length is 2, valid segment but not a drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true);  // Length is 2, valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);  // Length is 2, valid Windows drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"AB:\"), false); // Length is 3, invalid segment",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false);  // Length is 2, valid drive letter but followed by slash",
          "    assert_eq!(is_windows_drive_letter(\"XY\"), false);  // Length is 2, valid segment but not a drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);  // Length is 2, valid drive letter but followed by hash",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false); // Length is 2, valid drive letter but followed by backslash",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false); // Length is 2, valid drive letter but followed by backslash",
          "    assert_eq!(is_windows_drive_letter(\"10\"), false);  // Length is 2, invalid characters"
        ],
        "code": [
          "{",
          "    let segment = \"ABC\"; // Length is 3",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false); // Length is 2, valid segment but not a drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true);  // Length is 2, valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);  // Length is 2, valid Windows drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"AB:\"), false); // Length is 3, invalid segment",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false);  // Length is 2, valid drive letter but followed by slash",
          "    assert_eq!(is_windows_drive_letter(\"XY\"), false);  // Length is 2, valid segment but not a drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);  // Length is 2, valid drive letter but followed by hash",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false); // Length is 2, valid drive letter but followed by backslash",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false); // Length is 2, valid drive letter but followed by backslash",
          "    assert_eq!(is_windows_drive_letter(\"10\"), false);  // Length is 2, invalid characters",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"A:\"; // Length is 2 but valid drive letter format",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false); // Not a valid drive letter format",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true); // Valid Windows drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false); // Invalid segment after drive letter",
          "    assert_eq!(is_windows_drive_letter(\"AA\"), false); // Invalid segment that doesn't match any condition",
          "    assert_eq!(is_windows_drive_letter(\"B?\"), false); // Invalid character after drive letter",
          "    assert_eq!(is_windows_drive_letter(\":\"), false); // Length is not 2",
          "    assert_eq!(is_windows_drive_letter(\"A\"), false); // Length is not 2",
          "    assert_eq!(is_windows_drive_letter(\"ABCD\"), false); // Length is greater than 2",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Non-alpha starts segment",
          "    assert_eq!(is_windows_drive_letter(\"A|A\"), false); // Length greater than 2 with valid letter",
          "    assert_eq!(is_windows_drive_letter(\"\"), false); // Empty segment",
          "    assert_eq!(is_windows_drive_letter(\"ab\"), false); // Lowercase letters not a valid drive letter"
        ],
        "code": [
          "{",
          "    let segment = \"A:\"; // Length is 2 but valid drive letter format",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"AB\"), false); // Not a valid drive letter format",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true); // Valid Windows drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"A/\"), false); // Invalid segment after drive letter",
          "    assert_eq!(is_windows_drive_letter(\"AA\"), false); // Invalid segment that doesn't match any condition",
          "    assert_eq!(is_windows_drive_letter(\"B?\"), false); // Invalid character after drive letter",
          "    assert_eq!(is_windows_drive_letter(\":\"), false); // Length is not 2",
          "    assert_eq!(is_windows_drive_letter(\"A\"), false); // Length is not 2",
          "    assert_eq!(is_windows_drive_letter(\"ABCD\"), false); // Length is greater than 2",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Non-alpha starts segment",
          "    assert_eq!(is_windows_drive_letter(\"A|A\"), false); // Length greater than 2 with valid letter",
          "    assert_eq!(is_windows_drive_letter(\"\"), false); // Empty segment",
          "    assert_eq!(is_windows_drive_letter(\"ab\"), false); // Lowercase letters not a valid drive letter",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]