[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"C:\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":C\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"12\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"XY\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"C:\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":C\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"12\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"XY\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"D|\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"D|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:|\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"B#\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"D|\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"D|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:|\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"B#\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"E:\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"E:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"G\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"A?\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"B#\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E-\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"EE:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"E:\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"E:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"G\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"A?\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"B#\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E-\"), false);",
          "    assert_eq!(is_windows_drive_letter(\":\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"EE:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"F:/\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"G|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"X\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"B:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"H/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F>\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F<\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F\\\"\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F \"), false);",
          "    assert_eq!(is_windows_drive_letter(\"Fa\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"11\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);"
        ],
        "code": [
          "{",
          "    let segment = \"F:/\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"G|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"X\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"B:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"H/\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D\\\\\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F>\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F<\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F\\\"\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F \"), false);",
          "    assert_eq!(is_windows_drive_letter(\"Fa\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"11\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F:\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"G:\\\\\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"G:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"X#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"Z?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:\") , false);",
          "    assert_eq!(is_windows_drive_letter(\"g:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"R/\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"G:\\\\\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"G:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"X#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"Z?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"1:\") , false);",
          "    assert_eq!(is_windows_drive_letter(\"g:\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"R/\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"H?\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"H:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"H|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"G/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"T\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"M:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);"
        ],
        "code": [
          "{",
          "    let segment = \"H?\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"H:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"H|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"G/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"T\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"M:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F|\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"I#\";",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"I:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"X#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"B:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"G#\"), false);"
        ],
        "code": [
          "{",
          "    let segment = \"I#\";",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"I:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"Z/\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"D?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"X#\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"A\\\\\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"B:\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"E|\"), true);",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false);",
          "    assert_eq!(is_windows_drive_letter(\"G#\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"A\"; // This will not satisfy segment.len() == 2.",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    is_windows_drive_letter(\"A:\") == true",
          "    is_windows_drive_letter(\"B|\") == true",
          "    is_windows_drive_letter(\"C/\") == true",
          "    is_windows_drive_letter(\"D\\\\\") == true",
          "    is_windows_drive_letter(\"E#\") == true",
          "    is_windows_drive_letter(\"F?\") == true",
          "    is_windows_drive_letter(\"G:\") == true",
          "    is_windows_drive_letter(\"X|\") == true",
          "    is_windows_drive_letter(\"Y/\") == true",
          "    is_windows_drive_letter(\"Z\\\\\") == true",
          "    is_windows_drive_letter(\"C:\") == true",
          "    is_windows_drive_letter(\"A|\") == true",
          "    is_windows_drive_letter(\"B/\") == true",
          "    is_windows_drive_letter(\"D?\") == true",
          "    is_windows_drive_letter(\"E#\") == true"
        ],
        "code": [
          "{",
          "    let segment = \"A\"; // This will not satisfy segment.len() == 2.",
          "    is_windows_drive_letter(segment);",
          "    is_windows_drive_letter(\"A:\") == true",
          "    is_windows_drive_letter(\"B|\") == true",
          "    is_windows_drive_letter(\"C/\") == true",
          "    is_windows_drive_letter(\"D\\\\\") == true",
          "    is_windows_drive_letter(\"E#\") == true",
          "    is_windows_drive_letter(\"F?\") == true",
          "    is_windows_drive_letter(\"G:\") == true",
          "    is_windows_drive_letter(\"X|\") == true",
          "    is_windows_drive_letter(\"Y/\") == true",
          "    is_windows_drive_letter(\"Z\\\\\") == true",
          "    is_windows_drive_letter(\"C:\") == true",
          "    is_windows_drive_letter(\"A|\") == true",
          "    is_windows_drive_letter(\"B/\") == true",
          "    is_windows_drive_letter(\"D?\") == true",
          "    is_windows_drive_letter(\"E#\") == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"1:\"; // Invalid first character.",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), false); // Invalid second character",
          "    assert_eq!(is_windows_drive_letter(\"C/\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"G#\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Invalid first character",
          "    assert_eq!(is_windows_drive_letter(\"c:\"), true); // Valid Windows drive letter (lowercase)",
          "    assert_eq!(is_windows_drive_letter(\"xyz:\"), false); // Invalid length",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true); // Repeat for validation"
        ],
        "code": [
          "{",
          "    let segment = \"1:\"; // Invalid first character.",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"D:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"Z:\"), true); // Valid Windows drive letter",
          "    assert_eq!(is_windows_drive_letter(\"A|\"), false); // Invalid second character",
          "    assert_eq!(is_windows_drive_letter(\"C/\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"C\\\\\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"F?\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"G#\"), false); // Invalid third character",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Invalid first character",
          "    assert_eq!(is_windows_drive_letter(\"c:\"), true); // Valid Windows drive letter (lowercase)",
          "    assert_eq!(is_windows_drive_letter(\"xyz:\"), false); // Invalid length",
          "    assert_eq!(is_windows_drive_letter(\"C:\"), true); // Repeat for validation",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let segment = \"B*\"; // Invalid second character.",
          "    is_windows_drive_letter(segment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true); // Valid drive letter",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true); // Valid drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"X?\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"E#\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"G\\\\\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"Z;\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Invalid first character (digit)",
          "    assert_eq!(is_windows_drive_letter(\"AA\"), false); // Invalid first character (not alpha)",
          "    assert_eq!(is_windows_drive_letter(\"!:\"), false); // Invalid first character (non alpha)",
          "    assert_eq!(is_windows_drive_letter(\"B*\"), false); // Invalid character in segment"
        ],
        "code": [
          "{",
          "    let segment = \"B*\"; // Invalid second character.",
          "    is_windows_drive_letter(segment);",
          "    assert_eq!(is_windows_drive_letter(\"A:\"), true); // Valid drive letter",
          "    assert_eq!(is_windows_drive_letter(\"C|\"), true); // Valid drive letter with pipe",
          "    assert_eq!(is_windows_drive_letter(\"D/\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"X?\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"E#\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"G\\\\\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"Z;\"), false); // Valid first character, invalid second",
          "    assert_eq!(is_windows_drive_letter(\"1:\"), false); // Invalid first character (digit)",
          "    assert_eq!(is_windows_drive_letter(\"AA\"), false); // Invalid first character (not alpha)",
          "    assert_eq!(is_windows_drive_letter(\"!:\"), false); // Invalid first character (non alpha)",
          "    assert_eq!(is_windows_drive_letter(\"B*\"), false); // Invalid character in segment",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]