[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &[];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    assert!(sink == \"xn--\");",
          "    assert_eq!(write_punycode_label(&['a'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for 'a' */);",
          "    assert_eq!(write_punycode_label(&['a', 'b', 'c'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for 'abc' */);",
          "    assert_eq!(write_punycode_label(&['1', '2', '3'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for '123' */);",
          "    assert_eq!(write_punycode_label(&['‰∏≠', 'Êñá'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for '‰∏≠Êñá' */);"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &[];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    assert!(sink == \"xn--\");",
          "    assert_eq!(write_punycode_label(&['a'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for 'a' */);",
          "    assert_eq!(write_punycode_label(&['a', 'b', 'c'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for 'abc' */);",
          "    assert_eq!(write_punycode_label(&['1', '2', '3'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for '123' */);",
          "    assert_eq!(write_punycode_label(&['‰∏≠', 'Êñá'], &mut sink), Ok(()));",
          "    assert!(sink == \"xn--\" + &/* encoded punycode for '‰∏≠Êñá' */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['a'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sink, \"xn--a\");",
          "    assert!(matches!(_ , Ok(())));"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['a'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    assert_eq!(sink, \"xn--a\");",
          "    assert!(matches!(_ , Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['a', 'b', 'c'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sink, \"xn--abc\");",
          "    assert!(write_punycode_label(&['a', 'b', 'c'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['A', 'B', 'C'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['1', '2', '3'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['\\u{00E0}', '\\u{00E1}'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['-', '_'], &mut sink).is_err());"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['a', 'b', 'c'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    assert_eq!(sink, \"xn--abc\");",
          "    assert!(write_punycode_label(&['a', 'b', 'c'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['A', 'B', 'C'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['1', '2', '3'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['\\u{00E0}', '\\u{00E1}'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['-', '_'], &mut sink).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['Êº¢', 'Â≠ó'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    sink.write_str(\"xn--\").is_ok()",
          "    crate::punycode::encode_into::<_, _, InternalCaller>(label.iter().copied(), &mut sink).is_ok()",
          "    write_punycode_label(&['Êº¢', 'Â≠ó'], &mut sink) == Ok(())"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['Êº¢', 'Â≠ó'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    sink.write_str(\"xn--\").is_ok()",
          "    crate::punycode::encode_into::<_, _, InternalCaller>(label.iter().copied(), &mut sink).is_ok()",
          "    write_punycode_label(&['Êº¢', 'Â≠ó'], &mut sink) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['üòÄ'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sink, \"xn--\");",
          "    assert!(write_punycode_label(&['üòÄ'], &mut sink).is_ok());",
          "    assert!(sink.len() > 0);",
          "    assert!(sink.contains(\"xn--\"));",
          "    assert!(sink.starts_with(\"xn--\"));",
          "    assert_eq!(write_punycode_label(&['a', 'b', 'c'], &mut sink), Ok(()));",
          "    assert!(sink.contains(&*String::from(\"xn--\")));",
          "    assert!(write_punycode_label(&['◊ê'], &mut sink).is_ok());",
          "    assert!(sink.len() <= 1000);",
          "    assert!(write_punycode_label(&['x', 'y', 'z'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['üòÉ'], &mut sink).is_ok());",
          "    assert!(sink.chars().count() >= 4);"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['üòÄ'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    assert_eq!(sink, \"xn--\");",
          "    assert!(write_punycode_label(&['üòÄ'], &mut sink).is_ok());",
          "    assert!(sink.len() > 0);",
          "    assert!(sink.contains(\"xn--\"));",
          "    assert!(sink.starts_with(\"xn--\"));",
          "    assert_eq!(write_punycode_label(&['a', 'b', 'c'], &mut sink), Ok(()));",
          "    assert!(sink.contains(&*String::from(\"xn--\")));",
          "    assert!(write_punycode_label(&['◊ê'], &mut sink).is_ok());",
          "    assert!(sink.len() <= 1000);",
          "    assert!(write_punycode_label(&['x', 'y', 'z'], &mut sink).is_ok());",
          "    assert!(write_punycode_label(&['üòÉ'], &mut sink).is_ok());",
          "    assert!(sink.chars().count() >= 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sink, \"xn--\");",
          "    assert!(write_punycode_label(label, &mut sink).is_ok());",
          "    assert!(sink.len() > 4);",
          "    assert!(!sink.contains('\\u{FFFD}'));"
        ],
        "code": [
          "{",
          "    let mut sink = String::new();",
          "    let label: &[char] = &['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+'];",
          "    let _ = write_punycode_label(label, &mut sink);",
          "    assert_eq!(sink, \"xn--\");",
          "    assert!(write_punycode_label(label, &mut sink).is_ok());",
          "    assert!(sink.len() > 4);",
          "    assert!(!sink.contains('\\u{FFFD}'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]