[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"abc.def\");",
          "}"
        ],
        "oracle": [
          "    let _deny_list = AsciiDenyList::new(false, \"abc.def\"); // precondition: deny_glyphless is false",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"abc.def\")).is_err()); // expected panic due to deny_list containing a dot",
          "    assert!(b'.' == b'.'); // precondition: b != b'.' at line 305 is false",
          "    assert!(0 < 3); // precondition: i < bytes.len() at line 301 is true for input length 3",
          "    assert!(b'c' < 0x80); // precondition: b < 0x80 at line 303 is true for ASCII character 'c'"
        ],
        "code": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"abc.def\");",
          "    let _deny_list = AsciiDenyList::new(false, \"abc.def\"); // precondition: deny_glyphless is false",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"abc.def\")).is_err()); // expected panic due to deny_list containing a dot",
          "    assert!(b'.' == b'.'); // precondition: b != b'.' at line 305 is false",
          "    assert!(0 < 3); // precondition: i < bytes.len() at line 301 is true for input length 3",
          "    assert!(b'c' < 0x80); // precondition: b < 0x80 at line 303 is true for ASCII character 'c'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"def..\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    std::panic::catch_unwind(|| AsciiDenyList::new(false, \"def..\")).is_err(),",
          "    true",
          "    );"
        ],
        "code": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"def..\");",
          "    assert_eq!(",
          "    std::panic::catch_unwind(|| AsciiDenyList::new(false, \"def..\")).is_err(),",
          "    true",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \".ghi\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \".ghi\").bits & (1u128 << b'.'), 1u128 << b'.');",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \".ghi\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"abc\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"123\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"-xyz\"); }).is_err());"
        ],
        "code": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \".ghi\");",
          "    assert_eq!(AsciiDenyList::new(false, \".ghi\").bits & (1u128 << b'.'), 1u128 << b'.');",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \".ghi\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"abc\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"123\"); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"-xyz\"); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"jkl.\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \"jkl.\").bits, /* expected bits value */);",
          "    assert!(AsciiDenyList::new(false, \"jkl.\").bits & DOT_MASK != 0);"
        ],
        "code": [
          "{",
          "    let _deny_list = AsciiDenyList::new(false, \"jkl.\");",
          "    assert_eq!(AsciiDenyList::new(false, \"jkl.\").bits, /* expected bits value */);",
          "    assert!(AsciiDenyList::new(false, \"jkl.\").bits & DOT_MASK != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]