[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_list = \"\\x21\\x22\\x23\\x24\\x25\"; // ASCII characters: '!', '\"', '#', '$', '%'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    AsciiDenyList::new(false, \"\\x21\\x22\\x23\\x24\\x25\");  // Should succeed, no prohibited characters",
          "    AsciiDenyList::new(false, \"\\x2E\");  // Should panic due to dot",
          "    AsciiDenyList::new(false, \"\\x2D\");  // Should panic due to hyphen",
          "    AsciiDenyList::new(false, \"\\x30\");  // Should panic due to digit '0'",
          "    AsciiDenyList::new(false, \"\\x61\");  // Should panic due to letter 'a'",
          "    AsciiDenyList::new(false, \"\\x41\");  // Should panic due to letter 'A'",
          "    AsciiDenyList::new(false, \"\\x7A\");  // Should panic due to letter 'z'",
          "    AsciiDenyList::new(false, \"\\x5A\");  // Should panic due to letter 'Z'",
          "    AsciiDenyList::new(false, \"\\x80\");  // Should panic due to non-ASCII character"
        ],
        "code": [
          "{",
          "    let deny_list = \"\\x21\\x22\\x23\\x24\\x25\"; // ASCII characters: '!', '\"', '#', '$', '%'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    AsciiDenyList::new(false, \"\\x21\\x22\\x23\\x24\\x25\");  // Should succeed, no prohibited characters",
          "    AsciiDenyList::new(false, \"\\x2E\");  // Should panic due to dot",
          "    AsciiDenyList::new(false, \"\\x2D\");  // Should panic due to hyphen",
          "    AsciiDenyList::new(false, \"\\x30\");  // Should panic due to digit '0'",
          "    AsciiDenyList::new(false, \"\\x61\");  // Should panic due to letter 'a'",
          "    AsciiDenyList::new(false, \"\\x41\");  // Should panic due to letter 'A'",
          "    AsciiDenyList::new(false, \"\\x7A\");  // Should panic due to letter 'z'",
          "    AsciiDenyList::new(false, \"\\x5A\");  // Should panic due to letter 'Z'",
          "    AsciiDenyList::new(false, \"\\x80\");  // Should panic due to non-ASCII character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_list = \"\\x7E\\x7F\"; // ASCII characters: '~', DEL (not allowed but testing edge)",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    let deny_list = \"\\x7E\\x7F\";",
          "    assert_eq!(deny_list_obj.bits, UPPER_CASE_MASK | GLYPHLESS_MASK | (1u128 << 0x7E) | (1u128 << 0x7F));",
          "    assert!(deny_list_obj.bits & (1u128 << b'.') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'0') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0);"
        ],
        "code": [
          "{",
          "    let deny_list = \"\\x7E\\x7F\"; // ASCII characters: '~', DEL (not allowed but testing edge)",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    let deny_list = \"\\x7E\\x7F\";",
          "    assert_eq!(deny_list_obj.bits, UPPER_CASE_MASK | GLYPHLESS_MASK | (1u128 << 0x7E) | (1u128 << 0x7F));",
          "    assert!(deny_list_obj.bits & (1u128 << b'.') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'0') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \"\\x30\"; // ASCII character: '0'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(deny_list_obj == AsciiDenyList::STD3);",
          "    assert_eq!(deny_list_obj.bits & (1u128 << b'0'), 0);",
          "    assert!(deny_list_obj.bits & GLYPHLESS_MASK == 0);",
          "    assert!(deny_list_obj.bits & UPPER_CASE_MASK != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'z') == 0);",
          "    assert!(deny_list_obj.bits & DOT_MASK == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0);"
        ],
        "code": [
          "{",
          "    let deny_list = \"\\x30\"; // ASCII character: '0'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    assert!(deny_list_obj == AsciiDenyList::STD3);",
          "    assert_eq!(deny_list_obj.bits & (1u128 << b'0'), 0);",
          "    assert!(deny_list_obj.bits & GLYPHLESS_MASK == 0);",
          "    assert!(deny_list_obj.bits & UPPER_CASE_MASK != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'z') == 0);",
          "    assert!(deny_list_obj.bits & DOT_MASK == 0);",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \"\\x61\"; // ASCII character: 'a'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'a'), 1u128 << b'a');",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'0') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'A') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'Z') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'.') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'-') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'a') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'z') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'0') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'5') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'8') == 0);"
        ],
        "code": [
          "{",
          "    let deny_list = \"\\x61\"; // ASCII character: 'a'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    assert_eq!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'a'), 1u128 << b'a');",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'0') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'A') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'Z') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'.') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'-') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'a') > 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'z') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'0') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'5') == 0);",
          "    assert!(AsciiDenyList::new(false, \"\\x61\").bits & (1u128 << b'8') == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \"\\x41\"; // ASCII character: 'A'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0, \"Deny list should contain 'A'\");",
          "    assert_eq!(deny_list_obj.bits & (1u128 << b'B'), 0, \"Deny list should not contain 'B'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'0') == 0, \"Deny list should not contain digit '0'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'9') == 0, \"Deny list should not contain digit '9'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'.') == 0, \"Deny list should not contain '.'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0, \"Deny list should not contain '-'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0, \"Deny list should not contain 'a'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'z') == 0, \"Deny list should not contain 'z'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0, \"Deny list must deny 'A' character\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0, \"Deny list must deny 'Z' character\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'1') == 0, \"Deny list should not contain digit '1'\");"
        ],
        "code": [
          "{",
          "    let deny_list = \"\\x41\"; // ASCII character: 'A'",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0, \"Deny list should contain 'A'\");",
          "    assert_eq!(deny_list_obj.bits & (1u128 << b'B'), 0, \"Deny list should not contain 'B'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'0') == 0, \"Deny list should not contain digit '0'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'9') == 0, \"Deny list should not contain digit '9'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'.') == 0, \"Deny list should not contain '.'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'-') == 0, \"Deny list should not contain '-'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'a') == 0, \"Deny list should not contain 'a'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'z') == 0, \"Deny list should not contain 'z'\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'A') != 0, \"Deny list must deny 'A' character\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'Z') != 0, \"Deny list must deny 'Z' character\");",
          "    assert!(deny_list_obj.bits & (1u128 << b'1') == 0, \"Deny list should not contain digit '1'\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \"-\"; // hyphen",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    AsciiDenyList::new(false, \"-\"); // hyphen should panic",
          "    AsciiDenyList::new(false, \".\"); // dot should panic",
          "    AsciiDenyList::new(false, \"0123456789\"); // digits should panic",
          "    AsciiDenyList::new(false, \"abcdefghijklmnopqrstuvwxyz\"); // lowercase letters should panic",
          "    AsciiDenyList::new(false, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"); // uppercase letters should panic",
          "    AsciiDenyList::new(false, \"\"); // empty string should not panic",
          "    AsciiDenyList::new(false, \"_.\"); // underscore and dot should not panic",
          "    AsciiDenyList::new(false, \"!@#$%^&*()\"); // special characters should not panic"
        ],
        "code": [
          "{",
          "    let deny_list = \"-\"; // hyphen",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    AsciiDenyList::new(false, \"-\"); // hyphen should panic",
          "    AsciiDenyList::new(false, \".\"); // dot should panic",
          "    AsciiDenyList::new(false, \"0123456789\"); // digits should panic",
          "    AsciiDenyList::new(false, \"abcdefghijklmnopqrstuvwxyz\"); // lowercase letters should panic",
          "    AsciiDenyList::new(false, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"); // uppercase letters should panic",
          "    AsciiDenyList::new(false, \"\"); // empty string should not panic",
          "    AsciiDenyList::new(false, \"_.\"); // underscore and dot should not panic",
          "    AsciiDenyList::new(false, \"!@#$%^&*()\"); // special characters should not panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \".\"; // dot",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    AsciiDenyList::new(false, \".\"); // should panic due to denied dot character",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"-\"); // should panic due to denied hyphen character",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"0123456789\"); // should panic due to denied digit characters",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"abcdefghijklmnopqrstuvwxyz\"); // should panic due to denied lowercase letters",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"); // should panic due to denied uppercase letters"
        ],
        "code": [
          "{",
          "    let deny_list = \".\"; // dot",
          "    let deny_list_obj = AsciiDenyList::new(false, deny_list);",
          "    AsciiDenyList::new(false, \".\"); // should panic due to denied dot character",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"-\"); // should panic due to denied hyphen character",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"0123456789\"); // should panic due to denied digit characters",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"abcdefghijklmnopqrstuvwxyz\"); // should panic due to denied lowercase letters",
          "    ",
          "    #[should_panic]",
          "    AsciiDenyList::new(false, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"); // should panic due to denied uppercase letters",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]