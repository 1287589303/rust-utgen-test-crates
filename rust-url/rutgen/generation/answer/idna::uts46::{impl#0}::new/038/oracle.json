[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_list = \"\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    let result = AsciiDenyList::new(false, \"\");",
          "    assert_eq!(result, AsciiDenyList::EMPTY);",
          "    let deny_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    assert_eq!(result.bits, UPPER_CASE_MASK | (1u128 << b'A') | (1u128 << b'B') | (1u128 << b'C') | (1u128 << b'D') | (1u128 << b'E') | (1u128 << b'F') | (1u128 << b'G') | (1u128 << b'H') | (1u128 << b'I') | (1u128 << b'J') | (1u128 << b'K') | (1u128 << b'L') | (1u128 << b'M') | (1u128 << b'N') | (1u128 << b'O') | (1u128 << b'P') | (1u128 << b'Q') | (1u128 << b'R') | (1u128 << b'S') | (1u128 << b'T') | (1u128 << b'U') | (1u128 << b'V') | (1u128 << b'W') | (1u128 << b'X') | (1u128 << b'Y') | (1u128 << b'Z'));",
          "    let deny_list = \"0123456789\";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());",
          "    let deny_list = \"-.\";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());",
          "    let deny_list = \" \";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let deny_list = \"\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    let result = AsciiDenyList::new(false, \"\");",
          "    assert_eq!(result, AsciiDenyList::EMPTY);",
          "    let deny_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    assert_eq!(result.bits, UPPER_CASE_MASK | (1u128 << b'A') | (1u128 << b'B') | (1u128 << b'C') | (1u128 << b'D') | (1u128 << b'E') | (1u128 << b'F') | (1u128 << b'G') | (1u128 << b'H') | (1u128 << b'I') | (1u128 << b'J') | (1u128 << b'K') | (1u128 << b'L') | (1u128 << b'M') | (1u128 << b'N') | (1u128 << b'O') | (1u128 << b'P') | (1u128 << b'Q') | (1u128 << b'R') | (1u128 << b'S') | (1u128 << b'T') | (1u128 << b'U') | (1u128 << b'V') | (1u128 << b'W') | (1u128 << b'X') | (1u128 << b'Y') | (1u128 << b'Z'));",
          "    let deny_list = \"0123456789\";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());",
          "    let deny_list = \"-.\";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());",
          "    let deny_list = \" \";",
          "    let result = std::panic::catch_unwind(|| { AsciiDenyList::new(false, deny_list); });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_list = \"!\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "}"
        ],
        "oracle": [
          "    let deny_list = \"!\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    assert_eq!(result, AsciiDenyList { bits: UPPER_CASE_MASK | (1u128 << b'!') });",
          "    assert!(result.bits & UPPER_CASE_MASK != 0);",
          "    assert!(result.bits & GLYPHLESS_MASK == 0);",
          "    assert!(result.bits & (1u128 << b'.') == 0);",
          "    assert!(result.bits & (1u128 << b'-') == 0);",
          "    assert!(result.bits & (1u128 << b'0') == 0);",
          "    assert!(result.bits & (1u128 << b'z') == 0);",
          "    assert!(result.bits & (1u128 << b'A') == 0);",
          "    assert!(result.bits & (1u128 << b'Z') == 0);",
          "    assert!(result.bits & (1u128 << b'!') != 0);"
        ],
        "code": [
          "{",
          "    let deny_list = \"!\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    let deny_list = \"!\";",
          "    let result = AsciiDenyList::new(false, deny_list);",
          "    assert_eq!(result, AsciiDenyList { bits: UPPER_CASE_MASK | (1u128 << b'!') });",
          "    assert!(result.bits & UPPER_CASE_MASK != 0);",
          "    assert!(result.bits & GLYPHLESS_MASK == 0);",
          "    assert!(result.bits & (1u128 << b'.') == 0);",
          "    assert!(result.bits & (1u128 << b'-') == 0);",
          "    assert!(result.bits & (1u128 << b'0') == 0);",
          "    assert!(result.bits & (1u128 << b'z') == 0);",
          "    assert!(result.bits & (1u128 << b'A') == 0);",
          "    assert!(result.bits & (1u128 << b'Z') == 0);",
          "    assert!(result.bits & (1u128 << b'!') != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_list = \"!\".repeat(64);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "}"
        ],
        "oracle": [
          "    let deny_list = \"!\".repeat(64);",
          "    assert_eq!(result, AsciiDenyList { bits: UPPER_CASE_MASK | (1u128 << b'!') });",
          "    assert!(deny_list.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);",
          "    assert!(result.bits & (1u128 << b'!') != 0);",
          "    assert!(result.bits & GLYPHLESS_MASK == 0);",
          "    assert!(result.bits & UPPER_CASE_MASK != 0);",
          "    assert!(result.bits & (1u128 << b'.') == 0);",
          "    assert!(result.bits & (1u128 << b'-') == 0);"
        ],
        "code": [
          "{",
          "    let deny_list = \"!\".repeat(64);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "    let deny_list = \"!\".repeat(64);",
          "    assert_eq!(result, AsciiDenyList { bits: UPPER_CASE_MASK | (1u128 << b'!') });",
          "    assert!(deny_list.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);",
          "    assert!(result.bits & (1u128 << b'!') != 0);",
          "    assert!(result.bits & GLYPHLESS_MASK == 0);",
          "    assert!(result.bits & UPPER_CASE_MASK != 0);",
          "    assert!(result.bits & (1u128 << b'.') == 0);",
          "    assert!(result.bits & (1u128 << b'-') == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_list = \"!\".repeat(65);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "}"
        ],
        "oracle": [
          "    let deny_list = \"!\".repeat(65);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "    assert_eq!(result.bits, AsciiDenyList::STD3.bits | (1u128 << b'!'));",
          "    assert!(result == AsciiDenyList::new(false, \"!\"));"
        ],
        "code": [
          "{",
          "    let deny_list = \"!\".repeat(65);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "    let deny_list = \"!\".repeat(65);",
          "    let result = AsciiDenyList::new(false, &deny_list);",
          "    assert_eq!(result.bits, AsciiDenyList::STD3.bits | (1u128 << b'!'));",
          "    assert!(result == AsciiDenyList::new(false, \"!\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]