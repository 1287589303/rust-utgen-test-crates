[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\"; // contains a digit",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\"; // contains a digit",
          "    AsciiDenyList::new(deny_glyphless, deny_list);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\"; // contains a digit",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\"; // contains a digit",
          "    AsciiDenyList::new(deny_glyphless, deny_list);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"a\"; // contains a lowercase letter",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(false, \"ASCII deny list must not contain letters.\");"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"a\"; // contains a lowercase letter",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(false, \"ASCII deny list must not contain letters.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"A\"; // contains an uppercase letter",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \"A\").bits, UPPER_CASE_MASK | (1u128 << b'A'));  // Test with uppercase letter 'A'",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"A\"); }).is_err());  // Expect panic due to uppercase letter in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"1\"); }).is_err());  // Expect panic due to digit '1' in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"-\"); }).is_err());  // Expect panic due to hyphen in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \".\"); }).is_err());  // Expect panic due to dot in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \" \" ); }).is_err());  // Expect panic due to space in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"\"); }).is_err());  // Expect panic due to non-ASCII character in deny_list"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"A\"; // contains an uppercase letter",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(AsciiDenyList::new(false, \"A\").bits, UPPER_CASE_MASK | (1u128 << b'A'));  // Test with uppercase letter 'A'",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"A\"); }).is_err());  // Expect panic due to uppercase letter in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"1\"); }).is_err());  // Expect panic due to digit '1' in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"-\"); }).is_err());  // Expect panic due to hyphen in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \".\"); }).is_err());  // Expect panic due to dot in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \" \" ); }).is_err());  // Expect panic due to space in deny_list",
          "    assert!(std::panic::catch_unwind(|| { AsciiDenyList::new(false, \"\"); }).is_err());  // Expect panic due to non-ASCII character in deny_list",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-\"; // contains a hyphen",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-\")).is_err(), \"Expected panic for deny_list containing a hyphen\");"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-\"; // contains a hyphen",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-\")).is_err(), \"Expected panic for deny_list containing a hyphen\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \".\"; // contains a dot",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \".\")).is_err());"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \".\"; // contains a dot",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \".\")).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"a0-.A\"; // contains a lowercase letter, a digit, a hyphen, and a dot",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(true, \"Should panic when deny_list contains a lowercase letter, a digit, a hyphen, and a dot.\");"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"a0-.A\"; // contains a lowercase letter, a digit, a hyphen, and a dot",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(true, \"Should panic when deny_list contains a lowercase letter, a digit, a hyphen, and a dot.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]