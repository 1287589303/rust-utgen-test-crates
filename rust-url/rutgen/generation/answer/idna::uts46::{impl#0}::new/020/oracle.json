[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0123456789\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deny_list_result.bits & (1u128 << b'0'), 1 << b'0');",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'9'), 1 << b'9');",
          "    assert!(deny_list_result.bits & (1u128 << b'.') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'-') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'A') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'Z') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'z') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'!') == 0);"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0123456789\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'0'), 1 << b'0');",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'9'), 1 << b'9');",
          "    assert!(deny_list_result.bits & (1u128 << b'.') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'-') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'A') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'Z') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'a') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'z') == 0);",
          "    assert!(deny_list_result.bits & (1u128 << b'!') == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"ASCII deny list must not contain digits.\")]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'0'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'1'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'2'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'3'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'4'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'5'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'6'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'7'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'8'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'9'), 0);"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'0'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'1'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'2'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'3'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'4'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'5'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'6'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'7'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'8'), 0);",
          "    assert_eq!(deny_list_result.bits & (1u128 << b'9'), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"ASCII deny list must not contain digits.\")]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"9\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deny_glyphless, false); // Precondition: deny_glyphless at line 296 must be false",
          "    assert!(i < bytes.len()); // Precondition: i < bytes.len() at line 301 must be true",
          "    assert!(b < 0x80); // Precondition: b < 0x80 at line 303 must be true",
          "    assert!(b != b'.'); // Precondition: b != b'.' at line 305 must be true",
          "    assert!(b != b'-'); // Precondition: b != b'-' at line 306 must be true",
          "    assert!((b >= b'0') && (b <= b'9')); // Precondition: (b >= b'0') and (b <= b'9') must be true with b == b'9'"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"9\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(deny_glyphless, false); // Precondition: deny_glyphless at line 296 must be false",
          "    assert!(i < bytes.len()); // Precondition: i < bytes.len() at line 301 must be true",
          "    assert!(b < 0x80); // Precondition: b < 0x80 at line 303 must be true",
          "    assert!(b != b'.'); // Precondition: b != b'.' at line 305 must be true",
          "    assert!(b != b'-'); // Precondition: b != b'-' at line 306 must be true",
          "    assert!((b >= b'0') && (b <= b'9')); // Precondition: (b >= b'0') and (b <= b'9') must be true with b == b'9'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"ASCII deny list must not contain digits.\")]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0123456789\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \"0123456789\").bits, UPPER_CASE_MASK | (1u128 << b'0') | (1u128 << b'1') | (1u128 << b'2') | (1u128 << b'3') | (1u128 << b'4') | (1u128 << b'5') | (1u128 << b'6') | (1u128 << b'7') | (1u128 << b'8') | (1u128 << b'9'));",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"0123456789\")).is_err());"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"0123456789\";",
          "    let deny_list_result = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(AsciiDenyList::new(false, \"0123456789\").bits, UPPER_CASE_MASK | (1u128 << b'0') | (1u128 << b'1') | (1u128 << b'2') | (1u128 << b'3') | (1u128 << b'4') | (1u128 << b'5') | (1u128 << b'6') | (1u128 << b'7') | (1u128 << b'8') | (1u128 << b'9'));",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"0123456789\")).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]