[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-\"; // Hyphen included, should panic",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-\")).is_err());  // Test for panic on hyphen in deny list"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-\"; // Hyphen included, should panic",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-\")).is_err());  // Test for panic on hyphen in deny list",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-!@#$%^&*()\"; // Hyphen included, should panic",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(AsciiDenyList::new(false, \"-!@#$%^&*()\").bits, UPPER_CASE_MASK | (1u128 << b'-'));  // Should panic due to hyphen",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-!@#$%^&*()\")).is_err()); // Confirm panic occurs",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"\")).is_ok()); // Empty deny list should not panic",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"abc\")).is_ok()); // Allowed deny list should not panic",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"@#$%^&*()\")).is_ok()); // Allowed deny list should not panic"
        ],
        "code": [
          "{",
          "    let deny_glyphless = false;",
          "    let deny_list = \"-!@#$%^&*()\"; // Hyphen included, should panic",
          "    let _deny_list = AsciiDenyList::new(deny_glyphless, deny_list);",
          "    assert_eq!(AsciiDenyList::new(false, \"-!@#$%^&*()\").bits, UPPER_CASE_MASK | (1u128 << b'-'));  // Should panic due to hyphen",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"-!@#$%^&*()\")).is_err()); // Confirm panic occurs",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"\")).is_ok()); // Empty deny list should not panic",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"abc\")).is_ok()); // Allowed deny list should not panic",
          "    assert!(std::panic::catch_unwind(|| AsciiDenyList::new(false, \"@#$%^&*()\")).is_ok()); // Allowed deny list should not panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]