[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{0300}', 'a', 'b']; // Combining mark as the first character",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let fail_fast = true;",
          "",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(had_errors);",
          "    assert_eq!(label[0], '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{0300}', 'a', 'b']; // Combining mark as the first character",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let fail_fast = true;",
          "",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "    assert_eq!(result, true);",
          "    assert!(had_errors);",
          "    assert_eq!(label[0], '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{2060}', 'a', 'b']; // Another combining mark as the first character",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = true;",
          "",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{2060}', 'a', 'b'];",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = true;",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "    assert_eq!(result, true);",
          "    assert!(had_errors);",
          "    assert_eq!(label[0], '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{2060}', 'a', 'b']; // Another combining mark as the first character",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = true;",
          "",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: Vec<char> = vec!['\\u{2060}', 'a', 'b'];",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = true;",
          "    let result = uts46.check_label(hyphens, &mut label, fail_fast, &mut had_errors, true, false);",
          "    assert_eq!(result, true);",
          "    assert!(had_errors);",
          "    assert_eq!(label[0], '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]