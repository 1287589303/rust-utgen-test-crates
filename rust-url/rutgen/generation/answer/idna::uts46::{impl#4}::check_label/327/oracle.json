[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: &mut [char] = &mut ['a', '\\u{200D}', 'b']; // contains U+200D",
          "    let result = uts46.check_label(",
          "        Hyphens::Check,",
          "        label,",
          "        true,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "}"
        ],
        "oracle": [
          "    result == false",
          "    had_errors == true",
          "    label[1] == '\\u{FFFD}'"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: &mut [char] = &mut ['a', '\\u{200D}', 'b']; // contains U+200D",
          "    let result = uts46.check_label(",
          "        Hyphens::Check,",
          "        label,",
          "        true,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "    result == false",
          "    had_errors == true",
          "    label[1] == '\\u{FFFD}'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: &mut [char] = &mut ['c', '\\u{200C}', 'd', '\\u{200D}']; // contains U+200C and U+200D",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        label,",
          "        true,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "}"
        ],
        "oracle": [
          "    result == true",
          "    had_errors == true",
          "    label[1] == '\\u{FFFD}'",
          "    label[2] == '\\u{200D}'",
          "    label[3] == '\\u{FFFD}'",
          "    label.len() == 4"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let mut had_errors = false;",
          "    let mut label: &mut [char] = &mut ['c', '\\u{200C}', 'd', '\\u{200D}']; // contains U+200C and U+200D",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        label,",
          "        true,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "    result == true",
          "    had_errors == true",
          "    label[1] == '\\u{FFFD}'",
          "    label[2] == '\\u{200D}'",
          "    label[3] == '\\u{FFFD}'",
          "    label.len() == 4",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]