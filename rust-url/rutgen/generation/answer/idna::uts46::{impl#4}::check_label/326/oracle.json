[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        &mut label,",
          "        false,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(had_errors);",
          "    assert!(label[0] == '\\u{200D}');",
          "    assert!(label[1] == '\\u{200D}');",
          "    assert!(label[2] == '\\u{FFFD}');",
          "    assert!(label[3] == '\\u{FFFD}');",
          "    assert!(label.len() > PUNYCODE_ENCODE_MAX_INPUT_LENGTH);",
          "    assert!(is_ascii(&label) == false);"
        ],
        "code": [
          "{",
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        &mut label,",
          "        false,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "    assert_eq!(result, false);",
          "    assert!(had_errors);",
          "    assert!(label[0] == '\\u{200D}');",
          "    assert!(label[1] == '\\u{200D}');",
          "    assert!(label[2] == '\\u{FFFD}');",
          "    assert!(label[3] == '\\u{FFFD}');",
          "    assert!(label.len() > PUNYCODE_ENCODE_MAX_INPUT_LENGTH);",
          "    assert!(is_ascii(&label) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        &mut label,",
          "        false,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "    Hyphens::CheckFirstLast,",
          "    &mut label,",
          "    false,",
          "    &mut had_errors,",
          "    false,",
          "    true,",
          "    );",
          "    assert_eq!(result, false);",
          "    assert!(had_errors);",
          "    assert!(label[PUNYCODE_ENCODE_MAX_INPUT_LENGTH] == '\\u{FFFD}');",
          "    assert!(!is_ascii(&label));"
        ],
        "code": [
          "{",
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "        Hyphens::CheckFirstLast,",
          "        &mut label,",
          "        false,",
          "        &mut had_errors,",
          "        false,",
          "        true,",
          "    );",
          "    let mut had_errors = false;",
          "    let mut label: [char; 200] = ['\\u{200D}'; 200];",
          "    let uts46 = Uts46::new();",
          "    let result = uts46.check_label(",
          "    Hyphens::CheckFirstLast,",
          "    &mut label,",
          "    false,",
          "    &mut had_errors,",
          "    false,",
          "    true,",
          "    );",
          "    assert_eq!(result, false);",
          "    assert!(had_errors);",
          "    assert!(label[PUNYCODE_ENCODE_MAX_INPUT_LENGTH] == '\\u{FFFD}');",
          "    assert!(!is_ascii(&label));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]