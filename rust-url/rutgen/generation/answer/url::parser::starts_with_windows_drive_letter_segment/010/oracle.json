[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"C:/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"B:\".chars() }), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"C:/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"B:\".chars() }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"D:\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:\\\\\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z:/\".chars() }), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"D:\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:\\\\\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z:/\".chars() }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"E|#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"E|#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"C|/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"D|?\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"A|\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input_str = \"E|#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    let input_str = \"E|#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"C|/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"D|?\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "    ",
          "    let input_str = \"A|\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"F|?\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G|#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"X:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"M:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Q:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"T|#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"R:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"b|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"K:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"X|/\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"1:/\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"|:\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A.tmp\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: picard.chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"AB:C\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"ZZ:?:\".chars() }), false);"
        ],
        "code": [
          "{",
          "    let input_str = \"F|?\";",
          "    let input = Input { chars: input_str.chars() };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G|#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"X:#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"M:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Q:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"T|#\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"R:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"b|?\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"K:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"X|/\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"1:/\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"|:\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A.tmp\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: picard.chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"AB:C\".chars() }), false);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"ZZ:?:\".chars() }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]