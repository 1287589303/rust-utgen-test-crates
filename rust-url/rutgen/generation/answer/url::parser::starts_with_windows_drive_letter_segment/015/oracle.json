[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"1:/\"[..].chars() }; // '1' is not an ASCII alphabetic character, ':' is valid, '/' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"1:/\"[..].chars() }; // '1' is not an ASCII alphabetic character, ':' is valid, '/' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"!|?\"[..].chars() }; // '!' is not an ASCII alphabetic character, '|' is valid, '?' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"!|?\"[..].chars() }; // '!' is not an ASCII alphabetic character, '|' is valid, '?' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"5:/\\\\\"[..].chars() }; // '5' is not an ASCII alphabetic character, ':' is valid, '\\\\' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"5:/\\\\\"[..].chars() }; // '5' is not an ASCII alphabetic character, ':' is valid, '\\\\' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"\\x01:?\"[..].chars() }; // control character (non-alphabetic), ':' is valid, '?' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"\\x01:?\"[..].chars() }; // control character (non-alphabetic), ':' is valid, '?' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"A@/\"[..].chars() }; // 'A' is valid (ascii_alpha true), '@' is invalid (not ':' or '|'), '/' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"A@/\"[..].chars() }; // 'A' is valid (ascii_alpha true), '@' is invalid (not ':' or '|'), '/' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input { chars: \"B-#\"[..].chars() }; // 'B' is valid, '-' is invalid, '#' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);"
        ],
        "code": [
          "{",
          "    let input = Input { chars: \"B-#\"[..].chars() }; // 'B' is valid, '-' is invalid, '#' is third",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]