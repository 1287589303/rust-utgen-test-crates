[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"C:/example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D|/path\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z|?query\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:/some\\path\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:/.more/example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H|#fragment\".chars() }), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"C:/example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:/\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\\\\\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D|/path\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"Z|?query\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:/some\\path\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F:\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G|\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"A:/.more/example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H|#fragment\".chars() }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"D:|example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|/example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|#example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|?example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\\\\example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"D:|example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|/example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|#example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|?example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\\\\example\".chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|\".chars() }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"E:\\\\example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str_b = \"E|example\";",
          "    let input_b = Input {",
          "    chars: input_str_b.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_b), true);",
          "    let input_str_c = \"E:/example\";",
          "    let input_c = Input {",
          "    chars: input_str_c.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_c), true);",
          "    let input_str_d = \"E#example\";",
          "    let input_d = Input {",
          "    chars: input_str_d.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_d), true);",
          "    let input_str_e = \"E?example\";",
          "    let input_e = Input {",
          "    chars: input_str_e.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_e), true);",
          "    let input_str_f = \"E:example\";",
          "    let input_f = Input {",
          "    chars: input_str_f.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_f), true);",
          "    let input_str_g = \"E|\";",
          "    let input_g = Input {",
          "    chars: input_str_g.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_g), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"E:\\\\example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str_b = \"E|example\";",
          "    let input_b = Input {",
          "    chars: input_str_b.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_b), true);",
          "    let input_str_c = \"E:/example\";",
          "    let input_c = Input {",
          "    chars: input_str_c.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_c), true);",
          "    let input_str_d = \"E#example\";",
          "    let input_d = Input {",
          "    chars: input_str_d.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_d), true);",
          "    let input_str_e = \"E?example\";",
          "    let input_e = Input {",
          "    chars: input_str_e.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_e), true);",
          "    let input_str_f = \"E:example\";",
          "    let input_f = Input {",
          "    chars: input_str_f.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_f), true);",
          "    let input_str_g = \"E|\";",
          "    let input_g = Input {",
          "    chars: input_str_g.chars(),",
          "    };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input_g), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"F:?example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F:/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:?\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:#\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G:/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H:|\\\\example\"_.chars() }), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"F:?example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"F:/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"D:|/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"C:?\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"E:#\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"G:/\"_.chars() }), true);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&Input { chars: \"H:|\\\\example\"_.chars() }), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"G:#example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"C:/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"D|/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"E:#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"F:\\\\\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);"
        ],
        "code": [
          "{",
          "    let input_str = \"G:#example\";",
          "    let input = Input {",
          "        chars: input_str.chars(),",
          "    };",
          "    starts_with_windows_drive_letter_segment(&input);",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"C:/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"D|/\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"E:#\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "    let input_str = \"F:\\\\\\\\\";",
          "    let input = Input { chars: input_str.chars() };",
          "    assert_eq!(starts_with_windows_drive_letter_segment(&input), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]