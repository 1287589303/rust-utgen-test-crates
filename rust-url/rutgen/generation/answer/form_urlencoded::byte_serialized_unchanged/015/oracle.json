[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'.');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'*');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'_');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'-');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'5');",
          "    assert_eq!(result, false);",
          "    let result = byte_serialized_unchanged(b'A');",
          "    assert_eq!(result, false);",
          "    let result = byte_serialized_unchanged(b'a');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'.');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'*');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'_');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'-');",
          "    assert_eq!(result, true);",
          "    let result = byte_serialized_unchanged(b'5');",
          "    assert_eq!(result, false);",
          "    let result = byte_serialized_unchanged(b'A');",
          "    assert_eq!(result, false);",
          "    let result = byte_serialized_unchanged(b'a');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'*');",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'*'), \"Expected true for byte b'*'\");",
          "    assert!(byte_serialized_unchanged(b'-'), \"Expected true for byte b'-'\");",
          "    assert!(byte_serialized_unchanged(b'.'), \"Expected true for byte b'.'\");",
          "    assert!(byte_serialized_unchanged(b'_'), \"Expected true for byte b'_'\");",
          "    assert!(!byte_serialized_unchanged(b'0'), \"Expected false for byte b'0'\");",
          "    assert!(!byte_serialized_unchanged(b'Z'), \"Expected false for byte b'Z'\");",
          "    assert!(!byte_serialized_unchanged(b'a'), \"Expected false for byte b'a'\");",
          "    assert!(!byte_serialized_unchanged(b'z'), \"Expected false for byte b'z'\");"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'*');",
          "    assert!(byte_serialized_unchanged(b'*'), \"Expected true for byte b'*'\");",
          "    assert!(byte_serialized_unchanged(b'-'), \"Expected true for byte b'-'\");",
          "    assert!(byte_serialized_unchanged(b'.'), \"Expected true for byte b'.'\");",
          "    assert!(byte_serialized_unchanged(b'_'), \"Expected true for byte b'_'\");",
          "    assert!(!byte_serialized_unchanged(b'0'), \"Expected false for byte b'0'\");",
          "    assert!(!byte_serialized_unchanged(b'Z'), \"Expected false for byte b'Z'\");",
          "    assert!(!byte_serialized_unchanged(b'a'), \"Expected false for byte b'a'\");",
          "    assert!(!byte_serialized_unchanged(b'z'), \"Expected false for byte b'z'\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'_');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'B'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'_');",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'B'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'-');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'-');",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'0');",
          "}"
        ],
        "oracle": [
          "    assert!(!byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(!byte_serialized_unchanged(b'A'));",
          "    assert!(!byte_serialized_unchanged(b'Z'));",
          "    assert!(!byte_serialized_unchanged(b'a'));",
          "    assert!(!byte_serialized_unchanged(b'z'));"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'0');",
          "    assert!(!byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(!byte_serialized_unchanged(b'A'));",
          "    assert!(!byte_serialized_unchanged(b'Z'));",
          "    assert!(!byte_serialized_unchanged(b'a'));",
          "    assert!(!byte_serialized_unchanged(b'z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'A');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'1'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'A');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'1'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'a');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]