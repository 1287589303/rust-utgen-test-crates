[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'.';",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == true);",
          "    assert!(byte_serialized_unchanged(b'9') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'.';",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == true);",
          "    assert!(byte_serialized_unchanged(b'9') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'*';",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'5'));",
          "    assert!(byte_serialized_unchanged(b'9'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'Z'));",
          "    assert!(byte_serialized_unchanged(b'a'));",
          "    assert!(byte_serialized_unchanged(b'z'));",
          "    assert!(byte_serialized_unchanged(b'_'));"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'*';",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'5'));",
          "    assert!(byte_serialized_unchanged(b'9'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'Z'));",
          "    assert!(byte_serialized_unchanged(b'a'));",
          "    assert!(byte_serialized_unchanged(b'z'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'_';",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'_';",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'-';",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'-';",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'5'; // testing with a number",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), true);"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'5'; // testing with a number",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'5'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'A'; // testing with an uppercase letter",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'A'; // testing with an uppercase letter",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = b'a'; // testing with a lowercase letter",
          "    let result = byte_serialized_unchanged(byte);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'5'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'z'));"
        ],
        "code": [
          "{",
          "    let byte: u8 = b'a'; // testing with a lowercase letter",
          "    let result = byte_serialized_unchanged(byte);",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'0'));",
          "    assert!(byte_serialized_unchanged(b'5'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]