[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'.');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'.');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'*');",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'*');",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'_');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'_');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'-');",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'Z'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(byte_serialized_unchanged(b'a'));",
          "    assert!(byte_serialized_unchanged(b'z'));",
          "    assert!(!byte_serialized_unchanged(b'5'));"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'-');",
          "    assert!(byte_serialized_unchanged(b'*'));",
          "    assert!(byte_serialized_unchanged(b'-'));",
          "    assert!(byte_serialized_unchanged(b'.'));",
          "    assert!(byte_serialized_unchanged(b'A'));",
          "    assert!(byte_serialized_unchanged(b'Z'));",
          "    assert!(byte_serialized_unchanged(b'_'));",
          "    assert!(byte_serialized_unchanged(b'a'));",
          "    assert!(byte_serialized_unchanged(b'z'));",
          "    assert!(!byte_serialized_unchanged(b'5'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'0');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'0');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'9');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'9');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'A');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'B'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'@'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'A');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'B'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'a'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'@'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'Z');",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'Z');",
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'a') == true);",
          "    assert!(byte_serialized_unchanged(b'z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'a');",
          "}"
        ],
        "oracle": [
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'1') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'a');",
          "    assert!(byte_serialized_unchanged(b'.') == true);",
          "    assert!(byte_serialized_unchanged(b'*') == true);",
          "    assert!(byte_serialized_unchanged(b'-') == true);",
          "    assert!(byte_serialized_unchanged(b'_') == true);",
          "    assert!(byte_serialized_unchanged(b'A') == true);",
          "    assert!(byte_serialized_unchanged(b'Z') == true);",
          "    assert!(byte_serialized_unchanged(b'0') == false);",
          "    assert!(byte_serialized_unchanged(b'1') == false);",
          "    assert!(byte_serialized_unchanged(b'9') == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = byte_serialized_unchanged(b'z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);"
        ],
        "code": [
          "{",
          "    let result = byte_serialized_unchanged(b'z');",
          "    assert_eq!(byte_serialized_unchanged(b'.'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'*'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'_'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'-'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'A'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'Z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'z'), true);",
          "    assert_eq!(byte_serialized_unchanged(b'0'), false);",
          "    assert_eq!(byte_serialized_unchanged(b'9'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]