[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(35),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeFragment), 35);",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.byte_at(35), b'#');"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(35),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeFragment), 35);",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.byte_at(35), b'#');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/#\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: Some(22),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeFragment), 22);",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());",
          "    assert_eq!(url.index(Position::AfterQuery), url.serialization.len());",
          "    assert_eq!(url.index(Position::BeforePath), 21);",
          "    assert_eq!(url.index(Position::AfterHost), 20);",
          "    assert_eq!(url.index(Position::BeforePort), 20);",
          "    assert_eq!(url.index(Position::AfterPort), 20);",
          "    assert_eq!(url.index(Position::BeforeUsername), 4);",
          "    assert_eq!(url.index(Position::AfterUsername), 4);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "    assert_eq!(url.index(Position::AfterScheme), 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/#\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: Some(22),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeFragment), 22);",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());",
          "    assert_eq!(url.index(Position::AfterQuery), url.serialization.len());",
          "    assert_eq!(url.index(Position::BeforePath), 21);",
          "    assert_eq!(url.index(Position::AfterHost), 20);",
          "    assert_eq!(url.index(Position::BeforePort), 20);",
          "    assert_eq!(url.index(Position::AfterPort), 20);",
          "    assert_eq!(url.index(Position::BeforeUsername), 4);",
          "    assert_eq!(url.index(Position::AfterUsername), 4);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "    assert_eq!(url.index(Position::AfterScheme), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: Some(22),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeFragment), 21);",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());",
          "    assert!(url.fragment_start.is_some());",
          "    assert!(url.byte_at(url.fragment_start.unwrap()) == b'#');"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: Some(22),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeFragment), 21);",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());",
          "    assert!(url.fragment_start.is_some());",
          "    assert!(url.byte_at(url.fragment_start.unwrap()) == b'#');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]