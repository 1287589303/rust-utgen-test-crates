[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://username:password@host:80/path?query#fragment\".to_string(),",
          "        scheme_end: 4, // \"http\" length",
          "        username_end: 12, // \"username\" length (4 + length of \"://\")",
          "        host_start: 13, // index after \"username:password@\"",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 15,",
          "        query_start: Some(19),",
          "        fragment_start: Some(25),",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "    assert_eq!(url.index(Position::AfterScheme), 4);",
          "    assert_eq!(url.index(Position::BeforeUsername), 4 + \"://\".len());",
          "    assert_eq!(url.index(Position::AfterUsername), 12);",
          "    assert_eq!(url.index(Position::BeforePassword), 12);",
          "    assert_eq!(url.index(Position::AfterPassword), 13);",
          "    assert_eq!(url.index(Position::BeforeHost), 13);",
          "    assert_eq!(url.index(Position::AfterHost), 14);",
          "    assert_eq!(url.index(Position::BeforePort), 14 + \":\".len());",
          "    assert_eq!(url.index(Position::AfterPort), 14 + \":\".len() + count_digits(80));",
          "    assert_eq!(url.index(Position::BeforePath), 15);",
          "    assert_eq!(url.index(Position::AfterPath), 19);",
          "    assert_eq!(url.index(Position::BeforeQuery), 19);",
          "    assert_eq!(url.index(Position::AfterQuery), 25);",
          "    assert_eq!(url.index(Position::BeforeFragment), 25);",
          "    assert_eq!(url.index(Position::AfterFragment), 25);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://username:password@host:80/path?query#fragment\".to_string(),",
          "        scheme_end: 4, // \"http\" length",
          "        username_end: 12, // \"username\" length (4 + length of \"://\")",
          "        host_start: 13, // index after \"username:password@\"",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 15,",
          "        query_start: Some(19),",
          "        fragment_start: Some(25),",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "    assert_eq!(url.index(Position::AfterScheme), 4);",
          "    assert_eq!(url.index(Position::BeforeUsername), 4 + \"://\".len());",
          "    assert_eq!(url.index(Position::AfterUsername), 12);",
          "    assert_eq!(url.index(Position::BeforePassword), 12);",
          "    assert_eq!(url.index(Position::AfterPassword), 13);",
          "    assert_eq!(url.index(Position::BeforeHost), 13);",
          "    assert_eq!(url.index(Position::AfterHost), 14);",
          "    assert_eq!(url.index(Position::BeforePort), 14 + \":\".len());",
          "    assert_eq!(url.index(Position::AfterPort), 14 + \":\".len() + count_digits(80));",
          "    assert_eq!(url.index(Position::BeforePath), 15);",
          "    assert_eq!(url.index(Position::AfterPath), 19);",
          "    assert_eq!(url.index(Position::BeforeQuery), 19);",
          "    assert_eq!(url.index(Position::AfterQuery), 25);",
          "    assert_eq!(url.index(Position::BeforeFragment), 25);",
          "    assert_eq!(url.index(Position::AfterFragment), 25);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://user:pass@localhost:8080\".to_string(),",
          "        scheme_end: 5, // \"https\" length",
          "        username_end: 9, // \"user\" length (5 + length of \"://\")",
          "        host_start: 10, // index after \"user:pass@\"",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 13,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    let url = Url { serialization: \"https://user:pass@localhost:8080\".to_string(), scheme_end: 5, username_end: 9, host_start: 10, host_end: 12, host: HostInternal::Domain, port: Some(8080), path_start: 13, query_start: None, fragment_start: None }; let position = Position::BeforeUsername; assert_eq!(url.index(position), 8);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://user:pass@localhost:8080\".to_string(),",
          "        scheme_end: 5, // \"https\" length",
          "        username_end: 9, // \"user\" length (5 + length of \"://\")",
          "        host_start: 10, // index after \"user:pass@\"",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 13,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "    let url = Url { serialization: \"https://user:pass@localhost:8080\".to_string(), scheme_end: 5, username_end: 9, host_start: 10, host_end: 12, host: HostInternal::Domain, port: Some(8080), path_start: 13, query_start: None, fragment_start: None }; let position = Position::BeforeUsername; assert_eq!(url.index(position), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://:password@127.0.0.1\".to_string(),",
          "        scheme_end: 4, // \"ftp\" length",
          "        username_end: 5, // only password, so username_end is right after \"://\"",
          "        host_start: 9, // index after \"127.0.0.1\"",
          "        host_end: 10,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 11,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeUsername), 4 + \"://\".len());",
          "    assert!(url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://:password@127.0.0.1\".to_string(),",
          "        scheme_end: 4, // \"ftp\" length",
          "        username_end: 5, // only password, so username_end is right after \"://\"",
          "        host_start: 9, // index after \"127.0.0.1\"",
          "        host_end: 10,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 11,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeUsername), 4 + \"://\".len());",
          "    assert!(url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]