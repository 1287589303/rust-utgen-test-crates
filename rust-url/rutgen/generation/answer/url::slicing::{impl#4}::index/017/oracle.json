[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:8080/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 34);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:8080/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "    assert_eq!(result, 34);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:1/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(1),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 30);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:1/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(1),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "    assert_eq!(result, 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:65535/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 30);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@hostname:65535/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 13,",
          "        host_start: 22,",
          "        host_end: 29,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 30,",
          "        query_start: Some(36),",
          "        fragment_start: Some(42),",
          "    };",
          "    let result = url.index(Position::AfterPort);",
          "    assert_eq!(result, 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]