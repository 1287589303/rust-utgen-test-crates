[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username@host.com:8080/path?query#fragment\"),",
          "        scheme_end: 4, // Position after \"http\"",
          "        username_end: 13, // Position after \"username\"",
          "        host_start: 14, // Position before \"host.com\"",
          "        host_end: 25, // Position after \"host.com\"",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 26, // Position before \"/path\"",
          "        query_start: Some(31), // Position before \"?query\"",
          "        fragment_start: Some(37), // Position before \"#fragment\"",
          "    };",
          "    ",
          "    let position = Position::AfterPassword;",
          "    url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPassword), 13);",
          "    assert!(url.has_authority());",
          "    assert!(url.byte_at(url.username_end) != b':');",
          "    assert!(url.byte_at(url.host_start - \"@\".len() as u32) == b'@');"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username@host.com:8080/path?query#fragment\"),",
          "        scheme_end: 4, // Position after \"http\"",
          "        username_end: 13, // Position after \"username\"",
          "        host_start: 14, // Position before \"host.com\"",
          "        host_end: 25, // Position after \"host.com\"",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 26, // Position before \"/path\"",
          "        query_start: Some(31), // Position before \"?query\"",
          "        fragment_start: Some(37), // Position before \"#fragment\"",
          "    };",
          "    ",
          "    let position = Position::AfterPassword;",
          "    url.index(position);",
          "    assert_eq!(url.index(Position::AfterPassword), 13);",
          "    assert!(url.has_authority());",
          "    assert!(url.byte_at(url.username_end) != b':');",
          "    assert!(url.byte_at(url.host_start - \"@\".len() as u32) == b'@');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]