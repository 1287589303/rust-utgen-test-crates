[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@host:8080/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 17,",
          "        host_end: 21,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: Some(28),",
          "        fragment_start: Some(34),",
          "    };",
          "    ",
          "    let result = url.index(Position::AfterScheme);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://username:password@host:8080/path?query#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 16,",
          "        host_start: 17,",
          "        host_end: 21,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: Some(28),",
          "        fragment_start: Some(34),",
          "    };",
          "    ",
          "    let result = url.index(Position::AfterScheme);",
          "    assert_eq!(result, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://user:pass@localhost:3000\"),",
          "        scheme_end: 5,",
          "        username_end: 9,",
          "        host_start: 10,",
          "        host_end: 13,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeUsername);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 5);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://user:pass@localhost:3000\"),",
          "        scheme_end: 5,",
          "        username_end: 9,",
          "        host_start: 10,",
          "        host_end: 13,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 14,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeUsername);",
          "    assert_eq!(result, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://user:pass@host/path\"),",
          "        scheme_end: 6,",
          "        username_end: 10,",
          "        host_start: 11,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterUsername);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 6);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://user:pass@host/path\"),",
          "        scheme_end: 6,",
          "        username_end: 10,",
          "        host_start: 11,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 16,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterUsername);",
          "    assert_eq!(result, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://localhost:80/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 15,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeHost);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 7);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://localhost:80/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 15,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeHost);",
          "    assert_eq!(result, 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterHost);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterHost);",
          "    assert_eq!(result, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:3000/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforePort);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, url.scheme_end as usize);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:3000/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforePort);",
          "    assert_eq!(result, url.scheme_end as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:3000/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterPort);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, url.scheme_end as usize);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:3000/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(3000),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterPort);",
          "    assert_eq!(result, url.scheme_end as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:8080/path/to/file\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforePath);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, url.scheme_end as usize);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host:8080/path/to/file\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforePath);",
          "    assert_eq!(result, url.scheme_end as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path/to/file\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterPath);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, url.scheme_end as usize);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path/to/file\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::AfterPath);",
          "    assert_eq!(result, url.scheme_end as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeQuery);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let result = url.index(Position::BeforeQuery);",
          "    assert_eq!(result, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: Some(24),",
          "    };",
          "",
          "    let result = url.index(Position::AfterQuery);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterScheme), 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: Some(24),",
          "    };",
          "",
          "    let result = url.index(Position::AfterQuery);",
          "    assert_eq!(url.index(Position::AfterScheme), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: Some(24),",
          "    };",
          "",
          "    let result = url.index(Position::BeforeFragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: Some(16),",
          "        fragment_start: Some(24),",
          "    };",
          "",
          "    let result = url.index(Position::BeforeFragment);",
          "    assert_eq!(result, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: Some(18),",
          "    };",
          "",
          "    let result = url.index(Position::AfterFragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 18);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://host/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 12,",
          "        query_start: None,",
          "        fragment_start: Some(18),",
          "    };",
          "",
          "    let result = url.index(Position::AfterFragment);",
          "    assert_eq!(result, 18);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]