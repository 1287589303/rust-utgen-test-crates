[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(33),",
          "    };",
          "    ",
          "    let position = Position::BeforePath;",
          "    let result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 21);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(33),",
          "    };",
          "    ",
          "    let position = Position::BeforePath;",
          "    let result = url.index(position);",
          "    assert_eq!(result, 21);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(33),",
          "    };",
          "    ",
          "    let position = Position::AfterPath;",
          "    let result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    url.index(Position::BeforePath) == url.path_start as usize",
          "    url.index(Position::AfterPath) == 33",
          "    url.index(Position::BeforeScheme) == 0",
          "    url.index(Position::AfterScheme) == 4",
          "    url.index(Position::BeforeUsername) == 4",
          "    url.index(Position::AfterUsername) == 4",
          "    url.index(Position::BeforePassword) == 4",
          "    url.index(Position::AfterPassword) == 7",
          "    url.index(Position::BeforeHost) == 7",
          "    url.index(Position::AfterHost) == 16",
          "    url.index(Position::BeforePort) == 16",
          "    url.index(Position::AfterPort) == 16",
          "    url.index(Position::BeforeQuery) == 27",
          "    url.index(Position::AfterQuery) == 33",
          "    url.index(Position::BeforeFragment) == 33",
          "    url.index(Position::AfterFragment) == 33"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(27),",
          "        fragment_start: Some(33),",
          "    };",
          "    ",
          "    let position = Position::AfterPath;",
          "    let result = url.index(position);",
          "    url.index(Position::BeforePath) == url.path_start as usize",
          "    url.index(Position::AfterPath) == 33",
          "    url.index(Position::BeforeScheme) == 0",
          "    url.index(Position::AfterScheme) == 4",
          "    url.index(Position::BeforeUsername) == 4",
          "    url.index(Position::AfterUsername) == 4",
          "    url.index(Position::BeforePassword) == 4",
          "    url.index(Position::AfterPassword) == 7",
          "    url.index(Position::BeforeHost) == 7",
          "    url.index(Position::AfterHost) == 16",
          "    url.index(Position::BeforePort) == 16",
          "    url.index(Position::AfterPort) == 16",
          "    url.index(Position::BeforeQuery) == 27",
          "    url.index(Position::AfterQuery) == 33",
          "    url.index(Position::BeforeFragment) == 33",
          "    url.index(Position::AfterFragment) == 33",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]