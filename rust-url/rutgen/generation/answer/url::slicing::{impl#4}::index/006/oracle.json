[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path/to/resource\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterQuery;",
          "    ",
          "    let _result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 38);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path/to/resource\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterQuery;",
          "    ",
          "    let _result = url.index(position);",
          "    assert_eq!(_result, 38);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"\".to_string(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterQuery;",
          "",
          "    let _result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, url.serialization.len());",
          "    assert!(url.fragment_start.is_none());",
          "    assert_eq!(position, Position::AfterQuery);",
          "    assert!(url.query_start.is_none());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"\".to_string(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterQuery;",
          "",
          "    let _result = url.index(position);",
          "    assert_eq!(_result, url.serialization.len());",
          "    assert!(url.fragment_start.is_none());",
          "    assert_eq!(position, Position::AfterQuery);",
          "    assert!(url.query_start.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]