[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeScheme;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeScheme;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com/path\"),",
          "        scheme_end: 5,",
          "        username_end: 5,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterScheme;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com/path\"),",
          "        scheme_end: 5,",
          "        username_end: 5,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterScheme;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeUsername;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterUsername;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    url.index(Position::BeforeScheme) == 0",
          "    url.index(Position::AfterScheme) == 4",
          "    url.index(Position::BeforeUsername) == 4 + \"://\".len()",
          "    url.index(Position::AfterUsername) == 8",
          "    url.index(Position::BeforePassword) == 8",
          "    url.index(Position::AfterPassword) == 12",
          "    url.index(Position::BeforeHost) == 12",
          "    url.index(Position::AfterHost) == 22",
          "    url.index(Position::BeforePort) == 22",
          "    url.index(Position::AfterPort) == 22",
          "    url.index(Position::BeforePath) == 23",
          "    url.index(Position::AfterPath) == 23",
          "    url.index(Position::BeforeQuery) == 23",
          "    url.index(Position::AfterQuery) == 23",
          "    url.index(Position::BeforeFragment) == 23",
          "    url.index(Position::AfterFragment) == 23"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterUsername;",
          "    let _ = url.index(position);",
          "    url.index(Position::BeforeScheme) == 0",
          "    url.index(Position::AfterScheme) == 4",
          "    url.index(Position::BeforeUsername) == 4 + \"://\".len()",
          "    url.index(Position::AfterUsername) == 8",
          "    url.index(Position::BeforePassword) == 8",
          "    url.index(Position::AfterPassword) == 12",
          "    url.index(Position::BeforeHost) == 12",
          "    url.index(Position::AfterHost) == 22",
          "    url.index(Position::BeforePort) == 22",
          "    url.index(Position::AfterPort) == 22",
          "    url.index(Position::BeforePath) == 23",
          "    url.index(Position::AfterPath) == 23",
          "    url.index(Position::BeforeQuery) == 23",
          "    url.index(Position::AfterQuery) == 23",
          "    url.index(Position::BeforeFragment) == 23",
          "    url.index(Position::AfterFragment) == 23",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePassword;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePassword;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPassword;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://user:pass@example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPassword;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeHost;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeHost;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterHost;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    let url = Url {",
          "    serialization: String::from(\"http://example.com:8080/path\"),",
          "    scheme_end: 4,",
          "    username_end: 4,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Domain,",
          "    port: Some(8080),",
          "    path_start: 22,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let position = Position::BeforeScheme;",
          "    assert_eq!(url.index(position), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterHost;",
          "    let _ = url.index(position);",
          "    let url = Url {",
          "    serialization: String::from(\"http://example.com:8080/path\"),",
          "    scheme_end: 4,",
          "    username_end: 4,",
          "    host_start: 7,",
          "    host_end: 18,",
          "    host: HostInternal::Domain,",
          "    port: Some(8080),",
          "    path_start: 22,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let position = Position::BeforeScheme;",
          "    assert_eq!(url.index(position), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    let url = Url { serialization: String::from(\"http://example.com:8080/path\"), scheme_end: 4, username_end: 4, host_start: 7, host_end: 18, host: HostInternal::Domain, port: Some(8080), path_start: 22, query_start: None, fragment_start: None, }; let position = Position::BeforeScheme; assert_eq!(url.index(position), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "    let url = Url { serialization: String::from(\"http://example.com:8080/path\"), scheme_end: 4, username_end: 4, host_start: 7, host_end: 18, host: HostInternal::Domain, port: Some(8080), path_start: 22, query_start: None, fragment_start: None, }; let position = Position::BeforeScheme; assert_eq!(url.index(position), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePath;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    let url = Url { serialization: String::from(\"http://example.com/path\"), scheme_end: 4, username_end: 4, host_start: 7, host_end: 18, host: HostInternal::Domain, port: None, path_start: 19, query_start: None, fragment_start: None, }; let position = Position::BeforeScheme; assert_eq!(url.index(position), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforePath;",
          "    let _ = url.index(position);",
          "    let url = Url { serialization: String::from(\"http://example.com/path\"), scheme_end: 4, username_end: 4, host_start: 7, host_end: 18, host: HostInternal::Domain, port: None, path_start: 19, query_start: None, fragment_start: None, }; let position = Position::BeforeScheme; assert_eq!(url.index(position), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: Some(34),",
          "    };",
          "    let position = Position::AfterQuery;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path?query=1#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: Some(24),",
          "        fragment_start: Some(34),",
          "    };",
          "    let position = Position::AfterQuery;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let position = Position::BeforeFragment;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let position = Position::AfterFragment;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforeScheme), 0);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com/path#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 19,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let position = Position::AfterFragment;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforeScheme), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]