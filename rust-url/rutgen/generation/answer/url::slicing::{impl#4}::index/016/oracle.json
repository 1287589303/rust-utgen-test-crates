[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));",
          "    url.port = None;",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize);",
          "    url.byte_at = |index| { if index == 23 { b':' } else { b' ' } };",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize);",
          "    url.port = Some(8080);",
          "    assert_ne!(url.byte_at(url.host_end), b':');",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));",
          "    url.port = None;",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize);",
          "    url.byte_at = |index| { if index == 23 { b':' } else { b' ' } };",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize);",
          "    url.port = Some(8080);",
          "    assert_ne!(url.byte_at(url.host_end), b':');",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:1/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(1),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(1));",
          "    assert_ne!(url.byte_at(url.host_end), b':');",
          "    assert!(url.port.is_some());",
          "    assert!(position == Position::AfterPort);",
          "    assert!(url.index(Position::AfterPort) == url.host_end as usize + \":\".len() + count_digits(url.port.unwrap()));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:1/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(1),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(1));",
          "    assert_ne!(url.byte_at(url.host_end), b':');",
          "    assert!(url.port.is_some());",
          "    assert!(position == Position::AfterPort);",
          "    assert!(url.index(Position::AfterPort) == url.host_end as usize + \":\".len() + count_digits(url.port.unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:65535/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(65535));",
          "    assert!(url.byte_at(url.host_end) != b':');",
          "    assert!(url.port.is_some());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:65535/path\"),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 12,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(65535));",
          "    assert!(url.byte_at(url.host_end) != b':');",
          "    assert!(url.port.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]