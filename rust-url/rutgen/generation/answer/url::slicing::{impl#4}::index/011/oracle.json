[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query=value#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(26),",
          "        fragment_start: Some(38),",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPath), 26);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path?query=value#fragment\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: Some(26),",
          "        fragment_start: Some(38),",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPath), 26);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://www.example.com/resource?param=1\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 5,",
          "        host_start: 8,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(30),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPath), 30);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://www.example.com/resource?param=1\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 5,",
          "        host_start: 8,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(30),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPath), 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://user:pass@host/path/to/file?query\".to_string(),",
          "        scheme_end: 3,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::AfterPath), 24);",
          "    assert_eq!(url.index(Position::BeforeQuery), 24 + \"?\".len());",
          "    assert_eq!(url.index(Position::AfterQuery), 29);",
          "    assert_eq!(url.index(Position::BeforeFragment), 29);",
          "    assert_eq!(url.index(Position::AfterFragment), 29);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://user:pass@host/path/to/file?query\".to_string(),",
          "        scheme_end: 3,",
          "        username_end: 8,",
          "        host_start: 12,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: Some(24),",
          "        fragment_start: None,",
          "    };",
          "",
          "    let position = Position::AfterPath;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::AfterPath), 24);",
          "    assert_eq!(url.index(Position::BeforeQuery), 24 + \"?\".len());",
          "    assert_eq!(url.index(Position::AfterQuery), 29);",
          "    assert_eq!(url.index(Position::BeforeFragment), 29);",
          "    assert_eq!(url.index(Position::AfterFragment), 29);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]