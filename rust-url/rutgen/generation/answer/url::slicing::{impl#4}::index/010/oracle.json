[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 17);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 4,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "    assert_eq!(_result, 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://user:pass@example.com:80/path/to/resource\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 9,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    0 == url.index(Position::BeforeScheme)",
          "    5 == url.index(Position::AfterScheme)",
          "    9 == url.index(Position::AfterUsername)",
          "    12 == url.index(Position::BeforeHost)",
          "    22 == url.index(Position::AfterHost)",
          "    23 == url.index(Position::BeforePath)",
          "    31 == url.index(Position::AfterPath)",
          "    23 == url.index(Position::BeforeQuery)",
          "    31 == url.index(Position::AfterQuery)",
          "    31 == url.index(Position::BeforeFragment)",
          "    31 == url.index(Position::AfterFragment)"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://user:pass@example.com:80/path/to/resource\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 9,",
          "        host_start: 12,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 23,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "    0 == url.index(Position::BeforeScheme)",
          "    5 == url.index(Position::AfterScheme)",
          "    9 == url.index(Position::AfterUsername)",
          "    12 == url.index(Position::BeforeHost)",
          "    22 == url.index(Position::AfterHost)",
          "    23 == url.index(Position::BeforePath)",
          "    31 == url.index(Position::AfterPath)",
          "    23 == url.index(Position::BeforeQuery)",
          "    31 == url.index(Position::AfterQuery)",
          "    31 == url.index(Position::BeforeFragment)",
          "    31 == url.index(Position::AfterFragment)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://example.com/path/to/file\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 6,",
          "        host_start: 6,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 30);",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.fragment_start.is_none());",
          "    assert!(url.serialization == \"ftp://example.com/path/to/file\");",
          "    assert!(url.scheme_end == 6);",
          "    assert!(url.username_end == 6);",
          "    assert!(url.host_start == 6);",
          "    assert!(url.host_end == 16);",
          "    assert!(url.path_start == 17);",
          "    assert!(url.host == HostInternal::Domain);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"ftp://example.com/path/to/file\".to_string(),",
          "        scheme_end: 6,",
          "        username_end: 6,",
          "        host_start: 6,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let position = Position::BeforeQuery;",
          "    let _result = url.index(position);",
          "    assert_eq!(_result, 30);",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.fragment_start.is_none());",
          "    assert!(url.serialization == \"ftp://example.com/path/to/file\");",
          "    assert!(url.scheme_end == 6);",
          "    assert!(url.username_end == 6);",
          "    assert!(url.host_start == 6);",
          "    assert!(url.host_end == 16);",
          "    assert!(url.path_start == 17);",
          "    assert!(url.host == HostInternal::Domain);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]