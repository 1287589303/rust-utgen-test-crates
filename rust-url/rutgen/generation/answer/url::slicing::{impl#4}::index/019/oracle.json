[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:password@host:8080/path?query#fragment\".to_string(),",
          "        scheme_end: \"http\".len() as u32,",
          "        username_end: \"user:password\".len() as u32,",
          "        host_start: \"user:password@\".len() as u32,",
          "        host_end: \"user:password@host\".len() as u32,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: \"http://user:password@host:8080/\".len() as u32,",
          "        query_start: Some(\"http://user:password@host:8080/path?query\".len() as u32),",
          "        fragment_start: Some(\"http://user:password@host:8080/path?query#fragment\".len() as u32),",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforePort), url.host_end as usize);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));",
          "    assert_eq!(url.index(Position::AfterHost), url.host_end as usize);",
          "    assert!(url.byte_at(url.host_end) == b':');",
          "    assert!(url.port.is_some());",
          "    assert_eq!(url.index(Position::BeforePath), url.path_start as usize);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:password@host:8080/path?query#fragment\".to_string(),",
          "        scheme_end: \"http\".len() as u32,",
          "        username_end: \"user:password\".len() as u32,",
          "        host_start: \"user:password@\".len() as u32,",
          "        host_end: \"user:password@host\".len() as u32,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: \"http://user:password@host:8080/\".len() as u32,",
          "        query_start: Some(\"http://user:password@host:8080/path?query\".len() as u32),",
          "        fragment_start: Some(\"http://user:password@host:8080/path?query#fragment\".len() as u32),",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforePort), url.host_end as usize);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(8080));",
          "    assert_eq!(url.index(Position::AfterHost), url.host_end as usize);",
          "    assert!(url.byte_at(url.host_end) == b':');",
          "    assert!(url.port.is_some());",
          "    assert_eq!(url.index(Position::BeforePath), url.path_start as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:password@host:65535/path?query#fragment\".to_string(),",
          "        scheme_end: \"http\".len() as u32,",
          "        username_end: \"user:password\".len() as u32,",
          "        host_start: \"user:password@\".len() as u32,",
          "        host_end: \"user:password@host\".len() as u32,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: \"http://user:password@host:65535/\".len() as u32,",
          "        query_start: Some(\"http://user:password@host:65535/path?query\".len() as u32),",
          "        fragment_start: Some(\"http://user:password@host:65535/path?query#fragment\".len() as u32),",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.index(Position::BeforePort), url.host_end as usize);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(65535));",
          "    assert_eq!(url.index(Position::BeforeHost), url.host_start as usize);",
          "    assert_eq!(url.index(Position::AfterHost), url.host_end as usize);",
          "    assert!(url.byte_at(url.host_end) == b':');",
          "    assert!(url.port.is_some());",
          "    assert_eq!(url.index(Position::BeforePath), url.path_start as usize);",
          "    assert_eq!(url.index(Position::AfterQuery), url.fragment_start.unwrap() as usize);",
          "    assert_eq!(url.index(Position::BeforeFragment), url.fragment_start.unwrap() as usize + \"#\".len());",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"http://user:password@host:65535/path?query#fragment\".to_string(),",
          "        scheme_end: \"http\".len() as u32,",
          "        username_end: \"user:password\".len() as u32,",
          "        host_start: \"user:password@\".len() as u32,",
          "        host_end: \"user:password@host\".len() as u32,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: \"http://user:password@host:65535/\".len() as u32,",
          "        query_start: Some(\"http://user:password@host:65535/path?query\".len() as u32),",
          "        fragment_start: Some(\"http://user:password@host:65535/path?query#fragment\".len() as u32),",
          "    };",
          "    let position = Position::BeforePort;",
          "    let _ = url.index(position);",
          "    assert_eq!(url.index(Position::BeforePort), url.host_end as usize);",
          "    assert_eq!(url.index(Position::AfterPort), url.host_end as usize + \":\".len() + count_digits(65535));",
          "    assert_eq!(url.index(Position::BeforeHost), url.host_start as usize);",
          "    assert_eq!(url.index(Position::AfterHost), url.host_end as usize);",
          "    assert!(url.byte_at(url.host_end) == b':');",
          "    assert!(url.port.is_some());",
          "    assert_eq!(url.index(Position::BeforePath), url.path_start as usize);",
          "    assert_eq!(url.index(Position::AfterQuery), url.fragment_start.unwrap() as usize);",
          "    assert_eq!(url.index(Position::BeforeFragment), url.fragment_start.unwrap() as usize + \"#\".len());",
          "    assert_eq!(url.index(Position::AfterFragment), url.serialization.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]