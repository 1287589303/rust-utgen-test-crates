[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\tvalid string with valid chars 123\";",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"\\tvalid string with valid chars 123\"), true);",
          "    assert_eq!(valid_value(\"validString123\"), true);",
          "    assert_eq!(valid_value(\"\\u{80}\\u{FF}\"), true);",
          "    assert_eq!(valid_value(\"\"), false);",
          "    assert_eq!(valid_value(\"invalid\\x00string\"), false);",
          "    assert_eq!(valid_value(\"string with invalid char \\u{7F}\"), false);",
          "    assert_eq!(valid_value(\"\\u{10FFFF}\"), false);",
          "    assert_eq!(valid_value(\"string with newline\\n\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"\\tvalid string with valid chars 123\";",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"\\tvalid string with valid chars 123\"), true);",
          "    assert_eq!(valid_value(\"validString123\"), true);",
          "    assert_eq!(valid_value(\"\\u{80}\\u{FF}\"), true);",
          "    assert_eq!(valid_value(\"\"), false);",
          "    assert_eq!(valid_value(\"invalid\\x00string\"), false);",
          "    assert_eq!(valid_value(\"string with invalid char \\u{7F}\"), false);",
          "    assert_eq!(valid_value(\"\\u{10FFFF}\"), false);",
          "    assert_eq!(valid_value(\"string with newline\\n\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\";",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"\";",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"あ\"; // single character outside valid ranges",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"あ\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"あ\"; // single character outside valid ranges",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"あ\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\u{20}\\u{7E}\\u{80}\\u{FF}\"; // boundary characters from valid ranges",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"\\u{20}\\u{7E}\\u{80}\\u{FF}\"), true);  // Test input with boundary characters from valid ranges",
          "    assert_eq!(valid_value(\"abc123!@#\"), true);  // Test input with valid ASCII characters",
          "    assert_eq!(valid_value(\"\\t\"), true);  // Test single tab character",
          "    assert_eq!(valid_value(\" \"), true);  // Test single space character",
          "    assert_eq!(valid_value(\"\\u{FF}\"), true);  // Test single valid extended ASCII character",
          "    assert_eq!(valid_value(\"\\u{7F}\"), false);  // Test single control character (DEL)",
          "    assert_eq!(valid_value(\"\\u{10FFFF}\"), false);  // Test invalid character (beyond valid Unicode range)",
          "    assert_eq!(valid_value(\"valid string with space\"), true);  // Test input with spaces",
          "    assert_eq!(valid_value(\"\\x00\"), false);  // Test null character (not in valid range)",
          "    assert_eq!(valid_value(\"1234\"), true);  // Test input with numeric characters",
          "    assert_eq!(valid_value(\"\\n\"), false);  // Test newline character (not in valid range)"
        ],
        "code": [
          "{",
          "    let input = \"\\u{20}\\u{7E}\\u{80}\\u{FF}\"; // boundary characters from valid ranges",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"\\u{20}\\u{7E}\\u{80}\\u{FF}\"), true);  // Test input with boundary characters from valid ranges",
          "    assert_eq!(valid_value(\"abc123!@#\"), true);  // Test input with valid ASCII characters",
          "    assert_eq!(valid_value(\"\\t\"), true);  // Test single tab character",
          "    assert_eq!(valid_value(\" \"), true);  // Test single space character",
          "    assert_eq!(valid_value(\"\\u{FF}\"), true);  // Test single valid extended ASCII character",
          "    assert_eq!(valid_value(\"\\u{7F}\"), false);  // Test single control character (DEL)",
          "    assert_eq!(valid_value(\"\\u{10FFFF}\"), false);  // Test invalid character (beyond valid Unicode range)",
          "    assert_eq!(valid_value(\"valid string with space\"), true);  // Test input with spaces",
          "    assert_eq!(valid_value(\"\\x00\"), false);  // Test null character (not in valid range)",
          "    assert_eq!(valid_value(\"1234\"), true);  // Test input with numeric characters",
          "    assert_eq!(valid_value(\"\\n\"), false);  // Test newline character (not in valid range)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"abcdefg\"; // all characters are outside the valid ranges",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"abcdefg\"), false);",
          "    assert_eq!(valid_value(\"\"), true);",
          "    assert_eq!(valid_value(\"\\t\"), true);",
          "    assert_eq!(valid_value(\" \"), true);",
          "    assert_eq!(valid_value(\"~\"), true);",
          "    assert_eq!(valid_value(\"\\u{80}\"), true);",
          "    assert_eq!(valid_value(\"\\u{FF}\"), true);",
          "    assert_eq!(valid_value(\"abc\\u{7F}def\"), false);",
          "    assert_eq!(valid_value(\"abc\\u{100}def\"), false);",
          "    assert_eq!(valid_value(\"abc\\n\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"abcdefg\"; // all characters are outside the valid ranges",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"abcdefg\"), false);",
          "    assert_eq!(valid_value(\"\"), true);",
          "    assert_eq!(valid_value(\"\\t\"), true);",
          "    assert_eq!(valid_value(\" \"), true);",
          "    assert_eq!(valid_value(\"~\"), true);",
          "    assert_eq!(valid_value(\"\\u{80}\"), true);",
          "    assert_eq!(valid_value(\"\\u{FF}\"), true);",
          "    assert_eq!(valid_value(\"abc\\u{7F}def\"), false);",
          "    assert_eq!(valid_value(\"abc\\u{100}def\"), false);",
          "    assert_eq!(valid_value(\"abc\\n\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"valid str~!@# \"; // mixed valid and invalid characters",
          "    valid_value(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_value(\"valid str~!@# \"), true);",
          "    assert_eq!(valid_value(\"invalid\\0char\"), false);",
          "    assert_eq!(valid_value(\"\\u{79}\"), true);",
          "    assert_eq!(valid_value(\"\\u{79}\\u{80}\"), true);",
          "    assert_eq!(valid_value(\"\\u{7F}\"), false);",
          "    assert_eq!(valid_value(\" \\t \"), true);",
          "    assert_eq!(valid_value(\"1234567890\"), true);",
          "    assert_eq!(valid_value(\"valid_string_with_special_chars!\"), true);",
          "    assert_eq!(valid_value(\"valid_string\\n\"), false);",
          "    assert_eq!(valid_value(\"valid_string\\u{10FFFF}\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"valid str~!@# \"; // mixed valid and invalid characters",
          "    valid_value(input);",
          "    assert_eq!(valid_value(\"valid str~!@# \"), true);",
          "    assert_eq!(valid_value(\"invalid\\0char\"), false);",
          "    assert_eq!(valid_value(\"\\u{79}\"), true);",
          "    assert_eq!(valid_value(\"\\u{79}\\u{80}\"), true);",
          "    assert_eq!(valid_value(\"\\u{7F}\"), false);",
          "    assert_eq!(valid_value(\" \\t \"), true);",
          "    assert_eq!(valid_value(\"1234567890\"), true);",
          "    assert_eq!(valid_value(\"valid_string_with_special_chars!\"), true);",
          "    assert_eq!(valid_value(\"valid_string\\n\"), false);",
          "    assert_eq!(valid_value(\"valid_string\\u{10FFFF}\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]