[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"validopaquePath   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, String::from(\"validopaquePath   \"));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"validopaquePath   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, String::from(\"validopaquePath   \"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"justAnotherValidOpaquePath   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, String::from(\"justAnotherValidOpaquePath   \"));",
          "    assert!(url.fragment_start.is_none());",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.host_start == 0);",
          "    assert!(url.host_end == 0);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"justAnotherValidOpaquePath   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, String::from(\"justAnotherValidOpaquePath   \"));",
          "    assert!(url.fragment_start.is_none());",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.host_start == 0);",
          "    assert!(url.host_end == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"TestPathWithSpaces   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"TestPathWithSpaces   \");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"TestPathWithSpaces   \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, \"TestPathWithSpaces   \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"    \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"    \");",
          "    assert_eq!(url.scheme_end, 0);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.host_start, 0);",
          "    assert_eq!(url.host_end, 0);",
          "    assert_eq!(url.host, HostInternal::None);",
          "    assert_eq!(url.port, None);",
          "    assert_eq!(url.path_start, 0);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"    \"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, \"    \");",
          "    assert_eq!(url.scheme_end, 0);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.host_start, 0);",
          "    assert_eq!(url.host_end, 0);",
          "    assert_eq!(url.host, HostInternal::None);",
          "    assert_eq!(url.port, None);",
          "    assert_eq!(url.path_start, 0);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]