[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path   \"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"http://example.com/path\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path   \"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 22,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, \"http://example.com/path\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.org/resource   \"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"https://example.org/resource\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.org/resource   \"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 17,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, \"https://example.org/resource\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://ftp.example.net/dir/file.txt    \"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 28,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"ftp://ftp.example.net/dir/file.txt\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://ftp.example.net/dir/file.txt    \"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 22,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 28,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.strip_trailing_spaces_from_opaque_path();",
          "    assert_eq!(url.serialization, \"ftp://ftp.example.net/dir/file.txt\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]