[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http//example.com\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http//example.com\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"http://\").unwrap();",
          "    assert_eq!(url.has_authority(), true);",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"mailto:rms@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), true);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"http://\").unwrap();",
          "    assert_eq!(url.has_authority(), true);",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"mailto:rms@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), false);",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert_eq!(url.has_authority(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http:/path\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http:/path\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"https://user:pass@example.com:80/path\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"https://user:pass@example.com:80/path\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"   \").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"   \").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]