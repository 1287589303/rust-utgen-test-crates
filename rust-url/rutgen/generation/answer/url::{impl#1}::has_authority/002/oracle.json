[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user:password@host.com:8080/path\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"http://host.com\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"https://user:pass@host.com/path\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"file:///path/to/file\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"data:text/html;base64,PHN0cm9uZz4=\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://user@host.com:21\").unwrap(); assert!(url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user:password@host.com:8080/path\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"http://host.com\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"https://user:pass@host.com/path\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"mailto:user@example.com\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"file:///path/to/file\").unwrap(); assert!(url.has_authority());",
          "    let url = Url::parse(\"data:text/html;base64,PHN0cm9uZz4=\").unwrap(); assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://user@host.com:21\").unwrap(); assert!(url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.has_authority();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    let _ = url.has_authority();",
          "    assert!(!url.has_authority());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(url.has_authority());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]