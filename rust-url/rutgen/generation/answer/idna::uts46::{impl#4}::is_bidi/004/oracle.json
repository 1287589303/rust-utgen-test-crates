[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &[];",
          "    let result = uts46.is_bidi(buffer);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    let buffer: &[char] = &['\\u{1F001}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &[];",
          "    let result = uts46.is_bidi(buffer);",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    let buffer: &[char] = &['\\u{1F001}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{1F000}']; // Character in range [\\u{1F000}, \\u{3FFFF}]",
          "    let result = uts46.is_bidi(buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{1F000}']; // Character in range [\\u{1F000}, \\u{3FFFF}]",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{1F000}', '\\u{1F001}', '\\u{1F002}']; // All characters in range [\\u{1F000}, \\u{3FFFF}]",
          "    let result = uts46.is_bidi(buffer);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{0591}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{1F000}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{1F001}', '\\u{1F002}', '\\u{1F003}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{1F000}', '\\u{1F001}', '\\u{1F002}']; // All characters in range [\\u{1F000}, \\u{3FFFF}]",
          "    let result = uts46.is_bidi(buffer);",
          "    let uts46 = Uts46::new();",
          "    let buffer: &[char] = &['\\u{0590}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{0591}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{1F000}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "    ",
          "    let buffer: &[char] = &['\\u{1F001}', '\\u{1F002}', '\\u{1F003}'];",
          "    let result = uts46.is_bidi(buffer);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]