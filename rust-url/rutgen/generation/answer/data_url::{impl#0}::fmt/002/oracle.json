[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DataUrlError::NotADataUrl;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"not a valid data url\");"
        ],
        "code": [
          "{",
          "    let error = DataUrlError::NotADataUrl;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"not a valid data url\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    let error = DataUrlError::NotADataUrl;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"not a valid data url\");",
          "    ",
          "    let error = DataUrlError::NoComma;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"data url is missing comma delimiting attributes and body\");"
        ],
        "code": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    let error = DataUrlError::NotADataUrl;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"not a valid data url\");",
          "    ",
          "    let error = DataUrlError::NoComma;",
          "    let mut output = String::new();",
          "    let fmt_result = error.fmt(&mut output);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    assert_eq!(output, \"data url is missing comma delimiting attributes and body\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]