[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let _result = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&_result, \"data url is missing comma delimiting attributes and body\");"
        ],
        "code": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let _result = format!(\"{}\", error);",
          "    assert_eq!(&_result, \"data url is missing comma delimiting attributes and body\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let _result = format!(\"{:?}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", DataUrlError::NoComma), \"NoComma\");",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).contains(\"data url is missing comma delimiting attributes and body\"));",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).contains(\"data url\"));",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).len() > 0);"
        ],
        "code": [
          "{",
          "    let error = DataUrlError::NoComma;",
          "    let _result = format!(\"{:?}\", error);",
          "    assert_eq!(format!(\"{:?}\", DataUrlError::NoComma), \"NoComma\");",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).contains(\"data url is missing comma delimiting attributes and body\"));",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).contains(\"data url\"));",
          "    assert!(format!(\"{}\", DataUrlError::NoComma).len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]