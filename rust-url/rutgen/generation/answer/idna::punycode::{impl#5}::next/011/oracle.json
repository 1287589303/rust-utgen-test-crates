[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCodeUnit {",
          "        value: char,",
          "    }",
          "",
          "    impl PunycodeCodeUnit for TestCodeUnit {",
          "        fn is_delimiter(&self) -> bool { false }",
          "        fn is_ascii(&self) -> bool { self.value.is_ascii() }",
          "        fn digit(&self) -> Option<u32> { self.value.to_digit(10) }",
          "        fn char(&self) -> char { self.value }",
          "        fn char_ascii_lower_case(&self) -> char { self.value.to_ascii_lowercase() }",
          "    }",
          "",
          "    struct ExternalCaller;",
          "",
          "    impl PunycodeCaller for ExternalCaller {",
          "        const EXTERNAL_CALLER: bool = true;",
          "    }",
          "",
          "    let base: Vec<TestCodeUnit> = vec![TestCodeUnit { value: 'A' }];",
          "    let insertions = [(1, 'B')];",
          "    ",
          "    let mut decoder = Decode {",
          "        base: base.iter(),",
          "        insertions: &insertions,",
          "        inserted: 0,",
          "        position: 0,",
          "        len: 1,",
          "        phantom: PhantomData::<ExternalCaller>,",
          "    };",
          "",
          "    let _ = decoder.next(); // This will trigger the code under test",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), Some('A'));",
          "    assert_eq!(decoder.inserted, 0);",
          "    assert_eq!(decoder.position, 1);",
          "    assert_eq!(decoder.base.clone().count(), 0);",
          "    assert!(decoder.inserted < decoder.insertions.len());",
          "    assert_eq!(decoder.insertions[decoder.inserted].0, 1);"
        ],
        "code": [
          "{",
          "    struct TestCodeUnit {",
          "        value: char,",
          "    }",
          "",
          "    impl PunycodeCodeUnit for TestCodeUnit {",
          "        fn is_delimiter(&self) -> bool { false }",
          "        fn is_ascii(&self) -> bool { self.value.is_ascii() }",
          "        fn digit(&self) -> Option<u32> { self.value.to_digit(10) }",
          "        fn char(&self) -> char { self.value }",
          "        fn char_ascii_lower_case(&self) -> char { self.value.to_ascii_lowercase() }",
          "    }",
          "",
          "    struct ExternalCaller;",
          "",
          "    impl PunycodeCaller for ExternalCaller {",
          "        const EXTERNAL_CALLER: bool = true;",
          "    }",
          "",
          "    let base: Vec<TestCodeUnit> = vec![TestCodeUnit { value: 'A' }];",
          "    let insertions = [(1, 'B')];",
          "    ",
          "    let mut decoder = Decode {",
          "        base: base.iter(),",
          "        insertions: &insertions,",
          "        inserted: 0,",
          "        position: 0,",
          "        len: 1,",
          "        phantom: PhantomData::<ExternalCaller>,",
          "    };",
          "",
          "    let _ = decoder.next(); // This will trigger the code under test",
          "    assert_eq!(decoder.next(), Some('A'));",
          "    assert_eq!(decoder.inserted, 0);",
          "    assert_eq!(decoder.position, 1);",
          "    assert_eq!(decoder.base.clone().count(), 0);",
          "    assert!(decoder.inserted < decoder.insertions.len());",
          "    assert_eq!(decoder.insertions[decoder.inserted].0, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]