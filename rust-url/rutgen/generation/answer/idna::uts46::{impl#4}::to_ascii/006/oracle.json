[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"example.com\")));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"example.com\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"a\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), Cow::Borrowed(\"a\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"a\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), Cow::Borrowed(\"a\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this.is.a.very.long.valid.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this.is.a.very.long.valid.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"this.is.a.very.long.valid.domain.com\"));",
          "    assert!(verify_dns_length(&cow, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this.is.a.very.long.valid.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this.is.a.very.long.valid.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"this.is.a.very.long.valid.domain.com\"));",
          "    assert!(verify_dns_length(&cow, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"lowercase.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"lowercase.com\")));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"lowercase.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"lowercase.com\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"my.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"my.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(_result.is_ok());",
          "    let cow = _result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"my.domain.com\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"my.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"my.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(_result.is_ok());",
          "    let cow = _result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"my.domain.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"123456.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"123456.com\")));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None).is_ok());",
          "    assert!(dns_length != DnsLength::Ignore);",
          "    assert!(verify_dns_length(&Cow::Borrowed(\"123456.com\"), dns_length == DnsLength::VerifyAllowRootDot));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None) == Ok(ProcessingSuccess::Passthrough));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None) == Ok(ProcessingSuccess::WroteToSink));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"123456.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(_result, Ok(Cow::Borrowed(\"123456.com\")));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None).is_ok());",
          "    assert!(dns_length != DnsLength::Ignore);",
          "    assert!(verify_dns_length(&Cow::Borrowed(\"123456.com\"), dns_length == DnsLength::VerifyAllowRootDot));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None) == Ok(ProcessingSuccess::Passthrough));",
          "    assert!(self.process(domain_name, ascii_deny_list, hyphens, ErrorPolicy::FailFast, |_, _, _| false, &mut s, None) == Ok(ProcessingSuccess::WroteToSink));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]