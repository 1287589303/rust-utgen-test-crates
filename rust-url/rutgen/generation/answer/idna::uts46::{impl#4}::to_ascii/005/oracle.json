[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = \"exámplé.com\".as_bytes(); // valid UTF-8 non-ASCII",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().to_string() == \"exámplé.com\");",
          "    assert!(result.as_ref().unwrap().len() == 12);",
          "    assert!(result.as_ref().unwrap().chars().any(|c| !c.is_ascii()));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = \"exámplé.com\".as_bytes(); // valid UTF-8 non-ASCII",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.as_ref().unwrap().to_string() == \"exámplé.com\");",
          "    assert!(result.as_ref().unwrap().len() == 12);",
          "    assert!(result.as_ref().unwrap().chars().any(|c| !c.is_ascii()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example-with-hyphen.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cow::Borrowed(\"example-with-hyphen.com\")));",
          "    assert!(result.is_ok());",
          "    assert!(!verify_dns_length(&Cow::Borrowed(\"example-with-hyphen.com\"), false));",
          "    assert!(result.as_ref().map(|cow| cow.len()).unwrap_or(0) <= 253);",
          "    assert!(result.as_ref().map(|cow| cow.chars().all(|c| c.is_ascii())).unwrap_or(false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example-with-hyphen.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Ok(Cow::Borrowed(\"example-with-hyphen.com\")));",
          "    assert!(result.is_ok());",
          "    assert!(!verify_dns_length(&Cow::Borrowed(\"example-with-hyphen.com\"), false));",
          "    assert!(result.as_ref().map(|cow| cow.len()).unwrap_or(0) <= 253);",
          "    assert!(result.as_ref().map(|cow| cow.chars().all(|c| c.is_ascii())).unwrap_or(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"invalid\\xFFdomain.com\"; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"invalid\\xFFdomain.com\"; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    assert!(uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length).is_err());",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let dns_length = DnsLength::Verify;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"invalid\\xFFdomain.com\"; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"invalid\\xFFdomain.com\"; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    assert!(uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length).is_err());",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let dns_length = DnsLength::Verify;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "    let domain_name = b\"valid.domain.com\"; // valid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    let dns_length = DnsLength::VerifyAllowRootDot;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"valid.domain.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]