[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"example.com/verylonglabelthatshouldexceedfifty-threecharacters\"; // Length exceeds the limit.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"example.com/verylonglabelthatshouldexceedfifty-threecharacters\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    let cow = match result { Err(e) => e, _ => unreachable!() };",
          "    let dns_check = verify_dns_length(&cow, true);",
          "    assert!(!dns_check);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"example.com/verylonglabelthatshouldexceedfifty-threecharacters\"; // Length exceeds the limit.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"example.com/verylonglabelthatshouldexceedfifty-threecharacters\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    let cow = match result { Err(e) => e, _ => unreachable!() };",
          "    let dns_check = verify_dns_length(&cow, true);",
          "    assert!(!dns_check);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"valid.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"; // One label exceeds the limit.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"valid.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"valid.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    ",
          "    let domain_name = b\"invalid..com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"toolongsubdomainaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"valid.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"valid.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"; // One label exceeds the limit.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"valid.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"valid.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    ",
          "    let domain_name = b\"invalid..com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"toolongsubdomainaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "    ",
          "    let domain_name = b\"valid.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"bad..domain.com\"; // Empty label between dots.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"bad..domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"bad..domain.com\"; // Empty label between dots.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"bad..domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    ",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(result, Err(crate::Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"invalid_domain@.com\"; // Invalid character '@'.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"invalid_domain@.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(matches!(result, Err(crate::Errors::default())));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "",
          "    let domain_name = b\"invalid_domain@.com\"; // Invalid character '@'.",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // No deny list",
          "    let hyphens = Hyphens::Allow; // Allow hyphens",
          "    let dns_length = DnsLength::Verify; // Verify DNS length",
          "",
          "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"invalid_domain@.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Verify;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(matches!(result, Err(crate::Errors::default())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]