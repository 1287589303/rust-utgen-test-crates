[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*_, Ok(Cow::Borrowed(\"example.com\")));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert_eq!(*_, Ok(Cow::Borrowed(\"example.com\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"hyphen-example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"hyphen-example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"hyphen-example.com\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"hyphen-example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"hyphen-example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Cow::Borrowed(\"hyphen-example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\"));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name = b\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all ASCII characters",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "",
          "    let _ = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    let domain_name = b\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let dns_length = DnsLength::Ignore;",
          "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
          "    assert!(result.is_ok());",
          "    let cow = result.unwrap();",
          "    assert_eq!(cow, Cow::Borrowed(\"this-is-a-really-long-domain-name-that-is-within-the-limit.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]