[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=value&another=value\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.query_start, Some(&34));",
          "    assert_eq!(url.fragment_start, Some(&38));",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=value&another=value\");",
          "    assert_eq!(url.serialization.len(), 51);",
          "    assert_eq!(url.path_start, 18);",
          "    assert_eq!(url.scheme_end, 4);",
          "    assert_eq!(url.host_start, 7);",
          "    assert_eq!(url.host_end, 12);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.port, None);",
          "    assert_eq!(url.host, HostInternal::Domain);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=value&another=value\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "    assert_eq!(url.query_start, Some(&34));",
          "    assert_eq!(url.fragment_start, Some(&38));",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=value&another=value\");",
          "    assert_eq!(url.serialization.len(), 51);",
          "    assert_eq!(url.path_start, 18);",
          "    assert_eq!(url.scheme_end, 4);",
          "    assert_eq!(url.host_start, 7);",
          "    assert_eq!(url.host_end, 12);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.port, None);",
          "    assert_eq!(url.host, HostInternal::Domain);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=val ue&another=val!ue@123\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "}"
        ],
        "oracle": [
          "    let url = Url { serialization: \"http://example.com/path\".to_string(), scheme_end: 4, username_end: 0, host_start: 7, host_end: 12, host: HostInternal::Domain, port: None, path_start: 18, query_start: Some(30), fragment_start: Some(34) };",
          "    assert_eq!(url.query_start, Some(30));",
          "    assert_eq!(url.fragment_start, Some(34));",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=val ue&another=val!ue@123\");",
          "    assert_eq!(url.serialization.len(), 64);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=val ue&another=val!ue@123\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "    let url = Url { serialization: \"http://example.com/path\".to_string(), scheme_end: 4, username_end: 0, host_start: 7, host_end: 12, host: HostInternal::Domain, port: None, path_start: 18, query_start: Some(30), fragment_start: Some(34) };",
          "    assert_eq!(url.query_start, Some(30));",
          "    assert_eq!(url.fragment_start, Some(34));",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=val ue&another=val!ue@123\");",
          "    assert_eq!(url.serialization.len(), 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=val ue&another=value with spaces\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=val ue&another=value with spaces\");",
          "    assert_eq!(url.query_start, Some(54));",
          "    assert_eq!(url.fragment_start, Some(58));",
          "    assert_eq!(url.path_start, 18);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 30;",
          "    let after_path = \"query=val ue&another=value with spaces\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=val ue&another=value with spaces\");",
          "    assert_eq!(url.query_start, Some(54));",
          "    assert_eq!(url.fragment_start, Some(58));",
          "    assert_eq!(url.path_start, 18);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 0;",
          "    let after_path = \"query=value&key=value\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=value&key=value\");",
          "    assert_eq!(url.query_start.unwrap(), 30);",
          "    assert_eq!(url.fragment_start.unwrap(), 34 + after_path.len() as u32);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 12,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: Some(30),",
          "        fragment_start: Some(34),",
          "    };",
          "",
          "    let old_after_path_position = 0;",
          "    let after_path = \"query=value&key=value\";",
          "",
          "    url.restore_after_path(old_after_path_position, after_path);",
          "    assert_eq!(url.serialization, \"http://example.com/pathquery=value&key=value\");",
          "    assert_eq!(url.query_start.unwrap(), 30);",
          "    assert_eq!(url.fragment_start.unwrap(), 34 + after_path.len() as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]