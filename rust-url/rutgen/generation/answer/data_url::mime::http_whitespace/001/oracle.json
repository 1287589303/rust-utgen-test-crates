[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    http_whitespace(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(http_whitespace('\\t'), true);",
          "    assert_eq!(http_whitespace('\\r'), true);",
          "    assert_eq!(http_whitespace('\\n'), true);",
          "    assert_eq!(http_whitespace(' '), true);",
          "    assert_eq!(http_whitespace('a'), false);",
          "    assert_eq!(http_whitespace('b'), false);",
          "    assert_eq!(http_whitespace('1'), false);",
          "    assert_eq!(http_whitespace('!'), false);",
          "    assert_eq!(http_whitespace('#'), false);",
          "    assert_eq!(http_whitespace('\\0'), false);",
          "    assert_eq!(http_whitespace('z'), false);",
          "    assert_eq!(http_whitespace('\\x1F'), false);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    http_whitespace(c);",
          "    assert_eq!(http_whitespace('\\t'), true);",
          "    assert_eq!(http_whitespace('\\r'), true);",
          "    assert_eq!(http_whitespace('\\n'), true);",
          "    assert_eq!(http_whitespace(' '), true);",
          "    assert_eq!(http_whitespace('a'), false);",
          "    assert_eq!(http_whitespace('b'), false);",
          "    assert_eq!(http_whitespace('1'), false);",
          "    assert_eq!(http_whitespace('!'), false);",
          "    assert_eq!(http_whitespace('#'), false);",
          "    assert_eq!(http_whitespace('\\0'), false);",
          "    assert_eq!(http_whitespace('z'), false);",
          "    assert_eq!(http_whitespace('\\x1F'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '$';",
          "    http_whitespace(c);",
          "}"
        ],
        "oracle": [
          "    http_whitespace('\\t') == true",
          "    http_whitespace('\\r') == true",
          "    http_whitespace('\\n') == true",
          "    http_whitespace(' ') == true",
          "    http_whitespace('$') == false"
        ],
        "code": [
          "{",
          "    let c = '$';",
          "    http_whitespace(c);",
          "    http_whitespace('\\t') == true",
          "    http_whitespace('\\r') == true",
          "    http_whitespace('\\n') == true",
          "    http_whitespace(' ') == true",
          "    http_whitespace('$') == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '1';",
          "    http_whitespace(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(http_whitespace('\\t'), true);",
          "    assert_eq!(http_whitespace('\\r'), true);",
          "    assert_eq!(http_whitespace('\\n'), true);",
          "    assert_eq!(http_whitespace(' '), true);",
          "    assert_eq!(http_whitespace('1'), false);",
          "    assert_eq!(http_whitespace('a'), false);",
          "    assert_eq!(http_whitespace('\\0'), false);"
        ],
        "code": [
          "{",
          "    let c = '1';",
          "    http_whitespace(c);",
          "    assert_eq!(http_whitespace('\\t'), true);",
          "    assert_eq!(http_whitespace('\\r'), true);",
          "    assert_eq!(http_whitespace('\\n'), true);",
          "    assert_eq!(http_whitespace(' '), true);",
          "    assert_eq!(http_whitespace('1'), false);",
          "    assert_eq!(http_whitespace('a'), false);",
          "    assert_eq!(http_whitespace('\\0'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '!';",
          "    http_whitespace(c);",
          "}"
        ],
        "oracle": [
          "    http_whitespace('\\t'); // expected to return true",
          "    http_whitespace('\\r'); // expected to return true",
          "    http_whitespace('\\n'); // expected to return true",
          "    http_whitespace(' '); // expected to return true",
          "    http_whitespace('!'); // expected to return false"
        ],
        "code": [
          "{",
          "    let c = '!';",
          "    http_whitespace(c);",
          "    http_whitespace('\\t'); // expected to return true",
          "    http_whitespace('\\r'); // expected to return true",
          "    http_whitespace('\\n'); // expected to return true",
          "    http_whitespace(' '); // expected to return true",
          "    http_whitespace('!'); // expected to return false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]