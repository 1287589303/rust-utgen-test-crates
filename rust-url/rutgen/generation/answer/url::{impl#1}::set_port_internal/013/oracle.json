[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8080);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_instance.port, Some(8080));",
          "    assert_eq!(url_instance.serialization, \"http://example.com:8080\");",
          "    assert_eq!(url_instance.path_start, 20);",
          "    assert_eq!(url_instance.query_start, Some(24));",
          "    assert_eq!(url_instance.fragment_start, Some(30));",
          "    assert_eq!(url_instance.serialization.len(), 26);"
        ],
        "code": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(80),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8080);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "    assert_eq!(url_instance.port, Some(8080));",
          "    assert_eq!(url_instance.serialization, \"http://example.com:8080\");",
          "    assert_eq!(url_instance.path_start, 20);",
          "    assert_eq!(url_instance.query_start, Some(24));",
          "    assert_eq!(url_instance.fragment_start, Some(30));",
          "    assert_eq!(url_instance.serialization.len(), 26);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(443),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8080);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_instance.port, Some(8080));",
          "    assert_eq!(url_instance.serialization, \"http://example.com/path:8080\");",
          "    assert_eq!(url_instance.path_start, to_u32(url_instance.serialization.len()).unwrap());",
          "    assert!(url_instance.query_start.is_some());",
          "    assert!(url_instance.fragment_start.is_some());"
        ],
        "code": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(443),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8080);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "    assert_eq!(url_instance.port, Some(8080));",
          "    assert_eq!(url_instance.serialization, \"http://example.com/path:8080\");",
          "    assert_eq!(url_instance.path_start, to_u32(url_instance.serialization.len()).unwrap());",
          "    assert!(url_instance.query_start.is_some());",
          "    assert!(url_instance.fragment_start.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(21),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8443);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_instance.port, Some(8443));",
          "    assert_eq!(url_instance.serialization, \"http://example.com/path:8443?query=value#fragment\");",
          "    assert_eq!(url_instance.path_start, 25);",
          "    assert_eq!(url_instance.query_start, Some(24));",
          "    assert_eq!(url_instance.fragment_start, Some(30));"
        ],
        "code": [
          "{",
          "    let mut url_instance = Url {",
          "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: Some(21),",
          "        path_start: 18,",
          "        query_start: Some(24),",
          "        fragment_start: Some(30),",
          "    };",
          "    let new_port = Some(8443);",
          "    ",
          "    url_instance.set_port_internal(new_port);",
          "    assert_eq!(url_instance.port, Some(8443));",
          "    assert_eq!(url_instance.serialization, \"http://example.com/path:8443?query=value#fragment\");",
          "    assert_eq!(url_instance.path_start, 25);",
          "    assert_eq!(url_instance.query_start, Some(24));",
          "    assert_eq!(url_instance.fragment_start, Some(30));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]