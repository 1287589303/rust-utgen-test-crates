[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 21,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 25,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(8080));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"http://example.com:8080/path\");",
          "    assert_eq!(url.port, Some(8080));",
          "    assert_eq!(url.path_start, 25);",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.fragment_start.is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:8080/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 21,",
          "        host: HostInternal::Domain,",
          "        port: Some(8080),",
          "        path_start: 25,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(8080));",
          "    assert_eq!(url.serialization, \"http://example.com:8080/path\");",
          "    assert_eq!(url.port, Some(8080));",
          "    assert_eq!(url.path_start, 25);",
          "    assert!(url.query_start.is_none());",
          "    assert!(url.fragment_start.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:0/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(0),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.port, Some(0));",
          "    assert_eq!(url.serialization, \"http://example.com:0/path\");",
          "    assert_eq!(url.path_start, 27);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.host_end, 23);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:0/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 23,",
          "        host: HostInternal::Domain,",
          "        port: Some(0),",
          "        path_start: 27,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(0));",
          "    assert_eq!(url.port, Some(0));",
          "    assert_eq!(url.serialization, \"http://example.com:0/path\");",
          "    assert_eq!(url.path_start, 27);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.host_end, 23);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:65535/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 24,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 29,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(65535));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.port, Some(65535));",
          "    assert_eq!(url.serialization, \"http://example.com:65535/path\");",
          "    assert_eq!(url.path_start, 29);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.host_end, 24);",
          "    assert_eq!(url.host_start, 7);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.scheme_end, 4);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com:65535/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 24,",
          "        host: HostInternal::Domain,",
          "        port: Some(65535),",
          "        path_start: 29,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    url.set_port_internal(Some(65535));",
          "    assert_eq!(url.port, Some(65535));",
          "    assert_eq!(url.serialization, \"http://example.com:65535/path\");",
          "    assert_eq!(url.path_start, 29);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.host_end, 24);",
          "    assert_eq!(url.host_start, 7);",
          "    assert_eq!(url.username_end, 0);",
          "    assert_eq!(url.scheme_end, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]