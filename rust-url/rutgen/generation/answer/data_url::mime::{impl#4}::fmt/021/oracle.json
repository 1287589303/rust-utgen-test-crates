[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8/invalid\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)?; // Expected: Ok",
          "    f.write_str(\"/\")?; // Expected: Ok",
          "    f.write_str(&self.subtype)?; // Expected: Ok",
          "    (parameters: vec![(String::from(\"charset\"), String::from(\"utf-8/invalid\"))]); // Expected: true",
          "    f.write_str(\";\")?; // Expected: Ok",
          "    f.write_str(name)?; // Expected: Ok",
          "    f.write_str(\"=\")?; // Expected: Ok",
          "    only_http_token_code_points(value); // Expected: true",
          "    value.is_empty(); // Expected: false",
          "    f.write_str(value)?; // Expected: Err"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8/invalid\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    f.write_str(&self.type_)?; // Expected: Ok",
          "    f.write_str(\"/\")?; // Expected: Ok",
          "    f.write_str(&self.subtype)?; // Expected: Ok",
          "    (parameters: vec![(String::from(\"charset\"), String::from(\"utf-8/invalid\"))]); // Expected: true",
          "    f.write_str(\";\")?; // Expected: Ok",
          "    f.write_str(name)?; // Expected: Ok",
          "    f.write_str(\"=\")?; // Expected: Ok",
          "    only_http_token_code_points(value); // Expected: true",
          "    value.is_empty(); // Expected: false",
          "    f.write_str(value)?; // Expected: Err",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![",
          "            (String::from(\"version\"), String::from(\"1.0\")),",
          "            (String::from(\"token\"), String::from(\"invalid/value\")),",
          "        ],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? should be Ok/Some",
          "    f.write_str(\"/\")? should be Ok/Some",
          "    f.write_str(&self.subtype)? should be Ok/Some",
          "    (name, value) in &self.parameters should be true",
          "    f.write_str(\";\")? should be Ok/Some",
          "    f.write_str(name)? should be Ok/Some",
          "    f.write_str(\"=\")? should be Ok/Some",
          "    only_http_token_code_points(value) should be true",
          "    value.is_empty() should be false",
          "    f.write_str(value)? should be Err/None"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![",
          "            (String::from(\"version\"), String::from(\"1.0\")),",
          "            (String::from(\"token\"), String::from(\"invalid/value\")),",
          "        ],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    f.write_str(&self.type_)? should be Ok/Some",
          "    f.write_str(\"/\")? should be Ok/Some",
          "    f.write_str(&self.subtype)? should be Ok/Some",
          "    (name, value) in &self.parameters should be true",
          "    f.write_str(\";\")? should be Ok/Some",
          "    f.write_str(name)? should be Ok/Some",
          "    f.write_str(\"=\")? should be Ok/Some",
          "    only_http_token_code_points(value) should be true",
          "    value.is_empty() should be false",
          "    f.write_str(value)? should be Err/None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]