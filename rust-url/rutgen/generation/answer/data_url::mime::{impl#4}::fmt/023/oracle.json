[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![",
          "            (String::from(\"charset\"), String::from(\"utf-8\")),",
          "            (String::from(\"type\"), String::from(\"invalid value with \\\"quotes\\\"\")),",
          "        ],",
          "    };",
          "    let mut buf = String::new();",
          "    let _ = write!(&mut buf, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write!(&mut buf, \"{}\", mime), Err(fmt::Error));",
          "    assert!(buf.is_empty());",
          "    assert!(only_http_token_code_points(\"utf-8\") == true);",
          "    assert!(only_http_token_code_points(\"invalid value with \\\"quotes\\\"\") == false);",
          "    assert!(mime.type_ == \"text\");",
          "    assert!(mime.subtype == \"html\");",
          "    assert!(mime.parameters.len() == 2);",
          "    assert_eq!(mime.parameters[0].0, \"charset\");",
          "    assert_eq!(mime.parameters[0].1, \"utf-8\");",
          "    assert_eq!(mime.parameters[1].0, \"type\");",
          "    assert_eq!(mime.parameters[1].1, \"invalid value with \\\"quotes\\\"\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![",
          "            (String::from(\"charset\"), String::from(\"utf-8\")),",
          "            (String::from(\"type\"), String::from(\"invalid value with \\\"quotes\\\"\")),",
          "        ],",
          "    };",
          "    let mut buf = String::new();",
          "    let _ = write!(&mut buf, \"{}\", mime);",
          "    assert_eq!(write!(&mut buf, \"{}\", mime), Err(fmt::Error));",
          "    assert!(buf.is_empty());",
          "    assert!(only_http_token_code_points(\"utf-8\") == true);",
          "    assert!(only_http_token_code_points(\"invalid value with \\\"quotes\\\"\") == false);",
          "    assert!(mime.type_ == \"text\");",
          "    assert!(mime.subtype == \"html\");",
          "    assert!(mime.parameters.len() == 2);",
          "    assert_eq!(mime.parameters[0].0, \"charset\");",
          "    assert_eq!(mime.parameters[0].1, \"utf-8\");",
          "    assert_eq!(mime.parameters[1].0, \"type\");",
          "    assert_eq!(mime.parameters[1].1, \"invalid value with \\\"quotes\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]