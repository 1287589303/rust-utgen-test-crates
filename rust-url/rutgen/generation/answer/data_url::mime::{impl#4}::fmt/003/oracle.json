[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"text/\");",
          "    assert!(output.ends_with('/'));",
          "    assert!(output.len() == 5);",
          "    assert!(format!(\"{}\", mime).is_ok());",
          "    assert!(output.contains(\"text\"));",
          "    assert!(output.contains(\"/\"));",
          "    assert!(!output.contains('\"'));",
          "    assert!(!output.contains('\\\\'));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert_eq!(output, \"text/\");",
          "    assert!(output.ends_with('/'));",
          "    assert!(output.len() == 5);",
          "    assert!(format!(\"{}\", mime).is_ok());",
          "    assert!(output.contains(\"text\"));",
          "    assert!(output.contains(\"/\"));",
          "    assert!(!output.contains('\"'));",
          "    assert!(!output.contains('\\\\'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"text/;charset=utf-8\");",
          "    assert!(output.contains(\"text/\"));",
          "    assert!(!output.contains(\"text/\"));",
          "    assert!(output.contains(\"charset=utf-8\"));",
          "    assert_eq!(output.lines().count(), 1);",
          "    assert!(output.starts_with(\"text/\"));",
          "    assert!(output.ends_with(\"utf-8\"));",
          "    assert!(output.contains(\";\"));",
          "    assert!(output.chars().all(|c| !c.is_control()));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert_eq!(output, \"text/;charset=utf-8\");",
          "    assert!(output.contains(\"text/\"));",
          "    assert!(!output.contains(\"text/\"));",
          "    assert!(output.contains(\"charset=utf-8\"));",
          "    assert_eq!(output.lines().count(), 1);",
          "    assert!(output.starts_with(\"text/\"));",
          "    assert!(output.ends_with(\"utf-8\"));",
          "    assert!(output.contains(\";\"));",
          "    assert!(output.chars().all(|c| !c.is_control()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"filename\".to_owned(), \"inv@lid\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"text/\");",
          "    assert!(output.is_empty());",
          "    assert!(output.contains(\"filename=\\\"inv@lid\\\"\"));",
          "    assert!(output.contains(\"\\\\@\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"filename\".to_owned(), \"inv@lid\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert_eq!(output, \"text/\");",
          "    assert!(output.is_empty());",
          "    assert!(output.contains(\"filename=\\\"inv@lid\\\"\"));",
          "    assert!(output.contains(\"\\\\@\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![",
          "            (\"size\".to_owned(), \"small\".to_owned()),",
          "            (\"quality\".to_owned(), \"high\".to_owned()),",
          "        ],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"image/;size=small;quality=high\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![",
          "            (\"size\".to_owned(), \"small\".to_owned()),",
          "            (\"quality\".to_owned(), \"high\".to_owned()),",
          "        ],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert_eq!(output, \"image/;size=small;quality=high\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"name\".to_owned(), \"my\\\"file\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Err(())",
          "    only_http_token_code_points(\"\") == true",
          "    only_http_token_code_points(\"my\\\"file\") == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char('m')? == Ok(())",
          "    f.write_char('y')? == Ok(())",
          "    f.write_char('\"')? == Ok(())",
          "    f.write_char('f')? == Ok(())",
          "    f.write_char('i')? == Ok(())",
          "    f.write_char('l')? == Ok(())",
          "    f.write_char('e')? == Ok(())",
          "    f.write_str(\"\\\"\")? == Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"\".to_owned(),",
          "        parameters: vec![(\"name\".to_owned(), \"my\\\"file\".to_owned())],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Err(())",
          "    only_http_token_code_points(\"\") == true",
          "    only_http_token_code_points(\"my\\\"file\") == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char('m')? == Ok(())",
          "    f.write_char('y')? == Ok(())",
          "    f.write_char('\"')? == Ok(())",
          "    f.write_char('f')? == Ok(())",
          "    f.write_char('i')? == Ok(())",
          "    f.write_char('l')? == Ok(())",
          "    f.write_char('e')? == Ok(())",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]