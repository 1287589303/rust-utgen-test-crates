[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.type_, String::from(\"text\"));",
          "    assert_eq!(mime.subtype, String::from(\"plain\"));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(mime.parameters[0].0, String::from(\"charset\"));",
          "    assert_eq!(mime.parameters[0].1, String::from(\"utf-8\"));",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(&mime.parameters[0].0).is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.parameters[0].1.is_empty() == false);",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.parameters[0].1.chars().next().is_some());",
          "    assert!(mime.parameters[0].1.chars().next().unwrap() == 'u');",
          "    assert!(mime.parameters[0].1.chars().next().unwrap() != '\"');",
          "    assert!(f.write_str(\"\\\\\").is_ok());",
          "    assert!(f.write_char('u').is_err());",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.fmt(&mut output).is_ok());"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "    assert_eq!(mime.type_, String::from(\"text\"));",
          "    assert_eq!(mime.subtype, String::from(\"plain\"));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(mime.parameters[0].0, String::from(\"charset\"));",
          "    assert_eq!(mime.parameters[0].1, String::from(\"utf-8\"));",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(&mime.parameters[0].0).is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.parameters[0].1.is_empty() == false);",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.parameters[0].1.chars().next().is_some());",
          "    assert!(mime.parameters[0].1.chars().next().unwrap() == 'u');",
          "    assert!(mime.parameters[0].1.chars().next().unwrap() != '\"');",
          "    assert!(f.write_str(\"\\\\\").is_ok());",
          "    assert!(f.write_char('u').is_err());",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.fmt(&mut output).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"schema\"), String::from(\"\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "}"
        ],
        "oracle": [
          "    assert!(mime.fmt(&mut \"\".to_string()).is_ok());",
          "    assert!(mime.type_ == \"application\");",
          "    assert!(mime.subtype == \"json\");",
          "    assert!(mime.parameters.len() == 1);",
          "    assert!(mime.parameters[0].0 == \"schema\");",
          "    assert!(mime.parameters[0].1.is_empty());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.fmt(&mut String::new()).is_ok());",
          "    assert!(format!(\"{}\", mime) == \"application/json;schema=\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"schema\"), String::from(\"\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "    assert!(mime.fmt(&mut \"\".to_string()).is_ok());",
          "    assert!(mime.type_ == \"application\");",
          "    assert!(mime.subtype == \"json\");",
          "    assert!(mime.parameters.len() == 1);",
          "    assert!(mime.parameters[0].0 == \"schema\");",
          "    assert!(mime.parameters[0].1.is_empty());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.fmt(&mut String::new()).is_ok());",
          "    assert!(format!(\"{}\", mime) == \"application/json;schema=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"filename\"), String::from(\"example.png\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.type_, String::from(\"image\"));",
          "    assert_eq!(mime.subtype, String::from(\"png\"));",
          "    assert!(mime.parameters.len() == 1);",
          "    assert_eq!(mime.parameters[0].0, String::from(\"filename\"));",
          "    assert_eq!(mime.parameters[0].1, String::from(\"example.png\"));",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(&mime.parameters[0].0).is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.parameters[0].1.is_empty() == false);",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.parameters[0].1.chars().next().is_some());",
          "    assert!(mime.parameters[0].1.chars().any(|c| c == '\"'));",
          "    assert!(f.write_str(\"\\\\\").is_ok());",
          "    assert!(f.write_char(mime.parameters[0].1.chars().next().unwrap()).is_err());"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"filename\"), String::from(\"example.png\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "    assert_eq!(mime.type_, String::from(\"image\"));",
          "    assert_eq!(mime.subtype, String::from(\"png\"));",
          "    assert!(mime.parameters.len() == 1);",
          "    assert_eq!(mime.parameters[0].0, String::from(\"filename\"));",
          "    assert_eq!(mime.parameters[0].1, String::from(\"example.png\"));",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(&mime.parameters[0].0).is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(only_http_token_code_points(&mime.parameters[0].1));",
          "    assert!(mime.parameters[0].1.is_empty() == false);",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(mime.parameters[0].1.chars().next().is_some());",
          "    assert!(mime.parameters[0].1.chars().any(|c| c == '\"'));",
          "    assert!(f.write_str(\"\\\\\").is_ok());",
          "    assert!(f.write_char(mime.parameters[0].1.chars().next().unwrap()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"multipart\"),",
          "        subtype: String::from(\"form-data\"),",
          "        parameters: vec![",
          "            (String::from(\"boundary\"), String::from(\"---123456\")),",
          "            (String::from(\"type\"), String::from(\"file\")),",
          "        ],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == true",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    chars.len() > 0",
          "    c == '\"' == true",
          "    c == '\\\\' == false",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char(c)? == Err(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"multipart\"),",
          "        subtype: String::from(\"form-data\"),",
          "        parameters: vec![",
          "            (String::from(\"boundary\"), String::from(\"---123456\")),",
          "            (String::from(\"type\"), String::from(\"file\")),",
          "        ],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == true",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    chars.len() > 0",
          "    c == '\"' == true",
          "    c == '\\\\' == false",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char(c)? == Err(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty() == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == true",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    !value.chars().is_empty() == true",
          "    c == '\"' == true",
          "    c == '\\\\' == false",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char(c)? == Err(None)"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = {",
          "        let mut output = String::new();",
          "        mime.fmt(&mut output);",
          "    };",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty() == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == true",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    !value.chars().is_empty() == true",
          "    c == '\"' == true",
          "    c == '\\\\' == false",
          "    f.write_str(\"\\\\\")? == Ok(())",
          "    f.write_char(c)? == Err(None)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]