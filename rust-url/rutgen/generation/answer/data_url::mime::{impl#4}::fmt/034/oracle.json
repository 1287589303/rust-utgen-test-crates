[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (parameters) != 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == true",
          "    c == '\"' == true",
          "    c == '\\\\' == true",
          "    f.write_char(c)? == Ok(())",
          "    c in value.chars() == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    (parameters) == 0",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (parameters) != 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == true",
          "    c == '\"' == true",
          "    c == '\\\\' == true",
          "    f.write_char(c)? == Ok(())",
          "    c in value.chars() == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    (parameters) == 0",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"description\"), String::from(\"\\\"escaped\\\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? is Ok",
          "    f.write_str(\"/\")? is Ok",
          "    f.write_str(&self.subtype)? is Ok",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? is Ok",
          "    f.write_str(name)? is Ok",
          "    f.write_str(\"=\")? is Ok",
          "    only_http_token_code_points(value) is false",
          "    f.write_str(\"\\\"\")? is Ok",
          "    c in value.chars() is true",
          "    c == '\"' is true",
          "    f.write_char(c)? is Ok",
          "    c in value.chars() is false",
          "    f.write_str(\"\\\"\")? is Ok",
          "    (name, value) in &self.parameters is false",
          "    Ok(()) is returned"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"description\"), String::from(\"\\\"escaped\\\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "    f.write_str(&self.type_)? is Ok",
          "    f.write_str(\"/\")? is Ok",
          "    f.write_str(&self.subtype)? is Ok",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? is Ok",
          "    f.write_str(name)? is Ok",
          "    f.write_str(\"=\")? is Ok",
          "    only_http_token_code_points(value) is false",
          "    f.write_str(\"\\\"\")? is Ok",
          "    c in value.chars() is true",
          "    c == '\"' is true",
          "    f.write_char(c)? is Ok",
          "    c in value.chars() is false",
          "    f.write_str(\"\\\"\")? is Ok",
          "    (name, value) in &self.parameters is false",
          "    Ok(()) is returned",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![",
          "            (String::from(\"size\"), String::from(\"\")),",
          "            (String::from(\"quality\"), String::from(\"\\\\n\")),",
          "        ],",
          "    };",
          "    let _ = fmt::format(mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() is true",
          "    c == '\"' is true",
          "    f.write_char(c)? == Ok(())",
          "    c in value.chars() is false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    (name, value) in &self.parameters is false",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![",
          "            (String::from(\"size\"), String::from(\"\")),",
          "            (String::from(\"quality\"), String::from(\"\\\\n\")),",
          "        ],",
          "    };",
          "    let _ = fmt::format(mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() is true",
          "    c == '\"' is true",
          "    f.write_char(c)? == Ok(())",
          "    c in value.chars() is false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    (name, value) in &self.parameters is false",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"audio\"),",
          "        subtype: String::from(\"mp3\"),",
          "        parameters: vec![(String::from(\"bitrate\"), String::from(\"\\\"128k\\\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.contains(&(String::from(\"bitrate\"), String::from(\"\\\"128k\\\"\")))",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(\"bitrate\")? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(\"\\\"128k\\\"\") == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    \"value\" contains characters that are escaped",
          "    f.write_char(c)? == Ok(())",
          "    value does not contain characters that require escaping",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    parameters is empty",
          "    return value == Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"audio\"),",
          "        subtype: String::from(\"mp3\"),",
          "        parameters: vec![(String::from(\"bitrate\"), String::from(\"\\\"128k\\\"\"))],",
          "    };",
          "    let _ = fmt::format(mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.contains(&(String::from(\"bitrate\"), String::from(\"\\\"128k\\\"\")))",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(\"bitrate\")? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(\"\\\"128k\\\"\") == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    \"value\" contains characters that are escaped",
          "    f.write_char(c)? == Ok(())",
          "    value does not contain characters that require escaping",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    parameters is empty",
          "    return value == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"video\"),",
          "        subtype: String::from(\"mp4\"),",
          "        parameters: vec![],",
          "    };",
          "    let _ = fmt::format(mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.type_, String::from(\"video\"));",
          "    assert_eq!(mime.subtype, String::from(\"mp4\"));",
          "    assert!(mime.parameters.is_empty());",
          "    let result = fmt::format(mime);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), \"video/mp4\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"video\"),",
          "        subtype: String::from(\"mp4\"),",
          "        parameters: vec![],",
          "    };",
          "    let _ = fmt::format(mime);",
          "    assert_eq!(mime.type_, String::from(\"video\"));",
          "    assert_eq!(mime.subtype, String::from(\"mp4\"));",
          "    assert!(mime.parameters.is_empty());",
          "    let result = fmt::format(mime);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), \"video/mp4\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]