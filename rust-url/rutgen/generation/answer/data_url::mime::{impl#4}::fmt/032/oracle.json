[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"\\\"test\\\"\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(());",
          "    f.write_str(\"/\")? == Ok(());",
          "    f.write_str(&self.subtype)? == Ok(());",
          "    !self.parameters.is_empty();",
          "    f.write_str(\";\")? == Ok(());",
          "    f.write_str(name)? == Ok(());",
          "    f.write_str(\"=\")? == Ok(());",
          "    only_http_token_code_points(value) == false;",
          "    f.write_str(\"\\\"\")? == Ok(());",
          "    value.chars().next().is_some();",
          "    c == '\"';",
          "    c == '\\\\';",
          "    f.write_char(c)? == Err(fmt::Error);"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"\\\"test\\\"\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(());",
          "    f.write_str(\"/\")? == Ok(());",
          "    f.write_str(&self.subtype)? == Ok(());",
          "    !self.parameters.is_empty();",
          "    f.write_str(\";\")? == Ok(());",
          "    f.write_str(name)? == Ok(());",
          "    f.write_str(\"=\")? == Ok(());",
          "    only_http_token_code_points(value) == false;",
          "    f.write_str(\"\\\"\")? == Ok(());",
          "    value.chars().next().is_some();",
          "    c == '\"';",
          "    c == '\\\\';",
          "    f.write_char(c)? == Err(fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![(\"file\".to_owned(), \"\\\\image\\\\path\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f.write_str(&mime.type_), Ok(()));",
          "    assert_eq!(f.write_str(\"/\"), Ok(()));",
          "    assert_eq!(f.write_str(&mime.subtype), Ok(()));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(f.write_str(\";\"), Ok(()));",
          "    assert_eq!(f.write_str(\"file\"), Ok(()));",
          "    assert_eq!(f.write_str(\"=\"), Ok(()));",
          "    assert!(!only_http_token_code_points(\"\\\\image\\\\path\"));",
          "    assert_eq!(f.write_str(\"\\\"\"), Ok(()));",
          "    assert!(!\"\\\\image\\\\path\".chars().is_empty());",
          "    assert!(matches!(f.write_char('\\\\'), Err(_)));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![(\"file\".to_owned(), \"\\\\image\\\\path\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    assert_eq!(f.write_str(&mime.type_), Ok(()));",
          "    assert_eq!(f.write_str(\"/\"), Ok(()));",
          "    assert_eq!(f.write_str(&mime.subtype), Ok(()));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(f.write_str(\";\"), Ok(()));",
          "    assert_eq!(f.write_str(\"file\"), Ok(()));",
          "    assert_eq!(f.write_str(\"=\"), Ok(()));",
          "    assert!(!only_http_token_code_points(\"\\\\image\\\\path\"));",
          "    assert_eq!(f.write_str(\"\\\"\"), Ok(()));",
          "    assert!(!\"\\\\image\\\\path\".chars().is_empty());",
          "    assert!(matches!(f.write_char('\\\\'), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: vec![(\"data\".to_owned(), \"example\\\"text\\\\data\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    value.chars().len() > 0",
          "    c == '\"'",
          "    c == '\\\\'",
          "    f.write_char(c)? == Err(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: vec![(\"data\".to_owned(), \"example\\\"text\\\\data\".to_owned())],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    value.chars().len() > 0",
          "    c == '\"'",
          "    c == '\\\\'",
          "    f.write_char(c)? == Err(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]