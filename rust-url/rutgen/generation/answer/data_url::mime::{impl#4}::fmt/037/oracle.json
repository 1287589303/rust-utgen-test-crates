[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"text/plain\");",
          "    assert!(buffer.is_empty() == false);",
          "    assert!(mime.parameters.is_empty());",
          "    assert!(Mime::fmt(&mime, &mut buffer).is_ok());",
          "    assert_eq!(buffer, \"text/plain\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "    assert_eq!(buffer, \"text/plain\");",
          "    assert!(buffer.is_empty() == false);",
          "    assert!(mime.parameters.is_empty());",
          "    assert!(Mime::fmt(&mime, &mut buffer).is_ok());",
          "    assert_eq!(buffer, \"text/plain\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? is Ok(())",
          "    f.write_str(\"/\")? is Ok(())",
          "    f.write_str(&self.subtype)? is Ok(())",
          "    (name, value) in &self.parameters is false",
          "    expected return value/type: Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "    f.write_str(&self.type_)? is Ok(())",
          "    f.write_str(\"/\")? is Ok(())",
          "    f.write_str(&self.subtype)? is Ok(())",
          "    (name, value) in &self.parameters is false",
          "    expected return value/type: Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == false",
          "    assert_eq!(buffer, \"image/png\")"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = mime.fmt(&mut buffer);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == false",
          "    assert_eq!(buffer, \"image/png\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]