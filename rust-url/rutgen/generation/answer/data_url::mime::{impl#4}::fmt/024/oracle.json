[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\\\"extra\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == true",
          "    c == '\"' == false",
          "    f.write_str(\"\\\\\")? == Err(None)"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\\\"extra\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == true",
          "    c == '\"' == false",
          "    f.write_str(\"\\\\\")? == Err(None)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![",
          "            (\"filename\".to_owned(), \"image\\\\file\\\"name\".to_owned()),",
          "            (\"width\".to_owned(), \"500\\\"px\\\\value\".to_owned()),",
          "        ],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"image/png;filename=\\\"image\\\\\\\\file\\\\\\\"name\\\";width=\\\"500\\\\\\\"px\\\\\\\\value\\\"\");"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![",
          "            (\"filename\".to_owned(), \"image\\\\file\\\"name\".to_owned()),",
          "            (\"width\".to_owned(), \"500\\\"px\\\\value\".to_owned()),",
          "        ],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    assert_eq!(buffer, \"image/png;filename=\\\"image\\\\\\\\file\\\\\\\"name\\\";width=\\\"500\\\\\\\"px\\\\\\\\value\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: vec![(\"data\".to_owned(), \"value_with_chars_©®\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"data\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"value_with_chars_©®\"));",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(!\"value_with_chars_©®\".chars().is_empty());",
          "    assert!(!(\"\\\"\".chars().any(|c| c == '\"')));",
          "    assert!(f.write_str(\"\\\\\").is_err());"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: vec![(\"data\".to_owned(), \"value_with_chars_©®\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"data\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"value_with_chars_©®\"));",
          "    assert!(f.write_str(\"\\\"\").is_ok());",
          "    assert!(!\"value_with_chars_©®\".chars().is_empty());",
          "    assert!(!(\"\\\"\".chars().any(|c| c == '\"')));",
          "    assert!(f.write_str(\"\\\\\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"csv\".to_owned(),",
          "        parameters: vec![(\"quote\".to_owned(), \"text\\\"and\\\\characters\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert!(buffer.contains(\"text/csv\"));",
          "    assert!(buffer.contains(\";quote=\\\"text\\\\\\\"and\\\\\\\\characters\\\"\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"csv\".to_owned(),",
          "        parameters: vec![(\"quote\".to_owned(), \"text\\\"and\\\\characters\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    assert!(buffer.contains(\"text/csv\"));",
          "    assert!(buffer.contains(\";quote=\\\"text\\\\\\\"and\\\\\\\\characters\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"html\".to_owned(),",
          "        parameters: vec![(\"value\".to_owned(), \" leading \\\\trailing\\\" \".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"text/html;value=\\\" leading \\\\trailing\\\\\\\" \\\"\");",
          "    assert!(buffer.contains(\"leading \\\\trailing\\\\\\\"\"));",
          "    assert!(buffer.starts_with(\"text/html\"));",
          "    assert!(buffer.contains(\";\"));",
          "    assert!(buffer.contains(\"value=\"));",
          "    assert!(buffer.contains(\"\\\"\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"html\".to_owned(),",
          "        parameters: vec![(\"value\".to_owned(), \" leading \\\\trailing\\\" \".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    assert_eq!(buffer, \"text/html;value=\\\" leading \\\\trailing\\\\\\\" \\\"\");",
          "    assert!(buffer.contains(\"leading \\\\trailing\\\\\\\"\"));",
          "    assert!(buffer.starts_with(\"text/html\"));",
          "    assert!(buffer.contains(\";\"));",
          "    assert!(buffer.contains(\"value=\"));",
          "    assert!(buffer.contains(\"\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]