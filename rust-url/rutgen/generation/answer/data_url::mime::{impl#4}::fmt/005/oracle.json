[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"param!@#\"), String::from(\"value\"))], // Invalid characters",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.parameters.len(), 1);",
          "    assert!(mime.parameters[0].0 == \"param!@#\");",
          "    assert!(mime.parameters[0].1 == \"value\");",
          "    assert!(fmt::write(&mut fmt::Formatter::new(), &mime).is_err());"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"param!@#\"), String::from(\"value\"))], // Invalid characters",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "    assert_eq!(mime.parameters.len(), 1);",
          "    assert!(mime.parameters[0].0 == \"param!@#\");",
          "    assert!(mime.parameters[0].1 == \"value\");",
          "    assert!(fmt::write(&mut fmt::Formatter::new(), &mime).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))], // Valid characters",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    let parameters = &self.parameters; parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Err(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))], // Valid characters",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    let parameters = &self.parameters; parameters.len() > 0",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Err(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"param\"), String::from(\"\"))], // Empty value",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty()",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Err(fmt::Error)"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"param\"), String::from(\"\"))], // Empty value",
          "    };",
          "    ",
          "    let _ = mime.fmt(&mut fmt::Formatter::new());",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty()",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Err(fmt::Error)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]