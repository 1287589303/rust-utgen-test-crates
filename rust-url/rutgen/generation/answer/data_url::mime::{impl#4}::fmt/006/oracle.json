[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f.write_str(&mime.type_), Ok(()));",
          "    assert_eq!(f.write_str(\"/\"), Ok(()));",
          "    assert_eq!(f.write_str(&mime.subtype), Ok(()));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(f.write_str(\";\"), Ok(()));",
          "    assert_eq!(f.write_str(\"charset\"), Ok(()));",
          "    assert_eq!(f.write_str(\"=\"), Err(None));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    assert_eq!(f.write_str(&mime.type_), Ok(()));",
          "    assert_eq!(f.write_str(\"/\"), Ok(()));",
          "    assert_eq!(f.write_str(&mime.subtype), Ok(()));",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(f.write_str(\";\"), Ok(()));",
          "    assert_eq!(f.write_str(\"charset\"), Ok(()));",
          "    assert_eq!(f.write_str(\"=\"), Err(None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8;invalid\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Err(fmt::Error)",
          "    only_http_token_code_points(value) == false",
          "    value contains invalid characters: \";\"",
          "    parameters contains a value with invalid encoding"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8;invalid\".to_owned())],",
          "    };",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters is true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Err(fmt::Error)",
          "    only_http_token_code_points(value) == false",
          "    value contains invalid characters: \";\"",
          "    parameters contains a value with invalid encoding",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]