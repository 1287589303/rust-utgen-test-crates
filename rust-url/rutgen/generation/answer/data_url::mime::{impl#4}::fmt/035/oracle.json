[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert!(output.is_empty());",
          "    assert_eq!(output, \"text/plain; charset=\\\"\\\"\");",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"charset\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"\"));",
          "    assert!(f.write_str(\"\\\"\").is_err());"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert!(output.is_empty());",
          "    assert_eq!(output, \"text/plain; charset=\\\"\\\"\");",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"charset\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"\"));",
          "    assert!(f.write_str(\"\\\"\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"foo\"), String::from(\"\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == false",
          "    f.write_str(\"\\\"\")? == Err(None)"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![(String::from(\"foo\"), String::from(\"\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (name, value) in &self.parameters == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == false",
          "    f.write_str(\"\\\"\")? == Ok(())",
          "    c in value.chars() == false",
          "    f.write_str(\"\\\"\")? == Err(None)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"size\"), String::from(\"invalid value\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"image/png;size=\\\"invalid value\\\"\");",
          "    assert!(output.contains(\"image\"));",
          "    assert!(output.contains(\"png\"));",
          "    assert!(output.contains(\"size\"));",
          "    assert!(output.contains(\"\\\"invalid value\\\"\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"size\"), String::from(\"invalid value\"))],",
          "    };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", mime);",
          "    assert_eq!(output, \"image/png;size=\\\"invalid value\\\"\");",
          "    assert!(output.contains(\"image\"));",
          "    assert!(output.contains(\"png\"));",
          "    assert!(output.contains(\"size\"));",
          "    assert!(output.contains(\"\\\"invalid value\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]