[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty() == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(\"charset\")? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(\"utf-8\") == true",
          "    \"value.is_empty()\" == false",
          "    f.write_str(\"utf-8\")? == Ok(())",
          "    !self.parameters.is_empty() == false",
          "    Ok(()) == Ok(())"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: vec![(String::from(\"charset\"), String::from(\"utf-8\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !self.parameters.is_empty() == true",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(\"charset\")? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(\"utf-8\") == true",
          "    \"value.is_empty()\" == false",
          "    f.write_str(\"utf-8\")? == Ok(())",
          "    !self.parameters.is_empty() == false",
          "    Ok(()) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![",
          "            (String::from(\"charset\"), String::from(\"utf-8\")),",
          "            (String::from(\"version\"), String::from(\"1.0\")),",
          "        ],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (parameters.len() > 0)",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == false",
          "    f.write_str(value)? == Ok(())",
          "    (format!(\"{}\", mime) == Ok(()))"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"application\"),",
          "        subtype: String::from(\"json\"),",
          "        parameters: vec![",
          "            (String::from(\"charset\"), String::from(\"utf-8\")),",
          "            (String::from(\"version\"), String::from(\"1.0\")),",
          "        ],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    (parameters.len() > 0)",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == false",
          "    f.write_str(value)? == Ok(())",
          "    (format!(\"{}\", mime) == Ok(()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"quality\"), String::from(\"high\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !(name, value) in &self.parameters",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == false",
          "    f.write_str(value)? == Ok(())",
          "    Ok(()) == expected return value"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![(String::from(\"quality\"), String::from(\"high\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    f.write_str(&self.type_)? == Ok(())",
          "    f.write_str(\"/\")? == Ok(())",
          "    f.write_str(&self.subtype)? == Ok(())",
          "    !(name, value) in &self.parameters",
          "    f.write_str(\";\")? == Ok(())",
          "    f.write_str(name)? == Ok(())",
          "    f.write_str(\"=\")? == Ok(())",
          "    only_http_token_code_points(value) == true",
          "    value.is_empty() == false",
          "    f.write_str(value)? == Ok(())",
          "    Ok(()) == expected return value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"content-type\"), String::from(\"\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", mime), \"text/html;content-type=\\\"\\\"\");",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"content-type\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"\").is_empty());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(format!(\"{}\", mime), \"text/html;content-type=\\\"\\\"\");",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(only_http_token_code_points(\"content-type\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"html\"),",
          "        parameters: vec![(String::from(\"content-type\"), String::from(\"\"))],",
          "    };",
          "    let _ = format!(\"{}\", mime);",
          "    assert_eq!(format!(\"{}\", mime), \"text/html;content-type=\\\"\\\"\");",
          "    assert!(f.write_str(&mime.type_).is_ok());",
          "    assert!(f.write_str(\"/\").is_ok());",
          "    assert!(f.write_str(&mime.subtype).is_ok());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(f.write_str(\"content-type\").is_ok());",
          "    assert!(f.write_str(\"=\").is_ok());",
          "    assert!(!only_http_token_code_points(\"\").is_empty());",
          "    assert!(!mime.parameters.is_empty());",
          "    assert_eq!(format!(\"{}\", mime), \"text/html;content-type=\\\"\\\"\");",
          "    assert!(f.write_str(\";\").is_ok());",
          "    assert!(only_http_token_code_points(\"content-type\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]