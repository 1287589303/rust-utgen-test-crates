[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    let _result: InvalidBase64 = error.into();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    let result: InvalidBase64 = error.into();",
          "    assert!(matches!(result, InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))));",
          "    assert_eq!(format!(\"{:?}\", result), \"InvalidBase64(UnexpectedSymbol(42))\");",
          "    assert!(matches!(error, DecodeError::InvalidBase64(_)));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    let _result: InvalidBase64 = error.into();",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    let result: InvalidBase64 = error.into();",
          "    assert!(matches!(result, InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))));",
          "    assert_eq!(format!(\"{:?}\", result), \"InvalidBase64(UnexpectedSymbol(42))\");",
          "    assert!(matches!(error, DecodeError::InvalidBase64(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    let _result: InvalidBase64 = error.into();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    let result: InvalidBase64 = error.into();",
          "    assert_eq!(result, InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    let _result: InvalidBase64 = error.into();",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    let result: InvalidBase64 = error.into();",
          "    assert_eq!(result, InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    let _result: InvalidBase64 = error.into();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    let expected = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    let _result: InvalidBase64 = error.into();",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    let expected = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding));",
          "    let _result: InvalidBase64 = error.into();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding));",
          "    let result: InvalidBase64 = error.into();",
          "    assert_eq!(result, InvalidBase64(InvalidBase64Details::Padding));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding));",
          "    let _result: InvalidBase64 = error.into();",
          "    let error = DecodeError::InvalidBase64(InvalidBase64(InvalidBase64Details::Padding));",
          "    let result: InvalidBase64 = error.into();",
          "    assert_eq!(result, InvalidBase64(InvalidBase64Details::Padding));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]