[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"abc\\xFF\"; // ASCII followed by non-ASCII, pos will be 3",
          "    split_ascii_fast_path_prefix(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split_ascii_fast_path_prefix(b\"abc\\xFF\"), (&b\"ab\"[..], &b\"\\xFF\"[..]));"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"abc\\xFF\"; // ASCII followed by non-ASCII, pos will be 3",
          "    split_ascii_fast_path_prefix(label);",
          "    assert_eq!(split_ascii_fast_path_prefix(b\"abc\\xFF\"), (&b\"ab\"[..], &b\"\\xFF\"[..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"xyz\\xC2\\xA9\"; // ASCII followed by non-ASCII (©), pos will be 3",
          "    split_ascii_fast_path_prefix(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(split_ascii_fast_path_prefix(b\"xyz\\xC2\\xA9\"), (&b\"\"[..], b\"xyz\\xC2\\xA9\"));"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"xyz\\xC2\\xA9\"; // ASCII followed by non-ASCII (©), pos will be 3",
          "    split_ascii_fast_path_prefix(label);",
          "    assert_eq!(split_ascii_fast_path_prefix(b\"xyz\\xC2\\xA9\"), (&b\"\"[..], b\"xyz\\xC2\\xA9\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
          "    split_ascii_fast_path_prefix(label);",
          "}"
        ],
        "oracle": [
          "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
          "    assert_eq!(split_ascii_fast_path_prefix(label), (&[], label));"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
          "    split_ascii_fast_path_prefix(label);",
          "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
          "    assert_eq!(split_ascii_fast_path_prefix(label), (&[], label));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"a\\xE2\\x80\\x98a\"; // ASCII character followed by non-ASCII (‘), pos will be 1",
          "    split_ascii_fast_path_prefix(label);",
          "}"
        ],
        "oracle": [
          "    split_ascii_fast_path_prefix(b\"a\\xE2\\x80\\x98a\"); // expects (&[], b\"a\\xE2\\x80\\x98a\")"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"a\\xE2\\x80\\x98a\"; // ASCII character followed by non-ASCII (‘), pos will be 1",
          "    split_ascii_fast_path_prefix(label);",
          "    split_ascii_fast_path_prefix(b\"a\\xE2\\x80\\x98a\"); // expects (&[], b\"a\\xE2\\x80\\x98a\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
          "    split_ascii_fast_path_prefix(label);",
          "}"
        ],
        "oracle": [
          "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
          "    assert_eq!(split_ascii_fast_path_prefix(label), (&[b's', b't', b'r', b'i', b'n', b'g'], &label[6..]));"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
          "    split_ascii_fast_path_prefix(label);",
          "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
          "    assert_eq!(split_ascii_fast_path_prefix(label), (&[b's', b't', b'r', b'i', b'n', b'g'], &label[6..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]