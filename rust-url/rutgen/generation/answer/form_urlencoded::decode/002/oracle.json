[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"Hello%20World\";",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(\"Hello World\"));"
        ],
        "code": [
          "{",
          "    let input = b\"Hello%20World\";",
          "    let result = decode(input);",
          "    assert_eq!(result, Cow::Borrowed(\"Hello World\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"\";",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    let expected = Cow::Borrowed(\"\");",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = b\"\";",
          "    let result = decode(input);",
          "    let expected = Cow::Borrowed(\"\");",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"JustAString\";",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(\"JustAString\"));"
        ],
        "code": [
          "{",
          "    let input = b\"JustAString\";",
          "    let result = decode(input);",
          "    assert_eq!(result, Cow::Borrowed(\"JustAString\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"H\"; // single valid character",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(\"H\"));"
        ],
        "code": [
          "{",
          "    let input = b\"H\"; // single valid character",
          "    let result = decode(input);",
          "    assert_eq!(result, Cow::Borrowed(\"H\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"Hello%21%24%26%27\"; // contains special percent-encoded characters",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(\"Hello!$&'\"));",
          "    assert_eq!(result.len(), 11);",
          "    assert_eq!(result.as_ref(), \"Hello!$&'\");",
          "    assert!(result.is_borrowed());"
        ],
        "code": [
          "{",
          "    let input = b\"Hello%21%24%26%27\"; // contains special percent-encoded characters",
          "    let result = decode(input);",
          "    assert_eq!(result, Cow::Borrowed(\"Hello!$&'\"));",
          "    assert_eq!(result.len(), 11);",
          "    assert_eq!(result.as_ref(), \"Hello!$&'\");",
          "    assert!(result.is_borrowed());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"Hello%20World%2C%20%3E%3C%3D\"; // includes various characters",
          "    let result = decode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(\"Hello World, ><=1\"));",
          "    assert_eq!(result.len(), 20);",
          "    assert!(result.contains(\"Hello\"));",
          "    assert!(result.contains(\"World\"));",
          "    assert!(result.contains(\",\"));",
          "    assert!(result.contains(\">\"));",
          "    assert!(result.contains(\"<\"));",
          "    assert!(result.contains(\"=\"));",
          "    assert_eq!(result.as_ref().chars().count(), 20);"
        ],
        "code": [
          "{",
          "    let input = b\"Hello%20World%2C%20%3E%3C%3D\"; // includes various characters",
          "    let result = decode(input);",
          "    assert_eq!(result, Cow::Borrowed(\"Hello World, ><=1\"));",
          "    assert_eq!(result.len(), 20);",
          "    assert!(result.contains(\"Hello\"));",
          "    assert!(result.contains(\"World\"));",
          "    assert!(result.contains(\",\"));",
          "    assert!(result.contains(\">\"));",
          "    assert!(result.contains(\"<\"));",
          "    assert!(result.contains(\"=\"));",
          "    assert_eq!(result.as_ref().chars().count(), 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]