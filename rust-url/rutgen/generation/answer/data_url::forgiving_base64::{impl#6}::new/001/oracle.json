[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let callback = |_: &[u8]| -> Result<(), ()> { Ok(()) };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "}"
        ],
        "oracle": [
          "    let callback = |_: &[u8]| -> Result<(), ()> { Ok(()) };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);"
        ],
        "code": [
          "{",
          "    let callback = |_: &[u8]| -> Result<(), ()> { Ok(()) };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    let callback = |_: &[u8]| -> Result<(), ()> { Ok(()) };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let callback = |input: &[u8]| -> Result<(), ()> {",
          "        assert!(input.is_empty());",
          "        Ok(())",
          "    };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.write_bytes as usize, callback as usize);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);"
        ],
        "code": [
          "{",
          "    let callback = |input: &[u8]| -> Result<(), ()> {",
          "        assert!(input.is_empty());",
          "        Ok(())",
          "    };",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    assert_eq!(decoder.write_bytes as usize, callback as usize);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let callback = |_: &[u8]| -> Result<(), &'static str> { Err(\"error\") };",
          "    let decoder: Decoder<_, _> = Decoder::new(callback);",
          "}"
        ],
        "oracle": [
          "    let callback = |_: &[u8]| -> Result<(), &'static str> { Err(\"error\") };",
          "    let decoder: Decoder<_, _> = Decoder::new(callback);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);",
          "    assert!(std::mem::size_of_val(&decoder.write_bytes) > 0);"
        ],
        "code": [
          "{",
          "    let callback = |_: &[u8]| -> Result<(), &'static str> { Err(\"error\") };",
          "    let decoder: Decoder<_, _> = Decoder::new(callback);",
          "    let callback = |_: &[u8]| -> Result<(), &'static str> { Err(\"error\") };",
          "    let decoder: Decoder<_, _> = Decoder::new(callback);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);",
          "    assert!(std::mem::size_of_val(&decoder.write_bytes) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let callback = |data: &[u8]| -> Result<(), ()> {",
          "        assert!(data.len() > 100);",
          "        Ok(())",
          "    };",
          "    let data = vec![0u8; 150];",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    let _ = decoder.feed(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.write_bytes as *const _ as usize, callback as *const _ as usize);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);"
        ],
        "code": [
          "{",
          "    let callback = |data: &[u8]| -> Result<(), ()> {",
          "        assert!(data.len() > 100);",
          "        Ok(())",
          "    };",
          "    let data = vec![0u8; 150];",
          "    let decoder: Decoder<_, ()> = Decoder::new(callback);",
          "    let _ = decoder.feed(&data);",
          "    assert_eq!(decoder.write_bytes as *const _ as usize, callback as *const _ as usize);",
          "    assert_eq!(decoder.bit_buffer, 0);",
          "    assert_eq!(decoder.buffer_bit_length, 0);",
          "    assert_eq!(decoder.padding_symbols, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]