[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_slice_of_start_exceeding_length() {",
      "    struct TestRangeArg;",
      "",
      "    let range = RangeFrom::<u32>::from(12);",
      "    let s = \"test string\";",
      "    range.slice_of(s);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRangeArg;",
          "",
          "    let range = RangeFrom::<u32>::from(0);",
          "    let s = \"test string\";",
          "    range.slice_of(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.slice_of(\"test string\"), \"test string\");",
          "    let range_out_of_bounds = RangeFrom::<u32>::from(15);",
          "    let result = std::panic::catch_unwind(|| range_out_of_bounds.slice_of(\"test string\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(range.slice_of(\"\"), \"\");",
          "    let range_at_start = RangeFrom::<u32>::from(0);",
          "    assert_eq!(range_at_start.slice_of(\"another test\"), \"another test\");",
          "    let range_exceeding_length = RangeFrom::<u32>::from(9);",
          "    let result_exceeding = std::panic::catch_unwind(|| range_exceeding_length.slice_of(\"test\"));",
          "    assert!(result_exceeding.is_err());"
        ],
        "code": [
          "{",
          "    struct TestRangeArg;",
          "",
          "    let range = RangeFrom::<u32>::from(0);",
          "    let s = \"test string\";",
          "    range.slice_of(s);",
          "    assert_eq!(range.slice_of(\"test string\"), \"test string\");",
          "    let range_out_of_bounds = RangeFrom::<u32>::from(15);",
          "    let result = std::panic::catch_unwind(|| range_out_of_bounds.slice_of(\"test string\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(range.slice_of(\"\"), \"\");",
          "    let range_at_start = RangeFrom::<u32>::from(0);",
          "    assert_eq!(range_at_start.slice_of(\"another test\"), \"another test\");",
          "    let range_exceeding_length = RangeFrom::<u32>::from(9);",
          "    let result_exceeding = std::panic::catch_unwind(|| range_exceeding_length.slice_of(\"test\"));",
          "    assert!(result_exceeding.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRangeArg;",
          "",
          "    let range = RangeFrom::<u32>::from(11);",
          "    let s = \"test string\";",
          "    range.slice_of(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.slice_of(\"test string\"), \"\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"g\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"string\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"test string\");",
          "    assert_eq!(range.slice_of(\"sample text\"), \"ple text\");",
          "    assert_panics!(range.slice_of(\"test string\"));"
        ],
        "code": [
          "{",
          "    struct TestRangeArg;",
          "",
          "    let range = RangeFrom::<u32>::from(11);",
          "    let s = \"test string\";",
          "    range.slice_of(s);",
          "    assert_eq!(range.slice_of(\"test string\"), \"\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"g\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"string\");",
          "    assert_eq!(range.slice_of(\"test string\"), \"test string\");",
          "    assert_eq!(range.slice_of(\"sample text\"), \"ple text\");",
          "    assert_panics!(range.slice_of(\"test string\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]