[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Domain(\"example.com\")));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Domain(\"example.com\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://subdomain.example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 27,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 28,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(7..27))));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://subdomain.example.com/path\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 27,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 28,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(7..27))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://123.456.789.000/path\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(8..20))));",
          "    ",
          "    url.host = HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(127, 0, 0, 1))));",
          "    ",
          "    url.host = HostInternal::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0d, 0xb8, 0x85, 0xa3, 0x00, 0x00));",
          "    assert_eq!(url.host(), Some(Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0d, 0xb8, 0x85, 0xa3, 0x00, 0x00))));",
          "    ",
          "    url.host = HostInternal::None;",
          "    assert_eq!(url.host(), None);",
          "    ",
          "    url.host = HostInternal::Domain;",
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(8..20))));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://123.456.789.000/path\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(8..20))));",
          "    ",
          "    url.host = HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1));",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(127, 0, 0, 1))));",
          "    ",
          "    url.host = HostInternal::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0d, 0xb8, 0x85, 0xa3, 0x00, 0x00));",
          "    assert_eq!(url.host(), Some(Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0d, 0xb8, 0x85, 0xa3, 0x00, 0x00))));",
          "    ",
          "    url.host = HostInternal::None;",
          "    assert_eq!(url.host(), None);",
          "    ",
          "    url.host = HostInternal::Domain;",
          "    assert_eq!(url.host(), Some(Host::Domain(url.slice(8..20))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]