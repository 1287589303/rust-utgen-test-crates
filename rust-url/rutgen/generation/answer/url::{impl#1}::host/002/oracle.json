[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://0.0.0.0\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(0, 0, 0, 0)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0))));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://0.0.0.0\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(0, 0, 0, 0)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(0, 0, 0, 0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://255.255.255.255\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255))));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://255.255.255.255\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://192.168.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1))));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://192.168.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(192, 168, 1, 1)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.host();",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url_edge_low = Url {",
          "        serialization: String::from(\"http://1.1.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(1, 1, 1, 1)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_edge_low.host();",
          "",
          "    let url_edge_high = Url {",
          "        serialization: String::from(\"http://255.255.255.255\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_edge_high.host();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_edge_low.host(), Some(Host::Ipv4(Ipv4Addr::new(1, 1, 1, 1))));",
          "    assert_eq!(url_edge_high.host(), Some(Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255))));"
        ],
        "code": [
          "{",
          "    let url_edge_low = Url {",
          "        serialization: String::from(\"http://1.1.1.1\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(1, 1, 1, 1)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_edge_low.host();",
          "",
          "    let url_edge_high = Url {",
          "        serialization: String::from(\"http://255.255.255.255\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(255, 255, 255, 255)),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_edge_high.host();",
          "    assert_eq!(url_edge_low.host(), Some(Host::Ipv4(Ipv4Addr::new(1, 1, 1, 1))));",
          "    assert_eq!(url_edge_high.host(), Some(Host::Ipv4(Ipv4Addr::new(255, 255, 255, 255))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]