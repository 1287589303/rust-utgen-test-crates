[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let fragment = Some(\"test_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(12).unwrap()));",
          "    assert_eq!(url.serialization, \"#test_fragment\");",
          "    assert!(url.fragment_start.is_some());"
        ],
        "code": [
          "{",
          "    let fragment = Some(\"test_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(12).unwrap()));",
          "    assert_eq!(url.serialization, \"#test_fragment\");",
          "    assert!(url.fragment_start.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let fragment = Some(\"another_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(16).unwrap()));",
          "    assert_eq!(url.serialization, \"#another_fragment\".to_string());",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.serialization.len(), 17);"
        ],
        "code": [
          "{",
          "    let fragment = Some(\"another_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(16).unwrap()));",
          "    assert_eq!(url.serialization, \"#another_fragment\".to_string());",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.serialization.len(), 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let fragment = Some(\"example_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(15).unwrap()));",
          "    assert_eq!(url.serialization, \"#example_fragment\".to_string());"
        ],
        "code": [
          "{",
          "    let fragment = Some(\"example_fragment\".to_string());",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(15).unwrap()));",
          "    assert_eq!(url.serialization, \"#example_fragment\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]