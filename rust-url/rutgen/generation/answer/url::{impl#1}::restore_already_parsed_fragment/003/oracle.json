[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com#existing_fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(25),",
          "    };",
          "    let fragment = Some(String::from(\"new_fragment\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(url.serialization.len()).unwrap()));",
          "    assert_eq!(url.serialization, \"http://example.com#new_fragment\");",
          "    assert!(url.serialization.contains('#'));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com#existing_fragment\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 14,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(25),",
          "    };",
          "    let fragment = Some(String::from(\"new_fragment\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(url.serialization.len()).unwrap()));",
          "    assert_eq!(url.serialization, \"http://example.com#new_fragment\");",
          "    assert!(url.serialization.contains('#'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.com#another_fragment\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(26),",
          "    };",
          "    let fragment = Some(String::from(\"changed_fragment\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(url.serialization.len()).unwrap()));",
          "    assert_eq!(url.serialization, \"https://example.com#changed_fragment\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.com#another_fragment\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(26),",
          "    };",
          "    let fragment = Some(String::from(\"changed_fragment\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(url.serialization.len()).unwrap()));",
          "    assert_eq!(url.serialization, \"https://example.com#changed_fragment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com#old_fragment\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 13,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let fragment = Some(String::from(\"fragment_with_spaces and special*&chars\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(to_u32(48).unwrap()));",
          "    assert_eq!(url.serialization, \"ftp://example.com#fragment_with_spaces and special*&chars\");",
          "    assert!(url.serialization.len() > \"ftp://example.com#old_fragment\".len());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com#old_fragment\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 13,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(24),",
          "    };",
          "    let fragment = Some(String::from(\"fragment_with_spaces and special*&chars\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(to_u32(48).unwrap()));",
          "    assert_eq!(url.serialization, \"ftp://example.com#fragment_with_spaces and special*&chars\");",
          "    assert!(url.serialization.len() > \"ftp://example.com#old_fragment\".len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"mailto:user@example.com#previous_value\"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(29),",
          "    };",
          "    let fragment = Some(String::from(\"123456\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(29));",
          "    assert_eq!(url.serialization, \"mailto:user@example.com#123456\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"mailto:user@example.com#previous_value\"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: Some(29),",
          "    };",
          "    let fragment = Some(String::from(\"123456\"));",
          "    url.restore_already_parsed_fragment(fragment);",
          "    assert_eq!(url.fragment_start, Some(29));",
          "    assert_eq!(url.serialization, \"mailto:user@example.com#123456\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]