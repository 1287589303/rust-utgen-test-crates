[
  {
    "uses": [
      "use std::path::Path;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"C:/folder/file.txt\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(serialization, \"/C:/folder/file.txt\");",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.len() > 0);",
          "    assert!(parser::is_windows_drive_letter(&serialization[1..2]));"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"C:/folder/file.txt\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(serialization, \"/C:/folder/file.txt\");",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.len() > 0);",
          "    assert!(parser::is_windows_drive_letter(&serialization[1..2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"D:/another_folder/subfolder/file.dat\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    serialization.clear();",
          "    let path = Path::new(\"D:/another_folder/subfolder/file.dat\");",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.contains(\"/D:\"));",
          "    assert!(serialization.ends_with(\"/another_folder/subfolder/file.dat\"));",
          "    assert!(serialization.len() > host_end);",
          "    assert!(!parser::is_windows_drive_letter(&serialization[host_end..]));"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"D:/another_folder/subfolder/file.dat\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    serialization.clear();",
          "    let path = Path::new(\"D:/another_folder/subfolder/file.dat\");",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.contains(\"/D:\"));",
          "    assert!(serialization.ends_with(\"/another_folder/subfolder/file.dat\"));",
          "    assert!(serialization.len() > host_end);",
          "    assert!(!parser::is_windows_drive_letter(&serialization[host_end..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"E:/projects/example\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((host_end, HostInternal::None)));",
          "    assert!(serialization.starts_with(\"/E:\"));",
          "    assert!(serialization.ends_with(\"/projects/example\"));",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(serialization.chars().filter(|&c| c == '/').count(), 2);",
          "    assert!(serialization.contains(\"/projects\"));"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "",
          "    let mut serialization = String::new();",
          "    let path = Path::new(\"E:/projects/example\");",
          "",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    assert_eq!(result, Ok((host_end, HostInternal::None)));",
          "    assert!(serialization.starts_with(\"/E:\"));",
          "    assert!(serialization.ends_with(\"/projects/example\"));",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(serialization.chars().filter(|&c| c == '/').count(), 2);",
          "    assert!(serialization.contains(\"/projects\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]