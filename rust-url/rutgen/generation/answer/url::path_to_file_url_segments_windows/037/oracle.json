[
  {
    "uses": [
      "use std::path::Component;",
      "use std::path::Path;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\path\\to\\resürcé\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(matches!(result.err().unwrap(), ()));"
        ],
        "code": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\path\\to\\resürcé\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(matches!(result.err().unwrap(), ()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\another_directory\\resource\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/C:/another_directory/resource\");",
          "    assert_eq!(result.unwrap().1, HostInternal::None);",
          "    assert!(serialization.len() > 0);",
          "    assert!(serialization.starts_with('/'));",
          "    assert!(serialization.contains(\"/C:\"));",
          "    assert!(result.unwrap().0 > 0);",
          "    assert!(serialization.ends_with(\"/resource\"));"
        ],
        "code": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\another_directory\\resource\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/C:/another_directory/resource\");",
          "    assert_eq!(result.unwrap().1, HostInternal::None);",
          "    assert!(serialization.len() > 0);",
          "    assert!(serialization.starts_with('/'));",
          "    assert!(serialization.contains(\"/C:\"));",
          "    assert!(result.unwrap().0 > 0);",
          "    assert!(serialization.ends_with(\"/resource\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\root\\\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, r\"//./C:/root/\");",
          "    assert!(result.unwrap().0 > 0);",
          "    assert!(matches!(result.unwrap().1, HostInternal::None));"
        ],
        "code": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\root\\\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, r\"//./C:/root/\");",
          "    assert!(result.unwrap().0 > 0);",
          "    assert!(matches!(result.unwrap().1, HostInternal::None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\resource\\\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    serialization.is_empty() == false",
          "    result.is_ok() == true",
          "    result.unwrap().0 > 0",
          "    result.unwrap().1 == HostInternal::None",
          "    serialization.contains(\"/\") == true",
          "    serialization.contains(\"%2F\") == false",
          "    serialization.ends_with(\"/\") == true",
          "    serialization.contains(\"C:\") == true",
          "    serialization.contains(\"resource\") == true",
          "    serialization.chars().all(|c| c.is_ascii() || c.is_digit(10)) == true",
          "    serialization.split('/').last().unwrap() == \"resource\""
        ],
        "code": [
          "{",
          "    use std::path::{Path, Component};",
          "    let mut serialization = String::new();",
          "    let path = Path::new(r\"\\\\.\\C:\\resource\\\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    serialization.is_empty() == false",
          "    result.is_ok() == true",
          "    result.unwrap().0 > 0",
          "    result.unwrap().1 == HostInternal::None",
          "    serialization.contains(\"/\") == true",
          "    serialization.contains(\"%2F\") == false",
          "    serialization.ends_with(\"/\") == true",
          "    serialization.contains(\"C:\") == true",
          "    serialization.contains(\"resource\") == true",
          "    serialization.chars().all(|c| c.is_ascii() || c.is_digit(10)) == true",
          "    serialization.split('/').last().unwrap() == \"resource\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]