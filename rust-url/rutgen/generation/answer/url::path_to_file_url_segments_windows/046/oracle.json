[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server\\share\\additional\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(matches!(result.err(), Some(())));"
        ],
        "code": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server\\share\\additional\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(matches!(result.err(), Some(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server-채\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server-채\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(result.unwrap_err().is_none());"
        ],
        "code": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server-채\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server-채\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert!(result.is_err());",
          "    assert_eq!(serialization, \"\");",
          "    assert!(result.unwrap_err().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server#name\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));",
          "    assert!(serialization.is_empty());",
          "    assert!(serialization.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut serialization = String::new();",
          "    let path = std::path::Path::new(r\"\\\\server#name\\share\\path\");",
          "    let result = path_to_file_url_segments_windows(path, &mut serialization);",
          "    assert_eq!(result, Err(()));",
          "    assert!(serialization.is_empty());",
          "    assert!(serialization.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]