[
  {
    "uses": [
      "use std::path::Path;",
      "use std::path::Component;",
      "use std::string::String;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\folder\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/myserver/myshare/folder/file\");",
          "    assert!(serialization.chars().last() == Some('/'));",
          "    assert!(serialization.len() > host_start);",
          "    assert!(host_internal == HostInternal::None);",
          "    assert!(host_end >= 0);",
          "    assert!(host_end <= u32::MAX as usize);",
          "    assert!(serialization.contains(\"/\"));",
          "    assert!(serialization.contains(\"myserver\"));",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(component.as_os_str().to_str().ok() == Some(\"folder\"));",
          "    assert!(component.as_os_str().to_str().ok() == Some(\"file\"));",
          "    assert_eq!(result, Ok((host_end, host_internal)));"
        ],
        "code": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\folder\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/myserver/myshare/folder/file\");",
          "    assert!(serialization.chars().last() == Some('/'));",
          "    assert!(serialization.len() > host_start);",
          "    assert!(host_internal == HostInternal::None);",
          "    assert!(host_end >= 0);",
          "    assert!(host_end <= u32::MAX as usize);",
          "    assert!(serialization.contains(\"/\"));",
          "    assert!(serialization.contains(\"myserver\"));",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(component.as_os_str().to_str().ok() == Some(\"folder\"));",
          "    assert!(component.as_os_str().to_str().ok() == Some(\"file\"));",
          "    assert_eq!(result, Ok((host_end, host_internal)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\folder1\\folder2\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((host_end, host_internal)));",
          "    assert!(serialization.len() > 0);",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert!(serialization.contains(\"/myserver/\"));",
          "    assert!(serialization.contains(\"/myshare/\"));",
          "    assert!(serialization.contains(\"/folder1/\"));",
          "    assert!(serialization.contains(\"/folder2/\"));",
          "    assert!(serialization.contains(\"/file\"));",
          "    assert!(!serialization.ends_with(\"/\"));",
          "    assert!(serialization.len() > host_start);"
        ],
        "code": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\folder1\\folder2\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok((host_end, host_internal)));",
          "    assert!(serialization.len() > 0);",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert!(serialization.contains(\"/myserver/\"));",
          "    assert!(serialization.contains(\"/myshare/\"));",
          "    assert!(serialization.contains(\"/folder1/\"));",
          "    assert!(serialization.contains(\"/folder2/\"));",
          "    assert!(serialization.contains(\"/file\"));",
          "    assert!(!serialization.ends_with(\"/\"));",
          "    assert!(serialization.len() > host_start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\nestedfolder\\file.txt\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((expected_host_end, expected_host_internal)));",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert!(serialization.contains(\"myserver\"));",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(serialization.contains(\"nestedfolder\"));",
          "    assert!(serialization.contains(\"file.txt\"));",
          "    assert!(serialization.len() > 0);",
          "    assert!(!serialization.contains('\\0'));",
          "    assert!(!serialization.contains('\\t'));",
          "    assert!(!serialization.contains('\\n'));",
          "    assert!(!serialization.contains('\\r'));",
          "    assert!(!serialization.contains(' '));",
          "    assert!(!serialization.contains('#'));",
          "    assert!(!serialization.contains('/'));",
          "    assert!(!serialization.contains(':'));",
          "    assert!(!serialization.contains('<'));",
          "    assert!(!serialization.contains('>'));",
          "    assert!(!serialization.contains('?'));",
          "    assert!(!serialization.contains('@'));",
          "    assert!(!serialization.contains('['));",
          "    assert!(!serialization.contains('\\\\'));",
          "    assert!(!serialization.contains(']'));",
          "    assert!(!serialization.contains('^'));",
          "    assert!(!serialization.contains('|'));",
          "    assert!(serialization.ends_with(\"file.txt\"));",
          "    assert!(serialization.contains('/'));",
          "    assert!(serialization.contains(':'));"
        ],
        "code": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\nestedfolder\\file.txt\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok((expected_host_end, expected_host_internal)));",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert!(serialization.contains(\"myserver\"));",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(serialization.contains(\"nestedfolder\"));",
          "    assert!(serialization.contains(\"file.txt\"));",
          "    assert!(serialization.len() > 0);",
          "    assert!(!serialization.contains('\\0'));",
          "    assert!(!serialization.contains('\\t'));",
          "    assert!(!serialization.contains('\\n'));",
          "    assert!(!serialization.contains('\\r'));",
          "    assert!(!serialization.contains(' '));",
          "    assert!(!serialization.contains('#'));",
          "    assert!(!serialization.contains('/'));",
          "    assert!(!serialization.contains(':'));",
          "    assert!(!serialization.contains('<'));",
          "    assert!(!serialization.contains('>'));",
          "    assert!(!serialization.contains('?'));",
          "    assert!(!serialization.contains('@'));",
          "    assert!(!serialization.contains('['));",
          "    assert!(!serialization.contains('\\\\'));",
          "    assert!(!serialization.contains(']'));",
          "    assert!(!serialization.contains('^'));",
          "    assert!(!serialization.contains('|'));",
          "    assert!(serialization.ends_with(\"file.txt\"));",
          "    assert!(serialization.contains('/'));",
          "    assert!(serialization.contains(':'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert!(serialization.is_empty());",
          "    assert_eq!(result.unwrap().1, HostInternal::None);",
          "    assert!(serialization.starts_with(\"/\\\\myserver\"));",
          "    assert!(serialization.contains('/'));",
          "    assert!(serialization.ends_with('/'));",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(serialization.split('/').count(), 3);",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(serialization.contains(\"file\"));"
        ],
        "code": [
          "{",
          "    use std::path::{Component, Path};",
          "    use std::string::String;",
          "    let mut serialization = String::new();",
          "",
          "    let path = Path::new(r\"\\\\myserver\\myshare\\file\");",
          "    ",
          "    let result = path_to_file_url_segments_windows(&path, &mut serialization);",
          "    ",
          "    // Call to the function under test",
          "    assert!(result.is_ok());",
          "    assert!(serialization.is_empty());",
          "    assert_eq!(result.unwrap().1, HostInternal::None);",
          "    assert!(serialization.starts_with(\"/\\\\myserver\"));",
          "    assert!(serialization.contains('/'));",
          "    assert!(serialization.ends_with('/'));",
          "    assert!(serialization.len() > 0);",
          "    assert_eq!(serialization.split('/').count(), 3);",
          "    assert!(serialization.contains(\"myshare\"));",
          "    assert!(serialization.contains(\"file\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]