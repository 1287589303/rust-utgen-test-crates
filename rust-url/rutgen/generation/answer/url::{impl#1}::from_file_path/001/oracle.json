[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    ",
          "    let url_invalid_relative = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url_invalid_relative.is_err());",
          "    ",
          "    let url_invalid_http = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url_invalid_http.is_err());",
          "    ",
          "    let url_invalid_non_absolute = Url::from_file_path(\"foo.txt\");",
          "    assert!(url_invalid_non_absolute.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    ",
          "    let url_invalid_relative = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url_invalid_relative.is_err());",
          "    ",
          "    let url_invalid_http = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url_invalid_http.is_err());",
          "    ",
          "    let url_invalid_non_absolute = Url::from_file_path(\"foo.txt\");",
          "    assert!(url_invalid_non_absolute.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    assert!(url.is_err());",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    assert!(url.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url.is_err());",
          "    assert!(url.is_err());",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    assert!(url.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"C:/Users/foo.txt\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    assert_eq!(url.unwrap_err(), ());",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C://Users/foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\file.txt\");",
          "    assert_eq!(url.as_str(), \"file:////server/share/file.txt\");",
          "    let url = Url::from_file_path(\"/\");",
          "    assert_eq!(url.as_str(), \"file:///\");",
          "    let url = Url::from_file_path(\"\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"relative/path.txt\");",
          "    assert!(url.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"C:/Users/foo.txt\");",
          "    assert!(url.is_err());",
          "    assert_eq!(url.unwrap_err(), ());",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C://Users/foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\file.txt\");",
          "    assert_eq!(url.as_str(), \"file:////server/share/file.txt\");",
          "    let url = Url::from_file_path(\"/\");",
          "    assert_eq!(url.as_str(), \"file:///\");",
          "    let url = Url::from_file_path(\"\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"relative/path.txt\");",
          "    assert!(url.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    assert!(url.is_err());",
          "    assert_eq!(url.unwrap_err(), ());",
          "    assert_eq!(url.as_str(), \"file://\");",
          "    assert!(url.host_str().is_none());",
          "    assert!(url.path().is_empty());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\");",
          "    assert!(url.is_err());",
          "    assert!(url.is_err());",
          "    assert_eq!(url.unwrap_err(), ());",
          "    assert_eq!(url.as_str(), \"file://\");",
          "    assert!(url.host_str().is_none());",
          "    assert!(url.path().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"Users/foo.txt\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"C:/Users/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file://C:/Users/foo.txt\");",
          "    ",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\foo.txt\");",
          "    assert_eq!(url.as_str(), \"file://server/share/foo.txt\");",
          "    ",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"Users/foo.txt\");",
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"https://google.com/\");",
          "    assert!(url.is_err());",
          "    ",
          "    let url = Url::from_file_path(\"C:/Users/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file://C:/Users/foo.txt\");",
          "    ",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\foo.txt\");",
          "    assert_eq!(url.as_str(), \"file://server/share/foo.txt\");",
          "    ",
          "    let url = Url::from_file_path(\"/tmp/foo.txt\");",
          "    assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"D:/foo.txt\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_ok());",
          "    assert_eq!(url.as_str(), \"file:///D:/foo.txt\");",
          "    assert!(Url::from_file_path(\"../foo.txt\").is_err());",
          "    assert!(Url::from_file_path(\"https://google.com/\").is_err());",
          "    assert!(Url::from_file_path(\"/tmp/foo.txt\").is_err());",
          "    assert!(Url::from_file_path(\"\").is_err());",
          "    assert!(Url::from_file_path(\"D:\").is_err());",
          "    assert!(Url::from_file_path(\"C:/\").is_ok());",
          "    assert!(Url::from_file_path(r\"\\\\server\\share\\file.txt\").is_ok());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"D:/foo.txt\");",
          "    assert!(url.is_ok());",
          "    assert_eq!(url.as_str(), \"file:///D:/foo.txt\");",
          "    assert!(Url::from_file_path(\"../foo.txt\").is_err());",
          "    assert!(Url::from_file_path(\"https://google.com/\").is_err());",
          "    assert!(Url::from_file_path(\"/tmp/foo.txt\").is_err());",
          "    assert!(Url::from_file_path(\"\").is_err());",
          "    assert!(Url::from_file_path(\"D:\").is_err());",
          "    assert!(Url::from_file_path(\"C:/\").is_ok());",
          "    assert!(Url::from_file_path(r\"\\\\server\\share\\file.txt\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    assert_eq!(url.err().unwrap(), ());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"\");",
          "    assert!(url.is_err());",
          "    assert_eq!(url.err().unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"ab\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    assert_eq!(url.err().unwrap(), ());",
          "    let url = Url::from_file_path(\"/absolute/path/to/file.txt\");",
          "    assert_eq!(url.as_str(), \"file:///absolute/path/to/file.txt\");",
          "    let url = Url::from_file_path(\"../relative/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:/absolute/path/file.txt\");",
          "    assert_eq!(url.as_str(), \"file:///C:/absolute/path/file.txt\");",
          "    let url = Url::from_file_path(\"G://\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\file.txt\");",
          "    assert_eq!(url.as_str(), \"file://server/share/file.txt\");",
          "    let url = Url::from_file_path(\"file:///absolute/path/file.txt\");",
          "    assert!(url.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"ab\");",
          "    assert!(url.is_err());",
          "    assert_eq!(url.err().unwrap(), ());",
          "    let url = Url::from_file_path(\"/absolute/path/to/file.txt\");",
          "    assert_eq!(url.as_str(), \"file:///absolute/path/to/file.txt\");",
          "    let url = Url::from_file_path(\"../relative/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:/absolute/path/file.txt\");",
          "    assert_eq!(url.as_str(), \"file:///C:/absolute/path/file.txt\");",
          "    let url = Url::from_file_path(\"G://\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\server\\\\share\\\\file.txt\");",
          "    assert_eq!(url.as_str(), \"file://server/share/file.txt\");",
          "    let url = Url::from_file_path(\"file:///absolute/path/file.txt\");",
          "    assert!(url.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::from_file_path(\"/path/to/non_existent_file.txt\");",
          "}"
        ],
        "oracle": [
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"relative/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"https://example.com/\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:non_absolute_path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\unc/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"non_absolute.txt\");",
          "    assert!(url.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::from_file_path(\"/path/to/non_existent_file.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"../foo.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"relative/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"https://example.com/\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"C:non_absolute_path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"\\\\\\\\unc/path.txt\");",
          "    assert!(url.is_err());",
          "    let url = Url::from_file_path(\"non_absolute.txt\");",
          "    assert!(url.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]