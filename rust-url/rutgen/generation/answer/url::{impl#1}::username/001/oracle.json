[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user:pass@host.com\").unwrap();",
          "    let username = url.username();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(username, \"user\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user:pass@host.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://user%20name@server.com\").unwrap();",
          "    let username = url.username();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(username, \"user name\");",
          "    ",
          "    let url = Url::parse(\"http://user123@domain.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user123\");",
          "    ",
          "    let url = Url::parse(\"https://rms@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"rms\");",
          "    ",
          "    let url = Url::parse(\"ftp://:password@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"\");",
          "    ",
          "    let url = Url::parse(\"ftp://username:@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"username\");",
          "    ",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://user%20name@server.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user name\");",
          "    ",
          "    let url = Url::parse(\"http://user123@domain.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user123\");",
          "    ",
          "    let url = Url::parse(\"https://rms@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"rms\");",
          "    ",
          "    let url = Url::parse(\"ftp://:password@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"\");",
          "    ",
          "    let url = Url::parse(\"ftp://username:@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"username\");",
          "    ",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user123:secret@host.com\").unwrap();",
          "    let username = url.username();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(username, \"user123\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user123:secret@host.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user123\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://username:@host.com\").unwrap();",
          "    let username = url.username();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(username, \"username\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://username:@host.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"username\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://user%3Apass@host.com\").unwrap();",
          "    let username = url.username();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(username, \"user:pass\");",
          "    assert_eq!(url.username_end, 15);",
          "    assert!(url.has_authority());",
          "    assert!(url.username_end > url.scheme_end + 6);",
          "    assert_eq!(url.scheme_end, 4);",
          "    assert!(username.contains(':'));",
          "    assert!(username == \"user:pass\");"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://user%3Apass@host.com\").unwrap();",
          "    let username = url.username();",
          "    assert_eq!(username, \"user:pass\");",
          "    assert_eq!(url.username_end, 15);",
          "    assert!(url.has_authority());",
          "    assert!(url.username_end > url.scheme_end + 6);",
          "    assert_eq!(url.scheme_end, 4);",
          "    assert!(username.contains(':'));",
          "    assert!(username == \"user:pass\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]