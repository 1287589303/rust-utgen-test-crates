[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut called = false;",
          "    let write_bytes = |bytes: &[u8]| {",
          "        called = true;",
          "        Ok(())",
          "    };",
          "    let mut decoder = Decoder::new(write_bytes);",
          "    let input: &[u8] = b\"QUJD=!\";",
          "    let result = decoder.feed(input);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err();",
          "    matches!(result, Err(DecodeError::InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)));",
          "    assert_eq!(decoder.padding_symbols, 1);",
          "    assert!(called);"
        ],
        "code": [
          "{",
          "    let mut called = false;",
          "    let write_bytes = |bytes: &[u8]| {",
          "        called = true;",
          "        Ok(())",
          "    };",
          "    let mut decoder = Decoder::new(write_bytes);",
          "    let input: &[u8] = b\"QUJD=!\";",
          "    let result = decoder.feed(input);",
          "    result.unwrap_err();",
          "    matches!(result, Err(DecodeError::InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)));",
          "    assert_eq!(decoder.padding_symbols, 1);",
          "    assert!(called);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut called = false;",
          "    let write_bytes = |bytes: &[u8]| {",
          "        called = true;",
          "        Ok(())",
          "    };",
          "    let mut decoder = Decoder::new(write_bytes);",
          "    let input: &[u8] = b\"QUJD==\";",
          "    let result = decoder.feed(input);",
          "}"
        ],
        "oracle": [
          "    let input: &[u8] = b\"QUJD==\";",
          "    let result = decoder.feed(input);",
          "    assert_eq!(result, Err(InvalidBase64Details::AlphabetSymbolAfterPadding.into()));",
          "    assert!(called);"
        ],
        "code": [
          "{",
          "    let mut called = false;",
          "    let write_bytes = |bytes: &[u8]| {",
          "        called = true;",
          "        Ok(())",
          "    };",
          "    let mut decoder = Decoder::new(write_bytes);",
          "    let input: &[u8] = b\"QUJD==\";",
          "    let result = decoder.feed(input);",
          "    let input: &[u8] = b\"QUJD==\";",
          "    let result = decoder.feed(input);",
          "    assert_eq!(result, Err(InvalidBase64Details::AlphabetSymbolAfterPadding.into()));",
          "    assert!(called);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]