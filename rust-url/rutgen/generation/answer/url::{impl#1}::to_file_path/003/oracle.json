[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com/path\").unwrap();",
          "    let result = url.to_file_path();",
          "}"
        ],
        "oracle": [
          "    let url = Url::parse(\"file://localhost/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://example.com/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://example.com/path?query=1\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file:///etc/passwd\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://user@host/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    let url = Url::parse(\"file://localhost/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://example.com/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://example.com/path?query=1\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file:///etc/passwd\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "    let url = Url::parse(\"file://user@host/path\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result.is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://ftp.example.com/some/file\").unwrap();",
          "    let result = url.to_file_path();",
          "}"
        ],
        "oracle": [
          "    let url = Url::parse(\"ftp://ftp.example.com/some/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://ftp.example.com/some/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    let url = Url::parse(\"ftp://ftp.example.com/some/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com/path/with/invalid/character/\").unwrap();",
          "    let result = url.to_file_path();",
          "}"
        ],
        "oracle": [
          "    let url = Url::parse(\"file://example.com/path/with/invalid/character/\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://localhost/path/to/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://somehost.com/path/to/somefile\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://[::1]/path/to/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com/path/with/invalid/character/\").unwrap();",
          "    let result = url.to_file_path();",
          "    let url = Url::parse(\"file://example.com/path/with/invalid/character/\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://localhost/path/to/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://somehost.com/path/to/somefile\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let url = Url::parse(\"file://[::1]/path/to/file\").unwrap();",
          "    let result = url.to_file_path();",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]