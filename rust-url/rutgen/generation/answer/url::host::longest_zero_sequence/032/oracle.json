[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 1]) == (0, 2)",
          "    longest_zero_sequence(&[0, 1, 0, 0, 0, 0, 0, 1]) == (1, 5)",
          "    longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]) == (0, 8)",
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]) == (0, 6)",
          "    longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]) == (0, 4)"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 1];",
          "    longest_zero_sequence(&pieces);",
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 1]) == (0, 2)",
          "    longest_zero_sequence(&[0, 1, 0, 0, 0, 0, 0, 1]) == (1, 5)",
          "    longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]) == (0, 8)",
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]) == (0, 6)",
          "    longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]) == (0, 4)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 1, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 0, 0, 1, 1, 1]), (2, 5));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]), (0, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 1, 1, 1]), (1, 5));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 1, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 0, 0, 1, 1, 1]), (2, 5));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]), (0, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 1, 1, 1]), (1, 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 1, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 1, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]