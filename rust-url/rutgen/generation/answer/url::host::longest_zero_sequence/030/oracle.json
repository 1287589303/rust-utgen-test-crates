[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 2));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 0, 0, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 6));",
          "    let pieces: [u16; 8] = [1, 1, 1, 1, 1, 1, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (-1, -2));",
          "    let pieces: [u16; 8] = [0, 0, 0, 1, 0, 1, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 3));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 4));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 0, 0, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 8));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "    let pieces: [u16; 8] = [0, 0, 1, 0, 0, 0, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 2));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 0, 0, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 6));",
          "    let pieces: [u16; 8] = [1, 1, 1, 1, 1, 1, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (-1, -2));",
          "    let pieces: [u16; 8] = [0, 0, 0, 1, 0, 1, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 3));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 4));",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 0, 0, 0, 0];",
          "    assert_eq!(longest_zero_sequence(&pieces), (0, 8));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 1, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]) == (0, 3)",
          "    longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]) == (0, 8)",
          "    longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]) == (0, 5)",
          "    longest_zero_sequence(&[0, 1, 1, 0, 0, 0, 0, 0]) == (3, 8)"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 1, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "    longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]) == (0, 3)",
          "    longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]) == (0, 8)",
          "    longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]) == (-1, -2)",
          "    longest_zero_sequence(&[0, 0, 1, 0, 0, 0, 0, 0]) == (0, 5)",
          "    longest_zero_sequence(&[0, 1, 1, 0, 0, 0, 0, 0]) == (3, 8)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [1, 1, 1, 1, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 1, 1, 1, 1]), (0, 3));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 1]), (4, 6));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 1, 0, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 0, 0, 0, 0, 0, 1]), (2, 7));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (0, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]), (0, 0));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 0, 1, 1]), (1, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 0, 0, 0, 0, 1]), (3, 7));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 0, 0]), (6, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 1, 0, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 0, 0, 1]), (1, 7));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 0, 0, 0]), (5, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 1, 1, 1, 1, 1, 0]), (0, 0));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [1, 1, 1, 1, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 1, 1, 1, 1]), (0, 3));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 1]), (4, 6));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 1, 0, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 0, 0, 0, 0, 0, 1]), (2, 7));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (0, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]), (0, 0));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 0, 1, 1]), (1, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 0, 0, 0, 0, 1]), (3, 7));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 0, 0]), (6, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 1, 0, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 0, 0, 0, 1]), (1, 7));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 0, 0, 0]), (5, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 1, 1, 1, 1, 1, 0]), (0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 1, 0, 1, 0, 1, 0, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 0, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 1, 0, 0]), (0, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (0, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 1, 0, 0, 0]), (1, 5));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 1, 1, 0, 1, 1, 1]), (2, 2));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 1, 0, 1, 0, 1, 0, 1];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 1, 0, 1, 0, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 0, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 1, 0, 0]), (0, 6));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (0, 8));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 0, 0, 1, 0, 0, 0]), (1, 5));",
          "    assert_eq!(longest_zero_sequence(&[1, 0, 1, 1, 0, 1, 1, 1]), (2, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 1, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 0, 0, 0, 1, 1]), (2, 6));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]), (0, 3));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 1, 1, 1]), (0, 5));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 1]), (0, 6));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 0, 0, 1, 1, 1, 1];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 1, 1, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 0, 0, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 1, 0, 0, 0, 0, 1, 1]), (2, 6));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 0, 0]), (0, 3));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 1, 1, 1, 1]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 1, 1, 1]), (0, 5));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 1, 1, 1, 1]), (0, 2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 1]), (0, 6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 1, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 0, 0, 0, 0]), (2, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 0, 0, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[1, 2, 3, 4, 5, 6, 7, 8]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 1, 0]), (0, 3));"
        ],
        "code": [
          "{",
          "    let pieces: [u16; 8] = [0, 0, 1, 1, 0, 0, 0, 0];",
          "    longest_zero_sequence(&pieces);",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 1, 1, 0, 0, 0, 0]), (2, 4));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 1, 0, 0, 1]), (0, 4));",
          "    assert_eq!(longest_zero_sequence(&[1, 1, 1, 1, 0, 0, 0, 0]), (4, 8));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 0, 0, 0, 0, 0]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[1, 2, 3, 4, 5, 6, 7, 8]), (-1, -2));",
          "    assert_eq!(longest_zero_sequence(&[0, 0, 0, 1, 0, 0, 1, 0]), (0, 3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]