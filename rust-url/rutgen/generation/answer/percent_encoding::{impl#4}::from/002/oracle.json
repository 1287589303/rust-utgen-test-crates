[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(&[]));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "    assert_eq!(result, Cow::Borrowed(&[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"Hello World\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(b\"Hello World\".as_slice()));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"Hello World\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "    assert_eq!(result, Cow::Borrowed(b\"Hello World\".as_slice()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"A\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(b\"A\" as &[u8]));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"A\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "    assert_eq!(result, Cow::Borrowed(b\"A\" as &[u8]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"This string contains no percent characters.\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Cow::Borrowed(b\"This string contains no percent characters.\"));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"This string contains no percent characters.\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "    assert_eq!(result, Cow::Borrowed(b\"This string contains no percent characters.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"123456\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Cow::Borrowed(_)));",
          "    assert_eq!(result, Cow::Borrowed(b\"123456\".as_slice()));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"123456\";",
          "    let iter = PercentDecode { bytes: bytes.iter() };",
          "    let result: Cow<[u8]> = From::from(iter);",
          "    assert!(matches!(result, Cow::Borrowed(_)));",
          "    assert_eq!(result, Cow::Borrowed(b\"123456\".as_slice()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]