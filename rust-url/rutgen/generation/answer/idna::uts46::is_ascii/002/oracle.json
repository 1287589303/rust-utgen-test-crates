[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['A', 'B', 'C', 'é'];",
          "    let result = is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['A', 'B', 'C', 'é'];",
          "    let result = is_ascii(label);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['ñ'];",
          "    let result = is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['ñ'];",
          "    let result = is_ascii(label);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['Δ', 'Ω', '©'];",
          "    let result = is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['Δ', 'Ω', '©'];",
          "    let result = is_ascii(label);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['H', 'e', 'l', 'l', 'ø', '!', ' '];",
          "    let result = is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['H', 'e', 'l', 'l', 'ø', '!', ' '];",
          "    let result = is_ascii(label);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut label: Vec<char> = vec!['A'; 1000]; // 1000 ASCII characters",
          "    label.push('é'); // Add a non-ASCII character",
          "    let result = is_ascii(&label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let mut label: Vec<char> = vec!['A'; 1000]; // 1000 ASCII characters",
          "    label.push('é'); // Add a non-ASCII character",
          "    let result = is_ascii(&label);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]