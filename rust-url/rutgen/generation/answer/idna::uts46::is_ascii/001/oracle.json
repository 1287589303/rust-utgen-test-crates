[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a']), true);",
          "    assert_eq!(is_ascii(&['A']), true);",
          "    assert_eq!(is_ascii(&['1']), true);",
          "    assert_eq!(is_ascii(&['!']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&[' ']), true);",
          "    assert_eq!(is_ascii(&['a', 'ñ']), false);",
          "    assert_eq!(is_ascii(&['あ']), false);",
          "    assert_eq!(is_ascii(&['é']), false);",
          "    assert_eq!(is_ascii(&['😊']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', 'あ']), false);",
          "    assert_eq!(is_ascii(&['A', 'B', 'é']), false);",
          "    assert_eq!(is_ascii(&['1', '2', '😊']), false);",
          "    assert_eq!(is_ascii(&['!', '€']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', 'A']), true);",
          "    assert_eq!(is_ascii(&['x', 'y', 'z', '中']), false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a']), true);",
          "    assert_eq!(is_ascii(&['A']), true);",
          "    assert_eq!(is_ascii(&['1']), true);",
          "    assert_eq!(is_ascii(&['!']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&[' ']), true);",
          "    assert_eq!(is_ascii(&['a', 'ñ']), false);",
          "    assert_eq!(is_ascii(&['あ']), false);",
          "    assert_eq!(is_ascii(&['é']), false);",
          "    assert_eq!(is_ascii(&['😊']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', 'あ']), false);",
          "    assert_eq!(is_ascii(&['A', 'B', 'é']), false);",
          "    assert_eq!(is_ascii(&['1', '2', '😊']), false);",
          "    assert_eq!(is_ascii(&['!', '€']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', 'A']), true);",
          "    assert_eq!(is_ascii(&['x', 'y', 'z', '中']), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['a', 'b', 'c', '1', '2', '3', '!', '@', '#'];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', '2', '3', '!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', 'ñ']), false);",
          "    assert_eq!(is_ascii(&['a', 'ç', 'c']), false);",
          "    assert_eq!(is_ascii(&['ü', '1', '3']), false);",
          "    assert_eq!(is_ascii(&['😀', 'a', 'b']), false);",
          "    assert_eq!(is_ascii(&[]), true);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['a', 'b', 'c', '1', '2', '3', '!', '@', '#'];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', '2', '3', '!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', 'ñ']), false);",
          "    assert_eq!(is_ascii(&['a', 'ç', 'c']), false);",
          "    assert_eq!(is_ascii(&['ü', '1', '3']), false);",
          "    assert_eq!(is_ascii(&['😀', 'a', 'b']), false);",
          "    assert_eq!(is_ascii(&[]), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: Vec<char> = ('a'..='z').chain('A'..='Z').chain('0'..='9').chain(\"!@#$%^&*()_+\").collect();",
          "    let label: &[char] = &label;",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert!(is_ascii(&['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']));",
          "    assert!(is_ascii(&['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']));",
          "    assert!(is_ascii(&['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']));",
          "    assert!(is_ascii(&['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+']));",
          "    assert!(!is_ascii(&['a', 'b', 'c', 'ü', 'e']));",
          "    assert!(!is_ascii(&['A', 'B', 'C', 'ß', 'E']));",
          "    assert!(!is_ascii(&['0', '1', '2', 'ñ', '4']));",
          "    assert!(!is_ascii(&['!', '@', '#', '€', '%']));"
        ],
        "code": [
          "{",
          "    let label: Vec<char> = ('a'..='z').chain('A'..='Z').chain('0'..='9').chain(\"!@#$%^&*()_+\").collect();",
          "    let label: &[char] = &label;",
          "    is_ascii(label);",
          "    assert!(is_ascii(&['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']));",
          "    assert!(is_ascii(&['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']));",
          "    assert!(is_ascii(&['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']));",
          "    assert!(is_ascii(&['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+']));",
          "    assert!(!is_ascii(&['a', 'b', 'c', 'ü', 'e']));",
          "    assert!(!is_ascii(&['A', 'B', 'C', 'ß', 'E']));",
          "    assert!(!is_ascii(&['0', '1', '2', 'ñ', '4']));",
          "    assert!(!is_ascii(&['!', '@', '#', '€', '%']));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let label: &[char] = &['a', 'b', 'c', '中'];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '中']), false);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '.', '_']), true);",
          "    assert_eq!(is_ascii(&['a', '中']), false);",
          "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
          "    assert_eq!(is_ascii(&[]), true);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['a', 'b', 'c', '中'];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c', '中']), false);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '.', '_']), true);",
          "    assert_eq!(is_ascii(&['a', '中']), false);",
          "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
          "    assert_eq!(is_ascii(&[]), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]