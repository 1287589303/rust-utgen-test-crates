[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'ç']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', '中']), false);",
          "    assert_eq!(is_ascii(&['あ', 'い', 'う']), false);",
          "    assert_eq!(is_ascii(&['$', '%', '&']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', ' '] ), true);",
          "    assert_eq!(is_ascii(&[' ', '!', '@']), true);",
          "    assert_eq!(is_ascii(&['a', 'B', 'c', '9', '.', '-']), true);",
          "    assert_eq!(is_ascii(&['日', '本']), false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'ç']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', '中']), false);",
          "    assert_eq!(is_ascii(&['あ', 'い', 'う']), false);",
          "    assert_eq!(is_ascii(&['$', '%', '&']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', ' '] ), true);",
          "    assert_eq!(is_ascii(&[' ', '!', '@']), true);",
          "    assert_eq!(is_ascii(&['a', 'B', 'c', '9', '.', '-']), true);",
          "    assert_eq!(is_ascii(&['日', '本']), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['a'];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a']), true);",
          "    assert_eq!(is_ascii(&['A']), true);",
          "    assert_eq!(is_ascii(&['0']), true);",
          "    assert_eq!(is_ascii(&['-', '_']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['0', '1', '2']), true);",
          "    assert_eq!(is_ascii(&['a', '1', 'A']), true);",
          "    assert_eq!(is_ascii(&['-', '0', 'A']), true);",
          "    assert_eq!(is_ascii(&['a', 'Z', '-', '9']), true);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['a'];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a']), true);",
          "    assert_eq!(is_ascii(&['A']), true);",
          "    assert_eq!(is_ascii(&['0']), true);",
          "    assert_eq!(is_ascii(&['-', '_']), true);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['0', '1', '2']), true);",
          "    assert_eq!(is_ascii(&['a', '1', 'A']), true);",
          "    assert_eq!(is_ascii(&['-', '0', 'A']), true);",
          "    assert_eq!(is_ascii(&['a', 'Z', '-', '9']), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['h', 'e', 'l', 'l', 'o'];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['h', 'e', 'l', 'l', 'o']), true);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['h', 'e', 'l', 'l', 'o'];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['h', 'e', 'l', 'l', 'o']), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: Vec<char> = (0..1000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
          "    is_ascii(&label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&vec!['a', '1', '-']), true);",
          "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&vec![' ']), true);",
          "    assert_eq!(is_ascii(&vec!['-']), true);",
          "    assert_eq!(is_ascii(&vec!['あ', 'い', 'う']), false);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'あ']), false);",
          "    assert_eq!(is_ascii(&vec!['', ' ', 'あ']), false);",
          "    assert_eq!(is_ascii(&vec!['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&vec!['a', '€']), false);"
        ],
        "code": [
          "{",
          "    let label: Vec<char> = (0..1000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
          "    is_ascii(&label);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&vec!['a', '1', '-']), true);",
          "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&vec![' ']), true);",
          "    assert_eq!(is_ascii(&vec!['-']), true);",
          "    assert_eq!(is_ascii(&vec!['あ', 'い', 'う']), false);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'あ']), false);",
          "    assert_eq!(is_ascii(&vec!['', ' ', 'あ']), false);",
          "    assert_eq!(is_ascii(&vec!['!', '@', '#']), true);",
          "    assert_eq!(is_ascii(&vec!['a', '€']), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&[' ', '\\t']), true);",
          "    assert_eq!(is_ascii(&['©', '日']), false);",
          "    assert_eq!(is_ascii(&['<', '>', '&']), true);",
          "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
          "    assert_eq!(is_ascii(&['\\u{00E9}']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', '©', 'c']), false);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &[];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
          "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&[' ', '\\t']), true);",
          "    assert_eq!(is_ascii(&['©', '日']), false);",
          "    assert_eq!(is_ascii(&['<', '>', '&']), true);",
          "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
          "    assert_eq!(is_ascii(&['\\u{00E9}']), false);",
          "    assert_eq!(is_ascii(&['a', 'b', '©', 'c']), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[char] = &['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$'];",
          "    is_ascii(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$']), true);"
        ],
        "code": [
          "{",
          "    let label: &[char] = &['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$'];",
          "    is_ascii(label);",
          "    assert_eq!(is_ascii(&['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$']), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: Vec<char> = (0..2000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
          "    is_ascii(&label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', '1']), true);",
          "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&vec!['0', '1', '2']), true);",
          "    assert_eq!(is_ascii(&vec!['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&vec!['ñ', 'á', 'ó']), false);",
          "    assert_eq!(is_ascii(&vec!['你', '好']), false);",
          "    assert_eq!(is_ascii(&vec!['😊']), false);",
          "    assert_eq!(is_ascii(&vec!['hello', 'world']), true);",
          "    assert_eq!(is_ascii(&vec!['Hello', 'World!']), true);",
          "    assert_eq!(is_ascii(&vec!['unicode', '字符']), false);",
          "    assert_eq!(is_ascii(&vec!['ascii', 'test', 'case']), true);"
        ],
        "code": [
          "{",
          "    let label: Vec<char> = (0..2000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
          "    is_ascii(&label);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
          "    assert_eq!(is_ascii(&vec!['a', 'b', '1']), true);",
          "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
          "    assert_eq!(is_ascii(&vec!['0', '1', '2']), true);",
          "    assert_eq!(is_ascii(&vec!['-', '_', '.']), true);",
          "    assert_eq!(is_ascii(&vec!['ñ', 'á', 'ó']), false);",
          "    assert_eq!(is_ascii(&vec!['你', '好']), false);",
          "    assert_eq!(is_ascii(&vec!['😊']), false);",
          "    assert_eq!(is_ascii(&vec!['hello', 'world']), true);",
          "    assert_eq!(is_ascii(&vec!['Hello', 'World!']), true);",
          "    assert_eq!(is_ascii(&vec!['unicode', '字符']), false);",
          "    assert_eq!(is_ascii(&vec!['ascii', 'test', 'case']), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]