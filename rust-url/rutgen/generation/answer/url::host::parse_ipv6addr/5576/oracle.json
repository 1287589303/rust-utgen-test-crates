[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1.1.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"::1.1.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 1, 1));"
        ],
        "code": [
          "{",
          "    let input = \"::1.1.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"::1.1.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 1, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Ipv6Addr::new(0x2001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x7334)));"
        ],
        "code": [
          "{",
          "    let input = \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\";",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result, Ok(Ipv6Addr::new(0x2001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x7334)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"2001:db8::ff00:42:8329\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Ipv6Addr::new(8193, 5672, 0, 0, 65280, 66, 13177, 0)));"
        ],
        "code": [
          "{",
          "    let input = \"2001:db8::ff00:42:8329\";",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result, Ok(Ipv6Addr::new(8193, 5672, 0, 0, 65280, 66, 13177, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::ffff:192.168.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 65535, 3232235777));"
        ],
        "code": [
          "{",
          "    let input = \"::ffff:192.168.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 65535, 3232235777));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"fe80::1ff:fe23:4567:890a\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"fe80::1ff:fe23:4567:890a\";",
          "    let expected = Ok(Ipv6Addr::new(0xfe80, 0, 0, 0, 0x1ff, 0xfe23, 0x4567, 0x890a));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = \"fe80::1ff:fe23:4567:890a\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"fe80::1ff:fe23:4567:890a\";",
          "    let expected = Ok(Ipv6Addr::new(0xfe80, 0, 0, 0, 0x1ff, 0xfe23, 0x4567, 0x890a));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]