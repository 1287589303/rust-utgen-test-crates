[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));"
        ],
        "code": [
          "{",
          "    let input = \"::1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"::1.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6 = result.unwrap();",
          "    assert_eq!(ipv6, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 1, 1));"
        ],
        "code": [
          "{",
          "    let input = \"::1.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"::1.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6 = result.unwrap();",
          "    assert_eq!(ipv6, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 1, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::0.0.0.0\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"::0.0.0.0\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));"
        ],
        "code": [
          "{",
          "    let input = \"::0.0.0.0\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"::0.0.0.0\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::ffff:192.168.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr.segments(), [0, 0, 0, 0, 0, 0xffff, 192, 168, 1, 1]);"
        ],
        "code": [
          "{",
          "    let input = \"::ffff:192.168.1.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr.segments(), [0, 0, 0, 0, 0, 0xffff, 192, 168, 1, 1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]