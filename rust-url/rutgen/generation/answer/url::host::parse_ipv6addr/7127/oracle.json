[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \":1:2:3:4:5:6:7:8\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \":1:2:3:4:5:6:7:8\";",
          "    let expected = Ok(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8));",
          "    assert_eq!(result, expected);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap() == expected.unwrap());"
        ],
        "code": [
          "{",
          "    let input = \":1:2:3:4:5:6:7:8\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \":1:2:3:4:5:6:7:8\";",
          "    let expected = Ok(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8));",
          "    assert_eq!(result, expected);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap() == expected.unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \":abcd:ef12:3456:789a:bcde:f012:3456:789a\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Ipv6Addr::new(0, 0xabcd, 0xef12, 0x3456, 0x789a, 0xbcde, 0xf012, 0x3456)));"
        ],
        "code": [
          "{",
          "    let input = \":abcd:ef12:3456:789a:bcde:f012:3456:789a\";",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result, Ok(Ipv6Addr::new(0, 0xabcd, 0xef12, 0x3456, 0x789a, 0xbcde, 0xf012, 0x3456)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \":0:0:0:0:0:0:0:0\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \":0:0:0:0:0:0:0:0\";",
          "    assert_eq!(result, Ok(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)));",
          "    assert!(len >= 2);",
          "    assert!(input[0] == b':');",
          "    assert!(i < len);",
          "    assert!(piece_pointer == 8);",
          "    assert!(input[i] == b':');",
          "    assert!(i == end);",
          "    assert!(i < len);",
          "    assert!(input[i] == b':');",
          "    assert!(input[i] == b':');",
          "    assert!(i != len);",
          "    assert!(is_ip_v4);",
          "    assert!(is_ip_v4);",
          "    assert!(piece_pointer <= 6);",
          "    assert!(i == len);",
          "    assert!(numbers_seen == 4);",
          "    assert!(i == len);",
          "    assert!(compress_pointer.is_none());",
          "    assert!(piece_pointer == 8);"
        ],
        "code": [
          "{",
          "    let input = \":0:0:0:0:0:0:0:0\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \":0:0:0:0:0:0:0:0\";",
          "    assert_eq!(result, Ok(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)));",
          "    assert!(len >= 2);",
          "    assert!(input[0] == b':');",
          "    assert!(i < len);",
          "    assert!(piece_pointer == 8);",
          "    assert!(input[i] == b':');",
          "    assert!(i == end);",
          "    assert!(i < len);",
          "    assert!(input[i] == b':');",
          "    assert!(input[i] == b':');",
          "    assert!(i != len);",
          "    assert!(is_ip_v4);",
          "    assert!(is_ip_v4);",
          "    assert!(piece_pointer <= 6);",
          "    assert!(i == len);",
          "    assert!(numbers_seen == 4);",
          "    assert!(i == len);",
          "    assert!(compress_pointer.is_none());",
          "    assert!(piece_pointer == 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \":ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \":ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff));"
        ],
        "code": [
          "{",
          "    let input = \":ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \":ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_ok());",
          "    let ipv6_addr = result.unwrap();",
          "    assert_eq!(ipv6_addr, Ipv6Addr::new(0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]