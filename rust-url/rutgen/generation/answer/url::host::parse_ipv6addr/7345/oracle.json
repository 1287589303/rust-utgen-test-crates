[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"::\";",
          "    let expected = Err(ParseError::InvalidIpv6Address);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = \"::\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"::\";",
          "    let expected = Err(ParseError::InvalidIpv6Address);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \":::\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ParseError::InvalidIpv6Address);"
        ],
        "code": [
          "{",
          "    let input = \":::\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ParseError::InvalidIpv6Address);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789;\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"::1\"; // case where input starts with \"::\", expected to be valid",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01::2345:6789:abcd:ef01:2345:6789\"; // case with too many segments",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789:ghij\"; // case with non-hex digits",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd::\"; // case with extra \"::\"",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789.0.0.1\"; // case where piece_pointer > 6",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);"
        ],
        "code": [
          "{",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789;\";",
          "    let result = parse_ipv6addr(input);",
          "    let input = \"::1\"; // case where input starts with \"::\", expected to be valid",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01::2345:6789:abcd:ef01:2345:6789\"; // case with too many segments",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789:ghij\"; // case with non-hex digits",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd::\"; // case with extra \"::\"",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "    ",
          "    let input = \"abcd:ef01:2345:6789:abcd:ef01:2345:6789.0.0.1\"; // case where piece_pointer > 6",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv6Address);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1234:5678:9abc:def0:ghij:klmn::127.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"1234:5678:9abc:def0:ghij:klmn::127.0.0.1\";",
          "    let result = parse_ipv6addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]