[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"::1.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::a:b:c:d:e:f\"; // len == 2, input[0] == b':'",
          "    let result = parse_ipv6addr(input); // i == len, is_ip_v4 == true, piece_pointer == 6",
          "}"
        ],
        "oracle": [
          "    let input = \"::a:b:c:d:e:f\";",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"::a:b:c:d:e:f\"; // len == 2, input[0] == b':'",
          "    let result = parse_ipv6addr(input); // i == len, is_ip_v4 == true, piece_pointer == 6",
          "    let input = \"::a:b:c:d:e:f\";",
          "    let result = parse_ipv6addr(input);",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "}"
        ],
        "oracle": [
          "    let input = \"::1:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // expects Err(ParseError::InvalidIpv6Address) since input[0] == b':' and i == len",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"::1:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "    let input = \"::1:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // expects Err(ParseError::InvalidIpv6Address) since input[0] == b':' and i == len",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::a:b:c:d:e:f:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"::a:b:c:d:e:f:0.0.0.0\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"::1234:.8\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"::1234:.8\"; // len == 2",
          "    let result = parse_ipv6addr(input); // input[0] == b':', i == len, is_ip_v4 == true, piece_pointer == 6",
          "    assert_eq!(result, Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]