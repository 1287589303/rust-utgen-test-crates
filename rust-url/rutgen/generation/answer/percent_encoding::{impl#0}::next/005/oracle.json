[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 3] = [b'A', b'B', b'C'];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "}"
        ],
        "oracle": [
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 3] = [b'A', b'B', b'C'];",
          "    let mut encoder = PercentEncode { bytes: &input_bytes, ascii_set: &ascii_set };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(\"ABC\"));",
          "    assert_eq!(encoder.bytes, &[][..]);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 3] = [b'A', b'B', b'C'];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 3] = [b'A', b'B', b'C'];",
          "    let mut encoder = PercentEncode { bytes: &input_bytes, ascii_set: &ascii_set };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(\"ABC\"));",
          "    assert_eq!(encoder.bytes, &[][..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 5] = [b'A', b'B', 0xC0, 0xA0, 0xE2];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes) }));",
          "    assert_eq!(encoder.bytes, &[][..]);",
          "    assert!(ascii_set.should_percent_encode(0xC0));",
          "    assert!(ascii_set.should_percent_encode(0xA0));",
          "    assert!(ascii_set.should_percent_encode(0xE2));"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 5] = [b'A', b'B', 0xC0, 0xA0, 0xE2];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes) }));",
          "    assert_eq!(encoder.bytes, &[][..]);",
          "    assert!(ascii_set.should_percent_encode(0xC0));",
          "    assert!(ascii_set.should_percent_encode(0xA0));",
          "    assert!(ascii_set.should_percent_encode(0xE2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 6] = [b'A', b' ', b'C', b'D', 0xC2, 0xA1];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes[0..2]) }));",
          "    assert_eq!(encoder.bytes, &input_bytes[2..]);",
          "    assert!(!ascii_set.should_percent_encode(b'C'));",
          "    assert!(!ascii_set.should_percent_encode(b'D'));",
          "    assert!(ascii_set.should_percent_encode(0xC2));",
          "    assert_eq!(encoder.bytes.len(), 4);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 6] = [b'A', b' ', b'C', b'D', 0xC2, 0xA1];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes[0..2]) }));",
          "    assert_eq!(encoder.bytes, &input_bytes[2..]);",
          "    assert!(!ascii_set.should_percent_encode(b'C'));",
          "    assert!(!ascii_set.should_percent_encode(b'D'));",
          "    assert!(ascii_set.should_percent_encode(0xC2));",
          "    assert_eq!(encoder.bytes.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 7] = [b'A', b'T', b'E', 0xC3, 0x9F, 0xE2, 0x9C];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(b\"ATE\") }));",
          "    assert_eq!(encoder.bytes, &[0xC3, 0x9F, 0xE2, 0x9C]);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 7] = [b'A', b'T', b'E', 0xC3, 0x9F, 0xE2, 0x9C];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(b\"ATE\") }));",
          "    assert_eq!(encoder.bytes, &[0xC3, 0x9F, 0xE2, 0x9C]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 2] = [b'x', b'y'];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "}"
        ],
        "oracle": [
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 2] = [b'x', b'y'];",
          "    let mut encoder = PercentEncode { bytes: &input_bytes, ascii_set: &ascii_set };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes) }));",
          "    assert_eq!(encoder.bytes, &[][..]);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 2] = [b'x', b'y'];",
          "    let mut encoder = PercentEncode {",
          "        bytes: &input_bytes,",
          "        ascii_set: &ascii_set,",
          "    };",
          "    let result = encoder.next();",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let input_bytes: [u8; 2] = [b'x', b'y'];",
          "    let mut encoder = PercentEncode { bytes: &input_bytes, ascii_set: &ascii_set };",
          "    let result = encoder.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(&input_bytes) }));",
          "    assert_eq!(encoder.bytes, &[][..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]