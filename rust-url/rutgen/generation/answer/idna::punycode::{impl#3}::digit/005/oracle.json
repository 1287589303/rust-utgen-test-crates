[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'a';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    let byte = 'a';",
          "    let expected_result = Some(u32::from(byte) - u32::from('a'));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let byte = 'a';",
          "    let result = byte.digit();",
          "    let byte = 'a';",
          "    let expected_result = Some(u32::from(byte) - u32::from('a'));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'b';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1));"
        ],
        "code": [
          "{",
          "    let byte = 'b';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'c';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    let byte = 'c';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'd';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    let byte = 'd';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'e';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));"
        ],
        "code": [
          "{",
          "    let byte = 'e';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'f';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(5));",
          "    assert!(byte.is_ascii());",
          "    assert!(!byte.is_delimiter());",
          "    assert_eq!(byte.char(), 'f');",
          "    assert_eq!(byte.char_ascii_lower_case(), 'f');"
        ],
        "code": [
          "{",
          "    let byte = 'f';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(5));",
          "    assert!(byte.is_ascii());",
          "    assert!(!byte.is_delimiter());",
          "    assert_eq!(byte.char(), 'f');",
          "    assert_eq!(byte.char_ascii_lower_case(), 'f');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'g';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(6));"
        ],
        "code": [
          "{",
          "    let byte = 'g';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'h';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(7));"
        ],
        "code": [
          "{",
          "    let byte = 'h';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'i';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(8));"
        ],
        "code": [
          "{",
          "    let byte = 'i';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(8));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'j';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(9));"
        ],
        "code": [
          "{",
          "    let byte = 'j';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'k';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(10));"
        ],
        "code": [
          "{",
          "    let byte = 'k';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'l';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(11));"
        ],
        "code": [
          "{",
          "    let byte = 'l';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(11));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'm';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(12));"
        ],
        "code": [
          "{",
          "    let byte = 'm';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(12));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'n';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(13));"
        ],
        "code": [
          "{",
          "    let byte = 'n';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(13));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'o';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(14));"
        ],
        "code": [
          "{",
          "    let byte = 'o';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'p';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    let expected = Some(15);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let byte = 'p';",
          "    let result = byte.digit();",
          "    let expected = Some(15);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'q';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(16));"
        ],
        "code": [
          "{",
          "    let byte = 'q';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(16));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'r';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(17));"
        ],
        "code": [
          "{",
          "    let byte = 'r';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(17));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 's';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(18));"
        ],
        "code": [
          "{",
          "    let byte = 's';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(18));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 't';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(19));  // 't' corresponds to u32::from('t') - u32::from('a') = 19",
          "    assert!(byte.is_ascii());  // validate that 't' is ASCII",
          "    assert!(!byte.is_delimiter());  // validate that 't' is not a delimiter"
        ],
        "code": [
          "{",
          "    let byte = 't';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(19));  // 't' corresponds to u32::from('t') - u32::from('a') = 19",
          "    assert!(byte.is_ascii());  // validate that 't' is ASCII",
          "    assert!(!byte.is_delimiter());  // validate that 't' is not a delimiter",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'u';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(20));"
        ],
        "code": [
          "{",
          "    let byte = 'u';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'v';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(21));"
        ],
        "code": [
          "{",
          "    let byte = 'v';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(21));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'w';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(22));"
        ],
        "code": [
          "{",
          "    let byte = 'w';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(22));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'x';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(23));"
        ],
        "code": [
          "{",
          "    let byte = 'x';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(23));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'y';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(24));"
        ],
        "code": [
          "{",
          "    let byte = 'y';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(24));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 'z';",
          "    let result = byte.digit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(25));"
        ],
        "code": [
          "{",
          "    let byte = 'z';",
          "    let result = byte.digit();",
          "    assert_eq!(result, Some(25));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]