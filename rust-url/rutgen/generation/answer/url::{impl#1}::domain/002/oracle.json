[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.domain(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "    assert_eq!(url.domain(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://sub.example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.domain(), Some(\"sub.example.com\"));",
          "    assert_eq!(url.host_start, 8);",
          "    assert_eq!(url.host_end, 20);",
          "    assert_eq!(url.serialization, \"https://sub.example.com/path\");",
          "    assert_eq!(url.host, HostInternal::Domain);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://sub.example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 20,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 21,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "    assert_eq!(url.domain(), Some(\"sub.example.com\"));",
          "    assert_eq!(url.host_start, 8);",
          "    assert_eq!(url.host_end, 20);",
          "    assert_eq!(url.serialization, \"https://sub.example.com/path\");",
          "    assert_eq!(url.host, HostInternal::Domain);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://127.0.0.1/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 14,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 15,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.domain(), None);",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"https://example.com/\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 8,",
          "    host_end: 20,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 21,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.com\"));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"mailto:rms@example.net\"),",
          "    scheme_end: 6,",
          "    username_end: 3,",
          "    host_start: 10,",
          "    host_end: 21,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 22,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.net\"));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"http://localhost/test\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 14,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 15,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"localhost\"));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://127.0.0.1/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 14,",
          "        host: HostInternal::Ipv4(Ipv4Addr::new(127, 0, 0, 1)),",
          "        port: None,",
          "        path_start: 15,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "    assert_eq!(url.domain(), None);",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"https://example.com/\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 8,",
          "    host_end: 20,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 21,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.com\"));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"mailto:rms@example.net\"),",
          "    scheme_end: 6,",
          "    username_end: 3,",
          "    host_start: 10,",
          "    host_end: 21,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 22,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.net\"));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"http://localhost/test\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 14,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 15,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"localhost\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https:///\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 8,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.domain(), None);",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"http://example.com/\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 8,",
          "    host_end: 20,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.com\"));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https:///\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 8,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 8,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url.domain();",
          "    assert_eq!(url.domain(), None);",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"http://example.com/\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 8,",
          "    host_end: 20,",
          "    host: HostInternal::Domain,",
          "    port: None,",
          "    path_start: 20,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url.domain(), Some(\"example.com\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]