[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Domain(String::from(\"example.com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"example.com\");"
        ],
        "code": [
          "{",
          "    let host = Host::Domain(String::from(\"example.com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "    assert_eq!(output, \"example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Domain(String::from(\"xn--ls8h.XN--LS8H\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"xn--ls8h.XN--LS8H\");"
        ],
        "code": [
          "{",
          "    let host = Host::Domain(String::from(\"xn--ls8h.XN--LS8H\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "    assert_eq!(output, \"xn--ls8h.XN--LS8H\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Domain(String::from(\"a\".repeat(63) + \".com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"a...............................................................................com\");"
        ],
        "code": [
          "{",
          "    let host = Host::Domain(String::from(\"a\".repeat(63) + \".com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "    assert_eq!(output, \"a...............................................................................com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Domain(String::from(\"a\".repeat(253 - 4) + \".com\")); // 253 total length",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"a\".repeat(249) + \".com\");"
        ],
        "code": [
          "{",
          "    let host = Host::Domain(String::from(\"a\".repeat(253 - 4) + \".com\")); // 253 total length",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "    assert_eq!(output, \"a\".repeat(249) + \".com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host = Host::Domain(String::from(\"ex-ample.com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"ex-ample.com\");"
        ],
        "code": [
          "{",
          "    let host = Host::Domain(String::from(\"ex-ample.com\"));",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{}\", host);",
          "    assert_eq!(output, \"ex-ample.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]