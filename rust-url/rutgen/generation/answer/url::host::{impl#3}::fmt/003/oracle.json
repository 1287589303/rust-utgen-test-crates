[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001);",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"[\").is_ok());",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter).is_ok());",
          "    assert_eq!(host.to_string(), \"[2001:db8::1]\");"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0x2001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001);",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "    assert_eq!(host.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"[\").is_ok());",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter).is_ok());",
          "    assert_eq!(host.to_string(), \"[2001:db8::1]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1); // ::1",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(host, Host::Ipv6(_)));",
          "    assert_eq!(formatter.write_str(\"[\"), Ok(()));",
          "    assert_eq!(write_ipv6(&ipv6_address, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"]\"), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1); // ::1",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "    assert!(matches!(host, Host::Ipv6(_)));",
          "    assert_eq!(formatter.write_str(\"[\"), Ok(()));",
          "    assert_eq!(write_ipv6(&ipv6_address, &mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"]\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0); // ::",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host.to_string(), \"[::]\");",
          "    assert!(formatter.write_str(\"[\") == Ok(()));",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter) == Ok(()));",
          "    assert!(formatter.write_str(\"]\") == Ok(()));"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0); // ::",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "    assert_eq!(host.to_string(), \"[::]\");",
          "    assert!(formatter.write_str(\"[\") == Ok(()));",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter) == Ok(()));",
          "    assert!(formatter.write_str(\"]\") == Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0x0001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001); // 2001:db8::1",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"[\").is_ok());",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter).is_ok());",
          "    assert!(formatter.write_str(\"]\").is_ok());"
        ],
        "code": [
          "{",
          "    struct MockFormatter;",
          "    ",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let ipv6_address = Ipv6Addr::new(0x0001, 0x0db8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001); // 2001:db8::1",
          "    let host = Host::Ipv6(ipv6_address);",
          "    let mut formatter = MockFormatter;",
          "",
          "    let _ = host.fmt(&mut formatter);",
          "    assert_eq!(host.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"[\").is_ok());",
          "    assert!(write_ipv6(&ipv6_address, &mut formatter).is_ok());",
          "    assert!(formatter.write_str(\"]\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]