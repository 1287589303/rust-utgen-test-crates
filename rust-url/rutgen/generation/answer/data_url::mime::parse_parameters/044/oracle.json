[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";;param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";;param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param@1=\\\"value1\\\";param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param@1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param@1=\\\"value1\\\";param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0].0, \"param@1\");",
          "    assert_eq!(parameters[0].1, \"value1\");",
          "    assert_eq!(parameters[1].0, \"param2\");",
          "    assert_eq!(parameters[1].1, \"value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0], (\"param1\".to_string(), \"value1\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0], (\"param1\".to_string(), \"value1\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"value#2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0], (\"param1\".to_owned(), \"value1\".to_owned()));",
          "    assert_eq!(parameters[1], (\"param2\".to_owned(), \"value#2\".to_owned()));"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\";param2=\\\"value#2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 2);",
          "    assert_eq!(parameters[0], (\"param1\".to_owned(), \"value1\".to_owned()));",
          "    assert_eq!(parameters[1], (\"param2\".to_owned(), \"value#2\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\"param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    parameters.len() == 2",
          "    parameters[0].0 == \"param1\"",
          "    parameters[0].1 == \"value1\"",
          "    parameters[1].0 == \"param2\"",
          "    parameters[1].1 == \"value2\""
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"param1=\\\"value1\\\"param2=\\\"value2\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    parameters.len() == 2",
          "    parameters[0].0 == \"param1\"",
          "    parameters[0].1 == \"value1\"",
          "    parameters[1].0 == \"param2\"",
          "    parameters[1].1 == \"value2\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]