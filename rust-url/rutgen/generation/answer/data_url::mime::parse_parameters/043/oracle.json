[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"\\\"; anotherName=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0].0, \"anothername\");",
          "    assert_eq!(parameters[0].1, \"validvalue\");",
          "    assert!(parameters.iter().any(|(n, _)| n == \"validname\"));",
          "    assert!(parameters.iter().any(|(n, _)| n == \"anothername\"));",
          "    assert!(parameters.iter().all(|(_, v)| v != \"\\\"\\\"\"));",
          "    assert!(parameters.iter().all(|(n, _)| !n.is_empty()));",
          "    assert!(parameters.iter().all(|(n, _)| only_http_token_code_points(n)));"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"\\\"; anotherName=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0].0, \"anothername\");",
          "    assert_eq!(parameters[0].1, \"validvalue\");",
          "    assert!(parameters.iter().any(|(n, _)| n == \"validname\"));",
          "    assert!(parameters.iter().any(|(n, _)| n == \"anothername\"));",
          "    assert!(parameters.iter().all(|(_, v)| v != \"\\\"\\\"\"));",
          "    assert!(parameters.iter().all(|(n, _)| !n.is_empty()));",
          "    assert!(parameters.iter().all(|(n, _)| only_http_token_code_points(n)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"invalid name=\\\"value\\\"; validName=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    parameters.len() == 1",
          "    parameters[0].0 == \"validname\"",
          "    parameters[0].1 == \"validValue\""
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"invalid name=\\\"value\\\"; validName=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    parameters.len() == 1",
          "    parameters[0].0 == \"validname\"",
          "    parameters[0].1 == \"validValue\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"\\\"; validNameTwo=\\\"anotherValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0].0, \"validname\");",
          "    assert_eq!(parameters[0].1, \"\");",
          "    assert!(parameters.iter().all(|(n, _)| n != \"validnametwo\"));"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"\\\"; validNameTwo=\\\"anotherValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert_eq!(parameters.len(), 1);",
          "    assert_eq!(parameters[0].0, \"validname\");",
          "    assert_eq!(parameters[0].1, \"\");",
          "    assert!(parameters.iter().all(|(n, _)| n != \"validnametwo\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"validValue\\\"; invalid name=\\\"anotherValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    assert!(parameters.len() == 1);",
          "    assert_eq!(parameters[0].0, \"validname\");",
          "    assert_eq!(parameters[0].1, \"validValue\");"
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"validName=\\\"validValue\\\"; invalid name=\\\"anotherValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    assert!(parameters.len() == 1);",
          "    assert_eq!(parameters[0].0, \"validname\");",
          "    assert_eq!(parameters[0].1, \"validValue\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"nameOne=\\\"\\\"; nameTwo=\\\"\\\"; nameThree=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "}"
        ],
        "oracle": [
          "    parameters.len() == 2",
          "    parameters[0].0 == \"nameone\"",
          "    parameters[0].1 == \"\"",
          "    parameters[1].0 == \"nametwo\"",
          "    parameters[1].1 == \"\""
        ],
        "code": [
          "{",
          "    let mut parameters = Vec::new();",
          "    let s = \"nameOne=\\\"\\\"; nameTwo=\\\"\\\"; nameThree=\\\"validValue\\\"\";",
          "    parse_parameters(s, &mut parameters);",
          "    parameters.len() == 2",
          "    parameters[0].0 == \"nameone\"",
          "    parameters[0].1 == \"\"",
          "    parameters[1].0 == \"nametwo\"",
          "    parameters[1].1 == \"\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]