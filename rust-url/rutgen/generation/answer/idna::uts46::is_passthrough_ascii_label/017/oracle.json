[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = &[];",
          "    is_passthrough_ascii_label(label);",
          "}"
        ],
        "oracle": [
          "    is_passthrough_ascii_label(&[b'a', b'-', b'a', b'a']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'd']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'0', b'1', b'2']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'-']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'c', b's', b'b']) == true",
          "    is_passthrough_ascii_label(&[b'A', b'b', b'c', b'd']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'e', b'-']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'1', b'2']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'-', b'0', b'0']) == false",
          "    is_passthrough_ascii_label(&[b'e', b'-', b'a', b'z']) == false"
        ],
        "code": [
          "{",
          "    let label: &[u8] = &[];",
          "    is_passthrough_ascii_label(label);",
          "    is_passthrough_ascii_label(&[b'a', b'-', b'a', b'a']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'd']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'0', b'1', b'2']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'-']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'c', b's', b'b']) == true",
          "    is_passthrough_ascii_label(&[b'A', b'b', b'c', b'd']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'e', b'-']) == false",
          "    is_passthrough_ascii_label(&[b'a', b'b', b'c', b'1', b'2']) == true",
          "    is_passthrough_ascii_label(&[b'a', b'-', b'0', b'0']) == false",
          "    is_passthrough_ascii_label(&[b'e', b'-', b'a', b'z']) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"ab\"; // Length < 4",
          "    is_passthrough_ascii_label(label);",
          "}"
        ],
        "oracle": [
          "    is_passthrough_ascii_label(b\"ab\") == true",
          "    is_passthrough_ascii_label(b\"abc\") == true",
          "    is_passthrough_ascii_label(b\"abcd\") == true",
          "    is_passthrough_ascii_label(b\"abc-\") == true",
          "    is_passthrough_ascii_label(b\"abc123\") == true",
          "    is_passthrough_ascii_label(b\"abc-1\") == true",
          "    is_passthrough_ascii_label(b\"abcd-\") == false",
          "    is_passthrough_ascii_label(b\"ab-cd\") == true",
          "    is_passthrough_ascii_label(b\"abcde\") == true",
          "    is_passthrough_ascii_label(b\"ab-\") == false",
          "    is_passthrough_ascii_label(b\"ab-c\") == true",
          "    is_passthrough_ascii_label(b\"abc$\") == false",
          "    is_passthrough_ascii_label(b\"ABC\") == false",
          "    is_passthrough_ascii_label(b\"ab1c\") == true",
          "    is_passthrough_ascii_label(b\"abcd-efg\") == true",
          "    is_passthrough_ascii_label(b\"abcd--efg\") == false"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"ab\"; // Length < 4",
          "    is_passthrough_ascii_label(label);",
          "    is_passthrough_ascii_label(b\"ab\") == true",
          "    is_passthrough_ascii_label(b\"abc\") == true",
          "    is_passthrough_ascii_label(b\"abcd\") == true",
          "    is_passthrough_ascii_label(b\"abc-\") == true",
          "    is_passthrough_ascii_label(b\"abc123\") == true",
          "    is_passthrough_ascii_label(b\"abc-1\") == true",
          "    is_passthrough_ascii_label(b\"abcd-\") == false",
          "    is_passthrough_ascii_label(b\"ab-cd\") == true",
          "    is_passthrough_ascii_label(b\"abcde\") == true",
          "    is_passthrough_ascii_label(b\"ab-\") == false",
          "    is_passthrough_ascii_label(b\"ab-c\") == true",
          "    is_passthrough_ascii_label(b\"abc$\") == false",
          "    is_passthrough_ascii_label(b\"ABC\") == false",
          "    is_passthrough_ascii_label(b\"ab1c\") == true",
          "    is_passthrough_ascii_label(b\"abcd-efg\") == true",
          "    is_passthrough_ascii_label(b\"abcd--efg\") == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"abc-\"; // Length >= 4, first is valid, last is invalid",
          "    is_passthrough_ascii_label(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abcd\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-xyz\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-def\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc123-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc123\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-xyz-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abcd-efg\"), true);"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"abc-\"; // Length >= 4, first is valid, last is invalid",
          "    is_passthrough_ascii_label(label);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abcd\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-xyz\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-def\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc123-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc123\"), true);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abc-xyz-\"), false);",
          "    assert_eq!(is_passthrough_ascii_label(b\"abcd-efg\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"ade-1\"; // Length >= 4, first valid, one tail invalid",
          "    is_passthrough_ascii_label(label);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_passthrough_ascii_label(b\"ade-1\"), false);"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"ade-1\"; // Length >= 4, first valid, one tail invalid",
          "    is_passthrough_ascii_label(label);",
          "    assert_eq!(is_passthrough_ascii_label(b\"ade-1\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let label: &[u8] = b\"ade--1\"; // Length >= 4, first valid, multiple tails invalid",
          "    is_passthrough_ascii_label(label);",
          "}"
        ],
        "oracle": [
          "    let label: &[u8] = b\"ade--1\"; // label.len() < 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"abcd\"; // Length >= 4, first valid, last valid",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"ab-1\"; // Length >= 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"abe--\"; // Length >= 4, first valid, last invalid",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"abc\"; // Length >= 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"az09-\"; // Length >= 4, first valid, last invalid",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"ax--z\"; // Length >= 4, valid with invalid mid segments",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false"
        ],
        "code": [
          "{",
          "    let label: &[u8] = b\"ade--1\"; // Length >= 4, first valid, multiple tails invalid",
          "    is_passthrough_ascii_label(label);",
          "    let label: &[u8] = b\"ade--1\"; // label.len() < 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"abcd\"; // Length >= 4, first valid, last valid",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"ab-1\"; // Length >= 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"abe--\"; // Length >= 4, first valid, last invalid",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"abc\"; // Length >= 4 is false",
          "    assert_eq!(is_passthrough_ascii_label(label), true); // expected return is true",
          "    ",
          "    let label: &[u8] = b\"az09-\"; // Length >= 4, first valid, last invalid",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "    ",
          "    let label: &[u8] = b\"ax--z\"; // Length >= 4, valid with invalid mid segments",
          "    assert_eq!(is_passthrough_ascii_label(label), false); // expected return is false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]