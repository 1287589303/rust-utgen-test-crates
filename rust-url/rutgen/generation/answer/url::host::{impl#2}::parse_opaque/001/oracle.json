[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"[::1]\";",
          "    let _ = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"[::1]\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), Host::Ipv6(_)));"
        ],
        "code": [
          "{",
          "    let input = \"[::1]\";",
          "    let _ = Host::parse_opaque(input);",
          "    let input = \"[::1]\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), Host::Ipv6(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\";",
          "    let _ = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Host::parse_opaque(\"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\"), Ok(Host::Ipv6(Ipv6Addr::new(32_768, 3_509, 34_035, 0, 0, 35_118, 14_984, 29_956)));",
          "    assert!(Host::parse_opaque(\"[::1]\").is_ok());",
          "    assert!(matches!(Host::parse_opaque(\"[::1]\"), Ok(Host::Ipv6(_))));",
          "    assert!(Host::parse_opaque(\"[::]\").is_ok());",
          "    assert!(Host::parse_opaque(\"[2001:db8::1]\").is_ok());",
          "    assert!(Host::parse_opaque(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\").is_ok());",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8::1 2]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8:::1]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8:::1]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8::1:2:3]\"), Err(ParseError::InvalidIpv6Address));"
        ],
        "code": [
          "{",
          "    let input = \"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\";",
          "    let _ = Host::parse_opaque(input);",
          "    assert_eq!(Host::parse_opaque(\"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\"), Ok(Host::Ipv6(Ipv6Addr::new(32_768, 3_509, 34_035, 0, 0, 35_118, 14_984, 29_956)));",
          "    assert!(Host::parse_opaque(\"[::1]\").is_ok());",
          "    assert!(matches!(Host::parse_opaque(\"[::1]\"), Ok(Host::Ipv6(_))));",
          "    assert!(Host::parse_opaque(\"[::]\").is_ok());",
          "    assert!(Host::parse_opaque(\"[2001:db8::1]\").is_ok());",
          "    assert!(Host::parse_opaque(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\").is_ok());",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8::1 2]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8:::1]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8:::1]\"), Err(ParseError::InvalidIpv6Address));",
          "    assert_eq!(Host::parse_opaque(\"[2001:db8::1:2:3]\"), Err(ParseError::InvalidIpv6Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"[2001:db8::1]\";",
          "    let _ = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"[2001:db8::1]\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Ipv6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1)));"
        ],
        "code": [
          "{",
          "    let input = \"[2001:db8::1]\";",
          "    let _ = Host::parse_opaque(input);",
          "    let input = \"[2001:db8::1]\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Ipv6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"[2001:0db8:0:0:0:0:0:2]\";",
          "    let _ = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    Assert(Host::parse_opaque(\"[2001:0db8:0:0:0:0:0:2]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 0, 0, 0, 0, 0, 2)));",
          "    Assert(Host::parse_opaque(\"[::1]\") == Ok(Host::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)));",
          "    Assert(Host::parse_opaque(\"[::]\") == Ok(Host::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)));",
          "    Assert(Host::parse_opaque(\"[2001:db8:85a3:0:0:8a2e:0370:7334]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 34303, 0, 0, 35754, 3, 29556)));",
          "    Assert(Host::parse_opaque(\"[fe80::1ff:fe23:4567:890a]\") == Ok(Host::Ipv6(Ipv6Addr::new(65280, 0, 0, 0, 0, 511, 1, 255)));",
          "    Assert(Host::parse_opaque(\"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 34303, 0, 0, 35754, 3, 29556)));"
        ],
        "code": [
          "{",
          "    let input = \"[2001:0db8:0:0:0:0:0:2]\";",
          "    let _ = Host::parse_opaque(input);",
          "    Assert(Host::parse_opaque(\"[2001:0db8:0:0:0:0:0:2]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 0, 0, 0, 0, 0, 2)));",
          "    Assert(Host::parse_opaque(\"[::1]\") == Ok(Host::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)));",
          "    Assert(Host::parse_opaque(\"[::]\") == Ok(Host::Ipv6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)));",
          "    Assert(Host::parse_opaque(\"[2001:db8:85a3:0:0:8a2e:0370:7334]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 34303, 0, 0, 35754, 3, 29556)));",
          "    Assert(Host::parse_opaque(\"[fe80::1ff:fe23:4567:890a]\") == Ok(Host::Ipv6(Ipv6Addr::new(65280, 0, 0, 0, 0, 511, 1, 255)));",
          "    Assert(Host::parse_opaque(\"[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\") == Ok(Host::Ipv6(Ipv6Addr::new(8193, 3512, 34303, 0, 0, 35754, 3, 29556)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]