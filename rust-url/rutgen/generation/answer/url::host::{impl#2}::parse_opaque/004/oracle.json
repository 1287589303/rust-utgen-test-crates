[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"example.com\";",
          "    let result = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(utf8_percent_encode(\"example.com\", CONTROLS).to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"example.com\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(utf8_percent_encode(\"example.com\", CONTROLS).to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"sub.domain.org\";",
          "    let result = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Host::Domain(utf8_percent_encode(\"sub.domain.org\", CONTROLS).to_string())));"
        ],
        "code": [
          "{",
          "    let input = \"sub.domain.org\";",
          "    let result = Host::parse_opaque(input);",
          "    assert_eq!(result, Ok(Host::Domain(utf8_percent_encode(\"sub.domain.org\", CONTROLS).to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"my-host123\";",
          "    let result = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"my-host123\";",
          "    let expected = Ok(Host::Domain(utf8_percent_encode(input, CONTROLS).to_string()));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = \"my-host123\";",
          "    let result = Host::parse_opaque(input);",
          "    let input = \"my-host123\";",
          "    let expected = Ok(Host::Domain(utf8_percent_encode(input, CONTROLS).to_string()));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"my host.com\";",
          "    let result = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"my host.com\";",
          "    let expected = Ok(Host::Domain(utf8_percent_encode(input, CONTROLS).to_string()));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = \"my host.com\";",
          "    let result = Host::parse_opaque(input);",
          "    let input = \"my host.com\";",
          "    let expected = Ok(Host::Domain(utf8_percent_encode(input, CONTROLS).to_string()));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"my_host.com\";",
          "    let result = Host::parse_opaque(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"my_host.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let input = \"my_host.com\";",
          "    let result = Host::parse_opaque(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Host::Domain(\"my_host.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]