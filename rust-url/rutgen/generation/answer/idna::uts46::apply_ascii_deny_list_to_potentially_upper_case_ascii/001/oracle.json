[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'A'; // Upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'A'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "}"
        ],
        "oracle": [
          "    let b: u8 = b'A';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'a';",
          "    assert_eq!(result, expected_result);",
          "    let deny_list: u128 = 1u128 << b + 1;",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    let expected_result: char = 'A';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'B';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'b';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'Z';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'z';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'G';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'g';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'[';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = '\\u{FFFD}';",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'A'; // Upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'A'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    let b: u8 = b'A';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'a';",
          "    assert_eq!(result, expected_result);",
          "    let deny_list: u128 = 1u128 << b + 1;",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    let expected_result: char = 'A';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'B';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'b';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'Z';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'z';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'G';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = 'g';",
          "    assert_eq!(result, expected_result);",
          "    let b: u8 = b'[';",
          "    let deny_list: u128 = 1u128 << b;",
          "    let expected_result: char = '\\u{FFFD}';",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'Z'; // Upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'Z'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'z');"
        ],
        "code": [
          "{",
          "    let b: u8 = b'Z'; // Upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'Z'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'a'; // Non upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "}"
        ],
        "oracle": [
          "    let b: u8 = b'a'; // Expecting '\\u{FFFD}' since 'a' is in the deny list",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let b: u8 = b'a'; // Non upper case ASCII character",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    let b: u8 = b'a'; // Expecting '\\u{FFFD}' since 'a' is in the deny list",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 0; // Lower boundary case",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{FFFD}');",
          "    b = 65; // Uppercase A",
          "    deny_list = 1u128 << b; // Deny list for A",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, 'a');",
          "    b = 90; // Uppercase Z",
          "    deny_list = 1u128 << b; // Deny list for Z",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, 'z');",
          "    b = 255; // Out of ASCII range",
          "    deny_list = 1u128 << b; // Deny list for 255",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    b = 50; // Middle ASCII character",
          "    deny_list = 1u128 << b; // Deny list for 50",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');"
        ],
        "code": [
          "{",
          "    let b: u8 = 0; // Lower boundary case",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    b = 65; // Uppercase A",
          "    deny_list = 1u128 << b; // Deny list for A",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, 'a');",
          "    b = 90; // Uppercase Z",
          "    deny_list = 1u128 << b; // Deny list for Z",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, 'z');",
          "    b = 255; // Out of ASCII range",
          "    deny_list = 1u128 << b; // Deny list for 255",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "    b = 50; // Middle ASCII character",
          "    deny_list = 1u128 << b; // Deny list for 50",
          "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq!(result, '\\u{FFFD}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 255; // Upper boundary case",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 255",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "}"
        ],
        "oracle": [
          "    let expected_result: char = '\\u{FFFD}'; // Expected outcome when b is in deny_list",
          "    assert_eq!(result, expected_result); // Validate the result against the expected_output"
        ],
        "code": [
          "{",
          "    let b: u8 = 255; // Upper boundary case",
          "    let deny_list: u128 = 1u128 << b; // Deny list for 255",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    let expected_result: char = '\\u{FFFD}'; // Expected outcome when b is in deny_list",
          "    assert_eq!(result, expected_result); // Validate the result against the expected_output",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]