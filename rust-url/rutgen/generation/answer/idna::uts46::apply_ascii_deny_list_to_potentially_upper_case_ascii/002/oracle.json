[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'a'",
          "}"
        ],
        "oracle": [
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    assert_eq(result, 'a'); // result should be 'a'",
          "    ",
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, 'b'); // result should be 'b'",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, 'z'); // result should be 'z'",
          "    ",
          "    let b: u8 = 91; // not in range 'A' to 'Z'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, '\\u{FFFD}'); // result should be '\\u{FFFD}' (replacement character)"
        ],
        "code": [
          "{",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'a'",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    assert_eq(result, 'a'); // result should be 'a'",
          "    ",
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, 'b'); // result should be 'b'",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, 'z'); // result should be 'z'",
          "    ",
          "    let b: u8 = 91; // not in range 'A' to 'Z'",
          "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    assert_eq(result, '\\u{FFFD}'); // result should be '\\u{FFFD}' (replacement character)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'b'",
          "}"
        ],
        "oracle": [
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
          "    let expected_result: char = 'b';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let expected_result: char = 'a';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
        ],
        "code": [
          "{",
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'b'",
          "    let b: u8 = 66; // 'B'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
          "    let expected_result: char = 'b';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let expected_result: char = 'a';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'z'",
          "}"
        ],
        "oracle": [
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
        ],
        "code": [
          "{",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'z'",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 78; // 'N'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'n'",
          "}"
        ],
        "oracle": [
          "    let b: u8 = 78; // 'N'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
          "    let expected_result: char = 'n';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let expected_result: char = 'a';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 69; // 'E'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 69)) == 0",
          "    let expected_result: char = 'e';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
        ],
        "code": [
          "{",
          "    let b: u8 = 78; // 'N'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
          "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
          "    // result should be 'n'",
          "    let b: u8 = 78; // 'N'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
          "    let expected_result: char = 'n';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 65; // 'A'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
          "    let expected_result: char = 'a';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 90; // 'Z'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
          "    let expected_result: char = 'z';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "    ",
          "    let b: u8 = 69; // 'E'",
          "    let deny_list: u128 = 0; // (deny_list & (1u128 << 69)) == 0",
          "    let expected_result: char = 'e';",
          "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]