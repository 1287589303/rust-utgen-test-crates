[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://user:pass@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"http://user:pass@example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://user:pass@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"http://user:pass@example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://user:pass@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()))",
          "    assert_eq!(url.username(), \"user\")",
          "    assert_eq!(url.as_str(), \"ftp://user:pass@example.com/\")"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://user:pass@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "    assert_eq!(result, Ok(()))",
          "    assert_eq!(url.username(), \"user\")",
          "    assert_eq!(url.as_str(), \"ftp://user:pass@example.com/\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://user:secret@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"https://user:secret@example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://user:secret@example.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"https://user:secret@example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"customscheme://user:token@domain.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"customscheme://user:token@domain.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"customscheme://user:token@domain.com/\").unwrap();",
          "    let result = url.set_username(\"user\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.username(), \"user\");",
          "    assert_eq!(url.as_str(), \"customscheme://user:token@domain.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]