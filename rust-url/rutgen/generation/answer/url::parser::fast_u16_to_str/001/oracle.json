[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'1']);",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);",
          "    assert!(result.chars().all(|c| c.is_digit(10)));",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    assert_eq!(buffer, [b'6', b'5', b'5', b'3', b'5']);",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    assert_eq!(buffer, [b'1', b'2', b'3', b'4', b'5']);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'1']);",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);",
          "    assert!(result.chars().all(|c| c.is_digit(10)));",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    assert_eq!(buffer, [b'6', b'5', b'5', b'3', b'5']);",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    assert_eq!(buffer, [b'1', b'2', b'3', b'4', b'5']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    assert_eq!(result, \"10\");",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    assert_eq!(result, \"10\");",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 100;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 9999;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"9999\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 100;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 9999;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"9999\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1000\");",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1000\");",
          "    assert!(result.is_ascii());",
          "    assert!(result.len() <= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"10000\");",
          "    assert!(result.len() <= 5);",
          "    assert!(result.is_ascii());",
          "    assert!(result.chars().all(|c| c.is_digit(10)));",
          "    assert_eq!(buffer[0..(5 - result.len())], [0; 5 - result.len()]);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 10000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10000\");",
          "    assert!(result.len() <= 5);",
          "    assert!(result.is_ascii());",
          "    assert!(result.chars().all(|c| c.is_digit(10)));",
          "    assert_eq!(buffer[0..(5 - result.len())], [0; 5 - result.len()]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");"
        ],
        "code": [
          "{",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]