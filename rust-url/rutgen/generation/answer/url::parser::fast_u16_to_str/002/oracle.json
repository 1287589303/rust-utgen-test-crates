[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"0\");",
          "    assert_eq!(buffer, [b'0', 0, 0, 0, 0]);",
          "    ",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    assert_eq!(buffer, [b'1', 0, 0, 0, 0]);",
          "    ",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    assert_eq!(buffer, [b'1', b'0', 0, 0, 0]);",
          "    ",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    assert_eq!(buffer, [b'2', b'5', b'5', 0, 0]);",
          "    ",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    assert_eq!(buffer, [b'6', b'5', b'5', b'3', b'5']);"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    assert_eq!(buffer, [b'0', 0, 0, 0, 0]);",
          "    ",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    assert_eq!(buffer, [b'1', 0, 0, 0, 0]);",
          "    ",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    assert_eq!(buffer, [b'1', b'0', 0, 0, 0]);",
          "    ",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    assert_eq!(buffer, [b'2', b'5', b'5', 0, 0]);",
          "    ",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    assert_eq!(buffer, [b'6', b'5', b'5', b'3', b'5']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 50000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"50000\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9999;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"9999\");"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 12345;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"12345\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 50000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"50000\");",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9999;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"9999\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let value: u16 = 99;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"99\");",
          "    let value: u16 = 123;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"123\");",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1000\");",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result.len(), 2);",
          "    let value: u16 = 256;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"256\");"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"0\");",
          "    let value: u16 = 1;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    let value: u16 = 99;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"99\");",
          "    let value: u16 = 123;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"123\");",
          "    let value: u16 = 1000;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"1000\");",
          "    let value: u16 = 65535;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65535\");",
          "    let value: u16 = 255;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"255\");",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result.len(), 2);",
          "    let value: u16 = 256;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"256\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"10\");",
          "    assert_eq!(buffer, [b'0', b'1', b'0', 0, 0]);",
          "    let value_zero: u16 = 0;",
          "    let result_zero = fast_u16_to_str(&mut buffer, value_zero);",
          "    assert_eq!(result_zero, \"0\");",
          "    assert_eq!(buffer, [b'0', 0, 0, 0, 0]);",
          "    let value_max: u16 = 65535;",
          "    let result_max = fast_u16_to_str(&mut buffer, value_max);",
          "    assert_eq!(result_max, \"65535\");",
          "    assert_eq!(buffer, [b'5', b'5', b'3', b'6', 0]);",
          "    let value_single_digit: u16 = 7;",
          "    let result_single_digit = fast_u16_to_str(&mut buffer, value_single_digit);",
          "    assert_eq!(result_single_digit, \"7\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'7']);"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"10\");",
          "    assert_eq!(buffer, [b'0', b'1', b'0', 0, 0]);",
          "    let value_zero: u16 = 0;",
          "    let result_zero = fast_u16_to_str(&mut buffer, value_zero);",
          "    assert_eq!(result_zero, \"0\");",
          "    assert_eq!(buffer, [b'0', 0, 0, 0, 0]);",
          "    let value_max: u16 = 65535;",
          "    let result_max = fast_u16_to_str(&mut buffer, value_max);",
          "    assert_eq!(result_max, \"65535\");",
          "    assert_eq!(buffer, [b'5', b'5', b'3', b'6', 0]);",
          "    let value_single_digit: u16 = 7;",
          "    let result_single_digit = fast_u16_to_str(&mut buffer, value_single_digit);",
          "    assert_eq!(result_single_digit, \"7\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'7']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65335; ",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"65335\");",
          "    assert_eq!(buffer, [b'6', b'5', b'3', b'3', b'5']);",
          "    ",
          "    let value: u16 = 0;",
          "    let result_zero = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result_zero, \"0\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'0']);",
          "    ",
          "    let value: u16 = 1;",
          "    let result_one = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result_one, \"1\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'1']);"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65335; ",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result, \"65335\");",
          "    assert_eq!(buffer, [b'6', b'5', b'3', b'3', b'5']);",
          "    ",
          "    let value: u16 = 0;",
          "    let result_zero = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result_zero, \"0\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'0']);",
          "    ",
          "    let value: u16 = 1;",
          "    let result_one = fast_u16_to_str(&mut buffer, value);",
          "    assert_eq!(result_one, \"1\");",
          "    assert_eq!(buffer, [b'0', b'0', b'0', b'0', b'1']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535; ",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let expected_result: &str = \"0\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let expected_result: &str = \"1\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let expected_result: &str = \"10\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 255;",
          "    let expected_result: &str = \"255\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535;",
          "    let expected_result: &str = \"65535\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9999;",
          "    let expected_result: &str = \"9999\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535; ",
          "    let result = fast_u16_to_str(&mut buffer, value);",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 0;",
          "    let expected_result: &str = \"0\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 1;",
          "    let expected_result: &str = \"1\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 10;",
          "    let expected_result: &str = \"10\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 255;",
          "    let expected_result: &str = \"255\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 65535;",
          "    let expected_result: &str = \"65535\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "    ",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let value: u16 = 9999;",
          "    let expected_result: &str = \"9999\";",
          "    assert_eq!(fast_u16_to_str(&mut buffer, value), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]