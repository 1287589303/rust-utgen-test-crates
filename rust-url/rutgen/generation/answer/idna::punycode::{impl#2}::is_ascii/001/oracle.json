[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 0x7F; // 127, which is below 128",
          "    assert!(value.is_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(0x7F.is_ascii()); // Expect true for value less than 0x80",
          "    assert!((0x80 as u8).is_ascii()); // Expect false for value equal to or greater than 0x80",
          "    assert!(0x00.is_ascii()); // Expect true for value 0",
          "    assert!(0xFF.is_ascii()); // Expect false for value 255",
          "    assert!(0x01.is_ascii()); // Expect true for value 1",
          "    assert!((0x80 as u8).is_ascii()); // Expect false for value 128",
          "    assert!(0x7E.is_ascii()); // Expect true for value 126",
          "    assert!((0x81 as u8).is_ascii()); // Expect false for value 129"
        ],
        "code": [
          "{",
          "    let value: u8 = 0x7F; // 127, which is below 128",
          "    assert!(value.is_ascii());",
          "    assert!(0x7F.is_ascii()); // Expect true for value less than 0x80",
          "    assert!((0x80 as u8).is_ascii()); // Expect false for value equal to or greater than 0x80",
          "    assert!(0x00.is_ascii()); // Expect true for value 0",
          "    assert!(0xFF.is_ascii()); // Expect false for value 255",
          "    assert!(0x01.is_ascii()); // Expect true for value 1",
          "    assert!((0x80 as u8).is_ascii()); // Expect false for value 128",
          "    assert!(0x7E.is_ascii()); // Expect true for value 126",
          "    assert!((0x81 as u8).is_ascii()); // Expect false for value 129",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 0x80; // 128, which is not below 128",
          "    assert!(!value.is_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(0x7F.is_ascii()); // 127, which is below 128",
          "    assert!(0x00.is_ascii()); // 0, which is below 128",
          "    assert!(0x3F.is_ascii()); // 63, which is below 128",
          "    assert!(!0x80.is_ascii()); // 128, which is not below 128",
          "    assert!(!0xFF.is_ascii()); // 255, which is not below 128"
        ],
        "code": [
          "{",
          "    let value: u8 = 0x80; // 128, which is not below 128",
          "    assert!(!value.is_ascii());",
          "    assert!(0x7F.is_ascii()); // 127, which is below 128",
          "    assert!(0x00.is_ascii()); // 0, which is below 128",
          "    assert!(0x3F.is_ascii()); // 63, which is below 128",
          "    assert!(!0x80.is_ascii()); // 128, which is not below 128",
          "    assert!(!0xFF.is_ascii()); // 255, which is not below 128",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 0xFF; // 255, which is above 128",
          "    assert!(!value.is_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(value.is_ascii() == false); // 255 is not ASCII",
          "    let value: u8 = 0x7F; // 127, which is the maximum ASCII value",
          "    assert!(value.is_ascii() == true); // 127 is ASCII",
          "    let value: u8 = 0x00; // 0, which is below 128",
          "    assert!(value.is_ascii() == true); // 0 is ASCII",
          "    let value: u8 = 0x80; // 128, which is above 127",
          "    assert!(value.is_ascii() == false); // 128 is not ASCII",
          "    let value: u8 = 0x1F; // 31, which is below 128",
          "    assert!(value.is_ascii() == true); // 31 is ASCII"
        ],
        "code": [
          "{",
          "    let value: u8 = 0xFF; // 255, which is above 128",
          "    assert!(!value.is_ascii());",
          "    assert!(value.is_ascii() == false); // 255 is not ASCII",
          "    let value: u8 = 0x7F; // 127, which is the maximum ASCII value",
          "    assert!(value.is_ascii() == true); // 127 is ASCII",
          "    let value: u8 = 0x00; // 0, which is below 128",
          "    assert!(value.is_ascii() == true); // 0 is ASCII",
          "    let value: u8 = 0x80; // 128, which is above 127",
          "    assert!(value.is_ascii() == false); // 128 is not ASCII",
          "    let value: u8 = 0x1F; // 31, which is below 128",
          "    assert!(value.is_ascii() == true); // 31 is ASCII",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 0x00; // 0, which is below 128",
          "    assert!(value.is_ascii());",
          "}"
        ],
        "oracle": [
          "    assert!(0x00.is_ascii() == true);",
          "    assert!(0x7F.is_ascii() == true);",
          "    assert!(0x80.is_ascii() == false);",
          "    assert!(0xFF.is_ascii() == false);",
          "    assert!(0x4A.is_ascii() == true);"
        ],
        "code": [
          "{",
          "    let value: u8 = 0x00; // 0, which is below 128",
          "    assert!(value.is_ascii());",
          "    assert!(0x00.is_ascii() == true);",
          "    assert!(0x7F.is_ascii() == true);",
          "    assert!(0x80.is_ascii() == false);",
          "    assert!(0xFF.is_ascii() == false);",
          "    assert!(0x4A.is_ascii() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 0x4A; // 74, which is below 128",
          "    assert!(value.is_ascii());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x4A < 0x80, true);  // Test with value 0x4A (74) is ASCII",
          "    assert_eq!(0x80 < 0x80, false); // Test with value 0x80 (128) is not ASCII",
          "    assert_eq!(0x7F < 0x80, true);  // Test with value 0x7F (127) is ASCII",
          "    assert_eq!(0x00 < 0x80, true);  // Test with value 0x00 (0) is ASCII",
          "    assert_eq!(0xFF < 0x80, false); // Test with value 0xFF (255) is not ASCII"
        ],
        "code": [
          "{",
          "    let value: u8 = 0x4A; // 74, which is below 128",
          "    assert!(value.is_ascii());",
          "    assert_eq!(0x4A < 0x80, true);  // Test with value 0x4A (74) is ASCII",
          "    assert_eq!(0x80 < 0x80, false); // Test with value 0x80 (128) is not ASCII",
          "    assert_eq!(0x7F < 0x80, true);  // Test with value 0x7F (127) is ASCII",
          "    assert_eq!(0x00 < 0x80, true);  // Test with value 0x00 (0) is ASCII",
          "    assert_eq!(0xFF < 0x80, false); // Test with value 0xFF (255) is not ASCII",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]