[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url1.eq(&url2), true);"
        ],
        "code": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "    assert_eq!(url1.eq(&url2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://another-example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url1.eq(&url2), false);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url3), true);",
          "    let url4 = Url { serialization: String::from(\"https://example.com\"), scheme_end: 5, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url4), false);",
          "    let url5 = Url { serialization: String::from(\"http://example.com:80\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: Some(80), path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url5), false);",
          "    let url6 = Url { serialization: String::from(\"http://example.com/\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url6), false);"
        ],
        "code": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://another-example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "    assert_eq!(url1.eq(&url2), false);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url3), true);",
          "    let url4 = Url { serialization: String::from(\"https://example.com\"), scheme_end: 5, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url4), false);",
          "    let url5 = Url { serialization: String::from(\"http://example.com:80\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: Some(80), path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url5), false);",
          "    let url6 = Url { serialization: String::from(\"http://example.com/\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url6), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "}"
        ],
        "oracle": [
          "    assert!(url1.eq(&url2) == true);",
          "    assert!(url1.serialization.eq(&url2.serialization) == true);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), ..url1 };",
          "    assert!(url1.eq(&url3) == false);",
          "    let url4 = Url { serialization: String::from(\"http://example.com\"), host: HostInternal::Domain, ..url1 };",
          "    assert!(url1.eq(&url4) == false);",
          "    let url5 = Url { serialization: String::from(\"\"), scheme_end: 0, username_end: 0, host_start: 0, host_end: 0, host: HostInternal::None, port: None, path_start: 0, query_start: None, fragment_start: Some(0) };",
          "    assert!(url1.eq(&url5) == false);"
        ],
        "code": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "    assert!(url1.eq(&url2) == true);",
          "    assert!(url1.serialization.eq(&url2.serialization) == true);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), ..url1 };",
          "    assert!(url1.eq(&url3) == false);",
          "    let url4 = Url { serialization: String::from(\"http://example.com\"), host: HostInternal::Domain, ..url1 };",
          "    assert!(url1.eq(&url4) == false);",
          "    let url5 = Url { serialization: String::from(\"\"), scheme_end: 0, username_end: 0, host_start: 0, host_end: 0, host: HostInternal::None, port: None, path_start: 0, query_start: None, fragment_start: Some(0) };",
          "    assert!(url1.eq(&url5) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url1.eq(&url2), false);",
          "    assert_eq!(url1.eq(&url1), true);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url3), true);",
          "    let url4 = Url { serialization: String::from(\"http://example.org\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url4), false);",
          "    let url5 = Url { serialization: String::from(\"http://example.com/path\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url5), false);"
        ],
        "code": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal::None,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "    assert_eq!(url1.eq(&url2), false);",
          "    assert_eq!(url1.eq(&url1), true);",
          "    let url3 = Url { serialization: String::from(\"http://example.com\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url3), true);",
          "    let url4 = Url { serialization: String::from(\"http://example.org\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url4), false);",
          "    let url5 = Url { serialization: String::from(\"http://example.com/path\"), scheme_end: 4, username_end: 0, host_start: 7, host_end: 11, host: HostInternal::Domain, port: None, path_start: 0, query_start: None, fragment_start: None };",
          "    assert_eq!(url1.eq(&url5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://ex.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 10,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url1.serialization, \"http://example.com\");",
          "    assert_eq!(url2.serialization, \"http://ex.com\");",
          "    assert!(url1.eq(&url2) == false);"
        ],
        "code": [
          "{",
          "    let url1 = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 11,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let url2 = Url {",
          "        serialization: String::from(\"http://ex.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 10,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let _ = url1.eq(&url2);",
          "    assert_eq!(url1.serialization, \"http://example.com\");",
          "    assert_eq!(url2.serialization, \"http://ex.com\");",
          "    assert!(url1.eq(&url2) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]