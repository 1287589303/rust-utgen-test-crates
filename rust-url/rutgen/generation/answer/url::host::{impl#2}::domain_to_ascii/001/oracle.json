[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain: &[u8] = b\"example.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Host::<String>::domain_to_ascii(b\"example.com\"), Ok(Cow::from(\"example.com\")));",
          "    assert!(Host::<String>::domain_to_ascii(b\"invalid_domain!\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"\\0\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"example..com\").is_err());"
        ],
        "code": [
          "{",
          "    let domain: &[u8] = b\"example.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain);",
          "    assert_eq!(Host::<String>::domain_to_ascii(b\"example.com\"), Ok(Cow::from(\"example.com\")));",
          "    assert!(Host::<String>::domain_to_ascii(b\"invalid_domain!\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"\\0\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"example..com\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain: &[u8] = b\"xn--ls8h.XN--80AQEOL\";",
          "    let _ = Host::<String>::domain_to_ascii(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").is_ok(), true);",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").unwrap().as_ref() == \"xn--ls8h.xn--80aqeol\");",
          "    assert!(Host::<String>::domain_to_ascii(b\"\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"valid-domain.com\").is_ok());",
          "    assert!(Host::<String>::domain_to_ascii(b\"invalid_domain\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--domain.invalid\").is_ok());",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").unwrap().is_ascii());"
        ],
        "code": [
          "{",
          "    let domain: &[u8] = b\"xn--ls8h.XN--80AQEOL\";",
          "    let _ = Host::<String>::domain_to_ascii(domain);",
          "    assert_eq!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").is_ok(), true);",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").unwrap().as_ref() == \"xn--ls8h.xn--80aqeol\");",
          "    assert!(Host::<String>::domain_to_ascii(b\"\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"valid-domain.com\").is_ok());",
          "    assert!(Host::<String>::domain_to_ascii(b\"invalid_domain\").is_err());",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--domain.invalid\").is_ok());",
          "    assert!(Host::<String>::domain_to_ascii(b\"xn--ls8h.XN--80AQEOL\").unwrap().is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain: &[u8] = b\"\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for empty domain\");",
          "}"
        ],
        "oracle": [
          "    Host::<String>::domain_to_ascii(b\"\").expect_err(\"Expected error for empty domain\")"
        ],
        "code": [
          "{",
          "    let domain: &[u8] = b\"\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for empty domain\");",
          "    Host::<String>::domain_to_ascii(b\"\").expect_err(\"Expected error for empty domain\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain: &[u8] = b\"example\\0.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for domain with control characters\");",
          "}"
        ],
        "oracle": [
          "    let domain: &[u8] = b\"example\\0.com\";",
          "    let result = Host::<String>::domain_to_ascii(domain);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);"
        ],
        "code": [
          "{",
          "    let domain: &[u8] = b\"example\\0.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for domain with control characters\");",
          "    let domain: &[u8] = b\"example\\0.com\";",
          "    let result = Host::<String>::domain_to_ascii(domain);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidDomainCharacter);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain: &[u8] = b\"ex@ample.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for domain with invalid IDNA characters\");",
          "}"
        ],
        "oracle": [
          "    let domain: &[u8] = b\"ex@ample.com\";",
          "    let result = Host::<String>::domain_to_ascii(domain);",
          "    assert!(result.is_err() && matches!(result.err(), Some(ParseError::InvalidDomainCharacter)));"
        ],
        "code": [
          "{",
          "    let domain: &[u8] = b\"ex@ample.com\";",
          "    let _ = Host::<String>::domain_to_ascii(domain).expect_err(\"Expected error for domain with invalid IDNA characters\");",
          "    let domain: &[u8] = b\"ex@ample.com\";",
          "    let result = Host::<String>::domain_to_ascii(domain);",
          "    assert!(result.is_err() && matches!(result.err(), Some(ParseError::InvalidDomainCharacter)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]