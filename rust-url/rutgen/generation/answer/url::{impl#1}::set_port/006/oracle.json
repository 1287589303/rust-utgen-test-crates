[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    let _ = result.expect_err(\"Expected error due to no host\");",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_err());",
          "    let _ = result.expect_err(\"Expected error due to no host\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    let _ = result.expect_err(\"Expected error due to no host\");",
          "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_err());",
          "    let _ = result.expect_err(\"Expected error due to no host\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
          "    let result = url.set_port(Some(4096));",
          "    let _ = result.expect_err(\"Expected error due to empty domain\");",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
          "    let result = url.set_port(Some(4096));",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
          "    let result = url.set_port(Some(4096));",
          "    let _ = result.expect_err(\"Expected error due to empty domain\");",
          "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
          "    let result = url.set_port(Some(4096));",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    let _ = result.expect_err(\"Expected error due to file scheme\");",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    let _ = result.expect_err(\"Expected error due to file scheme\");",
          "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]