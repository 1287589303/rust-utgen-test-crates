[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
          "    url.set_port(Some(4096)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"ssh://example.net:4096/\");",
          "    assert!(url.port().is_none());",
          "    assert_eq!(url.set_port(Some(443)), Ok(()));",
          "    assert!(url.port().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
          "    url.set_port(Some(4096)).unwrap();",
          "    assert_eq!(url.as_str(), \"ssh://example.net:4096/\");",
          "    assert!(url.port().is_none());",
          "    assert_eq!(url.set_port(Some(443)), Ok(()));",
          "    assert!(url.port().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    url.set_port(None).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"http://example.com/\");",
          "    assert!(url.port().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    url.set_port(None).unwrap();",
          "    assert_eq!(url.as_str(), \"http://example.com/\");",
          "    assert!(url.port().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.org:443/\").unwrap();",
          "    url.set_port(Some(2048)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"https://example.org:2048/\");",
          "    assert!(url.port().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.org:443/\").unwrap();",
          "    url.set_port(Some(2048)).unwrap();",
          "    assert_eq!(url.as_str(), \"https://example.org:2048/\");",
          "    assert!(url.port().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
          "    url.set_port(Some(1)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"ftp://example.com:1/\");",
          "    assert_eq!(url.port(), Some(1));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
          "    url.set_port(Some(1)).unwrap();",
          "    assert_eq!(url.as_str(), \"ftp://example.com:1/\");",
          "    assert_eq!(url.port(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    url.set_port(Some(65535)).unwrap();",
          "}"
        ],
        "oracle": [
          "    url.set_port(Some(65535)).unwrap();",
          "    assert_eq!(url.as_str(), \"http://example.com:65535/\");",
          "    assert!(url.port().is_some());",
          "    assert_eq!(url.port(), Some(65535));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    url.set_port(Some(65535)).unwrap();",
          "    url.set_port(Some(65535)).unwrap();",
          "    assert_eq!(url.as_str(), \"http://example.com:65535/\");",
          "    assert!(url.port().is_some());",
          "    assert_eq!(url.port(), Some(65535));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]