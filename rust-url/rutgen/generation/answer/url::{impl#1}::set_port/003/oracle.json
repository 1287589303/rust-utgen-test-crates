[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"http://example.com/\");",
          "    assert!(url.port().is_none());",
          "    assert!(url.has_host());",
          "    assert_ne!(url.host(), Some(Host::Domain(\"\")));",
          "    assert_ne!(url.scheme(), \"file\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.as_str(), \"http://example.com/\");",
          "    assert!(url.port().is_none());",
          "    assert!(url.has_host());",
          "    assert_ne!(url.host(), Some(Host::Domain(\"\")));",
          "    assert_ne!(url.scheme(), \"file\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert!(result.is_ok());",
          "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
          "    let result = url.set_port(Some(21));",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    url.set_port(Some(21)).map_err(|_| \"expected Ok(())\").unwrap();",
          "    assert_eq!(url.as_str(), \"ftp://example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
          "    let result = url.set_port(Some(21));",
          "    assert!(result.is_ok());",
          "    url.set_port(Some(21)).map_err(|_| \"expected Ok(())\").unwrap();",
          "    assert_eq!(url.as_str(), \"ftp://example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"http://example.com:8080/\");",
          "    ",
          "    #[test]",
          "    fn test_default_port_not_reflected() {",
          "    let mut url = Url::parse(\"https://example.org/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert!(result.is_ok());",
          "    assert!(url.port().is_none());",
          "    }",
          "    ",
          "    #[test]",
          "    fn test_cannot_set_port_for_cannot_be_base_urls() {",
          "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_err());",
          "    ",
          "    let result = url.set_port(None);",
          "    assert!(result.is_err());",
          "    }"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
          "    let result = url.set_port(Some(8080));",
          "    assert!(result.is_ok());",
          "    assert_eq!(url.as_str(), \"http://example.com:8080/\");",
          "    ",
          "    #[test]",
          "    fn test_default_port_not_reflected() {",
          "    let mut url = Url::parse(\"https://example.org/\").unwrap();",
          "    let result = url.set_port(Some(443));",
          "    assert!(result.is_ok());",
          "    assert!(url.port().is_none());",
          "    }",
          "    ",
          "    #[test]",
          "    fn test_cannot_set_port_for_cannot_be_base_urls() {",
          "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
          "    let result = url.set_port(Some(80));",
          "    assert!(result.is_err());",
          "    ",
          "    let result = url.set_port(None);",
          "    assert!(result.is_err());",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]