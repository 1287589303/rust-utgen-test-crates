[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"key1=value1&key2=value2\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.input, b\"key1=value1&key2=value2\");"
        ],
        "code": [
          "{",
          "    let input = b\"key1=value1&key2=value2\";",
          "    let result = parse(input);",
          "    assert_eq!(result.input, b\"key1=value1&key2=value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    let expected = Parse { input: b\"\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key=value\";",
          "    let expected = Parse { input: b\"key=value\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key1=value1&key2=value2\";",
          "    let expected = Parse { input: b\"key1=value1&key2=value2\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"%23first=%25try%25\";",
          "    let expected = Parse { input: b\"%23first=%25try%25\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key%20with%20spaces=value%20with%20spaces\";",
          "    let expected = Parse { input: b\"key%20with%20spaces=value%20with%20spaces\" };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"\";",
          "    let result = parse(input);",
          "    let expected = Parse { input: b\"\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key=value\";",
          "    let expected = Parse { input: b\"key=value\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key1=value1&key2=value2\";",
          "    let expected = Parse { input: b\"key1=value1&key2=value2\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"%23first=%25try%25\";",
          "    let expected = Parse { input: b\"%23first=%25try%25\" };",
          "    assert_eq!(result, expected);",
          "    let input: &[u8] = b\"key%20with%20spaces=value%20with%20spaces\";",
          "    let expected = Parse { input: b\"key%20with%20spaces=value%20with%20spaces\" };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"%23key=%20value%21\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.input, b\"%23key=%20value%21\");"
        ],
        "code": [
          "{",
          "    let input = b\"%23key=%20value%21\";",
          "    let result = parse(input);",
          "    assert_eq!(result.input, b\"%23key=%20value%21\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"key3=va$lue&key4=valu(e)\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    let input = b\"key3=va$lue&key4=valu(e)\";",
          "    let expected = Parse { input };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = b\"key3=va$lue&key4=valu(e)\";",
          "    let result = parse(input);",
          "    let input = b\"key3=va$lue&key4=valu(e)\";",
          "    let expected = Parse { input };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"key5=valid%value&key6=%7Binvalid%7D\";",
          "    let result = parse(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Parse { input });"
        ],
        "code": [
          "{",
          "    let input = b\"key5=valid%value&key6=%7Binvalid%7D\";",
          "    let result = parse(input);",
          "    assert_eq!(result, Parse { input });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]