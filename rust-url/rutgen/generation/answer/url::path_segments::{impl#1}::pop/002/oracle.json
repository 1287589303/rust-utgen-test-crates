[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "}"
        ],
        "oracle": [
          "    path_segments.after_first_slash < path_segments.url.serialization.len();",
          "    path_segments.url.serialization == \"http://example.com/path/to\";",
          "    path_segments.pop() == &mut path_segments;"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path/to/resource\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "    path_segments.after_first_slash < path_segments.url.serialization.len();",
          "    path_segments.url.serialization == \"http://example.com/path/to\";",
          "    path_segments.pop() == &mut path_segments;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 18);",
          "    assert_eq!(path_segments.after_path, \"\");",
          "    assert_eq!(path_segments.old_after_path_position, 0);",
          "    assert!(url.serialization.ends_with(\"/\"));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/path\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 18);",
          "    assert_eq!(path_segments.after_path, \"\");",
          "    assert_eq!(path_segments.old_after_path_position, 0);",
          "    assert!(url.serialization.ends_with(\"/\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_segments.url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 18);",
          "    assert_eq!(path_segments.old_after_path_position, 0);",
          "    assert_eq!(path_segments.after_path, \"\");",
          "    assert_ne!(path_segments, path_segments.pop());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com/\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 18,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 18,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "    assert_eq!(path_segments.url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 18);",
          "    assert_eq!(path_segments.old_after_path_position, 0);",
          "    assert_eq!(path_segments.after_path, \"\");",
          "    assert_ne!(path_segments, path_segments.pop());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 17,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "}"
        ],
        "oracle": [
          "    path_segments.after_first_slash = 17;",
          "    url.serialization = String::from(\"http://example.com/segment\");",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 17);",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 17);",
          "    url.serialization = String::from(\"http://example.com/segment1/segment2\");",
          "    path_segments.after_first_slash = 17;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/segment1/\");",
          "    url.serialization = String::from(\"http://example.com/segment1\");",
          "    path_segments.after_first_slash = 17;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    path_segments.after_first_slash = 18;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 17,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let mut path_segments = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash: 17,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "    path_segments.pop();",
          "    path_segments.after_first_slash = 17;",
          "    url.serialization = String::from(\"http://example.com/segment\");",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 17);",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    assert_eq!(path_segments.after_first_slash, 17);",
          "    url.serialization = String::from(\"http://example.com/segment1/segment2\");",
          "    path_segments.after_first_slash = 17;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/segment1/\");",
          "    url.serialization = String::from(\"http://example.com/segment1\");",
          "    path_segments.after_first_slash = 17;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "    path_segments.after_first_slash = 18;",
          "    path_segments.pop();",
          "    assert_eq!(url.serialization, \"http://example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]