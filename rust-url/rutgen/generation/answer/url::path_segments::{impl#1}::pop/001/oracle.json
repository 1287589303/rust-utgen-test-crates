[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let after_first_slash = url.serialization.len();",
          "",
          "    let mut path_segments_mut = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "",
          "    path_segments_mut.pop();",
          "}"
        ],
        "oracle": [
          "    assert!(path_segments_mut.url.serialization.is_empty());",
          "    assert_eq!(path_segments_mut.after_first_slash, path_segments_mut.url.serialization.len());",
          "    assert_eq!(path_segments_mut.pop(), &mut path_segments_mut);"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::new(),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 0,",
          "        host: HostInternal,",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let after_first_slash = url.serialization.len();",
          "",
          "    let mut path_segments_mut = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "",
          "    path_segments_mut.pop();",
          "    assert!(path_segments_mut.url.serialization.is_empty());",
          "    assert_eq!(path_segments_mut.after_first_slash, path_segments_mut.url.serialization.len());",
          "    assert_eq!(path_segments_mut.pop(), &mut path_segments_mut);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 7,",
          "        host: HostInternal,",
          "        port: None,",
          "        path_start: 7,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let after_first_slash = url.serialization.len();",
          "",
          "    let mut path_segments_mut = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "",
          "    path_segments_mut.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_segments_mut.url.serialization, \"http://\");",
          "    assert_eq!(path_segments_mut.after_first_slash, path_segments_mut.url.serialization.len());",
          "    assert!(path_segments_mut.url.serialization.ends_with('/'));",
          "    assert!(path_segments_mut.after_path.is_empty());",
          "    assert_eq!(path_segments_mut.old_after_path_position, 0);",
          "    assert!(path_segments_mut.url.serialization == \"http://\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"http://\".to_string(),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 7,",
          "        host: HostInternal,",
          "        port: None,",
          "        path_start: 7,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "",
          "    let after_first_slash = url.serialization.len();",
          "",
          "    let mut path_segments_mut = PathSegmentsMut {",
          "        url: &mut url,",
          "        after_first_slash,",
          "        after_path: String::new(),",
          "        old_after_path_position: 0,",
          "    };",
          "",
          "    path_segments_mut.pop();",
          "    assert_eq!(path_segments_mut.url.serialization, \"http://\");",
          "    assert_eq!(path_segments_mut.after_first_slash, path_segments_mut.url.serialization.len());",
          "    assert!(path_segments_mut.url.serialization.ends_with('/'));",
          "    assert!(path_segments_mut.after_path.is_empty());",
          "    assert_eq!(path_segments_mut.old_after_path_position, 0);",
          "    assert!(path_segments_mut.url.serialization == \"http://\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]