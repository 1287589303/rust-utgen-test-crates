{
  "name": "idna::deprecated::{impl#2}::transitional_processing",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": true,
  "loc": "idna/src/deprecated.rs:172:5:175:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "value: true, value: false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.transitional_processing(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.transitional_processing, true);",
                "    let config_with_false = config.transitional_processing(false);",
                "    assert_eq!(config_with_false.transitional_processing, false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.transitional_processing(true);",
                "    assert_eq!(_result.transitional_processing, true);",
                "    let config_with_false = config.transitional_processing(false);",
                "    assert_eq!(config_with_false.transitional_processing, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: true,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.transitional_processing(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.transitional_processing(false).transitional_processing, false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: true,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.transitional_processing(false);",
                "    assert_eq!(config.transitional_processing(false).transitional_processing, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}