{
  "name": "url::origin::{impl#0}::ascii_serialization",
  "mod_info": {
    "name": "origin",
    "loc": "url/src/lib.rs:217:1:217:12"
  },
  "visible": true,
  "loc": "url/src/origin.rs:78:5:89:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches Origin::Tuple(ref scheme, ref host, port) at line 79 is true\n",
        "precondition: default_port(scheme) == Some(port) at line 82 is true\n"
      ],
      "input_infer": "Input conditions: scheme in [\"http\", \"ws\", \"ftp\", \"https\", \"wss\"], host as valid DNS domain name or valid IP address (both IPv4 and IPv6), port must be 80 for \"http\" or \"ws\", 443 for \"https\" or \"wss\", and 21 for \"ftp\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"http://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"http://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"https://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"https://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ws\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"ws://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"ws\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"ws://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"wss\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"wss://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"wss\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"wss://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    assert_eq!(origin.ascii_serialization(), \"ftp://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    origin.ascii_serialization();",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    assert_eq!(origin.ascii_serialization(), \"ftp://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Origin::Tuple(ref scheme, ref host, port) at line 79 is true\n",
        "precondition: default_port(scheme) == Some(port) at line 82 is false\n"
      ],
      "input_infer": "test input conditions: scheme = \"http\", host = Domain(\"example.com\"), port = 8080; scheme = \"ftp\", host = Ipv4(\"192.168.1.1\"), port = 22; scheme = \"https\", host = Ipv6(\"::1\"), port = 4443\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 8080;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 8080;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let expected = \"http://example.com:8080\".to_owned();",
                "    assert_eq!(origin.ascii_serialization(), expected);"
              ],
              "code": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 8080;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 8080;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let expected = \"http://example.com:8080\".to_owned();",
                "    assert_eq!(origin.ascii_serialization(), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
                "    let port = 22;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"ftp://192.168.1.1:22\".to_owned());"
              ],
              "code": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
                "    let port = 22;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"ftp://192.168.1.1:22\".to_owned());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
                "    let port = 4443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.ascii_serialization(), \"https://[::1]:4443\");"
              ],
              "code": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
                "    let port = 4443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _ = origin.ascii_serialization();",
                "    assert_eq!(origin.ascii_serialization(), \"https://[::1]:4443\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: *self matches Origin::Opaque(_) at line 79 is true\n",
        "precondition: *self matches Origin::Opaque(_) at line 79 is true\n"
      ],
      "input_infer": "Origin::Opaque variant with any valid usize value for initialization.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(0usize));",
                "    let result = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(0usize));",
                "    let result = origin.ascii_serialization();",
                "    assert_eq!(result, \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let result = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let result = origin.ascii_serialization();",
                "    assert_eq!(result, \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1usize));",
                "    let result = origin.ascii_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1usize));",
                "    let result = origin.ascii_serialization();",
                "    assert_eq!(result, \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}