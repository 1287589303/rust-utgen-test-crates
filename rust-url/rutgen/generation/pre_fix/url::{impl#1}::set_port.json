{
  "name": "url::{impl#1}::set_port",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1875:5:1885:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is true\n",
        "precondition: self.host() == Some(Host::Domain(\"\")) at line 1877 is true\n",
        "expected return value/type: Err(())\n"
      ],
      "input_infer": "self.has_host() == true, self.host() == Some(Host::Domain(\"\")), self.scheme() != \"file\", port is Some(u16) or None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(4096));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    ",
                "    let result = url.set_port(None);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(4096));",
                "    assert!(result.is_err());",
                "    ",
                "    let result = url.set_port(None);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(None);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(None);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(80));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(2048));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(2048));",
                "    assert_eq!(result, Err(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(21));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com/\").unwrap();",
                "    url.set_host(Some(\"\")).unwrap(); // This simulates host as Domain(\"\")",
                "    let result = url.set_port(Some(21));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is true\n",
        "precondition: self.host() == Some(Host::Domain(\"\")) at line 1877 is false\n",
        "precondition: self.scheme() == \"file\" at line 1877 is true\n",
        "expected return value/type: Err(())\n"
      ],
      "input_infer": "self.has_host() is true, self.host() is not Some(Host::Domain(\"\")), and self.scheme() is \"file\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"file://example.com/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"file://example.com/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"file://example.com/\").unwrap();",
                "    let result = url.set_port(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"file://example.com/\").unwrap();",
                "    let result = url.set_port(None);",
                "    assert_eq!(result, Err(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"file://example.com:8080/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"file://example.com:8080/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert_eq!(result, Err(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is true\n",
        "precondition: self.host() == Some(Host::Domain(\"\")) at line 1877 is false\n",
        "precondition: self.scheme() == \"file\" at line 1877 is false\n",
        "precondition: port.is_some() at line 1880 is true\n",
        "precondition: port == parser::default_port(self.scheme()) at line 1880 is true\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self.has_host() == true, self.host() != Some(Host::Domain(\"\")), self.scheme() != \"file\", port.is_some() == true, port == parser::default_port(self.scheme())\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"http://example.com/\");",
                "    assert!(url.port().is_none());",
                "    assert!(url.has_host());",
                "    assert_ne!(url.host(), Some(Host::Domain(\"\")));",
                "    assert_ne!(url.scheme(), \"file\");"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_ok());",
                "    assert_eq!(url.as_str(), \"http://example.com/\");",
                "    assert!(url.port().is_none());",
                "    assert!(url.has_host());",
                "    assert_ne!(url.host(), Some(Host::Domain(\"\")));",
                "    assert_ne!(url.scheme(), \"file\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "oracle": [
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert!(result.is_ok());",
                "    let mut url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    let result = url.set_port(Some(21));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "oracle": [
                "    url.set_port(Some(21)).map_err(|_| \"expected Ok(())\").unwrap();",
                "    assert_eq!(url.as_str(), \"ftp://example.com/\");"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    let result = url.set_port(Some(21));",
                "    assert!(result.is_ok());",
                "    url.set_port(Some(21)).map_err(|_| \"expected Ok(())\").unwrap();",
                "    assert_eq!(url.as_str(), \"ftp://example.com/\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"http://example.com:8080/\");",
                "    ",
                "    #[test]",
                "    fn test_default_port_not_reflected() {",
                "    let mut url = Url::parse(\"https://example.org/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert!(result.is_ok());",
                "    assert!(url.port().is_none());",
                "    }",
                "    ",
                "    #[test]",
                "    fn test_cannot_set_port_for_cannot_be_base_urls() {",
                "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "    ",
                "    let result = url.set_port(None);",
                "    assert!(result.is_err());",
                "    }"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    assert!(result.is_ok());",
                "    assert_eq!(url.as_str(), \"http://example.com:8080/\");",
                "    ",
                "    #[test]",
                "    fn test_default_port_not_reflected() {",
                "    let mut url = Url::parse(\"https://example.org/\").unwrap();",
                "    let result = url.set_port(Some(443));",
                "    assert!(result.is_ok());",
                "    assert!(url.port().is_none());",
                "    }",
                "    ",
                "    #[test]",
                "    fn test_cannot_set_port_for_cannot_be_base_urls() {",
                "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "    ",
                "    let result = url.set_port(None);",
                "    assert!(result.is_err());",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is true\n",
        "precondition: self.host() == Some(Host::Domain(\"\")) at line 1877 is false\n",
        "precondition: self.scheme() == \"file\" at line 1877 is false\n",
        "precondition: port.is_some() at line 1880 is true\n",
        "precondition: port == parser::default_port(self.scheme()) at line 1880 is false\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self.has_host() is true; self.host() != Some(Host::Domain(\"\")); self.scheme() != \"file\"; port is Some(u16) not equal to default port for the scheme; expected return Ok(())\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:8080/\").unwrap();",
                "    let result = url.set_port(Some(9090));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:8080/\").unwrap();",
                "    let result = url.set_port(Some(9090));",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:8443/\").unwrap();",
                "    let result = url.set_port(Some(2048));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(url.as_str(), \"https://example.com:2048/\");",
                "    assert!(url.port().is_none());",
                "    assert!(url.host().is_some());",
                "    assert_eq!(url.scheme(), \"https\");",
                "    assert!(url.has_host());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"https://example.com:8443/\").unwrap();",
                "    let result = url.set_port(Some(2048));",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(url.as_str(), \"https://example.com:2048/\");",
                "    assert!(url.port().is_none());",
                "    assert!(url.host().is_some());",
                "    assert_eq!(url.scheme(), \"https\");",
                "    assert!(url.has_host());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    let result = url.set_port(Some(2121));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()))"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    let result = url.set_port(Some(2121));",
                "    assert_eq!(result, Ok(()))",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is true\n",
        "precondition: self.host() == Some(Host::Domain(\"\")) at line 1877 is false\n",
        "precondition: self.scheme() == \"file\" at line 1877 is false\n",
        "precondition: port.is_some() at line 1880 is false\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "Valid input conditions for `set_port` are: url must have a host, host should not be an empty domain, scheme must not be \"file\", and port must be a valid non-default u16 value (between 1 and 65535) or None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
                "    url.set_port(Some(4096)).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"ssh://example.net:4096/\");",
                "    assert!(url.port().is_none());",
                "    assert_eq!(url.set_port(Some(443)), Ok(()));",
                "    assert!(url.port().is_none());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ssh://example.net:2048/\").unwrap();",
                "    url.set_port(Some(4096)).unwrap();",
                "    assert_eq!(url.as_str(), \"ssh://example.net:4096/\");",
                "    assert!(url.port().is_none());",
                "    assert_eq!(url.set_port(Some(443)), Ok(()));",
                "    assert!(url.port().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_port(None).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"http://example.com/\");",
                "    assert!(url.port().is_none());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_port(None).unwrap();",
                "    assert_eq!(url.as_str(), \"http://example.com/\");",
                "    assert!(url.port().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"https://example.org:443/\").unwrap();",
                "    url.set_port(Some(2048)).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"https://example.org:2048/\");",
                "    assert!(url.port().is_none());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"https://example.org:443/\").unwrap();",
                "    url.set_port(Some(2048)).unwrap();",
                "    assert_eq!(url.as_str(), \"https://example.org:2048/\");",
                "    assert!(url.port().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    url.set_port(Some(1)).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.as_str(), \"ftp://example.com:1/\");",
                "    assert_eq!(url.port(), Some(1));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ftp://example.com:21/\").unwrap();",
                "    url.set_port(Some(1)).unwrap();",
                "    assert_eq!(url.as_str(), \"ftp://example.com:1/\");",
                "    assert_eq!(url.port(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_port(Some(65535)).unwrap();",
                "}"
              ],
              "oracle": [
                "    url.set_port(Some(65535)).unwrap();",
                "    assert_eq!(url.as_str(), \"http://example.com:65535/\");",
                "    assert!(url.port().is_some());",
                "    assert_eq!(url.port(), Some(65535));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"http://example.com:80/\").unwrap();",
                "    url.set_port(Some(65535)).unwrap();",
                "    url.set_port(Some(65535)).unwrap();",
                "    assert_eq!(url.as_str(), \"http://example.com:65535/\");",
                "    assert!(url.port().is_some());",
                "    assert_eq!(url.port(), Some(65535));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: self.has_host() at line 1877 is false\n",
        "expected return value/type: Err(())\n"
      ],
      "input_infer": "self.has_host() == false, self.host() == Some(Host::Domain(\"\")), self.scheme() == \"file\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    let _ = result.expect_err(\"Expected error due to no host\");",
                "}"
              ],
              "oracle": [
                "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "    let _ = result.expect_err(\"Expected error due to no host\");"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    let _ = result.expect_err(\"Expected error due to no host\");",
                "    let mut url = Url::parse(\"mailto:test@example.com\").unwrap();",
                "    let result = url.set_port(Some(80));",
                "    assert!(result.is_err());",
                "    let _ = result.expect_err(\"Expected error due to no host\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
                "    let result = url.set_port(Some(4096));",
                "    let _ = result.expect_err(\"Expected error due to empty domain\");",
                "}"
              ],
              "oracle": [
                "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
                "    let result = url.set_port(Some(4096));",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
                "    let result = url.set_port(Some(4096));",
                "    let _ = result.expect_err(\"Expected error due to empty domain\");",
                "    let mut url = Url::parse(\"ssh://:2048/\").unwrap();",
                "    let result = url.set_port(Some(4096));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    let _ = result.expect_err(\"Expected error due to file scheme\");",
                "}"
              ],
              "oracle": [
                "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    assert_eq!(result, Err(()));"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    let _ = result.expect_err(\"Expected error due to file scheme\");",
                "    let mut url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
                "    let result = url.set_port(Some(8080));",
                "    assert_eq!(result, Err(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}