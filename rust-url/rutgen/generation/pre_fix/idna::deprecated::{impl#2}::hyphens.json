{
  "name": "idna::deprecated::{impl#2}::hyphens",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": false,
  "loc": "idna/src/deprecated.rs:226:5:232:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.check_hyphens at line 227 is true\n",
        "expected return value/type: Hyphens::CheckFirstLast\n"
      ],
      "input_infer": "self.check_hyphens=true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: true,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::CheckFirstLast);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: true,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::CheckFirstLast);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .check_hyphens(true);",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::CheckFirstLast);"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .check_hyphens(true);",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::CheckFirstLast);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: true,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::CheckFirstLast);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: true,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::CheckFirstLast);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.check_hyphens at line 227 is false\n",
        "expected return value/type: Hyphens::Allow\n"
      ],
      "input_infer": "self.check_hyphens = false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::Allow);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::Allow);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: true,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::Allow);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: true,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::Allow);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: true,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::Allow);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: true,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::Allow);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: true,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hyphens::Allow);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: true,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let result = config.hyphens();",
                "    assert_eq!(result, Hyphens::Allow);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}