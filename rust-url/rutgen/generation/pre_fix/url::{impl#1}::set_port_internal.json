{
  "name": "url::{impl#1}::set_port_internal",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1887:5:1924:6",
  "fn_tests": [
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: (self.port, port) matches (Some(old), Some(new)) at line 1888 is true\n",
        "precondition: old == new at line 1902 is true\n"
      ],
      "input_infer": "self.port is Some(u16) and port is Some(u16) with old equal to new within the valid range of u16 (0 to 65535)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:8080/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 21,",
                "        host: HostInternal::Domain,",
                "        port: Some(8080),",
                "        path_start: 25,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(8080));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.serialization, \"http://example.com:8080/path\");",
                "    assert_eq!(url.port, Some(8080));",
                "    assert_eq!(url.path_start, 25);",
                "    assert!(url.query_start.is_none());",
                "    assert!(url.fragment_start.is_none());"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:8080/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 21,",
                "        host: HostInternal::Domain,",
                "        port: Some(8080),",
                "        path_start: 25,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(8080));",
                "    assert_eq!(url.serialization, \"http://example.com:8080/path\");",
                "    assert_eq!(url.port, Some(8080));",
                "    assert_eq!(url.path_start, 25);",
                "    assert!(url.query_start.is_none());",
                "    assert!(url.fragment_start.is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:0/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 23,",
                "        host: HostInternal::Domain,",
                "        port: Some(0),",
                "        path_start: 27,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port, Some(0));",
                "    assert_eq!(url.serialization, \"http://example.com:0/path\");",
                "    assert_eq!(url.path_start, 27);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "    assert_eq!(url.host_end, 23);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:0/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 23,",
                "        host: HostInternal::Domain,",
                "        port: Some(0),",
                "        path_start: 27,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(0));",
                "    assert_eq!(url.port, Some(0));",
                "    assert_eq!(url.serialization, \"http://example.com:0/path\");",
                "    assert_eq!(url.path_start, 27);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "    assert_eq!(url.host_end, 23);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:65535/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 24,",
                "        host: HostInternal::Domain,",
                "        port: Some(65535),",
                "        path_start: 29,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(65535));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port, Some(65535));",
                "    assert_eq!(url.serialization, \"http://example.com:65535/path\");",
                "    assert_eq!(url.path_start, 29);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "    assert_eq!(url.host_end, 24);",
                "    assert_eq!(url.host_start, 7);",
                "    assert_eq!(url.username_end, 0);",
                "    assert_eq!(url.scheme_end, 4);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com:65535/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 24,",
                "        host: HostInternal::Domain,",
                "        port: Some(65535),",
                "        path_start: 29,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "",
                "    url.set_port_internal(Some(65535));",
                "    assert_eq!(url.port, Some(65535));",
                "    assert_eq!(url.serialization, \"http://example.com:65535/path\");",
                "    assert_eq!(url.path_start, 29);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "    assert_eq!(url.host_end, 24);",
                "    assert_eq!(url.host_start, 7);",
                "    assert_eq!(url.username_end, 0);",
                "    assert_eq!(url.scheme_end, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: (self.port, port) matches (Some(old), Some(new)) at line 1888 is true\n",
        "precondition: old == new at line 1902 is false\n",
        "precondition: (self.port, port) matches (_, Some(new)) at line 1903 is true\n",
        "precondition: let Some(ref mut index) = self.query_start at line 1914 is true\n",
        "precondition: let Some(ref mut index) = self.fragment_start at line 1917 is true\n"
      ],
      "input_infer": "self.port = Some(value1), port = Some(value2) where value1 != value2 and self.path_start > self.host_end and self.query_start and self.fragment_start are Some(u32) values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(80),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8080);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url_instance.port, Some(8080));",
                "    assert_eq!(url_instance.serialization, \"http://example.com:8080\");",
                "    assert_eq!(url_instance.path_start, 20);",
                "    assert_eq!(url_instance.query_start, Some(24));",
                "    assert_eq!(url_instance.fragment_start, Some(30));",
                "    assert_eq!(url_instance.serialization.len(), 26);"
              ],
              "code": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(80),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8080);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "    assert_eq!(url_instance.port, Some(8080));",
                "    assert_eq!(url_instance.serialization, \"http://example.com:8080\");",
                "    assert_eq!(url_instance.path_start, 20);",
                "    assert_eq!(url_instance.query_start, Some(24));",
                "    assert_eq!(url_instance.fragment_start, Some(30));",
                "    assert_eq!(url_instance.serialization.len(), 26);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(443),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8080);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url_instance.port, Some(8080));",
                "    assert_eq!(url_instance.serialization, \"http://example.com/path:8080\");",
                "    assert_eq!(url_instance.path_start, to_u32(url_instance.serialization.len()).unwrap());",
                "    assert!(url_instance.query_start.is_some());",
                "    assert!(url_instance.fragment_start.is_some());"
              ],
              "code": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(443),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8080);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "    assert_eq!(url_instance.port, Some(8080));",
                "    assert_eq!(url_instance.serialization, \"http://example.com/path:8080\");",
                "    assert_eq!(url_instance.path_start, to_u32(url_instance.serialization.len()).unwrap());",
                "    assert!(url_instance.query_start.is_some());",
                "    assert!(url_instance.fragment_start.is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(21),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8443);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url_instance.port, Some(8443));",
                "    assert_eq!(url_instance.serialization, \"http://example.com/path:8443?query=value#fragment\");",
                "    assert_eq!(url_instance.path_start, 25);",
                "    assert_eq!(url_instance.query_start, Some(24));",
                "    assert_eq!(url_instance.fragment_start, Some(30));"
              ],
              "code": [
                "{",
                "    let mut url_instance = Url {",
                "        serialization: String::from(\"http://example.com/path?query=value#fragment\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: Some(21),",
                "        path_start: 18,",
                "        query_start: Some(24),",
                "        fragment_start: Some(30),",
                "    };",
                "    let new_port = Some(8443);",
                "    ",
                "    url_instance.set_port_internal(new_port);",
                "    assert_eq!(url_instance.port, Some(8443));",
                "    assert_eq!(url_instance.serialization, \"http://example.com/path:8443?query=value#fragment\");",
                "    assert_eq!(url_instance.path_start, 25);",
                "    assert_eq!(url_instance.query_start, Some(24));",
                "    assert_eq!(url_instance.fragment_start, Some(30));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 17,
      "prompt_conds": [
        "precondition: (self.port, port) matches (Some(_), None) at line 1888 is true\n",
        "precondition: let Some(ref mut index) = self.query_start at line 1895 is true\n",
        "precondition: let Some(ref mut index) = self.fragment_start at line 1898 is true\n"
      ],
      "input_infer": "self.port = Some(u16::MAX), port = None, self.query_start = Some(10), self.fragment_start = Some(20)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: \"http://example.com:65535/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 22,",
                "        host: HostInternal::Domain,",
                "        port: Some(u16::MAX),",
                "        path_start: 27,",
                "        query_start: Some(10),",
                "        fragment_start: Some(20),",
                "    };",
                "    url.set_port_internal(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.serialization, \"http://example.com/path\");",
                "    assert_eq!(url.path_start, 22);",
                "    assert_eq!(url.query_start, Some(10));",
                "    assert_eq!(url.fragment_start, Some(20));",
                "    assert_eq!(url.port, None);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: \"http://example.com:65535/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 22,",
                "        host: HostInternal::Domain,",
                "        port: Some(u16::MAX),",
                "        path_start: 27,",
                "        query_start: Some(10),",
                "        fragment_start: Some(20),",
                "    };",
                "    url.set_port_internal(None);",
                "    assert_eq!(url.serialization, \"http://example.com/path\");",
                "    assert_eq!(url.path_start, 22);",
                "    assert_eq!(url.query_start, Some(10));",
                "    assert_eq!(url.fragment_start, Some(20));",
                "    assert_eq!(url.port, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: \"http://example.com:65535/path?query=value#fragment\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 22,",
                "        host: HostInternal::Domain,",
                "        port: Some(u16::MAX),",
                "        path_start: 27,",
                "        query_start: Some(10),",
                "        fragment_start: Some(20),",
                "    };",
                "    url.set_port_internal(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.serialization, \"http://example.com/path?query=value#fragment\");",
                "    assert_eq!(url.path_start, 22);",
                "    assert_eq!(url.query_start, Some(10));",
                "    assert_eq!(url.fragment_start, Some(20));",
                "    assert_eq!(url.port, None);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: \"http://example.com:65535/path?query=value#fragment\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 22,",
                "        host: HostInternal::Domain,",
                "        port: Some(u16::MAX),",
                "        path_start: 27,",
                "        query_start: Some(10),",
                "        fragment_start: Some(20),",
                "    };",
                "    url.set_port_internal(None);",
                "    assert_eq!(url.serialization, \"http://example.com/path?query=value#fragment\");",
                "    assert_eq!(url.path_start, 22);",
                "    assert_eq!(url.query_start, Some(10));",
                "    assert_eq!(url.fragment_start, Some(20));",
                "    assert_eq!(url.port, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 22,
      "prompt_conds": [
        "precondition: (self.port, port) matches (None, None) at line 1888 is true\n"
      ],
      "input_infer": "self.port is None, port is None; expected return type is void or mutable self.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 18,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.serialization, \"http://example.com\");",
                "    assert_eq!(url.path_start, 18);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 18,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.serialization, \"http://example.com\");",
                "    assert_eq!(url.path_start, 18);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::new(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::None,",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.serialization, \"\");",
                "    assert_eq!(url.path_start, 0);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::new(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::None,",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.serialization, \"\");",
                "    assert_eq!(url.path_start, 0);",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 18,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.path_start, 18);",
                "    assert_eq!(url.serialization, \"http://example.com/path\");",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);"
              ],
              "code": [
                "{",
                "    let mut url = Url {",
                "        serialization: String::from(\"http://example.com/path\"),",
                "        scheme_end: 4,",
                "        username_end: 0,",
                "        host_start: 7,",
                "        host_end: 18,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 18,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    url.set_port_internal(None);",
                "    assert_eq!(url.port, None);",
                "    assert_eq!(url.path_start, 18);",
                "    assert_eq!(url.serialization, \"http://example.com/path\");",
                "    assert_eq!(url.query_start, None);",
                "    assert_eq!(url.fragment_start, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}