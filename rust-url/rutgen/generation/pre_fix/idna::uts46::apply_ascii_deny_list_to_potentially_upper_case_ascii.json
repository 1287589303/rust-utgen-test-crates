{
  "name": "idna::uts46::apply_ascii_deny_list_to_potentially_upper_case_ascii",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:220:1:228:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (deny_list & (1u128 << b)) == 0 at line 221 is false\n"
      ],
      "input_infer": "b: 0 to 255, deny_list: 1u128 << b (for b within 0 to 255)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'A'; // Upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'A'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    let b: u8 = b'A';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'a';",
                "    assert_eq!(result, expected_result);",
                "    let deny_list: u128 = 1u128 << b + 1;",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let expected_result: char = 'A';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'B';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'b';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'Z';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'z';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'G';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'g';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'[';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = '\\u{FFFD}';",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let b: u8 = b'A'; // Upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'A'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let b: u8 = b'A';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'a';",
                "    assert_eq!(result, expected_result);",
                "    let deny_list: u128 = 1u128 << b + 1;",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let expected_result: char = 'A';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'B';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'b';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'Z';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'z';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'G';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = 'g';",
                "    assert_eq!(result, expected_result);",
                "    let b: u8 = b'[';",
                "    let deny_list: u128 = 1u128 << b;",
                "    let expected_result: char = '\\u{FFFD}';",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'Z'; // Upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'Z'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'z');"
              ],
              "code": [
                "{",
                "    let b: u8 = b'Z'; // Upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'Z'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = b'a'; // Non upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    let b: u8 = b'a'; // Expecting '\\u{FFFD}' since 'a' is in the deny list",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let b: u8 = b'a'; // Non upper case ASCII character",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let b: u8 = b'a'; // Expecting '\\u{FFFD}' since 'a' is in the deny list",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 'a'",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 0; // Lower boundary case",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');",
                "    b = 65; // Uppercase A",
                "    deny_list = 1u128 << b; // Deny list for A",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, 'a');",
                "    b = 90; // Uppercase Z",
                "    deny_list = 1u128 << b; // Deny list for Z",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, 'z');",
                "    b = 255; // Out of ASCII range",
                "    deny_list = 1u128 << b; // Deny list for 255",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    b = 50; // Middle ASCII character",
                "    deny_list = 1u128 << b; // Deny list for 50",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let b: u8 = 0; // Lower boundary case",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    b = 65; // Uppercase A",
                "    deny_list = 1u128 << b; // Deny list for A",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, 'a');",
                "    b = 90; // Uppercase Z",
                "    deny_list = 1u128 << b; // Deny list for Z",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, 'z');",
                "    b = 255; // Out of ASCII range",
                "    deny_list = 1u128 << b; // Deny list for 255",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    b = 50; // Middle ASCII character",
                "    deny_list = 1u128 << b; // Deny list for 50",
                "    result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 255; // Upper boundary case",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 255",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    let expected_result: char = '\\u{FFFD}'; // Expected outcome when b is in deny_list",
                "    assert_eq!(result, expected_result); // Validate the result against the expected_output"
              ],
              "code": [
                "{",
                "    let b: u8 = 255; // Upper boundary case",
                "    let deny_list: u128 = 1u128 << b; // Deny list for 255",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let expected_result: char = '\\u{FFFD}'; // Expected outcome when b is in deny_list",
                "    assert_eq!(result, expected_result); // Validate the result against the expected_output",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (deny_list & (1u128 << b)) == 0 at line 221 is true\n",
        "precondition: in_inclusive_range8(b, b'A', b'Z') at line 224 is true\n"
      ],
      "input_infer": "b is in the range [65, 90], deny_list is such that (deny_list & (1u128 << b)) == 0 for b in that range\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'a'",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    assert_eq(result, 'a'); // result should be 'a'",
                "    ",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, 'b'); // result should be 'b'",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, 'z'); // result should be 'z'",
                "    ",
                "    let b: u8 = 91; // not in range 'A' to 'Z'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, '\\u{FFFD}'); // result should be '\\u{FFFD}' (replacement character)"
              ],
              "code": [
                "{",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'a'",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    assert_eq(result, 'a'); // result should be 'a'",
                "    ",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, 'b'); // result should be 'b'",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, 'z'); // result should be 'z'",
                "    ",
                "    let b: u8 = 91; // not in range 'A' to 'Z'",
                "    let deny_list: u128 = 0; // ensure (deny_list & (1u128 << b)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq(result, '\\u{FFFD}'); // result should be '\\u{FFFD}' (replacement character)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'b'",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
                "    let expected_result: char = 'b';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let expected_result: char = 'a';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
              ],
              "code": [
                "{",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'b'",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 66)) == 0",
                "    let expected_result: char = 'b';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let expected_result: char = 'a';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'z'",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
              ],
              "code": [
                "{",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'z'",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 78; // 'N'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'n'",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 78; // 'N'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
                "    let expected_result: char = 'n';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let expected_result: char = 'a';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 69; // 'E'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 69)) == 0",
                "    let expected_result: char = 'e';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);"
              ],
              "code": [
                "{",
                "    let b: u8 = 78; // 'N'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    // result should be 'n'",
                "    let b: u8 = 78; // 'N'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 78)) == 0",
                "    let expected_result: char = 'n';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 65)) == 0",
                "    let expected_result: char = 'a';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 90; // 'Z'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 90)) == 0",
                "    let expected_result: char = 'z';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "    ",
                "    let b: u8 = 69; // 'E'",
                "    let deny_list: u128 = 0; // (deny_list & (1u128 << 69)) == 0",
                "    let expected_result: char = 'e';",
                "    assert_eq!(apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list), expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (deny_list & (1u128 << b)) == 0 at line 221 is true\n",
        "precondition: in_inclusive_range8(b, b'A', b'Z') at line 224 is false\n",
        "expected return value/type: '\\u{FFFD}'\n"
      ],
      "input_infer": "b = 65 to 90 (inclusive), deny_list = any u128 value where (deny_list & (1u128 << b)) != 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 65; // Start with the first uppercase letter 'A'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'A'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 1u128 << b; // deny list blocks 'A'",
                "    let expected: char = '\\u{FFFD}'; // expected return value",
                "    assert_eq!(result, expected); // check if the result matches expected value"
              ],
              "code": [
                "{",
                "    let b: u8 = 65; // Start with the first uppercase letter 'A'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'A'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let b: u8 = 65; // 'A'",
                "    let deny_list: u128 = 1u128 << b; // deny list blocks 'A'",
                "    let expected: char = '\\u{FFFD}'; // expected return value",
                "    assert_eq!(result, expected); // check if the result matches expected value",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 66; // Test with 'B'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'B'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 1u128 << b; // deny 'B'",
                "    assert_eq!(result, '\\u{FFFD}'); // Expected return value is '\\u{FFFD}'"
              ],
              "code": [
                "{",
                "    let b: u8 = 66; // Test with 'B'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'B'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    let b: u8 = 66; // 'B'",
                "    let deny_list: u128 = 1u128 << b; // deny 'B'",
                "    assert_eq!(result, '\\u{FFFD}'); // Expected return value is '\\u{FFFD}'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 67; // Test with 'C'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'C'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let b: u8 = 67; // Test with 'C'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'C'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b: u8 = 90; // Test with the last uppercase letter 'Z'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'Z'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let b: u8 = 90; // Test with the last uppercase letter 'Z'",
                "    let deny_list: u128 = 1u128 << b; // Set the deny_list to block 'Z'",
                "    let result = apply_ascii_deny_list_to_potentially_upper_case_ascii(b, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}