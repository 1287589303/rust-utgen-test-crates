{
  "name": "idna::uts46::is_ascii",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:231:1:238:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: c in label.iter() at line 232 is true\n",
        "precondition: c.is_ascii() at line 233 is true\n",
        "precondition: c in label.iter() at line 232 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "label: array of characters containing only ASCII characters, range: 0 to 2000 characters; for false condition: array of characters containing at least one non-ASCII character.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a']), true);",
                "    assert_eq!(is_ascii(&['A']), true);",
                "    assert_eq!(is_ascii(&['1']), true);",
                "    assert_eq!(is_ascii(&['!']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&[' ']), true);",
                "    assert_eq!(is_ascii(&['a', 'ñ']), false);",
                "    assert_eq!(is_ascii(&['あ']), false);",
                "    assert_eq!(is_ascii(&['é']), false);",
                "    assert_eq!(is_ascii(&['😊']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', 'あ']), false);",
                "    assert_eq!(is_ascii(&['A', 'B', 'é']), false);",
                "    assert_eq!(is_ascii(&['1', '2', '😊']), false);",
                "    assert_eq!(is_ascii(&['!', '€']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', 'A']), true);",
                "    assert_eq!(is_ascii(&['x', 'y', 'z', '中']), false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a']), true);",
                "    assert_eq!(is_ascii(&['A']), true);",
                "    assert_eq!(is_ascii(&['1']), true);",
                "    assert_eq!(is_ascii(&['!']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&[' ']), true);",
                "    assert_eq!(is_ascii(&['a', 'ñ']), false);",
                "    assert_eq!(is_ascii(&['あ']), false);",
                "    assert_eq!(is_ascii(&['é']), false);",
                "    assert_eq!(is_ascii(&['😊']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', 'あ']), false);",
                "    assert_eq!(is_ascii(&['A', 'B', 'é']), false);",
                "    assert_eq!(is_ascii(&['1', '2', '😊']), false);",
                "    assert_eq!(is_ascii(&['!', '€']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', 'A']), true);",
                "    assert_eq!(is_ascii(&['x', 'y', 'z', '中']), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['a', 'b', 'c', '1', '2', '3', '!', '@', '#'];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', '2', '3', '!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', 'ñ']), false);",
                "    assert_eq!(is_ascii(&['a', 'ç', 'c']), false);",
                "    assert_eq!(is_ascii(&['ü', '1', '3']), false);",
                "    assert_eq!(is_ascii(&['😀', 'a', 'b']), false);",
                "    assert_eq!(is_ascii(&[]), true);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['a', 'b', 'c', '1', '2', '3', '!', '@', '#'];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '1', '2', '3', '!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', 'ñ']), false);",
                "    assert_eq!(is_ascii(&['a', 'ç', 'c']), false);",
                "    assert_eq!(is_ascii(&['ü', '1', '3']), false);",
                "    assert_eq!(is_ascii(&['😀', 'a', 'b']), false);",
                "    assert_eq!(is_ascii(&[]), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: Vec<char> = ('a'..='z').chain('A'..='Z').chain('0'..='9').chain(\"!@#$%^&*()_+\").collect();",
                "    let label: &[char] = &label;",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert!(is_ascii(&['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']));",
                "    assert!(is_ascii(&['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']));",
                "    assert!(is_ascii(&['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']));",
                "    assert!(is_ascii(&['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+']));",
                "    assert!(!is_ascii(&['a', 'b', 'c', 'ü', 'e']));",
                "    assert!(!is_ascii(&['A', 'B', 'C', 'ß', 'E']));",
                "    assert!(!is_ascii(&['0', '1', '2', 'ñ', '4']));",
                "    assert!(!is_ascii(&['!', '@', '#', '€', '%']));"
              ],
              "code": [
                "{",
                "    let label: Vec<char> = ('a'..='z').chain('A'..='Z').chain('0'..='9').chain(\"!@#$%^&*()_+\").collect();",
                "    let label: &[char] = &label;",
                "    is_ascii(label);",
                "    assert!(is_ascii(&['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']));",
                "    assert!(is_ascii(&['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']));",
                "    assert!(is_ascii(&['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']));",
                "    assert!(is_ascii(&['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+']));",
                "    assert!(!is_ascii(&['a', 'b', 'c', 'ü', 'e']));",
                "    assert!(!is_ascii(&['A', 'B', 'C', 'ß', 'E']));",
                "    assert!(!is_ascii(&['0', '1', '2', 'ñ', '4']));",
                "    assert!(!is_ascii(&['!', '@', '#', '€', '%']));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let label: &[char] = &['a', 'b', 'c', '中'];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '中']), false);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '.', '_']), true);",
                "    assert_eq!(is_ascii(&['a', '中']), false);",
                "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
                "    assert_eq!(is_ascii(&[]), true);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['a', 'b', 'c', '中'];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c', '中']), false);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '.', '_']), true);",
                "    assert_eq!(is_ascii(&['a', '中']), false);",
                "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
                "    assert_eq!(is_ascii(&[]), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: c in label.iter() at line 232 is true\n",
        "precondition: c.is_ascii() at line 233 is false\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: label containing at least one non-ASCII character, such as ['A', 'B', 'C', 'é'], and label length between 1 to 2000 characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['A', 'B', 'C', 'é'];",
                "    let result = is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['A', 'B', 'C', 'é'];",
                "    let result = is_ascii(label);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['ñ'];",
                "    let result = is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['ñ'];",
                "    let result = is_ascii(label);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['Δ', 'Ω', '©'];",
                "    let result = is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['Δ', 'Ω', '©'];",
                "    let result = is_ascii(label);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['H', 'e', 'l', 'l', 'ø', '!', ' '];",
                "    let result = is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['H', 'e', 'l', 'l', 'ø', '!', ' '];",
                "    let result = is_ascii(label);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut label: Vec<char> = vec!['A'; 1000]; // 1000 ASCII characters",
                "    label.push('é'); // Add a non-ASCII character",
                "    let result = is_ascii(&label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let mut label: Vec<char> = vec!['A'; 1000]; // 1000 ASCII characters",
                "    label.push('é'); // Add a non-ASCII character",
                "    let result = is_ascii(&label);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: c in label.iter() at line 232 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "label: &[char] containing only ASCII characters, including an edge case of an empty slice, with lengths ranging from 0 to 1000 (inclusive) characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'ç']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', '中']), false);",
                "    assert_eq!(is_ascii(&['あ', 'い', 'う']), false);",
                "    assert_eq!(is_ascii(&['$', '%', '&']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', ' '] ), true);",
                "    assert_eq!(is_ascii(&[' ', '!', '@']), true);",
                "    assert_eq!(is_ascii(&['a', 'B', 'c', '9', '.', '-']), true);",
                "    assert_eq!(is_ascii(&['日', '本']), false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'ç']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', '中']), false);",
                "    assert_eq!(is_ascii(&['あ', 'い', 'う']), false);",
                "    assert_eq!(is_ascii(&['$', '%', '&']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', ' '] ), true);",
                "    assert_eq!(is_ascii(&[' ', '!', '@']), true);",
                "    assert_eq!(is_ascii(&['a', 'B', 'c', '9', '.', '-']), true);",
                "    assert_eq!(is_ascii(&['日', '本']), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['a'];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a']), true);",
                "    assert_eq!(is_ascii(&['A']), true);",
                "    assert_eq!(is_ascii(&['0']), true);",
                "    assert_eq!(is_ascii(&['-', '_']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['0', '1', '2']), true);",
                "    assert_eq!(is_ascii(&['a', '1', 'A']), true);",
                "    assert_eq!(is_ascii(&['-', '0', 'A']), true);",
                "    assert_eq!(is_ascii(&['a', 'Z', '-', '9']), true);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['a'];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a']), true);",
                "    assert_eq!(is_ascii(&['A']), true);",
                "    assert_eq!(is_ascii(&['0']), true);",
                "    assert_eq!(is_ascii(&['-', '_']), true);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['0', '1', '2']), true);",
                "    assert_eq!(is_ascii(&['a', '1', 'A']), true);",
                "    assert_eq!(is_ascii(&['-', '0', 'A']), true);",
                "    assert_eq!(is_ascii(&['a', 'Z', '-', '9']), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['h', 'e', 'l', 'l', 'o'];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['h', 'e', 'l', 'l', 'o']), true);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['h', 'e', 'l', 'l', 'o'];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['h', 'e', 'l', 'l', 'o']), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: Vec<char> = (0..1000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
                "    is_ascii(&label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&vec!['a', '1', '-']), true);",
                "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&vec![' ']), true);",
                "    assert_eq!(is_ascii(&vec!['-']), true);",
                "    assert_eq!(is_ascii(&vec!['あ', 'い', 'う']), false);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'あ']), false);",
                "    assert_eq!(is_ascii(&vec!['', ' ', 'あ']), false);",
                "    assert_eq!(is_ascii(&vec!['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&vec!['a', '€']), false);"
              ],
              "code": [
                "{",
                "    let label: Vec<char> = (0..1000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
                "    is_ascii(&label);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&vec!['a', '1', '-']), true);",
                "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&vec![' ']), true);",
                "    assert_eq!(is_ascii(&vec!['-']), true);",
                "    assert_eq!(is_ascii(&vec!['あ', 'い', 'う']), false);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'あ']), false);",
                "    assert_eq!(is_ascii(&vec!['', ' ', 'あ']), false);",
                "    assert_eq!(is_ascii(&vec!['!', '@', '#']), true);",
                "    assert_eq!(is_ascii(&vec!['a', '€']), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&[' ', '\\t']), true);",
                "    assert_eq!(is_ascii(&['©', '日']), false);",
                "    assert_eq!(is_ascii(&['<', '>', '&']), true);",
                "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
                "    assert_eq!(is_ascii(&['\\u{00E9}']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', '©', 'c']), false);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &[];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&['1', '2', '3']), true);",
                "    assert_eq!(is_ascii(&['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&[' ', '\\t']), true);",
                "    assert_eq!(is_ascii(&['©', '日']), false);",
                "    assert_eq!(is_ascii(&['<', '>', '&']), true);",
                "    assert_eq!(is_ascii(&['\\u{007F}']), false);",
                "    assert_eq!(is_ascii(&['\\u{00E9}']), false);",
                "    assert_eq!(is_ascii(&['a', 'b', '©', 'c']), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[char] = &['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$'];",
                "    is_ascii(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$']), true);"
              ],
              "code": [
                "{",
                "    let label: &[char] = &['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$'];",
                "    is_ascii(label);",
                "    assert_eq!(is_ascii(&['A', 'B', 'C', '1', '2', '3', '!', '@', '#', '$']), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: Vec<char> = (0..2000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
                "    is_ascii(&label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', '1']), true);",
                "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&vec!['0', '1', '2']), true);",
                "    assert_eq!(is_ascii(&vec!['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&vec!['ñ', 'á', 'ó']), false);",
                "    assert_eq!(is_ascii(&vec!['你', '好']), false);",
                "    assert_eq!(is_ascii(&vec!['😊']), false);",
                "    assert_eq!(is_ascii(&vec!['hello', 'world']), true);",
                "    assert_eq!(is_ascii(&vec!['Hello', 'World!']), true);",
                "    assert_eq!(is_ascii(&vec!['unicode', '字符']), false);",
                "    assert_eq!(is_ascii(&vec!['ascii', 'test', 'case']), true);"
              ],
              "code": [
                "{",
                "    let label: Vec<char> = (0..2000).map(|i| char::from(('a' as u8 + (i % 26)))).collect();",
                "    is_ascii(&label);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', 'c']), true);",
                "    assert_eq!(is_ascii(&vec!['a', 'b', '1']), true);",
                "    assert_eq!(is_ascii(&vec!['A', 'B', 'C']), true);",
                "    assert_eq!(is_ascii(&vec!['0', '1', '2']), true);",
                "    assert_eq!(is_ascii(&vec!['-', '_', '.']), true);",
                "    assert_eq!(is_ascii(&vec!['ñ', 'á', 'ó']), false);",
                "    assert_eq!(is_ascii(&vec!['你', '好']), false);",
                "    assert_eq!(is_ascii(&vec!['😊']), false);",
                "    assert_eq!(is_ascii(&vec!['hello', 'world']), true);",
                "    assert_eq!(is_ascii(&vec!['Hello', 'World!']), true);",
                "    assert_eq!(is_ascii(&vec!['unicode', '字符']), false);",
                "    assert_eq!(is_ascii(&vec!['ascii', 'test', 'case']), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}