{
  "name": "idna::deprecated::{impl#2}::use_idna_2008_rules",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": true,
  "loc": "idna/src/deprecated.rs:211:5:214:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value at line 212 is true\n"
      ],
      "input_infer": "value: true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(true);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let config = Config {",
                "    use_std3_ascii_rules: false,",
                "    transitional_processing: false,",
                "    verify_dns_length: false,",
                "    check_hyphens: false,",
                "    };",
                "    config.use_idna_2008_rules(true);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(true);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let config = Config {",
                "    use_std3_ascii_rules: false,",
                "    transitional_processing: false,",
                "    verify_dns_length: false,",
                "    check_hyphens: false,",
                "    };",
                "    config.use_idna_2008_rules(true);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value at line 212 is false\n",
        "expected return value/type: self\n"
      ],
      "input_infer": "value: true or false (value must be false to avoid panic)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(false);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false }));"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(false);",
                "    assert!(matches!(_result, Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| config.use_idna_2008_rules(true)).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| config.use_idna_2008_rules(true)).is_err());",
                "    assert!(matches!(config.use_idna_2008_rules(true), _));"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        use_std3_ascii_rules: false,",
                "        transitional_processing: false,",
                "        verify_dns_length: false,",
                "        check_hyphens: false,",
                "    };",
                "    let _result = config.use_idna_2008_rules(true);",
                "    assert_eq!(std::panic::catch_unwind(|| config.use_idna_2008_rules(true)).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| config.use_idna_2008_rules(true)).is_err());",
                "    assert!(matches!(config.use_idna_2008_rules(true), _));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}