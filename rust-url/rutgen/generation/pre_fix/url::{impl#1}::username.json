{
  "name": "url::{impl#1}::username",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1048:5:1055:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.has_authority() at line 1050 is true\n",
        "precondition: self.username_end > self.scheme_end + scheme_separator_len at line 1050 is true\n",
        "expected return value/type: self.slice(self.scheme_end + scheme_separator_len..self.username_end)\n"
      ],
      "input_infer": "Valid URL input strings where authority is present and have a non-empty username segment, e.g., \"http://user:pass@host.com\", \"ftp://username@server.com\", and special cases with encoded characters like \"http://user%20name@host.com\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user:pass@host.com\").unwrap();",
                "    let username = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username, \"user\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user:pass@host.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"ftp://user%20name@server.com\").unwrap();",
                "    let username = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username, \"user name\");",
                "    ",
                "    let url = Url::parse(\"http://user123@domain.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user123\");",
                "    ",
                "    let url = Url::parse(\"https://rms@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"rms\");",
                "    ",
                "    let url = Url::parse(\"ftp://:password@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"\");",
                "    ",
                "    let url = Url::parse(\"ftp://username:@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"username\");",
                "    ",
                "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"ftp://user%20name@server.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user name\");",
                "    ",
                "    let url = Url::parse(\"http://user123@domain.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user123\");",
                "    ",
                "    let url = Url::parse(\"https://rms@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"rms\");",
                "    ",
                "    let url = Url::parse(\"ftp://:password@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"\");",
                "    ",
                "    let url = Url::parse(\"ftp://username:@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"username\");",
                "    ",
                "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user123:secret@host.com\").unwrap();",
                "    let username = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username, \"user123\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user123:secret@host.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user123\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://username:@host.com\").unwrap();",
                "    let username = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username, \"username\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://username:@host.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"username\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user%3Apass@host.com\").unwrap();",
                "    let username = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username, \"user:pass\");",
                "    assert_eq!(url.username_end, 15);",
                "    assert!(url.has_authority());",
                "    assert!(url.username_end > url.scheme_end + 6);",
                "    assert_eq!(url.scheme_end, 4);",
                "    assert!(username.contains(':'));",
                "    assert!(username == \"user:pass\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user%3Apass@host.com\").unwrap();",
                "    let username = url.username();",
                "    assert_eq!(username, \"user:pass\");",
                "    assert_eq!(url.username_end, 15);",
                "    assert!(url.has_authority());",
                "    assert!(url.username_end > url.scheme_end + 6);",
                "    assert_eq!(url.scheme_end, 4);",
                "    assert!(username.contains(':'));",
                "    assert!(username == \"user:pass\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.has_authority() at line 1050 is true\n",
        "precondition: self.username_end > self.scheme_end + scheme_separator_len at line 1050 is false, with bound self.username_end == self.scheme_end + scheme_separator_len\n",
        "expected return value/type: \"\"\n"
      ],
      "input_infer": "self.has_authority() is true, self.username_end == self.scheme_end + \"://\".len() as u32 (i.e., username_end equals to scheme_end + 4)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"ftp://:secret@example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 7,",
                "        host_end: 15,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 15,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"ftp://:secret@example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 7,",
                "        host_end: 15,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 15,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"ftp://:example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 6,",
                "        host_end: 14,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 14,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"ftp://:example.com\"),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 6,",
                "        host_end: 14,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 14,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"https://example.com\"),",
                "        scheme_end: 5,",
                "        username_end: 5,",
                "        host_start: 8,",
                "        host_end: 16,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 16,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: String::from(\"https://example.com\"),",
                "        scheme_end: 5,",
                "        username_end: 5,",
                "        host_start: 8,",
                "        host_end: 16,",
                "        host: HostInternal::Domain,",
                "        port: None,",
                "        path_start: 16,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.has_authority() at line 1050 is false\n",
        "expected return value/type: \"\"\n"
      ],
      "input_infer": "self.has_authority() is false (e.g., URLs without userinfo), input values like \"http://example.com\", \"ftp://example.com\", \"https://example.com/path\", or \"file:///path/to/file\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com/path\").unwrap();",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com/path\").unwrap();",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
                "    let _ = url.username();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.username(), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
                "    let _ = url.username();",
                "    assert_eq!(url.username(), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}