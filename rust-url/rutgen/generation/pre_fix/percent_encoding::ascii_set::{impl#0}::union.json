{
  "name": "percent_encoding::ascii_set::{impl#0}::union",
  "mod_info": {
    "name": "ascii_set",
    "loc": "percent_encoding/src/lib.rs:58:1:58:15"
  },
  "visible": true,
  "loc": "percent_encoding/src/ascii_set.rs:69:5:77:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: AsciiSet { mask }\n"
      ],
      "input_infer": "Test input conditions or ranges: valid AsciiSet instances with all bytes set (0x00 to 0x7F) and empty AsciiSet instances, ensuring coverage of both full union scenarios and edge case of combining empty sets.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let full_ascii_set = AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    };",
                "    let result = full_ascii_set.union(ASCII_SET::EMPTY);",
                "}"
              ],
              "oracle": [
                "    result = full_ascii_set.union(ASCII_SET::EMPTY);",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "    result = ASCII_SET::EMPTY.union(full_ascii_set);",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "    let another_set = AsciiSet {",
                "    mask: [1, 0, 0, 0],",
                "    };",
                "    result = full_ascii_set.union(another_set);",
                "    assert_eq!(result.mask, [!0_u32 | 1, !0_u32, !0_u32, !0_u32]);",
                "    result = another_set.union(full_ascii_set);",
                "    assert_eq!(result.mask, [!0_u32 | 1, !0_u32, !0_u32, !0_u32]);"
              ],
              "code": [
                "{",
                "    let full_ascii_set = AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    };",
                "    let result = full_ascii_set.union(ASCII_SET::EMPTY);",
                "    result = full_ascii_set.union(ASCII_SET::EMPTY);",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "    result = ASCII_SET::EMPTY.union(full_ascii_set);",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "    let another_set = AsciiSet {",
                "    mask: [1, 0, 0, 0],",
                "    };",
                "    result = full_ascii_set.union(another_set);",
                "    assert_eq!(result.mask, [!0_u32 | 1, !0_u32, !0_u32, !0_u32]);",
                "    result = another_set.union(full_ascii_set);",
                "    assert_eq!(result.mask, [!0_u32 | 1, !0_u32, !0_u32, !0_u32]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_ascii_set = AsciiSet::EMPTY;",
                "    let result = empty_ascii_set.union(AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);"
              ],
              "code": [
                "{",
                "    let empty_ascii_set = AsciiSet::EMPTY;",
                "    let result = empty_ascii_set.union(AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    });",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_set1 = AsciiSet::EMPTY;",
                "    let empty_set2 = AsciiSet::EMPTY;",
                "    let result = empty_set1.union(empty_set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, AsciiSet::EMPTY);",
                "    assert!(result.mask.iter().all(|&m| m == 0));"
              ],
              "code": [
                "{",
                "    let empty_set1 = AsciiSet::EMPTY;",
                "    let empty_set2 = AsciiSet::EMPTY;",
                "    let result = empty_set1.union(empty_set2);",
                "    assert_eq!(result, AsciiSet::EMPTY);",
                "    assert!(result.mask.iter().all(|&m| m == 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let full_ascii_set = AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    };",
                "    let partial_ascii_set = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7F_u32 % 32)],",
                "    };",
                "    let result = full_ascii_set.union(partial_ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);"
              ],
              "code": [
                "{",
                "    let full_ascii_set = AsciiSet {",
                "        mask: [!0_u32, !0_u32, !0_u32, !0_u32],",
                "    };",
                "    let partial_ascii_set = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7F_u32 % 32)],",
                "    };",
                "    let result = full_ascii_set.union(partial_ascii_set);",
                "    assert_eq!(result.mask, [!0_u32, !0_u32, !0_u32, !0_u32]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let partial_set1 = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7F_u32 % 32)],",
                "    };",
                "    let partial_set2 = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7E_u32 % 32)],",
                "    };",
                "    let result = partial_set1.union(partial_set2);",
                "}"
              ],
              "oracle": [
                "    let expected_mask = [0, 0, 0, (1 << (0x7F_u32 % 32)) | (1 << (0x7E_u32 % 32))];",
                "    assert_eq!(result.mask, expected_mask);",
                "    let empty_set = AsciiSet::EMPTY;",
                "    let result_empty_union = empty_set.union(partial_set1);",
                "    assert_eq!(result_empty_union.mask, partial_set1.mask);",
                "    let result_self_union = partial_set1.union(partial_set1);",
                "    assert_eq!(result_self_union.mask, partial_set1.mask);"
              ],
              "code": [
                "{",
                "    let partial_set1 = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7F_u32 % 32)],",
                "    };",
                "    let partial_set2 = AsciiSet {",
                "        mask: [0, 0, 0, 1 << (0x7E_u32 % 32)],",
                "    };",
                "    let result = partial_set1.union(partial_set2);",
                "    let expected_mask = [0, 0, 0, (1 << (0x7F_u32 % 32)) | (1 << (0x7E_u32 % 32))];",
                "    assert_eq!(result.mask, expected_mask);",
                "    let empty_set = AsciiSet::EMPTY;",
                "    let result_empty_union = empty_set.union(partial_set1);",
                "    assert_eq!(result_empty_union.mask, partial_set1.mask);",
                "    let result_self_union = partial_set1.union(partial_set1);",
                "    assert_eq!(result_self_union.mask, partial_set1.mask);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}