{
  "name": "idna::punycode::{impl#3}::char_ascii_lower_case",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": true,
  "loc": "idna/src/punycode.rs:153:5:156:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: *self\n"
      ],
      "input_infer": "Test input conditions or ranges: any valid char input, including ASCII characters (e.g., 'a', 'A', '0', '@', '~'), and non-ASCII characters (e.g., 'é', 'Ω', '中'), as well as delimiter characters (if any exist).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = 'a';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'a');",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'A');",
                "    let input: char = '1';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '1');",
                "    let input: char = '-';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '-');",
                "    let input: char = ' ' ;",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, ' ');"
              ],
              "code": [
                "{",
                "    let input: char = 'a';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'a');",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'A');",
                "    let input: char = '1';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '1');",
                "    let input: char = '-';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '-');",
                "    let input: char = ' ' ;",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, ' ');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'A');",
                "    let input: char = 'b';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'b');",
                "    let input: char = 'Z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'Z');",
                "    let input: char = 'z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'z');",
                "    let input: char = '1';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '1');",
                "    let input: char = '!';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '!');"
              ],
              "code": [
                "{",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'A');",
                "    let input: char = 'b';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'b');",
                "    let input: char = 'Z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'Z');",
                "    let input: char = 'z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'z');",
                "    let input: char = '1';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '1');",
                "    let input: char = '!';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '!');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = '0';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '0');",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'A');",
                "    let input: char = 'z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'z');",
                "    let input: char = '!';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '!');",
                "    let input: char = ' ';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, ' ');"
              ],
              "code": [
                "{",
                "    let input: char = '0';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '0');",
                "    let input: char = 'A';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'A');",
                "    let input: char = 'z';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'z');",
                "    let input: char = '!';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '!');",
                "    let input: char = ' ';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, ' ');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = '@';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '@');"
              ],
              "code": [
                "{",
                "    let input: char = '@';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '@');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = '~';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '~');"
              ],
              "code": [
                "{",
                "    let input: char = '~';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '~');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = 'é';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'é');",
                "    assert_eq!(result.is_ascii(), false);",
                "    assert!(result.is_delimiter() == false);",
                "    assert!(result.digit().is_none());",
                "    assert_eq!(result.char(), 'é');",
                "    assert_eq!(result.char_ascii_lower_case(), 'é');"
              ],
              "code": [
                "{",
                "    let input: char = 'é';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'é');",
                "    assert_eq!(result.is_ascii(), false);",
                "    assert!(result.is_delimiter() == false);",
                "    assert!(result.digit().is_none());",
                "    assert_eq!(result.char(), 'é');",
                "    assert_eq!(result.char_ascii_lower_case(), 'é');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = 'Ω';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'Ω');"
              ],
              "code": [
                "{",
                "    let input: char = 'Ω';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, 'Ω');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = '中';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '中');"
              ],
              "code": [
                "{",
                "    let input: char = '中';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '中');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: char = '-';",
                "    let result = input.char_ascii_lower_case();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '-');",
                "    assert!(result.is_ascii());",
                "    assert!(!result.is_delimiter());",
                "    assert_eq!(result.char(), '-');",
                "    assert_eq!(result.char_ascii_lower_case(), '-');"
              ],
              "code": [
                "{",
                "    let input: char = '-';",
                "    let result = input.char_ascii_lower_case();",
                "    assert_eq!(result, '-');",
                "    assert!(result.is_ascii());",
                "    assert!(!result.is_delimiter());",
                "    assert_eq!(result.char(), '-');",
                "    assert_eq!(result.char_ascii_lower_case(), '-');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}