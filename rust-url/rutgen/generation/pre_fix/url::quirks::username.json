{
  "name": "url::quirks::username",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:116:1:118:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: url.username()\n"
      ],
      "input_infer": "valid usernames including empty string, usernames with special characters, usernames with colon, various valid URL schemes (e.g., \"http://\", \"https://\", \"ftp://\"), valid user info with and without passwords, and boundary cases such as maximum length usernames or usernames with only special characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user:password@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username(&url), \"user\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user:password@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "    assert_eq!(username(&url), \"user\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://:password@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://user:password@www.example.com\").unwrap();",
                "    assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"ftp://username@host:21/path\").unwrap();",
                "    assert_eq!(username(&url), \"username\");",
                "    let url = Url::parse(\"http://www.example.com\").unwrap();",
                "    assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"https://user@sub.domain.com\").unwrap();",
                "    assert_eq!(username(&url), \"user\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://:password@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "    assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://user:password@www.example.com\").unwrap();",
                "    assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"ftp://username@host:21/path\").unwrap();",
                "    assert_eq!(username(&url), \"username\");",
                "    let url = Url::parse(\"http://www.example.com\").unwrap();",
                "    assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"https://user@sub.domain.com\").unwrap();",
                "    assert_eq!(username(&url), \"user\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user.name+tag@example.com\").unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username(&url), \"user.name+tag\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user.name+tag@example.com\").unwrap();",
                "    let _ = username(&url);",
                "    assert_eq!(username(&url), \"user.name+tag\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://user:pass@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    let url = Url::parse(\"http://user:pass@www.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"https://user@example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"ftp://user:pass@ftp.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://example.com\").unwrap(); assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://:pass@www.example.com\").unwrap(); assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://user:@www.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user:pass@www.example.com/path?query#fragment\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user:pass@localhost:8080\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user!@example.com\").unwrap(); assert_eq!(username(&url), \"user!\");",
                "    let url = Url::parse(\"http://user%40example.com\").unwrap(); assert_eq!(username(&url), \"user@example.com\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://user:pass@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "    let url = Url::parse(\"http://user:pass@www.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"https://user@example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"ftp://user:pass@ftp.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://example.com\").unwrap(); assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://:pass@www.example.com\").unwrap(); assert_eq!(username(&url), \"\");",
                "    let url = Url::parse(\"http://user:@www.example.com\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user:pass@www.example.com/path?query#fragment\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user:pass@localhost:8080\").unwrap(); assert_eq!(username(&url), \"user\");",
                "    let url = Url::parse(\"http://user!@example.com\").unwrap(); assert_eq!(username(&url), \"user!\");",
                "    let url = Url::parse(\"http://user%40example.com\").unwrap(); assert_eq!(username(&url), \"user@example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_username = \"u\".repeat(256); // Assuming 256 is a maximum length example",
                "    let url = Url::parse(&format!(\"http://{}@www.example.com\", long_username)).unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username(&url), long_username.as_str());"
              ],
              "code": [
                "{",
                "    let long_username = \"u\".repeat(256); // Assuming 256 is a maximum length example",
                "    let url = Url::parse(&format!(\"http://{}@www.example.com\", long_username)).unwrap();",
                "    let _ = username(&url);",
                "    assert_eq!(username(&url), long_username.as_str());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://!@#$%^&*()@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(username(&url), \"!@#$%^&*()\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://!@#$%^&*()@www.example.com\").unwrap();",
                "    let _ = username(&url);",
                "    assert_eq!(username(&url), \"!@#$%^&*()\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}