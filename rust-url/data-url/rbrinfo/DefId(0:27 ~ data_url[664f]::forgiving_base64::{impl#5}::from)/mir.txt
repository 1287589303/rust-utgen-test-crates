bb0
  0: PlaceMention(_1)
    SourceInfo(data-url/src/forgiving_base64.rs:63:15-63:16)
  1: _2 = discriminant(_1)
    SourceInfo(data-url/src/forgiving_base64.rs:63:15-63:16)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:63:9-63:16)
      kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), _1)
    SourceInfo(data-url/src/forgiving_base64.rs:63:15-63:16)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:63:15-63:16)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:64:13-64:42)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:65:37-65:38)
  1: _4 = move ((_1 as WriteError).0: forgiving_base64::Impossible)
    SourceInfo(data-url/src/forgiving_base64.rs:65:37-65:38)
  2: StorageLive(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:65:43-65:53)
  3: PlaceMention(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:65:49-65:50)
  4: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(data-url/src/forgiving_base64.rs:65:49-65:50)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:65:49-65:50)
      kind: unreachable
  }
  preds [bb0, bb2]
  succs []

bb4
  0: StorageLive(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:64:40-64:41)
  1: _3 = move ((_1 as InvalidBase64).0: forgiving_base64::InvalidBase64)
    SourceInfo(data-url/src/forgiving_base64.rs:64:40-64:41)
  2: _0 = move _3
    SourceInfo(data-url/src/forgiving_base64.rs:64:46-64:47)
  3: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:64:46-64:47)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:67:6-67:6)
      kind: return
  }
  preds [bb2]
  succs []

