bb0
  0: StorageLive(_2)
    SourceInfo(data-url/src/lib.rs:115:13-115:21)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:115:24-115:34)
      kind: _2 = std::vec::Vec::<u8>::new() -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(data-url/src/lib.rs:115:13-115:21)
  1: StorageLive(_3)
    SourceInfo(data-url/src/lib.rs:116:13-116:21)
  2: StorageLive(_4)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  3: StorageLive(_5)
    SourceInfo(data-url/src/lib.rs:116:24-119:11)
  4: StorageLive(_6)
    SourceInfo(data-url/src/lib.rs:116:24-116:28)
  5: _6 = &(*_1)
    SourceInfo(data-url/src/lib.rs:116:24-116:28)
  6: StorageLive(_7)
    SourceInfo(data-url/src/lib.rs:116:36-119:10)
  7: StorageLive(_8)
    SourceInfo(data-url/src/lib.rs:116:36-119:10)
  8: _8 = &mut _2
    SourceInfo(data-url/src/lib.rs:116:36-119:10)
  9: _7 = {closure@data-url/src/lib.rs:116:36: 116:43} { body: move _8 }
    SourceInfo(data-url/src/lib.rs:116:36-119:10)
  10: StorageDead(_8)
    SourceInfo(data-url/src/lib.rs:116:42-116:43)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:116:24-119:11)
      kind: _5 = DataUrl::<'_>::decode::<{closure@data-url/src/lib.rs:116:36: 116:43}, forgiving_base64::Impossible>(move _6, move _7) -> [return: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  0: StorageDead(_7)
    SourceInfo(data-url/src/lib.rs:119:10-119:11)
  1: StorageDead(_6)
    SourceInfo(data-url/src/lib.rs:119:10-119:11)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:116:24-119:12)
      kind: _4 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: StorageDead(_5)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  1: PlaceMention(_4)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  2: _9 = discriminant(_4)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:116:24-119:12)
      kind: switchInt(move _9) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:116:24-119:12)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:119:11-119:12)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_13)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  1: _13 = move ((_4 as Continue).0: core::option::Option<FragmentIdentifier<'_>>)
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  2: _3 = move _13
    SourceInfo(data-url/src/lib.rs:116:24-119:12)
  3: StorageDead(_13)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(data-url/src/lib.rs:116:13-116:21)
  5: StorageDead(_4)
    SourceInfo(data-url/src/lib.rs:119:12-119:13)
  6: StorageLive(_14)
    SourceInfo(data-url/src/lib.rs:120:12-120:28)
  7: StorageLive(_15)
    SourceInfo(data-url/src/lib.rs:120:13-120:17)
  8: _15 = move _2
    SourceInfo(data-url/src/lib.rs:120:13-120:17)
  9: StorageLive(_16)
    SourceInfo(data-url/src/lib.rs:120:19-120:27)
  10: _16 = move _3
    SourceInfo(data-url/src/lib.rs:120:19-120:27)
  11: _14 = (move _15, move _16)
    SourceInfo(data-url/src/lib.rs:120:12-120:28)
  12: StorageDead(_16)
    SourceInfo(data-url/src/lib.rs:120:27-120:28)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:120:27-120:28)
      kind: drop(_15) -> [return: bb9, unwind: bb14]
  }
  preds [bb3, bb5]
  succs [bb9, bb14]

bb7
  0: StorageLive(_10)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  1: _10 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  2: StorageLive(_12)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  3: _12 = move _10
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:116:24-119:12)
      kind: _0 = <core::result::Result<(std::vec::Vec<u8>, core::option::Option<FragmentIdentifier<'_>>), forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _12) -> [return: bb8, unwind: bb15]
  }
  preds [bb5]
  succs [bb8, bb15]

bb8
  0: StorageDead(_12)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  1: StorageDead(_10)
    SourceInfo(data-url/src/lib.rs:119:11-119:12)
  2: StorageDead(_4)
    SourceInfo(data-url/src/lib.rs:119:12-119:13)
  3: StorageDead(_3)
    SourceInfo(data-url/src/lib.rs:121:5-121:6)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:5-121:6)
      kind: drop(_2) -> [return: bb12, unwind: bb16]
  }
  preds [bb7]
  succs [bb12, bb16]

bb9
  0: StorageDead(_15)
    SourceInfo(data-url/src/lib.rs:120:27-120:28)
  1: _0 = core::result::Result::<(std::vec::Vec<u8>, core::option::Option<FragmentIdentifier<'_>>), forgiving_base64::InvalidBase64>::Ok(move _14)
    SourceInfo(data-url/src/lib.rs:120:9-120:29)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:120:28-120:29)
      kind: drop(_14) -> [return: bb10, unwind: bb15]
  }
  preds [bb6]
  succs [bb10, bb15]

bb10
  0: StorageDead(_14)
    SourceInfo(data-url/src/lib.rs:120:28-120:29)
  1: StorageDead(_3)
    SourceInfo(data-url/src/lib.rs:121:5-121:6)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:5-121:6)
      kind: drop(_2) -> [return: bb11, unwind: bb16]
  }
  preds [bb9]
  succs [bb11, bb16]

bb11
  0: StorageDead(_2)
    SourceInfo(data-url/src/lib.rs:121:5-121:6)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:6-121:6)
      kind: goto -> bb13
  }
  preds [bb10]
  succs [bb13]

bb12
  0: StorageDead(_2)
    SourceInfo(data-url/src/lib.rs:121:5-121:6)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:6-121:6)
      kind: goto -> bb13
  }
  preds [bb8]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:6-121:6)
      kind: return
  }
  preds [bb11, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:120:28-120:29)
      kind: drop(_14) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:121:5-121:6)
      kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb7, bb9, bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:112:5-121:6)
      kind: resume
  }
  preds [bb0, bb8, bb10, bb15]
  succs []

