bb0
  0: StorageLive(_3)
    SourceInfo(data-url/src/lib.rs:270:5-270:21)
  1: StorageLive(_4)
    SourceInfo(data-url/src/lib.rs:270:5-270:11)
  2: _4 = &mut (*_2)
    SourceInfo(data-url/src/lib.rs:270:5-270:11)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:270:5-270:21)
      kind: _3 = std::string::String::push(move _4, const '%') -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_4)
    SourceInfo(data-url/src/lib.rs:270:20-270:21)
  1: StorageDead(_3)
    SourceInfo(data-url/src/lib.rs:270:21-270:22)
  2: StorageLive(_5)
    SourceInfo(data-url/src/lib.rs:271:5-271:57)
  3: StorageLive(_6)
    SourceInfo(data-url/src/lib.rs:271:5-271:11)
  4: _6 = &mut (*_2)
    SourceInfo(data-url/src/lib.rs:271:5-271:11)
  5: StorageLive(_7)
    SourceInfo(data-url/src/lib.rs:271:17-271:56)
  6: StorageLive(_8)
    SourceInfo(data-url/src/lib.rs:271:17-271:48)
  7: StorageLive(_9)
    SourceInfo(data-url/src/lib.rs:271:17-271:26)
  8: _9 = const percent_encode::HEX_UPPER
    SourceInfo(data-url/src/lib.rs:271:17-271:26)
  9: StorageLive(_10)
    SourceInfo(data-url/src/lib.rs:271:27-271:47)
  10: StorageLive(_11)
    SourceInfo(data-url/src/lib.rs:271:27-271:38)
  11: StorageLive(_12)
    SourceInfo(data-url/src/lib.rs:271:28-271:32)
  12: _12 = _1
    SourceInfo(data-url/src/lib.rs:271:28-271:32)
  13: _13 = const 4_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/lib.rs:271:27-271:38)
  14: _14 = Lt(move _13, const 8_u32)
    SourceInfo(data-url/src/lib.rs:271:27-271:38)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:271:27-271:38)
      kind: assert(move _14, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _11 = Shr(move _12, const 4_i32)
    SourceInfo(data-url/src/lib.rs:271:27-271:38)
  1: StorageDead(_12)
    SourceInfo(data-url/src/lib.rs:271:37-271:38)
  2: _10 = move _11 as usize (IntToInt)
    SourceInfo(data-url/src/lib.rs:271:27-271:47)
  3: StorageDead(_11)
    SourceInfo(data-url/src/lib.rs:271:46-271:47)
  4: _15 = Len(_9)
    SourceInfo(data-url/src/lib.rs:271:17-271:48)
  5: _16 = Lt(_10, _15)
    SourceInfo(data-url/src/lib.rs:271:17-271:48)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:271:17-271:48)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _10) -> [success: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _8 = _9[_10]
    SourceInfo(data-url/src/lib.rs:271:17-271:48)
  1: _7 = move _8 as char (IntToInt)
    SourceInfo(data-url/src/lib.rs:271:17-271:56)
  2: StorageDead(_8)
    SourceInfo(data-url/src/lib.rs:271:55-271:56)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:271:5-271:57)
      kind: _5 = std::string::String::push(move _6, move _7) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_7)
    SourceInfo(data-url/src/lib.rs:271:56-271:57)
  1: StorageDead(_6)
    SourceInfo(data-url/src/lib.rs:271:56-271:57)
  2: StorageDead(_10)
    SourceInfo(data-url/src/lib.rs:271:57-271:58)
  3: StorageDead(_9)
    SourceInfo(data-url/src/lib.rs:271:57-271:58)
  4: StorageDead(_5)
    SourceInfo(data-url/src/lib.rs:271:57-271:58)
  5: StorageLive(_17)
    SourceInfo(data-url/src/lib.rs:272:5-272:59)
  6: StorageLive(_18)
    SourceInfo(data-url/src/lib.rs:272:5-272:11)
  7: _18 = &mut (*_2)
    SourceInfo(data-url/src/lib.rs:272:5-272:11)
  8: StorageLive(_19)
    SourceInfo(data-url/src/lib.rs:272:17-272:58)
  9: StorageLive(_20)
    SourceInfo(data-url/src/lib.rs:272:17-272:50)
  10: StorageLive(_21)
    SourceInfo(data-url/src/lib.rs:272:17-272:26)
  11: _21 = const percent_encode::HEX_UPPER
    SourceInfo(data-url/src/lib.rs:272:17-272:26)
  12: StorageLive(_22)
    SourceInfo(data-url/src/lib.rs:272:27-272:49)
  13: StorageLive(_23)
    SourceInfo(data-url/src/lib.rs:272:27-272:40)
  14: StorageLive(_24)
    SourceInfo(data-url/src/lib.rs:272:28-272:32)
  15: _24 = _1
    SourceInfo(data-url/src/lib.rs:272:28-272:32)
  16: _23 = BitAnd(move _24, const 15_u8)
    SourceInfo(data-url/src/lib.rs:272:27-272:40)
  17: StorageDead(_24)
    SourceInfo(data-url/src/lib.rs:272:39-272:40)
  18: _22 = move _23 as usize (IntToInt)
    SourceInfo(data-url/src/lib.rs:272:27-272:49)
  19: StorageDead(_23)
    SourceInfo(data-url/src/lib.rs:272:48-272:49)
  20: _25 = Len(_21)
    SourceInfo(data-url/src/lib.rs:272:17-272:50)
  21: _26 = Lt(_22, _25)
    SourceInfo(data-url/src/lib.rs:272:17-272:50)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:272:17-272:50)
      kind: assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _22) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _20 = _21[_22]
    SourceInfo(data-url/src/lib.rs:272:17-272:50)
  1: _19 = move _20 as char (IntToInt)
    SourceInfo(data-url/src/lib.rs:272:17-272:58)
  2: StorageDead(_20)
    SourceInfo(data-url/src/lib.rs:272:57-272:58)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:272:5-272:59)
      kind: _17 = std::string::String::push(move _18, move _19) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_19)
    SourceInfo(data-url/src/lib.rs:272:58-272:59)
  1: StorageDead(_18)
    SourceInfo(data-url/src/lib.rs:272:58-272:59)
  2: StorageDead(_22)
    SourceInfo(data-url/src/lib.rs:272:59-272:60)
  3: StorageDead(_21)
    SourceInfo(data-url/src/lib.rs:272:59-272:60)
  4: StorageDead(_17)
    SourceInfo(data-url/src/lib.rs:272:59-272:60)
  5: _0 = const ()
    SourceInfo(data-url/src/lib.rs:268:50-273:2)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:273:2-273:2)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:268:1-273:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

