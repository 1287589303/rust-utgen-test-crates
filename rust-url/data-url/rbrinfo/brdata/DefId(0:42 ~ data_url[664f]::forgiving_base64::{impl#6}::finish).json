{
  "name": "data_url::forgiving_base64::{impl#6}::finish",
  "mod_info": {
    "name": "forgiving_base64",
    "loc": "data-url/src/lib.rs:40:1:40:26"
  },
  "visible": true,
  "loc": "data-url/src/forgiving_base64.rs:152:5:173:6",
  "doc": "/// Call this to signal the end of the input\n",
  "code": [
    "pub fn finish(mut self) -> Result<(), DecodeError<E>> {",
    "    match (self.buffer_bit_length, self.padding_symbols) {",
    "        (0, 0) => {",
    "            // A multiple of four of alphabet symbols, and nothing else.",
    "        }",
    "        (12, 2) | (12, 0) => {",
    "            // A multiple of four of alphabet symbols, followed by two more symbols,",
    "            // optionally followed by two padding characters (which make a total multiple of four).",
    "            let byte_buffer = [(self.bit_buffer >> 4) as u8];",
    "            (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;",
    "        }",
    "        (18, 1) | (18, 0) => {",
    "            // A multiple of four of alphabet symbols, followed by three more symbols,",
    "            // optionally followed by one padding character (which make a total multiple of four).",
    "            let byte_buffer = [(self.bit_buffer >> 10) as u8, (self.bit_buffer >> 2) as u8];",
    "            (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;",
    "        }",
    "        (6, _) => return Err(InvalidBase64Details::LoneAlphabetSymbol.into()),",
    "        _ => return Err(InvalidBase64Details::Padding.into()),",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 6",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches _",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::Padding.into())",
      "path": [
        0,
        1,
        36,
        37,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 6",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (6, _)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::LoneAlphabetSymbol.into())",
      "path": [
        0,
        6,
        33,
        34,
        35,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 1",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches _",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::Padding.into())",
      "path": [
        0,
        5,
        1,
        36,
        37,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (18, 0) or (18, 1)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Err/None",
          "line": 167,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        8,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        30,
        31,
        39,
        40,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (18, 0) or (18, 1)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 167,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        8,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        38,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 1",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (18, 0) or (18, 1)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Err/None",
          "line": 167,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        8,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        30,
        31,
        39,
        40,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 18",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 1",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (18, 0) or (18, 1)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 167,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        8,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        38,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 2",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches _",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::Padding.into())",
      "path": [
        0,
        4,
        1,
        36,
        37,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (12, 2) or (12, 0)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Err/None",
          "line": 161,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        19,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (12, 2) or (12, 0)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        17,
        20,
        38,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 2",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (12, 2) or (12, 0)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Err/None",
          "line": 161,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        19,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 12",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 2",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (12, 2) or (12, 0)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        17,
        20,
        38,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches _",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::Padding.into())",
      "path": [
        0,
        2,
        1,
        36,
        37,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).0 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols).1 matches 0",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        },
        {
          "cond": "(self.buffer_bit_length, self.padding_symbols) matches (0, 0)",
          "norm": null,
          "value": "true",
          "line": 153,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        3,
        9,
        38,
        44
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}