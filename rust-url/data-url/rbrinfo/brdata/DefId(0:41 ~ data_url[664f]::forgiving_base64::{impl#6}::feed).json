{
  "name": "data_url::forgiving_base64::{impl#6}::feed",
  "mod_info": {
    "name": "forgiving_base64",
    "loc": "data-url/src/lib.rs:40:1:40:26"
  },
  "visible": true,
  "loc": "data-url/src/forgiving_base64.rs:109:5:149:6",
  "doc": "/// Feed to the decoder partial input in an ASCII-compatible encoding\n",
  "code": [
    "pub fn feed(&mut self, input: &[u8]) -> Result<(), DecodeError<E>> {",
    "    for &byte in input.iter() {",
    "        let value = BASE64_DECODE_TABLE[byte as usize];",
    "        if value < 0 {",
    "            // A character that’s not part of the alphabet",
    "",
    "            // Remove ASCII whitespace",
    "            if matches!(byte, b' ' | b'\\t' | b'\\n' | b'\\r' | b'\\x0C') {",
    "                continue;",
    "            }",
    "",
    "            if byte == b'=' {",
    "                self.padding_symbols = self.padding_symbols.saturating_add(1);",
    "                continue;",
    "            }",
    "",
    "            return Err(InvalidBase64Details::UnexpectedSymbol(byte).into());",
    "        }",
    "        if self.padding_symbols > 0 {",
    "            return Err(InvalidBase64Details::AlphabetSymbolAfterPadding.into());",
    "        }",
    "        self.bit_buffer <<= 6;",
    "        self.bit_buffer |= value as u32;",
    "        // 18 before incrementing means we’ve just reached 24",
    "        if self.buffer_bit_length < 18 {",
    "            self.buffer_bit_length += 6;",
    "        } else {",
    "            // We’ve accumulated four times 6 bits, which equals three times 8 bits.",
    "            let byte_buffer = [",
    "                (self.bit_buffer >> 16) as u8,",
    "                (self.bit_buffer >> 8) as u8,",
    "                self.bit_buffer as u8,",
    "            ];",
    "            (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;",
    "            self.buffer_bit_length = 0;",
    "            // No need to reset bit_buffer,",
    "            // since next time we’re only gonna read relevant bits.",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 8,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\r'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\x0C'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\t'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte == b'='",
          "norm": "b'=' == byte",
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        15,
        16,
        17,
        19,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\r'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\x0C'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\t'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte == b'='",
          "norm": "b'=' == byte",
          "value": "true",
          "line": 120,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::UnexpectedSymbol(byte).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        15,
        16,
        18,
        20,
        21,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\x0C'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        43,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\r'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        43,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        43,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b'\\t'",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        43,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "true",
          "line": 112,
          "bound": null
        },
        {
          "cond": "byte matches b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        43,
        44,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "false",
          "line": 112,
          "bound": "value == 0"
        },
        {
          "cond": "self.padding_symbols > 0",
          "norm": "0 < self.padding_symbols",
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "Err(InvalidBase64Details::AlphabetSymbolAfterPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        22,
        23,
        25,
        26,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "false",
          "line": 112,
          "bound": "value == 0"
        },
        {
          "cond": "self.padding_symbols > 0",
          "norm": "0 < self.padding_symbols",
          "value": "false",
          "line": 127,
          "bound": "self.padding_symbols == 0"
        },
        {
          "cond": "self.buffer_bit_length < 18",
          "norm": "18 > self.buffer_bit_length",
          "value": "true",
          "line": 133,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        22,
        24,
        27,
        28,
        29,
        42,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "false",
          "line": 112,
          "bound": "value == 0"
        },
        {
          "cond": "self.padding_symbols > 0",
          "norm": "0 < self.padding_symbols",
          "value": "false",
          "line": 127,
          "bound": "self.padding_symbols == 0"
        },
        {
          "cond": "self.buffer_bit_length < 18",
          "norm": "18 > self.buffer_bit_length",
          "value": "false",
          "line": 133,
          "bound": "self.buffer_bit_length == 18"
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Err/None",
          "line": 142,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        22,
        24,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "true",
          "line": 110,
          "bound": null
        },
        {
          "cond": "value < 0",
          "norm": "0 > value",
          "value": "false",
          "line": 112,
          "bound": "value == 0"
        },
        {
          "cond": "self.padding_symbols > 0",
          "norm": "0 < self.padding_symbols",
          "value": "false",
          "line": 127,
          "bound": "self.padding_symbols == 0"
        },
        {
          "cond": "self.buffer_bit_length < 18",
          "norm": "18 > self.buffer_bit_length",
          "value": "false",
          "line": 133,
          "bound": "self.buffer_bit_length == 18"
        },
        {
          "cond": "(self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 142,
          "bound": null
        },
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        22,
        24,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "&byte in input.iter()",
          "norm": null,
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "byte matches b'\\n' or b'\\r' or b'\\x0C' or b'\\t' or b' '",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        48
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}