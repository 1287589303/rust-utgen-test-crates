{
  "name": "data_url::forgiving_base64::{impl#0}::fmt",
  "mod_info": {
    "name": "forgiving_base64",
    "loc": "data-url/src/lib.rs:40:1:40:26"
  },
  "visible": true,
  "loc": "data-url/src/forgiving_base64.rs:10:5:21:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
    "    match self.0 {",
    "        InvalidBase64Details::UnexpectedSymbol(code_point) => {",
    "            write!(f, \"symbol with codepoint {} not expected\", code_point)",
    "        }",
    "        InvalidBase64Details::AlphabetSymbolAfterPadding => {",
    "            write!(f, \"alphabet symbol present after padding\")",
    "        }",
    "        InvalidBase64Details::LoneAlphabetSymbol => write!(f, \"lone alphabet symbol present\"),",
    "        InvalidBase64Details::Padding => write!(f, \"incorrect padding\"),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0 matches InvalidBase64Details::Padding",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0 matches InvalidBase64Details::LoneAlphabetSymbol",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        },
        {
          "cond": "self.0 matches InvalidBase64Details::LoneAlphabetSymbol",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        13,
        14,
        15,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.0 matches InvalidBase64Details::AlphabetSymbolAfterPadding",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        },
        {
          "cond": "self.0 matches InvalidBase64Details::AlphabetSymbolAfterPadding",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        11,
        12,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.0 matches InvalidBase64Details::UnexpectedSymbol(code_point)",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        },
        {
          "cond": "self.0 matches InvalidBase64Details::UnexpectedSymbol(code_point)",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        7,
        8,
        9,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}