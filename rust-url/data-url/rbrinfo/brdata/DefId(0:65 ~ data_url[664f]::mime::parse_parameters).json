{
  "name": "data_url::mime::parse_parameters",
  "mod_info": {
    "name": "mime",
    "loc": "data-url/src/lib.rs:41:1:41:14"
  },
  "visible": false,
  "loc": "data-url/src/mime.rs:75:1:134:2",
  "doc": "",
  "code": [
    "fn parse_parameters(s: &str, parameters: &mut Vec<(String, String)>) {",
    "    let mut semicolon_separated = s.split(';');",
    "",
    "    while let Some(piece) = semicolon_separated.next() {",
    "        let piece = piece.trim_start_matches(http_whitespace);",
    "        let (name, value) = split2(piece, '=');",
    "        // We can not early return on an invalid name here, because the value",
    "        // parsing later may consume more semicolon seperated pieces.",
    "        let name_valid =",
    "            !name.is_empty() && only_http_token_code_points(name) && !contains(parameters, name);",
    "        if let Some(value) = value {",
    "            let value = if let Some(stripped) = value.strip_prefix('\"') {",
    "                let max_len = stripped.len().saturating_sub(1); // without end quote",
    "                let mut unescaped_value = String::with_capacity(max_len);",
    "                let mut chars = stripped.chars();",
    "                'until_closing_quote: loop {",
    "                    while let Some(c) = chars.next() {",
    "                        match c {",
    "                            '\"' => break 'until_closing_quote,",
    "                            '\\\\' => unescaped_value.push(chars.next().unwrap_or_else(|| {",
    "                                semicolon_separated",
    "                                    .next()",
    "                                    .map(|piece| {",
    "                                        // A semicolon inside a quoted value is not a separator",
    "                                        // for the next parameter, but part of the value.",
    "                                        chars = piece.chars();",
    "                                        ';'",
    "                                    })",
    "                                    .unwrap_or('\\\\')",
    "                            })),",
    "                            _ => unescaped_value.push(c),",
    "                        }",
    "                    }",
    "                    if let Some(piece) = semicolon_separated.next() {",
    "                        // A semicolon inside a quoted value is not a separator",
    "                        // for the next parameter, but part of the value.",
    "                        unescaped_value.push(';');",
    "                        chars = piece.chars()",
    "                    } else {",
    "                        break;",
    "                    }",
    "                }",
    "                if !name_valid || !valid_value(value) {",
    "                    continue;",
    "                }",
    "                unescaped_value",
    "            } else {",
    "                let value = value.trim_end_matches(http_whitespace);",
    "                if value.is_empty() {",
    "                    continue;",
    "                }",
    "                if !name_valid || !valid_value(value) {",
    "                    continue;",
    "                }",
    "                value.to_owned()",
    "            };",
    "            parameters.push((name.to_ascii_lowercase(), value))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 61,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        74,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "true",
          "line": 123,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        61,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        66,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        74,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "true",
          "line": 123,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        61,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        66,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        74,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "true",
          "line": 123,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        61,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        65,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        63,
        64,
        66,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "value.is_empty()",
          "norm": null,
          "value": "false",
          "line": 123,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        58,
        59,
        60,
        62,
        77,
        78,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        45,
        46,
        47,
        48,
        49,
        50,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches _",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        43,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        41,
        42,
        44,
        30,
        31,
        32,
        45,
        46,
        51,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        55,
        57,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "true",
          "line": 117,
          "bound": null
        },
        {
          "cond": "valid_value(value)",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        53,
        54,
        56,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "only_http_token_code_points(name)",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        },
        {
          "cond": "let Some(value) = value",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "let Some(stripped) = value.strip_prefix('\"')",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "let Some(c) = chars.next()",
          "norm": null,
          "value": "true",
          "line": 91,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        },
        {
          "cond": "c matches '\"'",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "name_valid",
          "norm": null,
          "value": "false",
          "line": 117,
          "bound": null
        },
        {
          "cond": "let Some(piece) = semicolon_separated.next()",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        52,
        79,
        80,
        81,
        2,
        3,
        4,
        76
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}