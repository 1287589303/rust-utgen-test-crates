{
  "name": "data_url::{impl#2}::process",
  "mod_info": {
    "name": "",
    "loc": "data-url/src/lib.rs:1:1:348:2"
  },
  "visible": true,
  "loc": "data-url/src/lib.rs:73:5:88:6",
  "doc": "/// <https://fetch.spec.whatwg.org/#data-url-processor>\n/// but starting from a string rather than a parsed `Url`, to avoid extra string copies.\n",
  "code": [
    "pub fn process(input: &'a str) -> Result<Self, DataUrlError> {",
    "    use crate::DataUrlError::*;",
    "",
    "    let after_colon = pretend_parse_data_url(input).ok_or(NotADataUrl)?;",
    "",
    "    let (from_colon_to_comma, encoded_body_plus_fragment) =",
    "        find_comma_before_fragment(after_colon).ok_or(NoComma)?;",
    "",
    "    let (mime_type, base64) = parse_header(from_colon_to_comma);",
    "",
    "    Ok(DataUrl {",
    "        mime_type,",
    "        base64,",
    "        encoded_body_plus_fragment,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pretend_parse_data_url(input).ok_or(NotADataUrl)?",
          "norm": null,
          "value": "Err/None",
          "line": 76,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pretend_parse_data_url(input).ok_or(NotADataUrl)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "find_comma_before_fragment(after_colon).ok_or(NoComma)?",
          "norm": null,
          "value": "Err/None",
          "line": 79,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        13,
        15,
        16,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "pretend_parse_data_url(input).ok_or(NotADataUrl)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "find_comma_before_fragment(after_colon).ok_or(NoComma)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        }
      ],
      "ret": "Ok(DataUrl {\n            mime_type,\n            base64,\n            encoded_body_plus_fragment,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        20,
        21,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}