{
  "name": "data_url::pretend_parse_data_url",
  "mod_info": {
    "name": "",
    "loc": "data-url/src/lib.rs:1:1:348:2"
  },
  "visible": true,
  "loc": "data-url/src/lib.rs:158:1:179:2",
  "doc": "/// Similar to <https://url.spec.whatwg.org/#concept-basic-url-parser>\n/// followed by <https://url.spec.whatwg.org/#concept-url-serializer>\n///\n/// * `None`: not a data URL.\n///\n/// * `Some(s)`: sort of the result of serialization, except:\n///\n///   - `data:` prefix removed\n///   - The fragment is included\n///   - Other components are **not** UTF-8 percent-encoded\n///   - ASCII tabs and newlines in the middle are **not** removed\n",
  "code": [
    "fn pretend_parse_data_url(input: &str) -> Option<&str> {",
    "    // Trim C0 control or space",
    "    let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');",
    "",
    "    let mut bytes = left_trimmed.bytes();",
    "    {",
    "        // Ignore ASCII tabs or newlines like the URL parser would",
    "        let mut iter = bytes",
    "            .by_ref()",
    "            .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));",
    "        require!(iter.next()?.eq_ignore_ascii_case(&b'd'));",
    "        require!(iter.next()?.eq_ignore_ascii_case(&b'a'));",
    "        require!(iter.next()?.eq_ignore_ascii_case(&b't'));",
    "        require!(iter.next()?.eq_ignore_ascii_case(&b'a'));",
    "        require!(iter.next()? == b':');",
    "    }",
    "    let bytes_consumed = left_trimmed.len() - bytes.len();",
    "    let after_colon = &left_trimmed[bytes_consumed..];",
    "",
    "    // Trim C0 control or space",
    "    Some(after_colon.trim_end_matches(|ch| ch <= ' '))",
    "}"
  ],
  "size": {
    "chain": 11,
    "contra": 0,
    "min_set": 11
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 168,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        63,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 169,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        18,
        20,
        21,
        62,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 170,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        28,
        30,
        31,
        61,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 171,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        33,
        35,
        36,
        38,
        40,
        41,
        60,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 172,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        33,
        35,
        36,
        39,
        42,
        43,
        45,
        46,
        48,
        50,
        51,
        59,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "iter.next()? == b':'",
          "norm": "b':' == iter.next()?",
          "value": "false",
          "line": 172,
          "bound": null
        }
      ],
      "ret": "Some(after_colon.trim_end_matches(|ch| ch <= ' '))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        33,
        35,
        36,
        39,
        42,
        43,
        45,
        46,
        49,
        52,
        54,
        55,
        56,
        57,
        58,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "iter.next()? == b':'",
          "norm": "b':' == iter.next()?",
          "value": "true",
          "line": 172,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        33,
        35,
        36,
        39,
        42,
        43,
        45,
        46,
        49,
        53,
        59,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 171,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        33,
        35,
        36,
        39,
        42,
        44,
        60,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 170,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b't')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        23,
        25,
        26,
        29,
        32,
        34,
        61,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 169,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'a')",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        15,
        16,
        19,
        22,
        24,
        62,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 168,
          "bound": null
        },
        {
          "cond": "iter.next()?.eq_ignore_ascii_case(&b'd')",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        14,
        63,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}