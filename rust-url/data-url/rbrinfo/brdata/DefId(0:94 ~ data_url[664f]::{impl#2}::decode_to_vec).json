{
  "name": "data_url::{impl#2}::decode_to_vec",
  "mod_info": {
    "name": "",
    "loc": "data-url/src/lib.rs:1:1:348:2"
  },
  "visible": true,
  "loc": "data-url/src/lib.rs:112:5:121:6",
  "doc": "/// Return the decoded body, and the URLâ€™s fragment identifier if it has one.\n",
  "code": [
    "pub fn decode_to_vec(",
    "    &self,",
    ") -> Result<(Vec<u8>, Option<FragmentIdentifier<'a>>), forgiving_base64::InvalidBase64> {",
    "    let mut body = Vec::new();",
    "    let fragment = self.decode(|bytes| {",
    "        body.extend_from_slice(bytes);",
    "        Ok(())",
    "    })?;",
    "    Ok((body, fragment))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.decode(|bytes| {\n            body.extend_from_slice(bytes);\n            Ok(())\n        })?",
          "norm": null,
          "value": "Err/None",
          "line": 116,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.decode(|bytes| {\n            body.extend_from_slice(bytes);\n            Ok(())\n        })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok((body, fragment))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}