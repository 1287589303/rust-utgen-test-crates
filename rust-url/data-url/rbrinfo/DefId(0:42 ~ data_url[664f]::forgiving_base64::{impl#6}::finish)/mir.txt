bb0
  0: StorageLive(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:153:9-171:10)
  1: StorageLive(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:153:15-153:61)
  2: StorageLive(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:153:16-153:38)
  3: _4 = (_1.2: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:153:16-153:38)
  4: StorageLive(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:153:40-153:60)
  5: _5 = (_1.3: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:153:40-153:60)
  6: _3 = (move _4, move _5)
    SourceInfo(data-url/src/forgiving_base64.rs:153:15-153:61)
  7: StorageDead(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:153:60-153:61)
  8: StorageDead(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:153:60-153:61)
  9: PlaceMention(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:153:15-153:61)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:153:9-153:61)
      kind: switchInt((_3.0: u8)) -> [0: bb2, 12: bb4, 18: bb5, 6: bb6, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb4, bb5, bb6]

bb1
  0: StorageLive(_55)
    SourceInfo(data-url/src/forgiving_base64.rs:170:29-170:65)
  1: StorageLive(_56)
    SourceInfo(data-url/src/forgiving_base64.rs:170:29-170:58)
  2: _56 = forgiving_base64::InvalidBase64Details::Padding
    SourceInfo(data-url/src/forgiving_base64.rs:170:29-170:58)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:170:29-170:65)
      kind: _55 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _56) -> [return: bb36, unwind: bb55]
  }
  preds [bb0, bb2, bb4, bb5, bb6]
  succs [bb36, bb55]

bb2
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:153:9-153:61)
      kind: switchInt((_3.1: u8)) -> [0: bb3, otherwise: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:154:13-154:19)
      kind: falseEdge -> [real: bb9, imaginary: bb4]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:153:9-153:61)
      kind: switchInt((_3.1: u8)) -> [2: bb7, 0: bb7, otherwise: bb1]
  }
  preds [bb0, bb3]
  succs [bb1, bb7, bb7]

bb5
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:153:9-153:61)
      kind: switchInt((_3.1: u8)) -> [1: bb8, 0: bb8, otherwise: bb1]
  }
  preds [bb0, bb7]
  succs [bb1, bb8, bb8]

bb6
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:169:13-169:19)
      kind: falseEdge -> [real: bb33, imaginary: bb1]
  }
  preds [bb0, bb8]
  succs [bb1, bb33]

bb7
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:157:13-157:30)
      kind: falseEdge -> [real: bb10, imaginary: bb5]
  }
  preds [bb4, bb4]
  succs [bb5, bb10]

bb8
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:163:13-163:30)
      kind: falseEdge -> [real: bb21, imaginary: bb6]
  }
  preds [bb5, bb5]
  succs [bb6, bb21]

bb9
  0: _2 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:154:23-156:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:154:23-156:14)
      kind: goto -> bb38
  }
  preds [bb3]
  succs [bb38]

bb10
  0: StorageLive(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:160:21-160:32)
  1: StorageLive(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:64)
  2: StorageLive(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:58)
  3: StorageLive(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:160:37-160:52)
  4: _9 = (_1.1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:160:37-160:52)
  5: _10 = const 4_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:58)
  6: _11 = Lt(move _10, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:58)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:58)
      kind: assert(move _11, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb11, unwind: bb55]
  }
  preds [bb7]
  succs [bb11, bb55]

bb11
  0: _8 = Shr(move _9, const 4_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:58)
  1: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:160:57-160:58)
  2: _7 = move _8 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:160:36-160:64)
  3: StorageDead(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:160:63-160:64)
  4: _6 = [move _7]
    SourceInfo(data-url/src/forgiving_base64.rs:160:35-160:65)
  5: StorageDead(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:160:64-160:65)
  6: FakeRead(ForLet(None), _6)
    SourceInfo(data-url/src/forgiving_base64.rs:160:21-160:32)
  7: StorageLive(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  8: StorageLive(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  9: StorageLive(_14)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:82)
  10: StorageLive(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:49)
  11: StorageLive(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:35)
  12: _16 = &mut (_1.0: F)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:35)
  13: StorageLive(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:49)
  14: StorageLive(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  15: StorageLive(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  16: StorageLive(_20)
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  17: _20 = &_6
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  18: _19 = &(*_20)
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  19: _18 = move _19 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(data-url/src/forgiving_base64.rs:161:36-161:48)
  20: StorageDead(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:161:47-161:48)
  21: _17 = (move _18,)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:49)
      kind: _15 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _16, move _17) -> [return: bb12, unwind: bb55]
  }
  preds [bb10]
  succs [bb12, bb55]

bb12
  0: StorageDead(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:161:48-161:49)
  1: StorageDead(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:161:48-161:49)
  2: StorageDead(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:161:48-161:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:82)
      kind: _14 = core::result::Result::<(), E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _15, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb13, unwind: bb54]
  }
  preds [bb11]
  succs [bb13, bb54]

bb13
  0: StorageDead(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:161:81-161:82)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
      kind: _13 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _14) -> [return: bb14, unwind: bb53]
  }
  preds [bb12]
  succs [bb14, bb53]

bb14
  0: StorageDead(_14)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  1: PlaceMention(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  2: _21 = discriminant(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
      kind: switchInt(move _21) -> [0: bb17, 1: bb16, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb16, bb17]

bb15
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
      kind: unreachable
  }
  preds [bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
      kind: falseEdge -> [real: bb18, imaginary: bb17]
  }
  preds [bb14]
  succs [bb17, bb18]

bb17
  0: StorageLive(_25)
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  1: _25 = ((_13 as Continue).0: ())
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  2: _12 = _25
    SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
  3: StorageDead(_25)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
      kind: drop(_13) -> [return: bb20, unwind: bb55]
  }
  preds [bb14, bb16]
  succs [bb20, bb55]

bb18
  0: StorageLive(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  1: _22 = move ((_13 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  2: StorageLive(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  3: _24 = move _22
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:17-161:83)
      kind: _0 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _24) -> [return: bb19, unwind: bb50]
  }
  preds [bb16]
  succs [bb19, bb50]

bb19
  0: StorageDead(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
      kind: drop(_22) -> [return: bb41, unwind: bb52]
  }
  preds [bb18]
  succs [bb41, bb52]

bb20
  0: StorageDead(_20)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  1: StorageDead(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  2: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  3: _2 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:157:34-162:14)
  4: StorageDead(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:162:13-162:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:162:13-162:14)
      kind: goto -> bb38
  }
  preds [bb17]
  succs [bb38]

bb21
  0: StorageLive(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:166:21-166:32)
  1: StorageLive(_27)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:65)
  2: StorageLive(_28)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:59)
  3: StorageLive(_29)
    SourceInfo(data-url/src/forgiving_base64.rs:166:37-166:52)
  4: _29 = (_1.1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:37-166:52)
  5: _30 = const 10_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:59)
  6: _31 = Lt(move _30, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:59)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:59)
      kind: assert(move _31, "attempt to shift right by `{}`, which would overflow", const 10_i32) -> [success: bb22, unwind: bb55]
  }
  preds [bb8]
  succs [bb22, bb55]

bb22
  0: _28 = Shr(move _29, const 10_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:59)
  1: StorageDead(_29)
    SourceInfo(data-url/src/forgiving_base64.rs:166:58-166:59)
  2: _27 = move _28 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:166:36-166:65)
  3: StorageDead(_28)
    SourceInfo(data-url/src/forgiving_base64.rs:166:64-166:65)
  4: StorageLive(_32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:95)
  5: StorageLive(_33)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:89)
  6: StorageLive(_34)
    SourceInfo(data-url/src/forgiving_base64.rs:166:68-166:83)
  7: _34 = (_1.1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:68-166:83)
  8: _35 = const 2_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:89)
  9: _36 = Lt(move _35, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:89)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:89)
      kind: assert(move _36, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb23, unwind: bb55]
  }
  preds [bb21]
  succs [bb23, bb55]

bb23
  0: _33 = Shr(move _34, const 2_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:89)
  1: StorageDead(_34)
    SourceInfo(data-url/src/forgiving_base64.rs:166:88-166:89)
  2: _32 = move _33 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:166:67-166:95)
  3: StorageDead(_33)
    SourceInfo(data-url/src/forgiving_base64.rs:166:94-166:95)
  4: _26 = [move _27, move _32]
    SourceInfo(data-url/src/forgiving_base64.rs:166:35-166:96)
  5: StorageDead(_32)
    SourceInfo(data-url/src/forgiving_base64.rs:166:95-166:96)
  6: StorageDead(_27)
    SourceInfo(data-url/src/forgiving_base64.rs:166:95-166:96)
  7: FakeRead(ForLet(None), _26)
    SourceInfo(data-url/src/forgiving_base64.rs:166:21-166:32)
  8: StorageLive(_37)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  9: StorageLive(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  10: StorageLive(_39)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:82)
  11: StorageLive(_40)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:49)
  12: StorageLive(_41)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:35)
  13: _41 = &mut (_1.0: F)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:35)
  14: StorageLive(_42)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:49)
  15: StorageLive(_43)
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  16: StorageLive(_44)
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  17: StorageLive(_45)
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  18: _45 = &_26
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  19: _44 = &(*_45)
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  20: _43 = move _44 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(data-url/src/forgiving_base64.rs:167:36-167:48)
  21: StorageDead(_44)
    SourceInfo(data-url/src/forgiving_base64.rs:167:47-167:48)
  22: _42 = (move _43,)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:49)
      kind: _40 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _41, move _42) -> [return: bb24, unwind: bb55]
  }
  preds [bb22]
  succs [bb24, bb55]

bb24
  0: StorageDead(_43)
    SourceInfo(data-url/src/forgiving_base64.rs:167:48-167:49)
  1: StorageDead(_42)
    SourceInfo(data-url/src/forgiving_base64.rs:167:48-167:49)
  2: StorageDead(_41)
    SourceInfo(data-url/src/forgiving_base64.rs:167:48-167:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:82)
      kind: _39 = core::result::Result::<(), E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _40, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb25, unwind: bb49]
  }
  preds [bb23]
  succs [bb25, bb49]

bb25
  0: StorageDead(_40)
    SourceInfo(data-url/src/forgiving_base64.rs:167:81-167:82)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
      kind: _38 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _39) -> [return: bb26, unwind: bb48]
  }
  preds [bb24]
  succs [bb26, bb48]

bb26
  0: StorageDead(_39)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  1: PlaceMention(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  2: _46 = discriminant(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
      kind: switchInt(move _46) -> [0: bb29, 1: bb28, otherwise: bb27]
  }
  preds [bb25]
  succs [bb27, bb28, bb29]

bb27
  0: FakeRead(ForMatchedPlace(None), _38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
      kind: unreachable
  }
  preds [bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
      kind: falseEdge -> [real: bb30, imaginary: bb29]
  }
  preds [bb26]
  succs [bb29, bb30]

bb29
  0: StorageLive(_50)
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  1: _50 = ((_38 as Continue).0: ())
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  2: _37 = _50
    SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
  3: StorageDead(_50)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
      kind: drop(_38) -> [return: bb32, unwind: bb55]
  }
  preds [bb26, bb28]
  succs [bb32, bb55]

bb30
  0: StorageLive(_47)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  1: _47 = move ((_38 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  2: StorageLive(_49)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  3: _49 = move _47
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:17-167:83)
      kind: _0 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _49) -> [return: bb31, unwind: bb45]
  }
  preds [bb28]
  succs [bb31, bb45]

bb31
  0: StorageDead(_49)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
      kind: drop(_47) -> [return: bb39, unwind: bb47]
  }
  preds [bb30]
  succs [bb39, bb47]

bb32
  0: StorageDead(_45)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  1: StorageDead(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  2: StorageDead(_37)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  3: _2 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:163:34-168:14)
  4: StorageDead(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:168:13-168:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:168:13-168:14)
      kind: goto -> bb38
  }
  preds [bb29]
  succs [bb38]

bb33
  0: StorageLive(_52)
    SourceInfo(data-url/src/forgiving_base64.rs:169:34-169:81)
  1: StorageLive(_53)
    SourceInfo(data-url/src/forgiving_base64.rs:169:34-169:74)
  2: _53 = forgiving_base64::InvalidBase64Details::LoneAlphabetSymbol
    SourceInfo(data-url/src/forgiving_base64.rs:169:34-169:74)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:169:34-169:81)
      kind: _52 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _53) -> [return: bb34, unwind: bb55]
  }
  preds [bb6]
  succs [bb34, bb55]

bb34
  0: StorageDead(_53)
    SourceInfo(data-url/src/forgiving_base64.rs:169:80-169:81)
  1: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _52)
    SourceInfo(data-url/src/forgiving_base64.rs:169:30-169:82)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:169:81-169:82)
      kind: drop(_52) -> [return: bb35, unwind: bb55]
  }
  preds [bb33]
  succs [bb35, bb55]

bb35
  0: StorageDead(_52)
    SourceInfo(data-url/src/forgiving_base64.rs:169:81-169:82)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:169:23-169:82)
      kind: goto -> bb43
  }
  preds [bb34]
  succs [bb43]

bb36
  0: StorageDead(_56)
    SourceInfo(data-url/src/forgiving_base64.rs:170:64-170:65)
  1: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _55)
    SourceInfo(data-url/src/forgiving_base64.rs:170:25-170:66)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:170:65-170:66)
      kind: drop(_55) -> [return: bb37, unwind: bb55]
  }
  preds [bb1]
  succs [bb37, bb55]

bb37
  0: StorageDead(_55)
    SourceInfo(data-url/src/forgiving_base64.rs:170:65-170:66)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:170:18-170:66)
      kind: goto -> bb43
  }
  preds [bb36]
  succs [bb43]

bb38
  0: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:171:9-171:10)
  1: StorageDead(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:171:9-171:10)
  2: StorageLive(_57)
    SourceInfo(data-url/src/forgiving_base64.rs:172:12-172:14)
  3: _57 = ()
    SourceInfo(data-url/src/forgiving_base64.rs:172:12-172:14)
  4: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Ok(move _57)
    SourceInfo(data-url/src/forgiving_base64.rs:172:9-172:15)
  5: StorageDead(_57)
    SourceInfo(data-url/src/forgiving_base64.rs:172:14-172:15)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:173:5-173:6)
      kind: drop(_1) -> [return: bb44, unwind: bb56]
  }
  preds [bb9, bb20, bb32]
  succs [bb44, bb56]

bb39
  0: StorageDead(_47)
    SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
      kind: drop(_38) -> [return: bb40, unwind: bb55]
  }
  preds [bb31]
  succs [bb40, bb55]

bb40
  0: StorageDead(_45)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  1: StorageDead(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  2: StorageDead(_37)
    SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
  3: StorageDead(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:168:13-168:14)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb43
  }
  preds [bb39]
  succs [bb43]

bb41
  0: StorageDead(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
      kind: drop(_13) -> [return: bb42, unwind: bb55]
  }
  preds [bb19]
  succs [bb42, bb55]

bb42
  0: StorageDead(_20)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  1: StorageDead(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  2: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
  3: StorageDead(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:162:13-162:14)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb43
  }
  preds [bb41]
  succs [bb43]

bb43
  0: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:171:9-171:10)
  1: StorageDead(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:171:9-171:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:173:5-173:6)
      kind: drop(_1) -> [return: bb44, unwind: bb56]
  }
  preds [bb35, bb37, bb40, bb42]
  succs [bb44, bb56]

bb44
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:173:6-173:6)
      kind: return
  }
  preds [bb38, bb43]
  succs []

bb45
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
      kind: drop(_49) -> [return: bb46, unwind terminate(cleanup)]
  }
  preds [bb30]
  succs [bb46]

bb46
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
      kind: drop(_47) -> [return: bb47, unwind terminate(cleanup)]
  }
  preds [bb45]
  succs [bb47]

bb47
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:83-167:84)
      kind: drop(_38) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb31, bb46]
  succs [bb55]

bb48
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:82-167:83)
      kind: drop(_39) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb25]
  succs [bb55]

bb49
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:167:81-167:82)
      kind: drop(_40) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb24]
  succs [bb55]

bb50
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
      kind: drop(_24) -> [return: bb51, unwind terminate(cleanup)]
  }
  preds [bb18]
  succs [bb51]

bb51
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
      kind: drop(_22) -> [return: bb52, unwind terminate(cleanup)]
  }
  preds [bb50]
  succs [bb52]

bb52
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:83-161:84)
      kind: drop(_13) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb19, bb51]
  succs [bb55]

bb53
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:82-161:83)
      kind: drop(_14) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb55]

bb54
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:161:81-161:82)
      kind: drop(_15) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb55]

bb55
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:173:5-173:6)
      kind: drop(_1) -> [return: bb56, unwind terminate(cleanup)]
  }
  preds [bb1, bb10, bb11, bb17, bb21, bb22, bb23, bb29, bb33, bb34, bb36, bb39, bb41, bb47, bb48, bb49, bb52, bb53, bb54]
  succs [bb56]

bb56
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:152:5-173:6)
      kind: resume
  }
  preds [bb38, bb43, bb55]
  succs []

