bb0
  0: StorageLive(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:101:13-101:24)
  1: _2 = move _1
    SourceInfo(data-url/src/forgiving_base64.rs:101:13-101:24)
  2: _0 = forgiving_base64::Decoder::<F, E> { write_bytes: move _2, bit_buffer: const 0_u32, buffer_bit_length: const 0_u8, padding_symbols: const 0_u8 }
    SourceInfo(data-url/src/forgiving_base64.rs:100:9-105:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:105:9-105:10)
      kind: drop(_2) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:105:9-105:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:106:5-106:6)
      kind: drop(_1) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:106:6-106:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:106:5-106:6)
      kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:99:5-106:6)
      kind: resume
  }
  preds [bb1, bb3]
  succs []

