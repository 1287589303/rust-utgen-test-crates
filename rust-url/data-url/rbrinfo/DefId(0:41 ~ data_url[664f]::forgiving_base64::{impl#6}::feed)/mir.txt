bb0
  0: StorageLive(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
  1: StorageLive(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  2: StorageLive(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  3: StorageLive(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:27)
  4: _6 = &(*_2)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:27)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
      kind: _5 = core::slice::<impl [u8]>::iter(move _6) -> [return: bb1, unwind: bb54]
  }
  preds []
  succs [bb1, bb54]

bb1
  0: StorageDead(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:110:33-110:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
      kind: _4 = <core::slice::Iter<'_, u8> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb54]
  }
  preds [bb0]
  succs [bb2, bb54]

bb2
  0: StorageDead(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:110:33-110:34)
  1: PlaceMention(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  2: StorageLive(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  3: _7 = move _4
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
      kind: goto -> bb3
  }
  preds [bb1]
  succs [bb3]

bb3
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
      kind: falseUnwind -> [real: bb4, unwind: bb54]
  }
  preds [bb2, bb42, bb44]
  succs [bb4, bb54]

bb4
  0: StorageLive(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  1: StorageLive(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  2: StorageLive(_11)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  3: StorageLive(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  4: _12 = &mut _7
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  5: _11 = &mut (*_12)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
      kind: _10 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::next(move _11) -> [return: bb5, unwind: bb54]
  }
  preds [bb3]
  succs [bb5, bb54]

bb5
  0: StorageDead(_11)
    SourceInfo(data-url/src/forgiving_base64.rs:110:33-110:34)
  1: PlaceMention(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  2: _13 = discriminant(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
      kind: switchInt(move _13) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:22-110:34)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:110:14-110:18)
  1: _15 = (*((_10 as Some).0: &u8))
    SourceInfo(data-url/src/forgiving_base64.rs:110:14-110:18)
  2: StorageLive(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:111:17-111:22)
  3: StorageLive(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:44)
  4: _17 = const forgiving_base64::BASE64_DECODE_TABLE
    SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:44)
  5: StorageLive(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:111:45-111:58)
  6: StorageLive(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:111:45-111:49)
  7: _19 = _15
    SourceInfo(data-url/src/forgiving_base64.rs:111:45-111:49)
  8: _18 = move _19 as usize (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:111:45-111:58)
  9: StorageDead(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:111:57-111:58)
  10: _20 = Len(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:59)
  11: _21 = Lt(_18, _20)
    SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:59)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:59)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _18) -> [success: bb10, unwind: bb54]
  }
  preds [bb5, bb7]
  succs [bb10, bb54]

bb9
  0: _3 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
  1: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  2: StorageDead(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  3: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  4: StorageDead(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  5: StorageDead(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  6: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  7: StorageLive(_78)
    SourceInfo(data-url/src/forgiving_base64.rs:148:12-148:14)
  8: _78 = ()
    SourceInfo(data-url/src/forgiving_base64.rs:148:12-148:14)
  9: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Ok(move _78)
    SourceInfo(data-url/src/forgiving_base64.rs:148:9-148:15)
  10: StorageDead(_78)
    SourceInfo(data-url/src/forgiving_base64.rs:148:14-148:15)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:149:6-149:6)
      kind: goto -> bb48
  }
  preds [bb7]
  succs [bb48]

bb10
  0: _16 = _17[_18]
    SourceInfo(data-url/src/forgiving_base64.rs:111:25-111:59)
  1: FakeRead(ForLet(None), _16)
    SourceInfo(data-url/src/forgiving_base64.rs:111:17-111:22)
  2: StorageDead(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:111:59-111:60)
  3: StorageDead(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:111:59-111:60)
  4: StorageLive(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:112:13-126:14)
  5: StorageLive(_23)
    SourceInfo(data-url/src/forgiving_base64.rs:112:16-112:25)
  6: StorageLive(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:112:16-112:21)
  7: _24 = _16
    SourceInfo(data-url/src/forgiving_base64.rs:112:16-112:21)
  8: _23 = Lt(move _24, const 0_i8)
    SourceInfo(data-url/src/forgiving_base64.rs:112:16-112:25)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:112:16-112:25)
      kind: switchInt(move _23) -> [0: bb22, otherwise: bb11]
  }
  preds [bb8]
  succs [bb11, bb22]

bb11
  0: StorageDead(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:112:24-112:25)
  1: StorageLive(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:116:17-118:18)
  2: StorageLive(_27)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9-460:10)
  3: PlaceMention(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:116:29-116:33)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9-457:9)
      kind: switchInt(_15) -> [32: bb13, 9: bb13, 10: bb13, 13: bb13, 12: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb13, bb13, bb13, bb13]

bb12
  0: _27 = const false
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18-459:23)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18-459:23)
      kind: goto -> bb15
  }
  preds [bb11, bb13]
  succs [bb15]

bb13
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:116:35-116:73)
      kind: falseEdge -> [real: bb14, imaginary: bb12]
  }
  preds [bb11, bb11, bb11, bb11, bb11]
  succs [bb12, bb14]

bb14
  0: _27 = const true
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39-458:43)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39-458:43)
      kind: goto -> bb15
  }
  preds [bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9-460:10)
      kind: switchInt(move _27) -> [0: bb16, otherwise: bb43]
  }
  preds [bb12, bb14]
  succs [bb16, bb43]

bb16
  0: _26 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:118:18-118:18)
  1: StorageDead(_27)
    SourceInfo(data-url/src/forgiving_base64.rs:118:17-118:18)
  2: StorageDead(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:118:17-118:18)
  3: StorageLive(_29)
    SourceInfo(data-url/src/forgiving_base64.rs:120:17-123:18)
  4: StorageLive(_30)
    SourceInfo(data-url/src/forgiving_base64.rs:120:20-120:32)
  5: StorageLive(_31)
    SourceInfo(data-url/src/forgiving_base64.rs:120:20-120:24)
  6: _31 = _15
    SourceInfo(data-url/src/forgiving_base64.rs:120:20-120:24)
  7: _30 = Eq(move _31, const 61_u8)
    SourceInfo(data-url/src/forgiving_base64.rs:120:20-120:32)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:120:20-120:32)
      kind: switchInt(move _30) -> [0: bb18, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb18]

bb17
  0: StorageDead(_31)
    SourceInfo(data-url/src/forgiving_base64.rs:120:31-120:32)
  1: StorageLive(_33)
    SourceInfo(data-url/src/forgiving_base64.rs:121:44-121:82)
  2: StorageLive(_34)
    SourceInfo(data-url/src/forgiving_base64.rs:121:44-121:64)
  3: _34 = ((*_1).3: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:121:44-121:64)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:121:44-121:82)
      kind: _33 = core::num::<impl u8>::saturating_add(move _34, const 1_u8) -> [return: bb19, unwind: bb54]
  }
  preds [bb16]
  succs [bb19, bb54]

bb18
  0: StorageDead(_31)
    SourceInfo(data-url/src/forgiving_base64.rs:120:31-120:32)
  1: _29 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:123:18-123:18)
  2: StorageDead(_30)
    SourceInfo(data-url/src/forgiving_base64.rs:123:17-123:18)
  3: StorageDead(_29)
    SourceInfo(data-url/src/forgiving_base64.rs:123:17-123:18)
  4: StorageLive(_35)
    SourceInfo(data-url/src/forgiving_base64.rs:125:28-125:79)
  5: StorageLive(_36)
    SourceInfo(data-url/src/forgiving_base64.rs:125:28-125:72)
  6: StorageLive(_37)
    SourceInfo(data-url/src/forgiving_base64.rs:125:67-125:71)
  7: _37 = _15
    SourceInfo(data-url/src/forgiving_base64.rs:125:67-125:71)
  8: _36 = forgiving_base64::InvalidBase64Details::UnexpectedSymbol(move _37)
    SourceInfo(data-url/src/forgiving_base64.rs:125:28-125:72)
  9: StorageDead(_37)
    SourceInfo(data-url/src/forgiving_base64.rs:125:71-125:72)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:125:28-125:79)
      kind: _35 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _36) -> [return: bb20, unwind: bb54]
  }
  preds [bb16]
  succs [bb20, bb54]

bb19
  0: StorageDead(_34)
    SourceInfo(data-url/src/forgiving_base64.rs:121:81-121:82)
  1: ((*_1).3: u8) = move _33
    SourceInfo(data-url/src/forgiving_base64.rs:121:21-121:82)
  2: StorageDead(_33)
    SourceInfo(data-url/src/forgiving_base64.rs:121:81-121:82)
  3: StorageDead(_30)
    SourceInfo(data-url/src/forgiving_base64.rs:123:17-123:18)
  4: StorageDead(_29)
    SourceInfo(data-url/src/forgiving_base64.rs:123:17-123:18)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb44
  }
  preds [bb17]
  succs [bb44]

bb20
  0: StorageDead(_36)
    SourceInfo(data-url/src/forgiving_base64.rs:125:78-125:79)
  1: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _35)
    SourceInfo(data-url/src/forgiving_base64.rs:125:24-125:80)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:125:79-125:80)
      kind: drop(_35) -> [return: bb21, unwind: bb54]
  }
  preds [bb18]
  succs [bb21, bb54]

bb21
  0: StorageDead(_35)
    SourceInfo(data-url/src/forgiving_base64.rs:125:79-125:80)
  1: StorageDead(_23)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  2: StorageDead(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb20]
  succs [bb47]

bb22
  0: StorageDead(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:112:24-112:25)
  1: _22 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:126:14-126:14)
  2: StorageDead(_23)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  3: StorageDead(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  4: StorageLive(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:127:13-129:14)
  5: StorageLive(_39)
    SourceInfo(data-url/src/forgiving_base64.rs:127:16-127:40)
  6: StorageLive(_40)
    SourceInfo(data-url/src/forgiving_base64.rs:127:16-127:36)
  7: _40 = ((*_1).3: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:127:16-127:36)
  8: _39 = Gt(move _40, const 0_u8)
    SourceInfo(data-url/src/forgiving_base64.rs:127:16-127:40)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:127:16-127:40)
      kind: switchInt(move _39) -> [0: bb24, otherwise: bb23]
  }
  preds [bb10]
  succs [bb23, bb24]

bb23
  0: StorageDead(_40)
    SourceInfo(data-url/src/forgiving_base64.rs:127:39-127:40)
  1: StorageLive(_42)
    SourceInfo(data-url/src/forgiving_base64.rs:128:28-128:83)
  2: StorageLive(_43)
    SourceInfo(data-url/src/forgiving_base64.rs:128:28-128:76)
  3: _43 = forgiving_base64::InvalidBase64Details::AlphabetSymbolAfterPadding
    SourceInfo(data-url/src/forgiving_base64.rs:128:28-128:76)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:128:28-128:83)
      kind: _42 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _43) -> [return: bb25, unwind: bb54]
  }
  preds [bb22]
  succs [bb25, bb54]

bb24
  0: StorageDead(_40)
    SourceInfo(data-url/src/forgiving_base64.rs:127:39-127:40)
  1: _38 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:129:14-129:14)
  2: StorageDead(_39)
    SourceInfo(data-url/src/forgiving_base64.rs:129:13-129:14)
  3: StorageDead(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:129:13-129:14)
  4: _44 = const 6_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:130:13-130:34)
  5: _45 = Lt(move _44, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:130:13-130:34)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:130:13-130:34)
      kind: assert(move _45, "attempt to shift left by `{}`, which would overflow", const 6_i32) -> [success: bb27, unwind: bb54]
  }
  preds [bb22]
  succs [bb27, bb54]

bb25
  0: StorageDead(_43)
    SourceInfo(data-url/src/forgiving_base64.rs:128:82-128:83)
  1: _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _42)
    SourceInfo(data-url/src/forgiving_base64.rs:128:24-128:84)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:128:83-128:84)
      kind: drop(_42) -> [return: bb26, unwind: bb54]
  }
  preds [bb23]
  succs [bb26, bb54]

bb26
  0: StorageDead(_42)
    SourceInfo(data-url/src/forgiving_base64.rs:128:83-128:84)
  1: StorageDead(_39)
    SourceInfo(data-url/src/forgiving_base64.rs:129:13-129:14)
  2: StorageDead(_38)
    SourceInfo(data-url/src/forgiving_base64.rs:129:13-129:14)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb25]
  succs [bb47]

bb27
  0: ((*_1).1: u32) = Shl(((*_1).1: u32), const 6_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:130:13-130:34)
  1: StorageLive(_46)
    SourceInfo(data-url/src/forgiving_base64.rs:131:32-131:44)
  2: StorageLive(_47)
    SourceInfo(data-url/src/forgiving_base64.rs:131:32-131:37)
  3: _47 = _16
    SourceInfo(data-url/src/forgiving_base64.rs:131:32-131:37)
  4: _46 = move _47 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:131:32-131:44)
  5: StorageDead(_47)
    SourceInfo(data-url/src/forgiving_base64.rs:131:43-131:44)
  6: ((*_1).1: u32) = BitOr(((*_1).1: u32), move _46)
    SourceInfo(data-url/src/forgiving_base64.rs:131:13-131:44)
  7: StorageDead(_46)
    SourceInfo(data-url/src/forgiving_base64.rs:131:43-131:44)
  8: StorageLive(_48)
    SourceInfo(data-url/src/forgiving_base64.rs:133:16-133:43)
  9: StorageLive(_49)
    SourceInfo(data-url/src/forgiving_base64.rs:133:16-133:38)
  10: _49 = ((*_1).2: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:133:16-133:38)
  11: _48 = Lt(move _49, const 18_u8)
    SourceInfo(data-url/src/forgiving_base64.rs:133:16-133:43)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:133:16-133:43)
      kind: switchInt(move _48) -> [0: bb30, otherwise: bb28]
  }
  preds [bb24]
  succs [bb28, bb30]

bb28
  0: StorageDead(_49)
    SourceInfo(data-url/src/forgiving_base64.rs:133:42-133:43)
  1: _50 = AddWithOverflow(((*_1).2: u8), const 6_u8)
    SourceInfo(data-url/src/forgiving_base64.rs:134:17-134:44)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:134:17-134:44)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: u8), const 6_u8) -> [success: bb29, unwind: bb54]
  }
  preds [bb27]
  succs [bb29, bb54]

bb29
  0: ((*_1).2: u8) = move (_50.0: u8)
    SourceInfo(data-url/src/forgiving_base64.rs:134:17-134:44)
  1: _9 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:133:44-135:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:133:13-146:14)
      kind: goto -> bb42
  }
  preds [bb28]
  succs [bb42]

bb30
  0: StorageDead(_49)
    SourceInfo(data-url/src/forgiving_base64.rs:133:42-133:43)
  1: StorageLive(_51)
    SourceInfo(data-url/src/forgiving_base64.rs:137:21-137:32)
  2: StorageLive(_52)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:50)
  3: StorageLive(_53)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:44)
  4: StorageLive(_54)
    SourceInfo(data-url/src/forgiving_base64.rs:138:22-138:37)
  5: _54 = ((*_1).1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:138:22-138:37)
  6: _55 = const 16_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:44)
  7: _56 = Lt(move _55, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:44)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:44)
      kind: assert(move _56, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb31, unwind: bb54]
  }
  preds [bb27]
  succs [bb31, bb54]

bb31
  0: _53 = Shr(move _54, const 16_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:44)
  1: StorageDead(_54)
    SourceInfo(data-url/src/forgiving_base64.rs:138:43-138:44)
  2: _52 = move _53 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:138:21-138:50)
  3: StorageDead(_53)
    SourceInfo(data-url/src/forgiving_base64.rs:138:49-138:50)
  4: StorageLive(_57)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:49)
  5: StorageLive(_58)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:43)
  6: StorageLive(_59)
    SourceInfo(data-url/src/forgiving_base64.rs:139:22-139:37)
  7: _59 = ((*_1).1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:139:22-139:37)
  8: _60 = const 8_i32 as u32 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:43)
  9: _61 = Lt(move _60, const 32_u32)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:43)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:43)
      kind: assert(move _61, "attempt to shift right by `{}`, which would overflow", const 8_i32) -> [success: bb32, unwind: bb54]
  }
  preds [bb30]
  succs [bb32, bb54]

bb32
  0: _58 = Shr(move _59, const 8_i32)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:43)
  1: StorageDead(_59)
    SourceInfo(data-url/src/forgiving_base64.rs:139:42-139:43)
  2: _57 = move _58 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:139:21-139:49)
  3: StorageDead(_58)
    SourceInfo(data-url/src/forgiving_base64.rs:139:48-139:49)
  4: StorageLive(_62)
    SourceInfo(data-url/src/forgiving_base64.rs:140:21-140:42)
  5: StorageLive(_63)
    SourceInfo(data-url/src/forgiving_base64.rs:140:21-140:36)
  6: _63 = ((*_1).1: u32)
    SourceInfo(data-url/src/forgiving_base64.rs:140:21-140:36)
  7: _62 = move _63 as u8 (IntToInt)
    SourceInfo(data-url/src/forgiving_base64.rs:140:21-140:42)
  8: StorageDead(_63)
    SourceInfo(data-url/src/forgiving_base64.rs:140:41-140:42)
  9: _51 = [move _52, move _57, move _62]
    SourceInfo(data-url/src/forgiving_base64.rs:137:35-141:18)
  10: StorageDead(_62)
    SourceInfo(data-url/src/forgiving_base64.rs:141:17-141:18)
  11: StorageDead(_57)
    SourceInfo(data-url/src/forgiving_base64.rs:141:17-141:18)
  12: StorageDead(_52)
    SourceInfo(data-url/src/forgiving_base64.rs:141:17-141:18)
  13: FakeRead(ForLet(None), _51)
    SourceInfo(data-url/src/forgiving_base64.rs:137:21-137:32)
  14: StorageLive(_64)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  15: StorageLive(_65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  16: StorageLive(_66)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:82)
  17: StorageLive(_67)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:49)
  18: StorageLive(_68)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:35)
  19: _68 = &mut ((*_1).0: F)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:35)
  20: StorageLive(_69)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:49)
  21: StorageLive(_70)
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  22: StorageLive(_71)
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  23: StorageLive(_72)
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  24: _72 = &_51
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  25: _71 = &(*_72)
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  26: _70 = move _71 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(data-url/src/forgiving_base64.rs:142:36-142:48)
  27: StorageDead(_71)
    SourceInfo(data-url/src/forgiving_base64.rs:142:47-142:48)
  28: _69 = (move _70,)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:49)
      kind: _67 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _68, move _69) -> [return: bb33, unwind: bb54]
  }
  preds [bb31]
  succs [bb33, bb54]

bb33
  0: StorageDead(_70)
    SourceInfo(data-url/src/forgiving_base64.rs:142:48-142:49)
  1: StorageDead(_69)
    SourceInfo(data-url/src/forgiving_base64.rs:142:48-142:49)
  2: StorageDead(_68)
    SourceInfo(data-url/src/forgiving_base64.rs:142:48-142:49)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:82)
      kind: _66 = core::result::Result::<(), E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _67, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb34, unwind: bb53]
  }
  preds [bb32]
  succs [bb34, bb53]

bb34
  0: StorageDead(_67)
    SourceInfo(data-url/src/forgiving_base64.rs:142:81-142:82)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
      kind: _65 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _66) -> [return: bb35, unwind: bb52]
  }
  preds [bb33]
  succs [bb35, bb52]

bb35
  0: StorageDead(_66)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  1: PlaceMention(_65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  2: _73 = discriminant(_65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
      kind: switchInt(move _73) -> [0: bb38, 1: bb37, otherwise: bb36]
  }
  preds [bb34]
  succs [bb36, bb37, bb38]

bb36
  0: FakeRead(ForMatchedPlace(None), _65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
      kind: unreachable
  }
  preds [bb35]
  succs []

bb37
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
      kind: falseEdge -> [real: bb39, imaginary: bb38]
  }
  preds [bb35]
  succs [bb38, bb39]

bb38
  0: StorageLive(_77)
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  1: _77 = ((_65 as Continue).0: ())
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  2: _64 = _77
    SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
  3: StorageDead(_77)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
      kind: drop(_65) -> [return: bb41, unwind: bb54]
  }
  preds [bb35, bb37]
  succs [bb41, bb54]

bb39
  0: StorageLive(_74)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  1: _74 = move ((_65 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  2: StorageLive(_76)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  3: _76 = move _74
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:17-142:83)
      kind: _0 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _76) -> [return: bb40, unwind: bb49]
  }
  preds [bb37]
  succs [bb40, bb49]

bb40
  0: StorageDead(_76)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
      kind: drop(_74) -> [return: bb45, unwind: bb51]
  }
  preds [bb39]
  succs [bb45, bb51]

bb41
  0: StorageDead(_72)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  1: StorageDead(_65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  2: StorageDead(_64)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  3: ((*_1).2: u8) = const 0_u8
    SourceInfo(data-url/src/forgiving_base64.rs:143:17-143:43)
  4: _9 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:135:20-146:14)
  5: StorageDead(_51)
    SourceInfo(data-url/src/forgiving_base64.rs:146:13-146:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:133:13-146:14)
      kind: goto -> bb42
  }
  preds [bb38]
  succs [bb42]

bb42
  0: StorageDead(_48)
    SourceInfo(data-url/src/forgiving_base64.rs:146:13-146:14)
  1: StorageDead(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  2: StorageDead(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  3: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  4: StorageDead(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  5: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  6: _8 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:110:9-147:10)
      kind: goto -> bb3
  }
  preds [bb29, bb41]
  succs [bb3]

bb43
  0: StorageDead(_27)
    SourceInfo(data-url/src/forgiving_base64.rs:118:17-118:18)
  1: StorageDead(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:118:17-118:18)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb44
  }
  preds [bb15]
  succs [bb44]

bb44
  0: StorageDead(_23)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  1: StorageDead(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:126:13-126:14)
  2: StorageDead(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  3: StorageDead(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  4: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  5: StorageDead(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  6: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb3
  }
  preds [bb19, bb43]
  succs [bb3]

bb45
  0: StorageDead(_74)
    SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
      kind: drop(_65) -> [return: bb46, unwind: bb54]
  }
  preds [bb40]
  succs [bb46, bb54]

bb46
  0: StorageDead(_72)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  1: StorageDead(_65)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  2: StorageDead(_64)
    SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
  3: StorageDead(_51)
    SourceInfo(data-url/src/forgiving_base64.rs:146:13-146:14)
  4: StorageDead(_48)
    SourceInfo(data-url/src/forgiving_base64.rs:146:13-146:14)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb45]
  succs [bb47]

bb47
  0: StorageDead(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  1: StorageDead(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  2: StorageDead(_12)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  3: StorageDead(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  4: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  5: StorageDead(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  6: StorageDead(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  7: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:147:9-147:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:149:6-149:6)
      kind: goto -> bb48
  }
  preds [bb21, bb26, bb46]
  succs [bb48]

bb48
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:149:6-149:6)
      kind: return
  }
  preds [bb9, bb47]
  succs []

bb49
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
      kind: drop(_76) -> [return: bb50, unwind terminate(cleanup)]
  }
  preds [bb39]
  succs [bb50]

bb50
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
      kind: drop(_74) -> [return: bb51, unwind terminate(cleanup)]
  }
  preds [bb49]
  succs [bb51]

bb51
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:83-142:84)
      kind: drop(_65) -> [return: bb54, unwind terminate(cleanup)]
  }
  preds [bb40, bb50]
  succs [bb54]

bb52
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:82-142:83)
      kind: drop(_66) -> [return: bb54, unwind terminate(cleanup)]
  }
  preds [bb34]
  succs [bb54]

bb53
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:142:81-142:82)
      kind: drop(_67) -> [return: bb54, unwind terminate(cleanup)]
  }
  preds [bb33]
  succs [bb54]

bb54
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:109:5-149:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8, bb17, bb18, bb20, bb23, bb24, bb25, bb28, bb30, bb31, bb32, bb38, bb45, bb51, bb52, bb53]
  succs []

