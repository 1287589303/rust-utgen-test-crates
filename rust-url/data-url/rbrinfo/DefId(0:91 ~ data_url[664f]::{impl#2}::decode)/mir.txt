bb0
  0: StorageLive(_3)
    SourceInfo(data-url/src/lib.rs:103:12-103:23)
  1: _3 = ((*_1).1: bool)
    SourceInfo(data-url/src/lib.rs:103:12-103:23)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:103:12-103:23)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageLive(_4)
    SourceInfo(data-url/src/lib.rs:104:32-104:63)
  1: _4 = &(*((*_1).2: &str))
    SourceInfo(data-url/src/lib.rs:104:32-104:63)
  2: StorageLive(_5)
    SourceInfo(data-url/src/lib.rs:104:65-104:81)
  3: _5 = move _2
    SourceInfo(data-url/src/lib.rs:104:65-104:81)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:104:13-104:82)
      kind: _0 = decode_with_base64::<F, E>(move _4, move _5) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_5)
    SourceInfo(data-url/src/lib.rs:104:81-104:82)
  1: StorageDead(_4)
    SourceInfo(data-url/src/lib.rs:104:81-104:82)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:103:9-108:10)
      kind: goto -> bb6
  }
  preds [bb1]
  succs [bb6]

bb3
  0: StorageLive(_6)
    SourceInfo(data-url/src/lib.rs:106:13-106:85)
  1: StorageLive(_7)
    SourceInfo(data-url/src/lib.rs:106:35-106:66)
  2: _7 = &(*((*_1).2: &str))
    SourceInfo(data-url/src/lib.rs:106:35-106:66)
  3: StorageLive(_8)
    SourceInfo(data-url/src/lib.rs:106:68-106:84)
  4: _8 = move _2
    SourceInfo(data-url/src/lib.rs:106:68-106:84)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:106:13-106:85)
      kind: _6 = decode_without_base64::<F, E>(move _7, move _8) -> [return: bb4, unwind: bb9]
  }
  preds [bb0]
  succs [bb4, bb9]

bb4
  0: StorageDead(_8)
    SourceInfo(data-url/src/lib.rs:106:84-106:85)
  1: StorageDead(_7)
    SourceInfo(data-url/src/lib.rs:106:84-106:85)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:106:13-107:68)
      kind: _0 = core::result::Result::<core::option::Option<FragmentIdentifier<'_>>, E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _6, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: StorageDead(_6)
    SourceInfo(data-url/src/lib.rs:107:67-107:68)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:103:9-108:10)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_3)
    SourceInfo(data-url/src/lib.rs:108:9-108:10)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:109:5-109:6)
      kind: drop(_2) -> [return: bb7, unwind: bb12]
  }
  preds [bb2, bb5]
  succs [bb7, bb12]

bb7
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:109:6-109:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:107:67-107:68)
      kind: drop(_6) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb11]

bb9
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:106:84-106:85)
      kind: drop(_8) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb11]

bb10
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:104:81-104:82)
      kind: drop(_5) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:109:5-109:6)
      kind: drop(_2) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb8, bb9, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:96:5-109:6)
      kind: resume
  }
  preds [bb6, bb11]
  succs []

