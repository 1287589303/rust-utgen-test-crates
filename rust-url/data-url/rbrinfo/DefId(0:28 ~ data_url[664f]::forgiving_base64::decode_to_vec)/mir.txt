bb0
  0: StorageLive(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:72:9-72:14)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:72:17-72:27)
      kind: _2 = std::vec::Vec::<u8>::new() -> [return: bb1, unwind: bb23]
  }
  preds []
  succs [bb1, bb23]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(data-url/src/forgiving_base64.rs:72:9-72:14)
  1: StorageLive(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:73:5-80:6)
  2: StorageLive(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:74:13-74:24)
  3: StorageLive(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:74:40-77:10)
  4: StorageLive(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:74:40-77:10)
  5: _6 = &mut _2
    SourceInfo(data-url/src/forgiving_base64.rs:74:40-77:10)
  6: _5 = {closure@data-url/src/forgiving_base64.rs:74:40: 74:47} { v: move _6 }
    SourceInfo(data-url/src/forgiving_base64.rs:74:40-77:10)
  7: StorageDead(_6)
    SourceInfo(data-url/src/forgiving_base64.rs:74:46-74:47)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:74:27-77:11)
      kind: _4 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::new(move _5) -> [return: bb2, unwind: bb22]
  }
  preds [bb0]
  succs [bb2, bb22]

bb2
  0: StorageDead(_5)
    SourceInfo(data-url/src/forgiving_base64.rs:77:10-77:11)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(data-url/src/forgiving_base64.rs:74:13-74:24)
  2: StorageLive(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  3: StorageLive(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  4: StorageLive(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:28)
  5: StorageLive(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:16)
  6: _10 = &mut _4
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:16)
  7: StorageLive(_11)
    SourceInfo(data-url/src/forgiving_base64.rs:78:22-78:27)
  8: _11 = &(*_1)
    SourceInfo(data-url/src/forgiving_base64.rs:78:22-78:27)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:28)
      kind: _9 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::feed(move _10, move _11) -> [return: bb3, unwind: bb22]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: StorageDead(_11)
    SourceInfo(data-url/src/forgiving_base64.rs:78:27-78:28)
  1: StorageDead(_10)
    SourceInfo(data-url/src/forgiving_base64.rs:78:27-78:28)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
      kind: _8 = <core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _9) -> [return: bb4, unwind: bb22]
  }
  preds [bb2]
  succs [bb4, bb22]

bb4
  0: StorageDead(_9)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  1: PlaceMention(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  2: _12 = discriminant(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
      kind: switchInt(move _12) -> [0: bb7, 1: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  1: _16 = ((_8 as Continue).0: ())
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  2: _7 = _16
    SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
  3: StorageDead(_16)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  4: StorageDead(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:29-78:30)
  5: StorageDead(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:78:29-78:30)
  6: StorageLive(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  7: StorageLive(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  8: StorageLive(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:25)
  9: StorageLive(_20)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:16)
  10: _20 = move _4
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:16)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:25)
      kind: _19 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::finish(move _20) -> [return: bb10, unwind: bb22]
  }
  preds [bb4, bb6]
  succs [bb10, bb22]

bb8
  0: StorageLive(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  1: _13 = move ((_8 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  2: StorageLive(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  3: _15 = move _13
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:78:9-78:29)
      kind: _0 = <core::result::Result<std::vec::Vec<u8>, forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _15) -> [return: bb9, unwind: bb22]
  }
  preds [bb6]
  succs [bb9, bb22]

bb9
  0: StorageDead(_15)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  1: StorageDead(_13)
    SourceInfo(data-url/src/forgiving_base64.rs:78:28-78:29)
  2: StorageDead(_8)
    SourceInfo(data-url/src/forgiving_base64.rs:78:29-78:30)
  3: StorageDead(_7)
    SourceInfo(data-url/src/forgiving_base64.rs:78:29-78:30)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb8]
  succs [bb19]

bb10
  0: StorageDead(_20)
    SourceInfo(data-url/src/forgiving_base64.rs:79:24-79:25)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
      kind: _18 = <core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _19) -> [return: bb11, unwind: bb22]
  }
  preds [bb7]
  succs [bb11, bb22]

bb11
  0: StorageDead(_19)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  1: PlaceMention(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  2: _21 = discriminant(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
      kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_25)
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  1: _25 = ((_18 as Continue).0: ())
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  2: _17 = _25
    SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
  3: StorageDead(_25)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  4: StorageDead(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:26-79:27)
  5: StorageDead(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:79:26-79:27)
  6: _3 = const ()
    SourceInfo(data-url/src/forgiving_base64.rs:73:5-80:6)
  7: StorageDead(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:80:5-80:6)
  8: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:80:5-80:6)
  9: StorageLive(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:81:8-81:9)
  10: _26 = move _2
    SourceInfo(data-url/src/forgiving_base64.rs:81:8-81:9)
  11: _0 = core::result::Result::<std::vec::Vec<u8>, forgiving_base64::InvalidBase64>::Ok(move _26)
    SourceInfo(data-url/src/forgiving_base64.rs:81:5-81:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:81:9-81:10)
      kind: drop(_26) -> [return: bb17, unwind: bb22]
  }
  preds [bb11, bb13]
  succs [bb17, bb22]

bb15
  0: StorageLive(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  1: _22 = move ((_18 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  2: StorageLive(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  3: _24 = move _22
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:79:9-79:26)
      kind: _0 = <core::result::Result<std::vec::Vec<u8>, forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _24) -> [return: bb16, unwind: bb22]
  }
  preds [bb13]
  succs [bb16, bb22]

bb16
  0: StorageDead(_24)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  1: StorageDead(_22)
    SourceInfo(data-url/src/forgiving_base64.rs:79:25-79:26)
  2: StorageDead(_18)
    SourceInfo(data-url/src/forgiving_base64.rs:79:26-79:27)
  3: StorageDead(_17)
    SourceInfo(data-url/src/forgiving_base64.rs:79:26-79:27)
  Terminator {
      source_info: SourceInfo(data-url/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb15]
  succs [bb19]

bb17
  0: StorageDead(_26)
    SourceInfo(data-url/src/forgiving_base64.rs:81:9-81:10)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:1-82:2)
      kind: drop(_2) -> [return: bb18, unwind: bb23]
  }
  preds [bb14]
  succs [bb18, bb23]

bb18
  0: StorageDead(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:82:1-82:2)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:2-82:2)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb19
  0: StorageDead(_4)
    SourceInfo(data-url/src/forgiving_base64.rs:80:5-80:6)
  1: StorageDead(_3)
    SourceInfo(data-url/src/forgiving_base64.rs:80:5-80:6)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:1-82:2)
      kind: drop(_2) -> [return: bb20, unwind: bb23]
  }
  preds [bb9, bb16]
  succs [bb20, bb23]

bb20
  0: StorageDead(_2)
    SourceInfo(data-url/src/forgiving_base64.rs:82:1-82:2)
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:2-82:2)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:2-82:2)
      kind: return
  }
  preds [bb18, bb20]
  succs []

bb22
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:82:1-82:2)
      kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb3, bb7, bb8, bb10, bb14, bb15]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(data-url/src/forgiving_base64.rs:71:1-82:2)
      kind: resume
  }
  preds [bb0, bb17, bb19, bb22]
  succs []

