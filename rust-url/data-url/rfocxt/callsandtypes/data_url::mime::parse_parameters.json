{"mod_name":"mime","calls":["std::string::String::push","core::str::<impl str>::chars","<core::str::Split<'_, char> as core::iter::Iterator>::next","mime::contains","<core::str::Chars<'_> as core::iter::Iterator>::next","mime::valid_value","std::vec::Vec::<","core::str::<impl str>::is_empty","core::str::<impl str>::strip_prefix::<'_, char>","mime::only_http_token_code_points","core::str::<impl str>::trim_end_matches::<'_, fn","std::string::String::with_capacity","core::option::Option::<char>::unwrap_or_else::<{closure@data-url/src/mime.rs:94:86: 94:88}>","<str as std::borrow::ToOwned>::to_owned","core::str::<impl str>::split::<'_, char>","core::str::<impl str>::len","core::str::<impl str>::trim_start_matches::<'_, fn","mime::split2","core::num::<impl usize>::saturating_sub","<std::vec::Vec<","std::str::<impl str>::to_ascii_lowercase"],"types":["std::string::String","fn(char) -> bool {mime::http_whitespace}","str","core::str::Split<'_, char>","core::option::Option<&str>","(std::string::String, std::string::String)","std::alloc::Global","core::option::Option<char>","{closure@data-url/src/mime.rs:94:86: 94:88}","(&str, core::option::Option<&str>)","char","core::str::Chars<'_>","usize","()","!","[(std::string::String, std::string::String)]","isize","std::vec::Vec<(std::string::String, std::string::String)>","bool"]}