[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:344:23: 344:66 (#0),
                    scope: scope[0],
                },
                kind: _3 = forgiving_base64::Decoder::<F, E>::new(move _4) -> [return: bb1, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _3,
            _9 = {closure@data-url/src/lib.rs:345:70: 345:77} { decoder: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:20: 345:98 (#0),
                    scope: scope[1],
                },
                kind: _7 = decode_without_base64::<{closure@data-url/src/lib.rs:345:70: 345:77}, forgiving_base64::DecodeError<E>>(move _8, move _9) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:20: 345:99 (#194),
                    scope: scope[1],
                },
                kind: _6 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _7) -> [return: bb3, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _11 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:20: 345:99 (#194),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:20: 345:99 (#194),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:98: 345:99 (#195),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_6 as Continue).0: core::option::Option<FragmentIdentifier<'_>>),
            _5 = move _15,
            StorageDead(_15),
            FakeRead(ForLet(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:99: 345:100 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb9, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_6 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:20: 345:99 (#194),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _14) -> [return: bb8, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:98: 345:99 (#195),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb21, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:5: 346:21 (#0),
                    scope: scope[2],
                },
                kind: _18 = forgiving_base64::Decoder::<F, E>::finish(move _19) -> [return: bb10, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:5: 346:22 (#196),
                    scope: scope[2],
                },
                kind: _17 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _18) -> [return: bb11, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:5: 346:22 (#196),
                    scope: scope[2],
                },
                kind: switchInt(move _20) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:5: 346:22 (#196),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:21: 346:22 (#197),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_17 as Continue).0: ()),
            _16 = _24,
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:22: 346:23 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb17, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_17 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>),
            StorageLive(_23),
            _23 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:5: 346:22 (#196),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _23) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:21: 346:22 (#197),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb19, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_25),
            _25 = move _5,
            _0 = core::result::Result::<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>>::Ok(move _25),
            StorageDead(_25),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb18, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:22: 346:23 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb20, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:99: 345:100 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb24, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:2: 348:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:21: 346:22 (#196),
                    scope: scope[8],
                },
                kind: drop(_23) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:21: 346:22 (#197),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:22: 346:23 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:21: 346:22 (#196),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:346:20: 346:21 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:98: 345:99 (#194),
                    scope: scope[4],
                },
                kind: drop(_14) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:98: 345:99 (#195),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:99: 345:100 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:345:98: 345:99 (#194),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:344:65: 344:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:348:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:337:1: 348:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<FragmentIdentifier<'{erased}>>, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:340:6: 340:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:338:33: 338:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:338:5: 338:31 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:338:5: 338:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:338:5: 338:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:339:18: 339:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:339:5: 339:16 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:339:5: 339:16 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:339:5: 339:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:344:23: 344:66 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:344:9: 344:20 (#0),
                    },
                ),
            ),
        ),
        ty: forgiving_base64::Decoder<F/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:344:9: 344:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:344:54: 344:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:345:20: 345:99 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:345:9: 345:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:9: 345:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>, core::option::Option<FragmentIdentifier<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:20: 345:99 (#194),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<FragmentIdentifier<'{erased}>>, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:20: 345:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:42: 345:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:123 ~ data_url[664f]::decode_with_base64::{closure#0}),
            [
                F/#0,
                E/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::DecodeError<E/#1>>, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut forgiving_base64::Decoder<F/#0, E/#1>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:70: 345:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut forgiving_base64::Decoder<F/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:70: 345:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:98: 345:99 (#195),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                data-url/src/lib.rs:345:20: 345:99 (#194),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:345:98: 345:99 (#195),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:98: 345:99 (#195),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:98: 345:99 (#195),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:98: 345:99 (#195),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                data-url/src/lib.rs:345:20: 345:99 (#194),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:345:20: 345:99 (#194),
                    },
                ),
            ),
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:345:20: 345:99 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:5: 346:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:5: 346:22 (#196),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:5: 346:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::Decoder<F/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:5: 346:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:21: 346:22 (#197),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                data-url/src/lib.rs:346:5: 346:22 (#196),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:346:21: 346:22 (#197),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:21: 346:22 (#197),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:21: 346:22 (#197),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:21: 346:22 (#197),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                data-url/src/lib.rs:346:5: 346:22 (#196),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:346:5: 346:22 (#196),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:346:5: 346:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:347:8: 347:16 (#0),
            scope: scope[0],
        },
    },
]