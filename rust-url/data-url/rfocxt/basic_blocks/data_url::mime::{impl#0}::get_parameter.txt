[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).2: std::vec::Vec<(std::string::String, std::string::String)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:19:9: 20:20 (#0),
                    scope: scope[0],
                },
                kind: _7 = <std::vec::Vec<(std::string::String, std::string::String)> as core::ops::Deref>::deref(move _8) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:19:9: 20:20 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [(std::string::String, std::string::String)]>::iter(move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut _5,
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_2,
            _9 = {closure@data-url/src/mime.rs:21:19: 21:28} { name: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:19:9: 21:42 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::Iter<'_, (std::string::String, std::string::String)> as core::iter::Iterator>::find::<{closure@data-url/src/mime.rs:21:19: 21:28}>(move _4, move _9) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_4),
            StorageLive(_11),
            _11 = {closure@data-url/src/mime.rs:22:18: 22:26},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&(std::string::String, std::string::String)>::map::<&str, {closure@data-url/src/mime.rs:22:18: 22:26}>(move _3, move _11) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_3),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:23:6: 23:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:15:5: 23:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:15:49: 15:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:15:29: 15:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:15:42: 15:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:15:36: 15:40 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:15:36: 15:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:15:36: 15:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 21:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 20:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 20:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 19:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 20:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<(std::string::String, std::string::String), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:19:9: 19:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:55 ~ data_url[664f]::mime::{impl#0}::get_parameter::{closure#0}),
            [
                P/#0,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 &'{erased} (std::string::String, std::string::String),)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} &'{erased} P/#0,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:21:19: 21:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:21:19: 21:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:19:9: 22:32 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:56 ~ data_url[664f]::mime::{impl#0}::get_parameter::{closure#1}),
            [
                P/#0,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} (std::string::String, std::string::String),)) -> &'{erased} str, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:22:18: 22:31 (#0),
            scope: scope[0],
        },
    },
]