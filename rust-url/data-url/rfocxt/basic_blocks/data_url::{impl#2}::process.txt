[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:56 (#0),
                    scope: scope[0],
                },
                kind: _5 = pretend_parse_data_url(move _6) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = DataUrlError::NotADataUrl,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:75 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<&str>::ok_or::<DataUrlError>(move _5, move _7) -> [return: bb2, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:76 (#115),
                    scope: scope[0],
                },
                kind: _3 = <core::result::Result<&str, DataUrlError> as core::ops::Try>::branch(move _4) -> [return: bb3, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _8 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:76 (#115),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:76 (#115),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:75: 76:76 (#116),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_3 as Continue).0: &str),
            _2 = _12,
            StorageDead(_12),
            FakeRead(ForLet(None), _2),
            StorageDead(_3),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:52 (#0),
                    scope: scope[1],
                },
                kind: _18 = find_comma_before_fragment(move _19) -> [return: bb9, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_3 as Break).0: core::result::Result<core::convert::Infallible, DataUrlError>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:76:27: 76:76 (#115),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<DataUrl<'_>, DataUrlError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, DataUrlError>>>::from_residual(move _11) -> [return: bb8, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            _20 = DataUrlError::NoComma,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:67 (#0),
                    scope: scope[1],
                },
                kind: _17 = core::option::Option::<(&str, &str)>::ok_or::<DataUrlError>(move _18, move _20) -> [return: bb10, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:68 (#117),
                    scope: scope[1],
                },
                kind: _16 = <core::result::Result<(&str, &str), DataUrlError> as core::ops::Try>::branch(move _17) -> [return: bb11, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _21 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:68 (#117),
                    scope: scope[1],
                },
                kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:68 (#117),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:67: 79:68 (#118),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_16 as Continue).0: (&str, &str)),
            _15 = _25,
            StorageDead(_25),
            PlaceMention(_15),
            StorageLive(_13),
            _13 = (_15.0: &str),
            StorageLive(_14),
            _14 = (_15.1: &str),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:81:35: 81:68 (#0),
                    scope: scope[6],
                },
                kind: _28 = parse_header(move _29) -> [return: bb17, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_16 as Break).0: core::result::Result<core::convert::Infallible, DataUrlError>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:79:13: 79:68 (#117),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<DataUrl<'_>, DataUrlError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, DataUrlError>>>::from_residual(move _24) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            StorageLive(_26),
            _26 = move (_28.0: mime::Mime),
            StorageLive(_27),
            _27 = (_28.1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:81:68: 81:69 (#0),
                    scope: scope[6],
                },
                kind: drop(_28) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_30),
            StorageLive(_31),
            _31 = move _26,
            StorageLive(_32),
            _32 = _27,
            StorageLive(_33),
            _33 = &(*_14),
            _30 = DataUrl::<'_> { mime_type: move _31, base64: move _32, encoded_body_plus_fragment: move _33 },
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:87:9: 87:10 (#0),
                    scope: scope[11],
                },
                kind: drop(_31) -> [return: bb19, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _0 = core::result::Result::<DataUrl<'_>, DataUrlError>::Ok(move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:87:10: 87:11 (#0),
                    scope: scope[11],
                },
                kind: drop(_30) -> [return: bb20, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:88:5: 88:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_26) -> [return: bb21, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:88:6: 88:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:88:6: 88:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:88:6: 88:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:87:10: 87:11 (#0),
                    scope: scope[11],
                },
                kind: drop(_30) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:88:5: 88:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_26) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:73:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<DataUrl<'{erased}>, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:73:39: 73:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:73:27: 73:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:73:20: 73:25 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:73:20: 73:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:73:20: 73:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:76:27: 76:76 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:76:13: 76:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:13: 76:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, DataUrlError>, &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:27: 76:76 (#115),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} str, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:27: 76:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:27: 76:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:50: 76:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: DataUrlError,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:63: 76:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:75: 76:76 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                data-url/src/lib.rs:76:27: 76:76 (#115),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:76:75: 76:76 (#116),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:75: 76:76 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:75: 76:76 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:75: 76:76 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                data-url/src/lib.rs:76:27: 76:76 (#115),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:76:27: 76:76 (#115),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:76:27: 76:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                data-url/src/lib.rs:79:13: 79:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:78:13: 78:62 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:78:14: 78:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                data-url/src/lib.rs:79:13: 79:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:78:13: 78:62 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:78:35: 78:61 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:13: 79:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, DataUrlError>, (&'{erased} str, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:13: 79:68 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(&'{erased} str, &'{erased} str), DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:13: 79:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} str, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:13: 79:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:40: 79:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: DataUrlError,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:59: 79:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:67: 79:68 (#118),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                data-url/src/lib.rs:79:13: 79:68 (#117),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:79:67: 79:68 (#118),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:67: 79:68 (#118),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:67: 79:68 (#118),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, DataUrlError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:67: 79:68 (#118),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                data-url/src/lib.rs:79:13: 79:68 (#117),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:79:13: 79:68 (#117),
                    },
                ),
            ),
        ),
        ty: (&'{erased} str, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:79:13: 79:68 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                data-url/src/lib.rs:81:35: 81:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:81:13: 81:32 (#0),
                    },
                ),
            ),
        ),
        ty: mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:81:14: 81:23 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                data-url/src/lib.rs:81:35: 81:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:81:13: 81:32 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:81:25: 81:31 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (mime::Mime, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:81:35: 81:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:81:48: 81:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: DataUrl<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:83:12: 87:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:84:13: 84:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:85:13: 85:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:86:13: 86:39 (#0),
            scope: scope[0],
        },
    },
]