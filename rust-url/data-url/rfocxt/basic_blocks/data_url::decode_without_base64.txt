[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:290:17: 290:54 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::<impl str>::as_bytes(move _4) -> [return: bb1, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            _5 = const 0_usize,
            FakeRead(ForLet(None), _5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:35 (#0),
                    scope: scope[2],
                },
                kind: _9 = core::slice::<impl [u8]>::iter(move _10) -> [return: bb2, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:47 (#0),
                    scope: scope[2],
                },
                kind: _8 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::enumerate(move _9) -> [return: bb3, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:47 (#183),
                    scope: scope[2],
                },
                kind: _7 = <core::iter::Enumerate<core::slice::Iter<'_, u8>> as core::iter::IntoIterator>::into_iter(move _8) -> [return: bb4, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            StorageLive(_11),
            _11 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:5: 329:6 (#182),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:5: 329:6 (#182),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _11,
            _15 = &mut (*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:47 (#183),
                    scope: scope[3],
                },
                kind: _14 = <core::iter::Enumerate<core::slice::Iter<'_, u8>> as core::iter::Iterator>::next(move _15) -> [return: bb7, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _17 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:47 (#183),
                    scope: scope[3],
                },
                kind: switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:23: 292:47 (#183),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:5: 329:6 (#182),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (((_14 as Some).0: (usize, &u8)).0: usize),
            StorageLive(_20),
            _20 = (*(((_14 as Some).0: (usize, &u8)).1: &u8)),
            StorageLive(_21),
            PlaceMention(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#53),
                    scope: scope[4],
                },
                kind: switchInt(_20) -> [37: bb13, 35: bb13, 9: bb13, 10: bb13, 13: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &mut _2,
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            _112 = &(*_3),
            StorageLive(_113),
            StorageLive(_114),
            _114 = _5,
            _113 = core::ops::RangeFrom::<usize> { start: move _114 },
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:23: 330:38 (#0),
                    scope: scope[2],
                },
                kind: _111 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _112, move _113) -> [return: bb61, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#53),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:296:27: 296:62 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#53),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#53),
                    scope: scope[4],
                },
                kind: switchInt(move _21) -> [0: bb59, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _19,
            StorageLive(_25),
            _25 = _5,
            _23 = Gt(move _24, move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:299:16: 299:31 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _23) -> [0: bb27, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _2,
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_3),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _5,
            StorageLive(_37),
            _37 = _19,
            _35 = core::ops::Range::<usize> { start: move _36, end: move _37 },
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:35: 300:51 (#0),
                    scope: scope[4],
                },
                kind: _33 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _34, move _35) -> [return: bb18, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            _32 = &(*_33),
            _31 = &(*_32),
            _30 = (move _31,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:17: 300:52 (#0),
                    scope: scope[4],
                },
                kind: _28 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _29, move _30) -> [return: bb19, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:17: 300:53 (#188),
                    scope: scope[4],
                },
                kind: _27 = <core::result::Result<(), E> as core::ops::Try>::branch(move _28) -> [return: bb20, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _38 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:17: 300:53 (#188),
                    scope: scope[4],
                },
                kind: switchInt(move _38) -> [0: bb23, 1: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:17: 300:53 (#188),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:52: 300:53 (#189),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = ((_27 as Continue).0: ()),
            _26 = _42,
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:53: 300:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb26, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = move ((_27 as Break).0: core::result::Result<core::convert::Infallible, E>),
            StorageLive(_41),
            _41 = move _39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:17: 300:53 (#188),
                    scope: scope[6],
                },
                kind: _0 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, E> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, E>>>::from_residual(move _41) -> [return: bb25, unwind: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:52: 300:53 (#189),
                    scope: scope[4],
                },
                kind: drop(_39) -> [return: bb74, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_43),
            _43 = _19,
            _5 = move _43,
            StorageDead(_43),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:299:13: 302:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:299:13: 302:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:304:13: 304:23 (#0),
                    scope: scope[4],
                },
                kind: switchInt(_20) -> [37: bb30, 35: bb31, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_102),
            _102 = _19,
            _103 = AddWithOverflow(_102, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:326:36: 326:41 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} + {}`, which would overflow", move _102, const 1_usize) -> [success: bb58, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:305:17: 305:21 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:319:17: 319:21 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_3),
            StorageLive(_47),
            StorageLive(_48),
            _48 = _19,
            _49 = AddWithOverflow(_48, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:306:39: 306:44 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", move _48, const 2_usize) -> [success: bb33, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = move (_49.0: usize),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:306:29: 306:45 (#0),
                    scope: scope[4],
                },
                kind: _45 = core::slice::<impl [u8]>::get::<usize>(move _46, move _47) -> [return: bb34, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_50),
            _50 = {closure@data-url/src/lib.rs:306:55: 306:59},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:306:29: 306:85 (#0),
                    scope: scope[4],
                },
                kind: _44 = core::option::Option::<&u8>::and_then::<u32, {closure@data-url/src/lib.rs:306:55: 306:59}>(move _45, move _50) -> [return: bb35, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_45),
            FakeRead(ForLet(None), _44),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_3),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _19,
            _56 = AddWithOverflow(_55, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:307:39: 307:44 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", move _55, const 1_usize) -> [success: bb36, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = move (_56.0: usize),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:307:29: 307:45 (#0),
                    scope: scope[9],
                },
                kind: _52 = core::slice::<impl [u8]>::get::<usize>(move _53, move _54) -> [return: bb37, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageLive(_57),
            _57 = {closure@data-url/src/lib.rs:307:55: 307:59},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:307:29: 307:85 (#0),
                    scope: scope[9],
                },
                kind: _51 = core::option::Option::<&u8>::and_then::<u32, {closure@data-url/src/lib.rs:307:55: 307:59}>(move _52, move _57) -> [return: bb38, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_52),
            FakeRead(ForLet(None), _51),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _51,
            StorageLive(_60),
            _60 = _44,
            _58 = (move _59, move _60),
            StorageDead(_60),
            StorageDead(_59),
            PlaceMention(_58),
            _62 = discriminant((_58.0: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:308:28: 308:46 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _62) -> [1: bb39, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = discriminant((_58.1: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:308:28: 308:46 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _61) -> [1: bb40, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:308:28: 308:46 (#0),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = (((_58.0: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_64),
            _64 = (((_58.1: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = _63,
            _67 = move _68 as u8 (IntToInt),
            StorageDead(_68),
            _69 = MulWithOverflow(_67, const 16_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:310:40: 310:54 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_69.1: bool), "attempt to compute `{} * {}`, which would overflow", move _67, const 16_u8) -> [success: bb42, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = move (_69.0: u8),
            StorageDead(_67),
            StorageLive(_70),
            StorageLive(_71),
            _71 = _64,
            _70 = move _71 as u8 (IntToInt),
            StorageDead(_71),
            _72 = AddWithOverflow(_66, _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:310:40: 310:64 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, move _70) -> [success: bb43, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _65 = move (_72.0: u8),
            StorageDead(_70),
            StorageDead(_66),
            FakeRead(ForLet(None), _65),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut _2,
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = _65,
            _81 = [move _82],
            StorageDead(_82),
            _80 = &_81,
            _79 = &(*_80),
            _78 = move _79 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_79),
            _77 = (move _78,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:25: 311:49 (#0),
                    scope: scope[12],
                },
                kind: _75 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _76, move _77) -> [return: bb44, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:25: 311:50 (#190),
                    scope: scope[12],
                },
                kind: _74 = <core::result::Result<(), E> as core::ops::Try>::branch(move _75) -> [return: bb45, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            PlaceMention(_74),
            _83 = discriminant(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:25: 311:50 (#190),
                    scope: scope[12],
                },
                kind: switchInt(move _83) -> [0: bb48, 1: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:25: 311:50 (#190),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:49: 311:50 (#191),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_87),
            _87 = ((_74 as Continue).0: ()),
            _73 = _87,
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:50: 311:51 (#0),
                    scope: scope[12],
                },
                kind: drop(_74) -> [return: bb51, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_84),
            _84 = move ((_74 as Break).0: core::result::Result<core::convert::Infallible, E>),
            StorageLive(_86),
            _86 = move _84,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:25: 311:50 (#190),
                    scope: scope[14],
                },
                kind: _0 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, E> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, E>>>::from_residual(move _86) -> [return: bb50, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:49: 311:50 (#191),
                    scope: scope[12],
                },
                kind: drop(_84) -> [return: bb72, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_74),
            StorageDead(_73),
            StorageLive(_88),
            _88 = _19,
            _89 = AddWithOverflow(_88, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:312:39: 312:44 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_89.1: bool), "attempt to compute `{} + {}`, which would overflow", move _88, const 3_usize) -> [success: bb52, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_89.0: usize),
            StorageDead(_88),
            _13 = const (),
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:308:21: 316:22 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:308:21: 316:22 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_44),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:317:17: 317:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            StorageLive(_92),
            _92 = _19,
            _93 = AddWithOverflow(_92, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:320:42: 320:47 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _92, const 1_usize) -> [success: bb56, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = move (_93.0: usize),
            StorageDead(_92),
            FakeRead(ForLet(None), _91),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_1),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _91,
            _97 = core::ops::RangeFrom::<usize> { start: move _98 },
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:321:63: 321:81 (#0),
                    scope: scope[17],
                },
                kind: _95 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _96, move _97) -> [return: bb57, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
            _94 = &(*_95),
            FakeRead(ForLet(None), _94),
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &(*_94),
            _100 = FragmentIdentifier::<'_>(move _101),
            StorageDead(_101),
            _99 = core::option::Option::<FragmentIdentifier<'_>>::Some(move _100),
            StorageDead(_100),
            _0 = core::result::Result::<core::option::Option<FragmentIdentifier<'_>>, E>::Ok(move _99),
            StorageDead(_99),
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_103.0: usize),
            _13 = const (),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:326:40: 326:41 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:296:9: 328:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:292:5: 329:6 (#182),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_112),
            _110 = &(*_111),
            _109 = &(*_110),
            _108 = (move _109,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:5: 330:39 (#0),
                    scope: scope[2],
                },
                kind: _106 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _107, move _108) -> [return: bb62, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:5: 330:40 (#192),
                    scope: scope[2],
                },
                kind: _105 = <core::result::Result<(), E> as core::ops::Try>::branch(move _106) -> [return: bb63, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            PlaceMention(_105),
            _115 = discriminant(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:5: 330:40 (#192),
                    scope: scope[2],
                },
                kind: switchInt(move _115) -> [0: bb66, 1: bb65, otherwise: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:5: 330:40 (#192),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:39: 330:40 (#193),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb67, imaginary: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_119),
            _119 = ((_105 as Continue).0: ()),
            _104 = _119,
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:40: 330:41 (#0),
                    scope: scope[2],
                },
                kind: drop(_105) -> [return: bb69, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_116),
            _116 = move ((_105 as Break).0: core::result::Result<core::convert::Infallible, E>),
            StorageLive(_118),
            _118 = move _116,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:5: 330:40 (#192),
                    scope: scope[20],
                },
                kind: _0 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, E> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, E>>>::from_residual(move _118) -> [return: bb68, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:39: 330:40 (#193),
                    scope: scope[2],
                },
                kind: drop(_116) -> [return: bb70, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_105),
            StorageDead(_104),
            StorageLive(_120),
            _120 = core::option::Option::<FragmentIdentifier<'_>>::None,
            _0 = core::result::Result::<core::option::Option<FragmentIdentifier<'_>>, E>::Ok(move _120),
            StorageDead(_120),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:332:1: 332:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb78, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:40: 330:41 (#0),
                    scope: scope[2],
                },
                kind: drop(_105) -> [return: bb71, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_105),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:50: 311:51 (#0),
                    scope: scope[12],
                },
                kind: drop(_74) -> [return: bb73, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_74),
            StorageDead(_73),
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_51),
            StorageDead(_44),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:53: 300:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb75, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:332:1: 332:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb78, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:332:2: 332:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:39: 330:40 (#192),
                    scope: scope[20],
                },
                kind: drop(_118) -> [return: bb80, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:39: 330:40 (#193),
                    scope: scope[2],
                },
                kind: drop(_116) -> [return: bb81, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:40: 330:41 (#0),
                    scope: scope[2],
                },
                kind: drop(_105) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:330:39: 330:40 (#192),
                    scope: scope[2],
                },
                kind: drop(_106) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:49: 311:50 (#190),
                    scope: scope[14],
                },
                kind: drop(_86) -> [return: bb84, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:49: 311:50 (#191),
                    scope: scope[12],
                },
                kind: drop(_84) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:50: 311:51 (#0),
                    scope: scope[12],
                },
                kind: drop(_74) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:311:49: 311:50 (#190),
                    scope: scope[12],
                },
                kind: drop(_75) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:52: 300:53 (#188),
                    scope: scope[6],
                },
                kind: drop(_41) -> [return: bb88, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:52: 300:53 (#189),
                    scope: scope[4],
                },
                kind: drop(_39) -> [return: bb89, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:53: 300:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:300:52: 300:53 (#188),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:332:1: 332:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb92, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:283:1: 332:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<FragmentIdentifier<'{erased}>>, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:286:6: 286:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:284:33: 284:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:284:5: 284:31 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:284:5: 284:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:284:5: 284:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:285:22: 285:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:285:5: 285:20 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:285:5: 285:20 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:285:5: 285:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:290:17: 290:54 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:290:9: 290:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:290:9: 290:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:290:17: 290:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:291:27: 291:28 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:291:9: 291:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:291:9: 291:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:5: 329:6 (#182),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                data-url/src/lib.rs:292:23: 292:47 (#183),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:292:23: 292:47 (#183),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:283:1: 332:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:23: 292:47 (#183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:5: 329:6 (#182),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:5: 329:6 (#182),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                data-url/src/lib.rs:292:23: 292:47 (#183),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:292:9: 292:19 (#184),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:10: 292:11 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                data-url/src/lib.rs:292:23: 292:47 (#183),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:292:9: 292:19 (#184),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:292:14: 292:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:296:9: 328:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#53),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:299:13: 302:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:299:16: 299:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:299:16: 299:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:299:20: 299:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, E/#1>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:53 (#188),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8],),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:29: 300:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:29: 300:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:35: 300:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:30: 300:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:36: 300:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:36: 300:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:49: 300:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:52: 300:53 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                data-url/src/lib.rs:300:17: 300:53 (#188),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:300:52: 300:53 (#189),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:52: 300:53 (#189),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:52: 300:53 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:52: 300:53 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                data-url/src/lib.rs:300:17: 300:53 (#188),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:300:17: 300:53 (#188),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:300:17: 300:53 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:301:31: 301:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:306:29: 306:85 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:306:25: 306:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:25: 306:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:29: 306:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:29: 306:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:39: 306:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:39: 306:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:39: 306:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:118 ~ data_url[664f]::decode_without_base64::{closure#0}),
            [
                F/#0,
                E/#1,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> core::option::Option<u32>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:306:55: 306:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:307:29: 307:85 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:307:25: 307:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:25: 307:26 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:29: 307:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:29: 307:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:39: 307:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:39: 307:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:39: 307:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:119 ~ data_url[664f]::decode_without_base64::{closure#1}),
            [
                F/#0,
                E/#1,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> core::option::Option<u32>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:307:55: 307:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:308:21: 316:22 (#0),
                },
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:49: 308:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:308:21: 316:22 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:50: 308:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:308:21: 316:22 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:53: 308:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:38: 308:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:29: 308:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                data-url/src/lib.rs:308:49: 308:55 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:308:28: 308:46 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:34: 308:35 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                data-url/src/lib.rs:308:49: 308:55 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:308:28: 308:46 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:308:43: 308:44 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:310:40: 310:64 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:310:29: 310:37 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:29: 310:37 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:40: 310:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:40: 310:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:40: 310:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:40: 310:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:57: 310:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:57: 310:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:310:40: 310:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, E/#1>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:50 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8],),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:37: 311:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:37: 311:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:37: 311:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:38: 311:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:39: 311:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:49: 311:50 (#191),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                data-url/src/lib.rs:311:25: 311:50 (#190),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:311:49: 311:50 (#191),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:49: 311:50 (#191),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:49: 311:50 (#191),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:49: 311:50 (#191),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                data-url/src/lib.rs:311:25: 311:50 (#190),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:311:25: 311:50 (#190),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:311:25: 311:50 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:312:39: 312:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:312:39: 312:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:304:13: 327:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:319:25: 323:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:320:42: 320:47 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:320:25: 320:39 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:320:25: 320:39 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:320:42: 320:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:320:42: 320:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:321:36: 321:81 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:321:25: 321:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:321:25: 321:33 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:321:63: 321:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:321:37: 321:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:321:64: 321:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:321:64: 321:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:322:31: 322:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: FragmentIdentifier<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:322:36: 322:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:322:55: 322:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:304:13: 327:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:326:36: 326:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:326:36: 326:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, E/#1>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:40 (#192),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8],),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:17: 330:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:17: 330:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:23: 330:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:18: 330:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:24: 330:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:24: 330:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:39: 330:40 (#193),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                data-url/src/lib.rs:330:5: 330:40 (#192),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:330:39: 330:40 (#193),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:39: 330:40 (#193),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:39: 330:40 (#193),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:39: 330:40 (#193),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                data-url/src/lib.rs:330:5: 330:40 (#192),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:330:5: 330:40 (#192),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:330:5: 330:40 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:331:8: 331:12 (#0),
            scope: scope[0],
        },
    },
]