[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:137:5: 137:22 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [(std::string::String, std::string::String)]>::iter(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = {closure@data-url/src/mime.rs:137:27: 137:35} { name: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::slice::Iter<'_, (std::string::String, std::string::String)> as core::iter::Iterator>::any::<{closure@data-url/src/mime.rs:137:27: 137:35}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:138:2: 138:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:136:1: 138:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:136:61: 136:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:136:25: 136:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:136:13: 136:23 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:136:13: 136:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:136:13: 136:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:136:52: 136:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:136:46: 136:50 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:136:46: 136:50 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:136:46: 136:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:137:5: 137:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:137:5: 137:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                },
            ),
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:137:5: 137:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:69 ~ data_url[664f]::mime::contains::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (std::string::String, std::string::String),)) -> bool, bound_vars: [] },
                (&'{erased} &'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:137:27: 137:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:137:5: 137:46 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:137:27: 137:45 (#0),
            scope: scope[0],
        },
    },
]