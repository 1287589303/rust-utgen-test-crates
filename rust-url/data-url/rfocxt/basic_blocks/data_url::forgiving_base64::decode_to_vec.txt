[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:72:17: 72:27 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<u8>::new() -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _2,
            _5 = {closure@data-url/src/forgiving_base64.rs:74:40: 74:47} { v: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:74:27: 77:11 (#0),
                    scope: scope[1],
                },
                kind: _4 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::new(move _5) -> [return: bb2, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _4,
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:9: 78:28 (#0),
                    scope: scope[2],
                },
                kind: _9 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::feed(move _10, move _11) -> [return: bb3, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                    scope: scope[2],
                },
                kind: _8 = <core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _9) -> [return: bb4, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _12 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_8 as Continue).0: ()),
            _7 = _16,
            StorageDead(_16),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:9: 79:25 (#0),
                    scope: scope[2],
                },
                kind: _19 = forgiving_base64::Decoder::<{closure@data-url/src/forgiving_base64.rs:74:40: 74:47}, forgiving_base64::Impossible>::finish(move _20) -> [return: bb10, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_8 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>),
            StorageLive(_15),
            _15 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<std::vec::Vec<u8>, forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _15) -> [return: bb9, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                    scope: scope[2],
                },
                kind: _18 = <core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _19) -> [return: bb11, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _21 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                    scope: scope[2],
                },
                kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_18 as Continue).0: ()),
            _17 = _25,
            StorageDead(_25),
            StorageDead(_18),
            StorageDead(_17),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_26),
            _26 = move _2,
            _0 = core::result::Result::<std::vec::Vec<u8>, forgiving_base64::InvalidBase64>::Ok(move _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:81:9: 81:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb17, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_18 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<std::vec::Vec<u8>, forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _24) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:1: 82:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:2: 82:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:1: 82:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:2: 82:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:2: 82:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:82:1: 82:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:71:1: 82:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::vec::Vec<u8, std::alloc::Global>, forgiving_base64::InvalidBase64>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:71:39: 71:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/forgiving_base64.rs:71:29: 71:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:71:22: 71:27 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:71:22: 71:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:71:22: 71:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:72:17: 72:27 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:72:9: 72:14 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:72:9: 72:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:73:5: 80:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:74:27: 77:11 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:74:13: 74:24 (#0),
                    },
                ),
            ),
        ),
        ty: forgiving_base64::Decoder<Closure(DefId(0:29 ~ data_url[664f]::forgiving_base64::decode_to_vec::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::Impossible>, bound_vars: [Region(BrAnon)] }, (&'{erased} mut std::vec::Vec<u8, std::alloc::Global>,)]), forgiving_base64::Impossible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:74:13: 74:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:29 ~ data_url[664f]::forgiving_base64::decode_to_vec::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::Impossible>, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut std::vec::Vec<u8, std::alloc::Global>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:74:40: 77:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:74:40: 77:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:9: 78:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut forgiving_base64::Decoder<Closure(DefId(0:29 ~ data_url[664f]::forgiving_base64::decode_to_vec::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::Impossible>, bound_vars: [Region(BrAnon)] }, (&'{erased} mut std::vec::Vec<u8, std::alloc::Global>,)]), forgiving_base64::Impossible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:9: 78:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:22: 78:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:28: 78:29 (#56),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#55),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:78:9: 78:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:9: 79:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::Decoder<Closure(DefId(0:29 ~ data_url[664f]::forgiving_base64::decode_to_vec::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::Impossible>, bound_vars: [Region(BrAnon)] }, (&'{erased} mut std::vec::Vec<u8, std::alloc::Global>,)]), forgiving_base64::Impossible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:9: 79:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:25: 79:26 (#58),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#57),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:79:9: 79:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:81:8: 81:9 (#0),
            scope: scope[0],
        },
    },
]