[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:115:24: 115:34 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<u8>::new() -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _2,
            _7 = {closure@data-url/src/lib.rs:116:36: 116:43} { body: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:116:24: 119:11 (#0),
                    scope: scope[1],
                },
                kind: _5 = DataUrl::<'_>::decode::<{closure@data-url/src/lib.rs:116:36: 116:43}, forgiving_base64::Impossible>(move _6, move _7) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:116:24: 119:12 (#120),
                    scope: scope[1],
                },
                kind: _4 = <core::result::Result<core::option::Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<forgiving_base64::Impossible>> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:116:24: 119:12 (#120),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:116:24: 119:12 (#120),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:119:11: 119:12 (#121),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_4 as Continue).0: core::option::Option<FragmentIdentifier<'_>>),
            _3 = move _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_14),
            StorageLive(_15),
            _15 = move _2,
            StorageLive(_16),
            _16 = move _3,
            _14 = (move _15, move _16),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:120:27: 120:28 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>),
            StorageLive(_12),
            _12 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:116:24: 119:12 (#120),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(std::vec::Vec<u8>, core::option::Option<FragmentIdentifier<'_>>), forgiving_base64::InvalidBase64> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>>>::from_residual(move _12) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _0 = core::result::Result::<(std::vec::Vec<u8>, core::option::Option<FragmentIdentifier<'_>>), forgiving_base64::InvalidBase64>::Ok(move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:120:28: 120:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:6: 121:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:6: 121:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:6: 121:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:120:28: 120:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:121:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:112:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(std::vec::Vec<u8, std::alloc::Global>, core::option::Option<FragmentIdentifier<'{erased}>>), forgiving_base64::InvalidBase64>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:114:10: 114:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} DataUrl<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:113:9: 113:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:115:24: 115:34 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:115:13: 115:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:115:13: 115:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:116:24: 119:12 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:116:13: 116:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:13: 116:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>, core::option::Option<FragmentIdentifier<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:24: 119:12 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<FragmentIdentifier<'{erased}>>, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:24: 119:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} DataUrl<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:24: 116:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:95 ~ data_url[664f]::{impl#2}::decode_to_vec::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 [u8],)) -> core::result::Result<(), forgiving_base64::Impossible>, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut std::vec::Vec<u8, std::alloc::Global>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:36: 119:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:36: 119:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:119:11: 119:12 (#121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                data-url/src/lib.rs:116:24: 119:12 (#120),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:119:11: 119:12 (#121),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:119:11: 119:12 (#121),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:119:11: 119:12 (#121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<forgiving_base64::Impossible>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:119:11: 119:12 (#121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                data-url/src/lib.rs:116:24: 119:12 (#120),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:116:24: 119:12 (#120),
                    },
                ),
            ),
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:116:24: 119:12 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (std::vec::Vec<u8, std::alloc::Global>, core::option::Option<FragmentIdentifier<'{erased}>>),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:120:12: 120:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:120:9: 120:29 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:120:13: 120:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:120:9: 120:29 (#0),
                },
            ),
        ),
        ty: core::option::Option<FragmentIdentifier<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:120:19: 120:27 (#0),
            scope: scope[0],
        },
    },
]