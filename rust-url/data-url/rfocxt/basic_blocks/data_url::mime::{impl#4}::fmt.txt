[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).0: std::string::String),
            _9 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:21: 150:32 (#0),
                    scope: scope[0],
                },
                kind: _8 = <std::string::String as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:9: 150:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::fmt::Formatter::<'_>::write_str(move _6, move _7) -> [return: bb2, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:9: 150:34 (#85),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _11 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:9: 150:34 (#85),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:9: 150:34 (#85),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:33: 150:34 (#86),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_4 as Continue).0: ()),
            _3 = _15,
            StorageDead(_15),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_2),
            StorageLive(_20),
            StorageLive(_21),
            _21 = const "/",
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:9: 151:25 (#0),
                    scope: scope[0],
                },
                kind: _18 = core::fmt::Formatter::<'_>::write_str(move _19, move _20) -> [return: bb9, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_4 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_14),
            _14 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:150:9: 150:34 (#85),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _14) -> [return: bb8, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:9: 151:26 (#87),
                    scope: scope[0],
                },
                kind: _17 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _18) -> [return: bb10, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _22 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:9: 151:26 (#87),
                    scope: scope[0],
                },
                kind: switchInt(move _22) -> [0: bb13, 1: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:9: 151:26 (#87),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:25: 151:26 (#88),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = ((_17 as Continue).0: ()),
            _16 = _26,
            StorageDead(_26),
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut (*_2),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &((*_1).1: std::string::String),
            _33 = &(*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:21: 152:34 (#0),
                    scope: scope[0],
                },
                kind: _32 = <std::string::String as core::ops::Deref>::deref(move _33) -> [return: bb16, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = ((_17 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_25),
            _25 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:151:9: 151:26 (#87),
                    scope: scope[6],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _25) -> [return: bb15, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = &(*_32),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:9: 152:35 (#0),
                    scope: scope[0],
                },
                kind: _29 = core::fmt::Formatter::<'_>::write_str(move _30, move _31) -> [return: bb17, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:9: 152:36 (#89),
                    scope: scope[0],
                },
                kind: _28 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _29) -> [return: bb18, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            _35 = discriminant(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:9: 152:36 (#89),
                    scope: scope[0],
                },
                kind: switchInt(move _35) -> [0: bb21, 1: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:9: 152:36 (#89),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:35: 152:36 (#90),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = ((_28 as Continue).0: ()),
            _27 = _39,
            StorageDead(_39),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &((*_1).2: std::vec::Vec<(std::string::String, std::string::String)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:30: 153:46 (#92),
                    scope: scope[0],
                },
                kind: _41 = <&std::vec::Vec<(std::string::String, std::string::String)> as core::iter::IntoIterator>::into_iter(move _42) -> [return: bb24, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = ((_28 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_38),
            _38 = _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:152:9: 152:36 (#89),
                    scope: scope[10],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _38) -> [return: bb23, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            PlaceMention(_41),
            StorageLive(_43),
            _43 = move _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:9: 169:10 (#91),
                    scope: scope[13],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:9: 169:10 (#91),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb26, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut _43,
            _47 = &mut (*_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:30: 153:46 (#92),
                    scope: scope[13],
                },
                kind: _46 = <core::slice::Iter<'_, (std::string::String, std::string::String)> as core::iter::Iterator>::next(move _47) -> [return: bb27, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _49 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:30: 153:46 (#92),
                    scope: scope[13],
                },
                kind: switchInt(move _49) -> [0: bb29, 1: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:30: 153:46 (#92),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:9: 169:10 (#91),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = &((*((_46 as Some).0: &(std::string::String, std::string::String))).0: std::string::String),
            StorageLive(_52),
            _52 = &((*((_46 as Some).0: &(std::string::String, std::string::String))).1: std::string::String),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &mut (*_2),
            StorageLive(_57),
            StorageLive(_58),
            _58 = const ";",
            _57 = &(*_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:13: 154:29 (#0),
                    scope: scope[14],
                },
                kind: _55 = core::fmt::Formatter::<'_>::write_str(move _56, move _57) -> [return: bb32, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = const (),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_163),
            _163 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _163),
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:171:6: 171:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:13: 154:30 (#94),
                    scope: scope[14],
                },
                kind: _54 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _55) -> [return: bb33, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            PlaceMention(_54),
            _59 = discriminant(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:13: 154:30 (#94),
                    scope: scope[14],
                },
                kind: switchInt(move _59) -> [0: bb36, 1: bb35, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:13: 154:30 (#94),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:29: 154:30 (#95),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = ((_54 as Continue).0: ()),
            _53 = _63,
            StorageDead(_63),
            StorageDead(_58),
            StorageDead(_54),
            StorageDead(_53),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &mut (*_2),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &(*_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:25: 155:29 (#0),
                    scope: scope[14],
                },
                kind: _69 = <std::string::String as core::ops::Deref>::deref(move _70) -> [return: bb39, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_60),
            _60 = ((_54 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_62),
            _62 = _60,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:154:13: 154:30 (#94),
                    scope: scope[16],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _62) -> [return: bb38, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = &(*_69),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:13: 155:30 (#0),
                    scope: scope[14],
                },
                kind: _66 = core::fmt::Formatter::<'_>::write_str(move _67, move _68) -> [return: bb40, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:13: 155:31 (#96),
                    scope: scope[14],
                },
                kind: _65 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _66) -> [return: bb41, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            PlaceMention(_65),
            _71 = discriminant(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:13: 155:31 (#96),
                    scope: scope[14],
                },
                kind: switchInt(move _71) -> [0: bb44, 1: bb43, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:13: 155:31 (#96),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:30: 155:31 (#97),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _75 = ((_65 as Continue).0: ()),
            _64 = _75,
            StorageDead(_75),
            StorageDead(_69),
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = &mut (*_2),
            StorageLive(_80),
            StorageLive(_81),
            _81 = const "=",
            _80 = &(*_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:13: 156:29 (#0),
                    scope: scope[14],
                },
                kind: _78 = core::fmt::Formatter::<'_>::write_str(move _79, move _80) -> [return: bb47, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = ((_65 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_74),
            _74 = _72,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:155:13: 155:31 (#96),
                    scope: scope[20],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _74) -> [return: bb46, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_69),
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:13: 156:30 (#98),
                    scope: scope[14],
                },
                kind: _77 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _78) -> [return: bb48, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            PlaceMention(_77),
            _82 = discriminant(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:13: 156:30 (#98),
                    scope: scope[14],
                },
                kind: switchInt(move _82) -> [0: bb51, 1: bb50, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:13: 156:30 (#98),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:29: 156:30 (#99),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_86),
            _86 = ((_77 as Continue).0: ()),
            _76 = _86,
            StorageDead(_86),
            StorageDead(_81),
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &(*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:44: 157:49 (#0),
                    scope: scope[14],
                },
                kind: _89 = <std::string::String as core::ops::Deref>::deref(move _90) -> [return: bb54, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = ((_77 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_85),
            _85 = _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:156:13: 156:30 (#98),
                    scope: scope[24],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _85) -> [return: bb53, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_83),
            StorageDead(_81),
            StorageDead(_77),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _88 = &(*_89),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:16: 157:50 (#0),
                    scope: scope[14],
                },
                kind: _87 = mime::only_http_token_code_points(move _88) -> [return: bb55, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:16: 157:50 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _87) -> [0: bb68, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &(*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:55: 157:71 (#0),
                    scope: scope[14],
                },
                kind: _91 = std::string::String::is_empty(move _92) -> [return: bb57, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:55: 157:71 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _91) -> [0: bb59, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:72: 159:14 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &mut (*_2),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &(*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:29: 158:34 (#0),
                    scope: scope[14],
                },
                kind: _97 = <std::string::String as core::ops::Deref>::deref(move _98) -> [return: bb60, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = &(*_97),
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:17: 158:35 (#0),
                    scope: scope[14],
                },
                kind: _94 = core::fmt::Formatter::<'_>::write_str(move _95, move _96) -> [return: bb61, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:17: 158:36 (#101),
                    scope: scope[14],
                },
                kind: _93 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _94) -> [return: bb62, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            PlaceMention(_93),
            _99 = discriminant(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:17: 158:36 (#101),
                    scope: scope[14],
                },
                kind: switchInt(move _99) -> [0: bb65, 1: bb64, otherwise: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:17: 158:36 (#101),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:35: 158:36 (#102),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb66, imaginary: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            _103 = ((_93 as Continue).0: ()),
            _45 = _103,
            StorageDead(_103),
            StorageDead(_97),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = ((_93 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_102),
            _102 = _100,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:158:17: 158:36 (#101),
                    scope: scope[28],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _102) -> [return: bb67, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_100),
            StorageDead(_97),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &mut (*_2),
            StorageLive(_108),
            StorageLive(_109),
            _109 = const "\"",
            _108 = &(*_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:17: 160:34 (#0),
                    scope: scope[14],
                },
                kind: _106 = core::fmt::Formatter::<'_>::write_str(move _107, move _108) -> [return: bb70, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:17: 160:35 (#103),
                    scope: scope[14],
                },
                kind: _105 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _106) -> [return: bb71, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            PlaceMention(_105),
            _110 = discriminant(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:17: 160:35 (#103),
                    scope: scope[14],
                },
                kind: switchInt(move _110) -> [0: bb74, 1: bb73, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:17: 160:35 (#103),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:34: 160:35 (#104),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb75, imaginary: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_114),
            _114 = ((_105 as Continue).0: ()),
            _104 = _114,
            StorageDead(_114),
            StorageDead(_109),
            StorageDead(_105),
            StorageDead(_104),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &(*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#0),
                    scope: scope[14],
                },
                kind: _119 = <std::string::String as core::ops::Deref>::deref(move _120) -> [return: bb77, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_111),
            _111 = ((_105 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_113),
            _113 = _111,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:160:17: 160:35 (#103),
                    scope: scope[32],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _113) -> [return: bb76, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_111),
            StorageDead(_109),
            StorageDead(_105),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _118 = &(*_119),
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#0),
                    scope: scope[14],
                },
                kind: _117 = core::str::<impl str>::chars(move _118) -> [return: bb78, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#106),
                    scope: scope[14],
                },
                kind: _116 = <core::str::Chars<'_> as core::iter::IntoIterator>::into_iter(move _117) -> [return: bb79, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            PlaceMention(_116),
            StorageLive(_121),
            _121 = move _116,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:17: 166:18 (#105),
                    scope: scope[35],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:17: 166:18 (#105),
                    scope: scope[35],
                },
                kind: falseUnwind -> [real: bb81, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_122),
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            _125 = &mut _121,
            _124 = &mut (*_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#106),
                    scope: scope[35],
                },
                kind: _123 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _124) -> [return: bb82, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            PlaceMention(_123),
            _126 = discriminant(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#106),
                    scope: scope[35],
                },
                kind: switchInt(move _126) -> [0: bb84, 1: bb85, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:26: 161:39 (#106),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:17: 166:18 (#105),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb86, imaginary: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_128),
            _128 = ((_123 as Some).0: char),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            _131 = _128,
            _130 = Eq(move _131, const '"'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:24: 162:32 (#0),
                    scope: scope[36],
                },
                kind: switchInt(move _130) -> [0: bb88, otherwise: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _115 = const (),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_121),
            StorageDead(_119),
            StorageDead(_116),
            StorageDead(_115),
            StorageLive(_153),
            StorageLive(_154),
            StorageLive(_155),
            _155 = &mut (*_2),
            StorageLive(_156),
            StorageLive(_157),
            _157 = const "\"",
            _156 = &(*_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:17: 167:34 (#0),
                    scope: scope[14],
                },
                kind: _154 = core::fmt::Formatter::<'_>::write_str(move _155, move _156) -> [return: bb107, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:46: 164:22 (#0),
                    scope: scope[36],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            StorageLive(_132),
            StorageLive(_133),
            _133 = _128,
            _132 = Eq(move _133, const '\\'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:36: 162:45 (#0),
                    scope: scope[36],
                },
                kind: switchInt(move _132) -> [0: bb98, otherwise: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:46: 164:22 (#0),
                    scope: scope[36],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = &mut (*_2),
            StorageLive(_137),
            StorageLive(_138),
            _138 = const "\\",
            _137 = &(*_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:25: 163:42 (#0),
                    scope: scope[36],
                },
                kind: _135 = core::fmt::Formatter::<'_>::write_str(move _136, move _137) -> [return: bb91, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:25: 163:43 (#109),
                    scope: scope[36],
                },
                kind: _134 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _135) -> [return: bb92, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            PlaceMention(_134),
            _139 = discriminant(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:25: 163:43 (#109),
                    scope: scope[36],
                },
                kind: switchInt(move _139) -> [0: bb95, 1: bb94, otherwise: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:25: 163:43 (#109),
                    scope: scope[36],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:42: 163:43 (#110),
                    scope: scope[36],
                },
                kind: falseEdge -> [real: bb96, imaginary: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_143),
            _143 = ((_134 as Continue).0: ()),
            _129 = _143,
            StorageDead(_143),
            StorageDead(_138),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:21: 164:22 (#0),
                    scope: scope[36],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_140),
            _140 = ((_134 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_142),
            _142 = _140,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:163:25: 163:43 (#109),
                    scope: scope[38],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _142) -> [return: bb97, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_140),
            StorageDead(_138),
            StorageDead(_134),
            StorageDead(_132),
            StorageDead(_130),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[36],
                },
                kind: goto -> bb115,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            _129 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:162:21: 164:22 (#0),
                    scope: scope[36],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageDead(_130),
            StorageDead(_129),
            StorageLive(_144),
            StorageLive(_145),
            StorageLive(_146),
            _146 = &mut (*_2),
            StorageLive(_147),
            _147 = _128,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:21: 165:36 (#0),
                    scope: scope[36],
                },
                kind: _145 = <core::fmt::Formatter<'_> as core::fmt::Write>::write_char(move _146, move _147) -> [return: bb100, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:21: 165:37 (#111),
                    scope: scope[36],
                },
                kind: _144 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _145) -> [return: bb101, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            PlaceMention(_144),
            _148 = discriminant(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:21: 165:37 (#111),
                    scope: scope[36],
                },
                kind: switchInt(move _148) -> [0: bb104, 1: bb103, otherwise: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:21: 165:37 (#111),
                    scope: scope[36],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:36: 165:37 (#112),
                    scope: scope[36],
                },
                kind: falseEdge -> [real: bb105, imaginary: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_152),
            _152 = ((_144 as Continue).0: ()),
            _122 = _152,
            StorageDead(_152),
            StorageDead(_144),
            StorageDead(_128),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_122),
            _44 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:161:17: 166:18 (#105),
                    scope: scope[35],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_149),
            _149 = ((_144 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_151),
            _151 = _149,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:165:21: 165:37 (#111),
                    scope: scope[42],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _151) -> [return: bb106, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
            StorageDead(_149),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb115,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:17: 167:35 (#113),
                    scope: scope[14],
                },
                kind: _153 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _154) -> [return: bb108, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
            PlaceMention(_153),
            _158 = discriminant(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:17: 167:35 (#113),
                    scope: scope[14],
                },
                kind: switchInt(move _158) -> [0: bb111, 1: bb110, otherwise: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:17: 167:35 (#113),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:34: 167:35 (#114),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb112, imaginary: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_162),
            _162 = ((_153 as Continue).0: ()),
            _45 = _162,
            StorageDead(_162),
            StorageDead(_157),
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_159),
            _159 = ((_153 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_161),
            _161 = _159,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:167:17: 167:35 (#113),
                    scope: scope[46],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _161) -> [return: bb113, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_159),
            StorageDead(_157),
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_87),
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            _44 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:153:9: 169:10 (#91),
                    scope: scope[13],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_121),
            StorageDead(_119),
            StorageDead(_116),
            StorageDead(_115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:171:6: 171:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:149:5: 171:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:149:50: 149:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:149:12: 149:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:149:22: 149:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:149:19: 149:20 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:149:19: 149:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:149:19: 149:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:9: 150:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:9: 150:34 (#85),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:9: 150:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:9: 150:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:21: 150:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:21: 150:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:21: 150:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:21: 150:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:33: 150:34 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                data-url/src/mime.rs:150:9: 150:34 (#85),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:150:33: 150:34 (#86),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:33: 150:34 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:33: 150:34 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:33: 150:34 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                data-url/src/mime.rs:150:9: 150:34 (#85),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:150:9: 150:34 (#85),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:150:9: 150:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:9: 151:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:9: 151:26 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:9: 151:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:9: 151:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:21: 151:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:21: 151:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:25: 151:26 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                data-url/src/mime.rs:151:9: 151:26 (#87),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:151:25: 151:26 (#88),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:25: 151:26 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:25: 151:26 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:25: 151:26 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                data-url/src/mime.rs:151:9: 151:26 (#87),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:151:9: 151:26 (#87),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:151:9: 151:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:9: 152:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:9: 152:36 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:9: 152:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:9: 152:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:21: 152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:21: 152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:21: 152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:21: 152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:35: 152:36 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                data-url/src/mime.rs:152:9: 152:36 (#89),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:152:35: 152:36 (#90),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:35: 152:36 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:35: 152:36 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:35: 152:36 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                data-url/src/mime.rs:152:9: 152:36 (#89),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:152:9: 152:36 (#89),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:152:9: 152:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:9: 169:10 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(std::string::String, std::string::String), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                data-url/src/mime.rs:153:30: 153:46 (#92),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:153:30: 153:46 (#92),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:149:5: 171:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, (std::string::String, std::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:30: 153:46 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:9: 169:10 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:9: 169:10 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                data-url/src/mime.rs:153:30: 153:46 (#92),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:153:13: 153:26 (#93),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:14: 153:18 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                data-url/src/mime.rs:153:30: 153:46 (#92),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:153:13: 153:26 (#93),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:153:20: 153:25 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:13: 154:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:13: 154:30 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:13: 154:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:13: 154:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:25: 154:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:25: 154:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:29: 154:30 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _54,
                                ),
                                data-url/src/mime.rs:154:13: 154:30 (#94),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:154:29: 154:30 (#95),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:29: 154:30 (#95),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:29: 154:30 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:29: 154:30 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _54,
                                ),
                                data-url/src/mime.rs:154:13: 154:30 (#94),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:154:13: 154:30 (#94),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:154:13: 154:30 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:13: 155:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:13: 155:31 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:13: 155:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:13: 155:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:25: 155:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:25: 155:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:25: 155:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:30: 155:31 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                data-url/src/mime.rs:155:13: 155:31 (#96),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:155:30: 155:31 (#97),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:30: 155:31 (#97),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:30: 155:31 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:30: 155:31 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                data-url/src/mime.rs:155:13: 155:31 (#96),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:155:13: 155:31 (#96),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:155:13: 155:31 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:13: 156:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:13: 156:30 (#98),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:13: 156:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:13: 156:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:25: 156:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:25: 156:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:29: 156:30 (#99),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                data-url/src/mime.rs:156:13: 156:30 (#98),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:156:29: 156:30 (#99),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:29: 156:30 (#99),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:29: 156:30 (#99),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:29: 156:30 (#99),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                data-url/src/mime.rs:156:13: 156:30 (#98),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:156:13: 156:30 (#98),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:156:13: 156:30 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:16: 157:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:44: 157:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:44: 157:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:44: 157:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:55: 157:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:157:13: 168:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:157:55: 157:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:17: 158:36 (#101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:17: 158:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:17: 158:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:29: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:29: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:29: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:35: 158:36 (#102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                data-url/src/mime.rs:158:17: 158:36 (#101),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:158:35: 158:36 (#102),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:35: 158:36 (#102),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:35: 158:36 (#102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:158:17: 158:36 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:35: 158:36 (#102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                data-url/src/mime.rs:158:17: 158:36 (#101),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:158:17: 158:36 (#101),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:158:17: 158:36 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:17: 160:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:17: 160:35 (#103),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:17: 160:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:17: 160:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:29: 160:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:29: 160:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:34: 160:35 (#104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                data-url/src/mime.rs:160:17: 160:35 (#103),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:160:34: 160:35 (#104),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:34: 160:35 (#104),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:34: 160:35 (#104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:34: 160:35 (#104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                data-url/src/mime.rs:160:17: 160:35 (#103),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:160:17: 160:35 (#103),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:160:17: 160:35 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:17: 166:18 (#105),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _116,
                                ),
                                data-url/src/mime.rs:161:26: 161:39 (#106),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:161:26: 161:39 (#106),
                    },
                ),
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:26: 161:39 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:17: 166:18 (#105),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:17: 166:18 (#105),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _123,
                                ),
                                data-url/src/mime.rs:161:26: 161:39 (#106),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:161:21: 161:22 (#107),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:161:21: 161:22 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:162:21: 164:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:162:24: 162:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:162:24: 162:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:162:36: 162:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:162:36: 162:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:25: 163:43 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:25: 163:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:25: 163:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:37: 163:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:37: 163:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:42: 163:43 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _134,
                                ),
                                data-url/src/mime.rs:163:25: 163:43 (#109),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:163:42: 163:43 (#110),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:42: 163:43 (#110),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:42: 163:43 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:163:25: 163:43 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:42: 163:43 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _134,
                                ),
                                data-url/src/mime.rs:163:25: 163:43 (#109),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:163:25: 163:43 (#109),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:163:25: 163:43 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:21: 165:37 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:21: 165:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:21: 165:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:34: 165:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:36: 165:37 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _144,
                                ),
                                data-url/src/mime.rs:165:21: 165:37 (#111),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:165:36: 165:37 (#112),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:36: 165:37 (#112),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:36: 165:37 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:165:21: 165:37 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:36: 165:37 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _144,
                                ),
                                data-url/src/mime.rs:165:21: 165:37 (#111),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:165:21: 165:37 (#111),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:165:21: 165:37 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:17: 167:35 (#113),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:17: 167:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:17: 167:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:29: 167:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:29: 167:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:34: 167:35 (#114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                data-url/src/mime.rs:167:17: 167:35 (#113),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:167:34: 167:35 (#114),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:34: 167:35 (#114),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:34: 167:35 (#114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:167:17: 167:35 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:34: 167:35 (#114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                data-url/src/mime.rs:167:17: 167:35 (#113),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:167:17: 167:35 (#113),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:167:17: 167:35 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:170:12: 170:14 (#0),
            scope: scope[0],
        },
    },
]