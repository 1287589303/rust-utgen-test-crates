[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:76:35: 76:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::<impl str>::split::<'_, char>(move _4, const ';') -> [return: bb1, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:5: 133:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:5: 133:6 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:29: 78:55 (#0),
                    scope: scope[2],
                },
                kind: _6 = <core::str::Split<'_, char> as core::iter::Iterator>::next(move _7) -> [return: bb4, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _8 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:15: 78:26 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _8) -> [1: bb5, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:15: 78:26 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = ((_6 as Some).0: &str),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:79:21: 79:62 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::str::<impl str>::trim_start_matches::<'_, fn(char) -> bool {mime::http_whitespace}>(move _11, mime::http_whitespace) -> [return: bb7, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:80:29: 80:47 (#0),
                    scope: scope[3],
                },
                kind: _14 = mime::split2(move _15, const '=') -> [return: bb8, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            StorageLive(_12),
            _12 = (_14.0: &str),
            StorageLive(_13),
            _13 = (_14.1: core::option::Option<&str>),
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:14: 84:29 (#0),
                    scope: scope[4],
                },
                kind: _17 = core::str::<impl str>::is_empty(move _18) -> [return: bb9, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:14: 84:29 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _17) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:13: 84:97 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:33: 84:66 (#0),
                    scope: scope[4],
                },
                kind: _19 = mime::only_http_token_code_points(move _20) -> [return: bb12, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:33: 84:66 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _19) -> [0: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:80: 84:90 (#0),
                    scope: scope[4],
                },
                kind: _23 = <std::vec::Vec<(std::string::String, std::string::String)> as core::ops::Deref>::deref(move _24) -> [return: bb16, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:13: 84:97 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &(*_23),
            StorageDead(_24),
            StorageLive(_25),
            _25 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:71: 84:97 (#0),
                    scope: scope[4],
                },
                kind: _21 = mime::contains(move _22, move _25) -> [return: bb17, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_22),
            _16 = Not(move _21),
            StorageDead(_23),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:84:13: 84:97 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            PlaceMention(_13),
            _26 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:85:16: 85:27 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _26) -> [1: bb19, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:85:16: 85:27 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = ((_13 as Some).0: &str),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:86:49: 86:72 (#0),
                    scope: scope[8],
                },
                kind: _29 = core::str::<impl str>::strip_prefix::<'_, char>(move _30, const '"') -> [return: bb21, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            PlaceMention(_29),
            _31 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:86:32: 86:46 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _31) -> [1: bb22, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:86:32: 86:46 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_29 as Some).0: &str),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:87:31: 87:45 (#0),
                    scope: scope[8],
                },
                kind: _34 = core::str::<impl str>::len(move _35) -> [return: bb24, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:87:31: 87:63 (#0),
                    scope: scope[8],
                },
                kind: _33 = core::num::<impl usize>::saturating_sub(move _34, const 1_usize) -> [return: bb25, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            FakeRead(ForLet(None), _33),
            StorageLive(_36),
            StorageLive(_37),
            _37 = _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:88:43: 88:73 (#0),
                    scope: scope[9],
                },
                kind: _36 = std::string::String::with_capacity(move _37) -> [return: bb26, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &(*_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:89:33: 89:49 (#0),
                    scope: scope[10],
                },
                kind: _38 = core::str::<impl str>::chars(move _39) -> [return: bb27, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            FakeRead(ForLet(None), _38),
            StorageLive(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:90:17: 116:18 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:90:17: 116:18 (#0),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb29, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:21: 107:22 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:21: 107:22 (#0),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb31, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            _43 = &mut _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:41: 91:53 (#0),
                    scope: scope[12],
                },
                kind: _42 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _43) -> [return: bb32, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _44 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:31: 91:38 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _44) -> [1: bb33, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:31: 91:38 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            _45 = ((_42 as Some).0: char),
            PlaceMention(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:92:25: 92:32 (#0),
                    scope: scope[12],
                },
                kind: switchInt(_45) -> [34: bb36, 92: bb37, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = &mut _36,
            StorageLive(_55),
            _55 = _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:105:34: 105:57 (#0),
                    scope: scope[12],
                },
                kind: _5 = std::string::String::push(move _54, move _55) -> [return: bb43, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:93:29: 93:32 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:94:29: 94:33 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = const (),
            StorageDead(_45),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = &mut _36,
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &mut _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:94:58: 94:70 (#0),
                    scope: scope[12],
                },
                kind: _49 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _50) -> [return: bb40, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut _3,
            StorageLive(_53),
            _53 = &mut _38,
            _51 = {closure@data-url/src/mime.rs:94:86: 94:88} { semicolon_separated: move _52, chars: move _53 },
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:94:58: 104:31 (#0),
                    scope: scope[12],
                },
                kind: _48 = core::option::Option::<char>::unwrap_or_else::<{closure@data-url/src/mime.rs:94:86: 94:88}>(move _49, move _51) -> [return: bb41, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:94:37: 104:32 (#0),
                    scope: scope[12],
                },
                kind: _5 = std::string::String::push(move _47, move _48) -> [return: bb42, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:104:31: 104:32 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:105:56: 105:57 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:91:21: 107:22 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _41 = const (),
            StorageDead(_57),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:108:42: 108:68 (#0),
                    scope: scope[13],
                },
                kind: _59 = <core::str::Split<'_, char> as core::iter::Iterator>::next(move _60) -> [return: bb46, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _61 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:108:28: 108:39 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _61) -> [1: bb47, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:108:28: 108:39 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = ((_59 as Some).0: &str),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &mut _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:111:25: 111:50 (#0),
                    scope: scope[13],
                },
                kind: _63 = std::string::String::push(move _64, const ';') -> [return: bb49, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &(*_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:112:33: 112:46 (#0),
                    scope: scope[13],
                },
                kind: _65 = core::str::<impl str>::chars(move _66) -> [return: bb50, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            _38 = move _65,
            _5 = const (),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:90:17: 116:18 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = const (),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_68),
            StorageLive(_69),
            _69 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:117:21: 117:31 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _69) -> [0: bb79, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            StorageLive(_71),
            _71 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:117:36: 117:54 (#0),
                    scope: scope[11],
                },
                kind: _70 = mime::valid_value(move _71) -> [return: bb54, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:117:36: 117:54 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _70) -> [0: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            _68 = const (),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            _28 = move _36,
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:121:13: 121:14 (#0),
                    scope: scope[9],
                },
                kind: drop(_36) -> [return: bb57, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:117:55: 119:18 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:86:25: 130:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            StorageLive(_74),
            _74 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:122:29: 122:68 (#0),
                    scope: scope[6],
                },
                kind: _73 = core::str::<impl str>::trim_end_matches::<'_, fn(char) -> bool {mime::http_whitespace}>(move _74, mime::http_whitespace) -> [return: bb59, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            FakeRead(ForLet(None), _73),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = &(*_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:123:20: 123:36 (#0),
                    scope: scope[14],
                },
                kind: _76 = core::str::<impl str>::is_empty(move _77) -> [return: bb60, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:123:20: 123:36 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _76) -> [0: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            _75 = const (),
            StorageDead(_76),
            StorageDead(_75),
            StorageLive(_79),
            StorageLive(_80),
            _80 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:126:21: 126:31 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _80) -> [0: bb77, otherwise: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            StorageLive(_82),
            _82 = &(*_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:126:36: 126:54 (#0),
                    scope: scope[14],
                },
                kind: _81 = mime::valid_value(move _82) -> [return: bb64, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:126:36: 126:54 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _81) -> [0: bb66, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            _79 = const (),
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_79),
            StorageLive(_84),
            _84 = &(*_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:129:17: 129:33 (#0),
                    scope: scope[14],
                },
                kind: _28 = <str as std::borrow::ToOwned>::to_owned(move _84) -> [return: bb67, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:126:55: 128:18 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:86:25: 130:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _28),
            StorageDead(_29),
            StorageLive(_85),
            _85 = &mut (*_2),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:30: 131:55 (#0),
                    scope: scope[7],
                },
                kind: _87 = std::str::<impl str>::to_ascii_lowercase(move _88) -> [return: bb69, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_89),
            _89 = move _28,
            _86 = (move _87, move _89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:62: 131:63 (#0),
                    scope: scope[7],
                },
                kind: drop(_89) -> [return: bb70, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:62: 131:63 (#0),
                    scope: scope[7],
                },
                kind: drop(_87) -> [return: bb71, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                    scope: scope[7],
                },
                kind: _5 = std::vec::Vec::<(std::string::String, std::string::String)>::push(move _85, move _86) -> [return: bb72, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:132:9: 132:10 (#0),
                    scope: scope[6],
                },
                kind: drop(_28) -> [return: bb73, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:85:9: 132:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:85:9: 132:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:78:5: 133:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _0 = const (),
            StorageDead(_91),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:134:2: 134:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:121:13: 121:14 (#0),
                    scope: scope[9],
                },
                kind: drop(_36) -> [return: bb80, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:62: 131:63 (#0),
                    scope: scope[7],
                },
                kind: drop(_87) -> [return: bb83, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:131:63: 131:64 (#0),
                    scope: scope[7],
                },
                kind: drop(_86) -> [return: bb84, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:132:9: 132:10 (#0),
                    scope: scope[6],
                },
                kind: drop(_28) -> [return: bb86, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:121:13: 121:14 (#0),
                    scope: scope[9],
                },
                kind: drop(_36) -> [return: bb86, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:75:1: 134:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:75:69: 75:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:75:24: 75:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:75:21: 75:22 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:75:21: 75:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:75:21: 75:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:75:42: 75:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:75:30: 75:40 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:75:30: 75:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<(std::string::String, std::string::String), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:75:30: 75:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:76:35: 76:47 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:76:9: 76:32 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:76:9: 76:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:76:35: 76:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:75:1: 134:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:78:5: 133:6 (#80),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:29: 78:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:78:5: 133:6 (#80),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:29: 78:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:15: 78:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                data-url/src/mime.rs:78:29: 78:55 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:78:15: 78:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:20: 78:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:79:21: 79:62 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:79:13: 79:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:79:13: 79:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:79:21: 79:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                data-url/src/mime.rs:80:29: 80:47 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:80:13: 80:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:80:14: 80:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                data-url/src/mime.rs:80:29: 80:47 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:80:13: 80:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:80:20: 80:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, core::option::Option<&'{erased} str>),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:80:29: 80:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:80:36: 80:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:84:13: 84:97 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:83:13: 83:23 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:83:13: 83:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:14: 84:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:14: 84:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:33: 84:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:61: 84:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:71: 84:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:80: 84:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(std::string::String, std::string::String)],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:80: 84:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(std::string::String, std::string::String), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:80: 84:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:84:92: 84:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:85:16: 85:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                data-url/src/mime.rs:85:30: 85:35 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:85:16: 85:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:85:21: 85:26 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:86:25: 130:14 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:86:17: 86:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:86:17: 86:22 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:86:49: 86:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:86:49: 86:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:86:32: 86:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                data-url/src/mime.rs:86:49: 86:72 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:86:32: 86:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:86:37: 86:45 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:87:31: 87:63 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:87:21: 87:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:87:21: 87:28 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:87:31: 87:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:87:31: 87:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:88:43: 88:73 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:88:21: 88:40 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:88:21: 88:40 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:88:65: 88:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:89:33: 89:49 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:89:21: 89:30 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:89:21: 89:30 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:89:33: 89:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:90:17: 116:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:21: 107:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:91:21: 107:22 (#81),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:41: 91:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:91:21: 107:22 (#81),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:41: 91:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:31: 91:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                data-url/src/mime.rs:91:41: 91:53 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:91:31: 91:38 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:36: 91:37 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:93:36: 93:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:37: 94:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:58: 104:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:58: 94:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:58: 94:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:66 ~ data_url[664f]::mime::parse_parameters::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn(()) -> char, bound_vars: [] },
                (&'{erased} mut core::str::Split<'{erased}, char>, &'{erased} mut core::str::Chars<'{erased}>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:86: 104:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:86: 104:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:94:86: 104:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:105:34: 105:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:92:25: 106:26 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:105:55: 105:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:91:21: 107:22 (#81),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:21: 107:22 (#81),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:21: 107:22 (#81),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:91:21: 107:22 (#81),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:108:21: 115:22 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:108:42: 108:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:108:21: 115:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:108:42: 108:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:108:28: 108:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                data-url/src/mime.rs:108:42: 108:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:108:28: 108:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:108:33: 108:38 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:111:25: 111:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:111:25: 111:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:112:25: 112:46 (#0),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:112:33: 112:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:112:25: 112:46 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:112:33: 112:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:108:21: 115:22 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:113:28: 115:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:117:17: 119:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:117:21: 117:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:117:36: 117:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:117:48: 117:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:117:55: 119:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:122:29: 122:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:122:21: 122:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:122:21: 122:26 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:122:29: 122:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:123:17: 125:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:123:20: 123:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:123:20: 123:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:123:37: 125:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:126:17: 128:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:126:21: 126:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:126:36: 126:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:126:48: 126:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:126:55: 128:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:129:17: 129:33 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:129:17: 129:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<(std::string::String, std::string::String), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:131:13: 131:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                },
            ),
        ),
        ty: (std::string::String, std::string::String),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:131:29: 131:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:131:30: 131:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:131:30: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:131:13: 131:64 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:131:57: 131:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/mime.rs:78:5: 133:6 (#80),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:5: 133:6 (#80),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:5: 133:6 (#80),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:78:5: 133:6 (#80),
            scope: scope[0],
        },
    },
]