[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
            StorageLive(_4),
            _4 = {closure@data-url/src/lib.rs:198:52: 198:55},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:198:19: 198:94 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::<impl str>::trim_matches::<'_, {closure@data-url/src/lib.rs:198:52: 198:55}>(move _3, move _4) -> [return: bb1, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:200:33: 200:62 (#0),
                    scope: scope[1],
                },
                kind: _5 = remove_base64_suffix(move _6) -> [return: bb2, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:201:18: 201:49 (#0),
                    scope: scope[2],
                },
                kind: _7 = core::option::Option::<&str>::is_some(move _8) -> [return: bb3, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _5,
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:202:21: 202:61 (#0),
                    scope: scope[3],
                },
                kind: _9 = core::option::Option::<&str>::unwrap_or(move _10, move _11) -> [return: bb4, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:204:22: 204:35 (#0),
                    scope: scope[4],
                },
                kind: _12 = std::string::String::new() -> [return: bb5, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:205:8: 205:34 (#0),
                    scope: scope[5],
                },
                kind: _14 = core::str::<impl str>::starts_with::<'_, char>(move _15, const ';') -> [return: bb6, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:205:8: 205:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _14) -> [0: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            _16 = &mut _12,
            StorageLive(_17),
            StorageLive(_18),
            _18 = const "text/plain",
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:206:9: 206:38 (#0),
                    scope: scope[5],
                },
                kind: _13 = std::string::String::push_str(move _16, move _17) -> [return: bb8, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:205:5: 207:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:205:5: 207:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_19),
            _19 = const false,
            FakeRead(ForLet(None), _19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:17: 209:34 (#0),
                    scope: scope[6],
                },
                kind: _22 = core::str::<impl str>::bytes(move _23) -> [return: bb11, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:17: 209:34 (#152),
                    scope: scope[6],
                },
                kind: _21 = <core::str::Bytes<'_> as core::iter::IntoIterator>::into_iter(move _22) -> [return: bb12, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            StorageLive(_24),
            _24 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:5: 231:6 (#151),
                    scope: scope[7],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:5: 231:6 (#151),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb14, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _24,
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:17: 209:34 (#152),
                    scope: scope[7],
                },
                kind: _27 = <core::str::Bytes<'_> as core::iter::Iterator>::next(move _28) -> [return: bb15, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _30 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:17: 209:34 (#152),
                    scope: scope[7],
                },
                kind: switchInt(move _30) -> [0: bb17, 1: bb18, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:17: 209:34 (#152),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:5: 231:6 (#151),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_27 as Some).0: u8),
            PlaceMention(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 210:19 (#0),
                    scope: scope[8],
                },
                kind: switchInt(_32) -> [9: bb31, 10: bb31, 13: bb31, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &_12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:235:21: 235:35 (#0),
                    scope: scope[6],
                },
                kind: _56 = <std::string::String as core::ops::Deref>::deref(move _57) -> [return: bb54, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = Le(const 0_u8, _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:13: 215:28 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _36) -> [0: bb22, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = &mut _12,
            StorageLive(_51),
            StorageLive(_52),
            _52 = _32,
            _51 = move _52 as char (IntToInt),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:229:18: 229:43 (#0),
                    scope: scope[8],
                },
                kind: _26 = std::string::String::push(move _50, move _51) -> [return: bb51, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = Le(const 127_u8, _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:31: 215:48 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _34) -> [0: bb23, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 210:19 (#0),
                    scope: scope[8],
                },
                kind: switchInt(_32) -> [32: bb24, 34: bb25, 60: bb26, 62: bb27, 63: bb28, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:13: 221:17 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:20: 221:24 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:27: 221:31 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:34: 221:38 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:223:13: 223:17 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = Le(_32, const u8::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:31: 215:48 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _35) -> [0: bb23, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = Le(_32, const 31_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:13: 215:28 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _37) -> [0: bb22, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:212:13: 212:34 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:13: 215:48 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = _32,
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _12,
            _40 = &mut (*_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:52: 215:85 (#0),
                    scope: scope[8],
                },
                kind: _26 = percent_encode(move _39, move _40) -> [return: bb34, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:215:84: 215:85 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = _32,
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut _12,
            _47 = &mut (*_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:54: 221:87 (#0),
                    scope: scope[8],
                },
                kind: _26 = percent_encode(move _46, move _47) -> [return: bb48, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &fake shallow _32,
            StorageLive(_42),
            _42 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _42) -> [0: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            FakeRead(ForMatchGuard, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &fake shallow _32,
            StorageLive(_43),
            _43 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _43) -> [0: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForMatchGuard, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &fake shallow _32,
            StorageLive(_44),
            _44 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _44) -> [0: bb44, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            FakeRead(ForMatchGuard, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &fake shallow _32,
            StorageLive(_45),
            _45 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _45) -> [0: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            FakeRead(ForMatchGuard, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:42: 221:50 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:221:86: 221:87 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const true,
            StorageLive(_49),
            _49 = &mut _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:225:17: 225:33 (#0),
                    scope: scope[8],
                },
                kind: _26 = std::string::String::push(move _49, const '?') -> [return: bb50, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:225:32: 225:33 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:229:42: 229:43 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:209:5: 231:6 (#151),
                    scope: scope[7],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = &(*_56),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:235:21: 235:35 (#0),
                    scope: scope[6],
                },
                kind: _54 = core::str::<impl str>::parse::<mime::Mime>(move _55) -> [return: bb55, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageLive(_58),
            _58 = {closure@data-url/src/lib.rs:235:51: 235:54},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:235:21: 239:7 (#0),
                    scope: scope[6],
                },
                kind: _53 = core::result::Result::<mime::Mime, mime::MimeParsingError>::unwrap_or_else::<{closure@data-url/src/lib.rs:235:51: 235:54}>(move _54, move _58) -> [return: bb56, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_54),
            FakeRead(ForLet(None), _53),
            StorageDead(_56),
            StorageLive(_59),
            _59 = move _53,
            StorageLive(_60),
            _60 = _7,
            _0 = (move _59, move _60),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:241:23: 241:24 (#0),
                    scope: scope[9],
                },
                kind: drop(_59) -> [return: bb57, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:242:1: 242:2 (#0),
                    scope: scope[6],
                },
                kind: drop(_53) -> [return: bb58, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:242:1: 242:2 (#0),
                    scope: scope[4],
                },
                kind: drop(_12) -> [return: bb59, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:242:2: 242:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:242:1: 242:2 (#0),
                    scope: scope[6],
                },
                kind: drop(_53) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:239:6: 239:7 (#0),
                    scope: scope[6],
                },
                kind: drop(_54) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:242:1: 242:2 (#0),
                    scope: scope[4],
                },
                kind: drop(_12) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:193:1: 242:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (mime::Mime, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:193:47: 193:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:193:38: 193:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:193:17: 193:36 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:193:17: 193:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:193:17: 193:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:198:19: 198:94 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:198:9: 198:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:198:9: 198:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:198:19: 198:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:108 ~ data_url[664f]::parse_header::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((char,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:198:52: 198:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:200:33: 200:62 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:200:9: 200:30 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:200:9: 200:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:200:54: 200:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:201:18: 201:49 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:201:9: 201:15 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:201:9: 201:15 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:201:18: 201:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:202:21: 202:61 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:202:9: 202:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:202:9: 202:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:202:21: 202:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:202:53: 202:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:204:22: 204:35 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:204:9: 204:19 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:204:9: 204:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:205:5: 207:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:205:8: 205:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:205:8: 205:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:206:9: 206:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:206:9: 206:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:206:9: 206:38 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:206:25: 206:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:206:9: 206:38 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:206:25: 206:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:208:24: 208:29 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:208:9: 208:21 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:208:9: 208:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:5: 231:6 (#151),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                data-url/src/lib.rs:209:17: 209:34 (#152),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:209:17: 209:34 (#152),
                    },
                ),
            ),
        ),
        ty: core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:193:1: 242:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:17: 209:34 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:5: 231:6 (#151),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:5: 231:6 (#151),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                data-url/src/lib.rs:209:17: 209:34 (#152),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:209:9: 209:13 (#153),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:209:9: 209:13 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:210:15: 210:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:31: 215:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:31: 215:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:13: 215:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:13: 215:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:212:38: 212:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:67: 215:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:73: 215:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:215:73: 215:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:42: 221:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:42: 221:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:42: 221:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:42: 221:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:69: 221:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:75: 221:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:221:75: 221:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:225:17: 225:33 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:225:17: 225:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:229:18: 229:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:229:30: 229:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: data-url/src/lib.rs:210:9: 230:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:229:30: 229:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:235:21: 239:7 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:235:9: 235:18 (#0),
                    },
                ),
            ),
        ),
        ty: mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:9: 235:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<mime::Mime, mime::MimeParsingError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:21: 235:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:21: 235:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:21: 235:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:21: 235:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:109 ~ data_url[664f]::parse_header::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((mime::MimeParsingError,)) -> mime::Mime, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:235:51: 239:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:241:5: 241:24 (#0),
                },
            ),
        ),
        ty: mime::Mime,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:241:6: 241:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:241:5: 241:24 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:241:17: 241:23 (#0),
            scope: scope[0],
        },
    },
]