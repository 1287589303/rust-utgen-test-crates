[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            _0 = forgiving_base64::Decoder::<F, E> { write_bytes: move _2, bit_buffer: const 0_u32, buffer_bit_length: const 0_u8, padding_symbols: const 0_u8 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:105:9: 105:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:106:5: 106:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:106:6: 106:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:106:5: 106:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:99:5: 106:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::Decoder<F/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:99:35: 99:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/forgiving_base64.rs:99:29: 99:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:99:16: 99:27 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:99:16: 99:27 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:99:16: 99:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:101:13: 101:24 (#0),
            scope: scope[0],
        },
    },
]