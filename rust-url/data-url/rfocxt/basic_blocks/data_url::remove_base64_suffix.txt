[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:247:21: 247:30 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::<impl str>::bytes(move _3) -> [return: bb1, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:250:20: 251:22 (#0),
                    scope: scope[1],
                },
                kind: _7 = <core::str::Bytes<'_> as core::iter::Iterator>::by_ref(move _8) -> [return: bb2, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut (*_7),
            StorageDead(_8),
            StorageLive(_9),
            _9 = {closure@data-url/src/lib.rs:252:21: 252:28},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:250:20: 252:68 (#0),
                    scope: scope[1],
                },
                kind: _5 = <&mut core::str::Bytes<'_> as core::iter::Iterator>::filter::<{closure@data-url/src/lib.rs:252:21: 252:28}>(move _6, move _9) -> [return: bb3, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_7),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:255:24: 255:34 (#0),
                    scope: scope[2],
                },
                kind: _10 = <core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}> as core::iter::Iterator>::rev(move _11) -> [return: bb4, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:29 (#0),
                    scope: scope[3],
                },
                kind: _16 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _17) -> [return: bb5, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:30 (#154),
                    scope: scope[3],
                },
                kind: _15 = <core::option::Option<u8> as core::ops::Try>::branch(move _16) -> [return: bb6, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _18 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:30 (#154),
                    scope: scope[3],
                },
                kind: switchInt(move _18) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:30 (#154),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:29: 257:30 (#155),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_15 as Continue).0: u8),
            _14 = _22,
            StorageDead(_22),
            _13 = Eq(move _14, const 52_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:38 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _13) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_15 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_21),
            _21 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:257:18: 257:30 (#154),
                    scope: scope[5],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _21) -> [return: bb11, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_15),
            _12 = const (),
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:29 (#0),
                    scope: scope[3],
                },
                kind: _28 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _29) -> [return: bb14, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_15),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#46),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:30 (#158),
                    scope: scope[3],
                },
                kind: _27 = <core::option::Option<u8> as core::ops::Try>::branch(move _28) -> [return: bb15, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _30 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:30 (#158),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb18, 1: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:30 (#158),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:29: 258:30 (#159),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = ((_27 as Continue).0: u8),
            _26 = _34,
            StorageDead(_34),
            _25 = Eq(move _26, const 54_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:38 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _25) -> [0: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = ((_27 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_33),
            _33 = _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:258:18: 258:30 (#158),
                    scope: scope[9],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _33) -> [return: bb20, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_26),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_27),
            _24 = const (),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:29 (#0),
                    scope: scope[3],
                },
                kind: _41 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _42) -> [return: bb23, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_27),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#47),
                    scope: scope[3],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:30 (#162),
                    scope: scope[3],
                },
                kind: _40 = <core::option::Option<u8> as core::ops::Try>::branch(move _41) -> [return: bb24, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            _43 = discriminant(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:30 (#162),
                    scope: scope[3],
                },
                kind: switchInt(move _43) -> [0: bb27, 1: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:30 (#162),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:29: 259:30 (#163),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = ((_40 as Continue).0: u8),
            _39 = _47,
            StorageDead(_47),
            _38 = &_39,
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = const 101_u8,
            _49 = &_50,
            _48 = &(*_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:58 (#0),
                    scope: scope[3],
                },
                kind: _37 = core::num::<impl u8>::eq_ignore_ascii_case(move _38, move _48) -> [return: bb30, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = ((_40 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_46),
            _46 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:30 (#162),
                    scope: scope[13],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _46) -> [return: bb29, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_38),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:259:18: 259:58 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _37) -> [0: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_38),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_40),
            StorageDead(_39),
            _36 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:29 (#0),
                    scope: scope[3],
                },
                kind: _57 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _58) -> [return: bb33, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_38),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_40),
            StorageDead(_39),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#48),
                    scope: scope[3],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:30 (#166),
                    scope: scope[3],
                },
                kind: _56 = <core::option::Option<u8> as core::ops::Try>::branch(move _57) -> [return: bb34, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            PlaceMention(_56),
            _59 = discriminant(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:30 (#166),
                    scope: scope[3],
                },
                kind: switchInt(move _59) -> [0: bb37, 1: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:30 (#166),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:29: 260:30 (#167),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = ((_56 as Continue).0: u8),
            _55 = _63,
            StorageDead(_63),
            _54 = &_55,
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = const 115_u8,
            _65 = &_66,
            _64 = &(*_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:58 (#0),
                    scope: scope[3],
                },
                kind: _53 = core::num::<impl u8>::eq_ignore_ascii_case(move _54, move _64) -> [return: bb40, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_60),
            _60 = ((_56 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_62),
            _62 = _60,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:30 (#166),
                    scope: scope[17],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _62) -> [return: bb39, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_54),
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:260:18: 260:58 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _53) -> [0: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_54),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_56),
            StorageDead(_55),
            _52 = const (),
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:29 (#0),
                    scope: scope[3],
                },
                kind: _73 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _74) -> [return: bb43, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_54),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_56),
            StorageDead(_55),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#49),
                    scope: scope[3],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:30 (#170),
                    scope: scope[3],
                },
                kind: _72 = <core::option::Option<u8> as core::ops::Try>::branch(move _73) -> [return: bb44, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            PlaceMention(_72),
            _75 = discriminant(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:30 (#170),
                    scope: scope[3],
                },
                kind: switchInt(move _75) -> [0: bb47, 1: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:30 (#170),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:29: 261:30 (#171),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            _79 = ((_72 as Continue).0: u8),
            _71 = _79,
            StorageDead(_79),
            _70 = &_71,
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = const 97_u8,
            _81 = &_82,
            _80 = &(*_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:58 (#0),
                    scope: scope[3],
                },
                kind: _69 = core::num::<impl u8>::eq_ignore_ascii_case(move _70, move _80) -> [return: bb50, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = ((_72 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_78),
            _78 = _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:30 (#170),
                    scope: scope[21],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _78) -> [return: bb49, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_76),
            StorageDead(_70),
            StorageDead(_72),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:261:18: 261:58 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _69) -> [0: bb52, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_70),
            StorageDead(_82),
            StorageDead(_81),
            StorageDead(_72),
            StorageDead(_71),
            _68 = const (),
            StorageDead(_69),
            StorageDead(_68),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:29 (#0),
                    scope: scope[3],
                },
                kind: _89 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::next(move _90) -> [return: bb53, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_70),
            StorageDead(_82),
            StorageDead(_81),
            StorageDead(_72),
            StorageDead(_71),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#50),
                    scope: scope[3],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:30 (#174),
                    scope: scope[3],
                },
                kind: _88 = <core::option::Option<u8> as core::ops::Try>::branch(move _89) -> [return: bb54, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            PlaceMention(_88),
            _91 = discriminant(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:30 (#174),
                    scope: scope[3],
                },
                kind: switchInt(move _91) -> [0: bb57, 1: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:30 (#174),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:29: 262:30 (#175),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb58, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            _95 = ((_88 as Continue).0: u8),
            _87 = _95,
            StorageDead(_95),
            _86 = &_87,
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = const 98_u8,
            _97 = &_98,
            _96 = &(*_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:58 (#0),
                    scope: scope[3],
                },
                kind: _85 = core::num::<impl u8>::eq_ignore_ascii_case(move _86, move _96) -> [return: bb60, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = ((_88 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_94),
            _94 = _92,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:30 (#174),
                    scope: scope[25],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _94) -> [return: bb59, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_92),
            StorageDead(_86),
            StorageDead(_88),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:262:18: 262:58 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _85) -> [0: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_86),
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_88),
            StorageDead(_87),
            _84 = const (),
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_100),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = move _10,
            StorageLive(_108),
            _108 = {closure@data-url/src/lib.rs:263:34: 263:41},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:55 (#0),
                    scope: scope[3],
                },
                kind: _106 = <core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>> as core::iter::Iterator>::skip_while::<{closure@data-url/src/lib.rs:263:34: 263:41}>(move _107, move _108) -> [return: bb63, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_86),
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_88),
            StorageDead(_87),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#51),
                    scope: scope[3],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = &mut _106,
            StorageDead(_108),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:62 (#0),
                    scope: scope[3],
                },
                kind: _104 = <core::iter::SkipWhile<core::iter::Rev<core::iter::Filter<&mut core::str::Bytes<'_>, {closure@data-url/src/lib.rs:252:21: 252:28}>>, {closure@data-url/src/lib.rs:263:34: 263:41}> as core::iter::Iterator>::next(move _105) -> [return: bb64, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:63 (#178),
                    scope: scope[3],
                },
                kind: _103 = <core::option::Option<u8> as core::ops::Try>::branch(move _104) -> [return: bb65, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            PlaceMention(_103),
            _109 = discriminant(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:63 (#178),
                    scope: scope[3],
                },
                kind: switchInt(move _109) -> [0: bb68, 1: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:63 (#178),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:62: 263:63 (#179),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb69, imaginary: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_113),
            _113 = ((_103 as Continue).0: u8),
            _102 = _113,
            StorageDead(_113),
            _101 = Eq(move _102, const 59_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:71 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _101) -> [0: bb72, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_110),
            _110 = ((_103 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_112),
            _112 = _110,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:263:18: 263:63 (#178),
                    scope: scope[29],
                },
                kind: _0 = <core::option::Option<&str> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _112) -> [return: bb70, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_110),
            StorageDead(_102),
            StorageDead(_106),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_106),
            StorageDead(_103),
            _100 = const (),
            StorageDead(_101),
            StorageDead(_100),
            _4 = const (),
            StorageDead(_10),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            StorageLive(_118),
            _118 = &(*_1),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            _121 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:265:15: 265:26 (#0),
                    scope: scope[1],
                },
                kind: _120 = <core::str::Bytes<'_> as core::iter::ExactSizeIterator>::len(move _121) -> [return: bb73, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_106),
            StorageDead(_103),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:35:13: 35:24 (#52),
                    scope: scope[3],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            _119 = core::ops::RangeTo::<usize> { end: move _120 },
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:265:12: 265:27 (#0),
                    scope: scope[1],
                },
                kind: _117 = <str as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _118, move _119) -> [return: bb74, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            _116 = &(*_117),
            _115 = &(*_116),
            _0 = core::option::Option::<&str>::Some(move _115),
            StorageDead(_115),
            StorageDead(_2),
            StorageDead(_117),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:266:2: 266:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:266:2: 266:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:266:2: 266:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/lib.rs:246:1: 266:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:246:37: 246:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/lib.rs:246:28: 246:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:246:25: 246:26 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:246:25: 246:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:246:25: 246:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:247:21: 247:30 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:247:9: 247:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:247:9: 247:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:247:21: 247:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:248:5: 264:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:250:20: 252:68 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:250:13: 250:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:250:13: 250:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:250:20: 251:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:250:20: 251:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:250:20: 250:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:252:21: 252:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/lib.rs:255:24: 255:34 (#0),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:255:13: 255:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:255:13: 255:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:255:24: 255:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#46),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:30 (#154),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:29: 257:30 (#155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                data-url/src/lib.rs:257:18: 257:30 (#154),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:257:29: 257:30 (#155),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:29: 257:30 (#155),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:29: 257:30 (#155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:29: 257:30 (#155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                data-url/src/lib.rs:257:18: 257:30 (#154),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:257:18: 257:30 (#154),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:257:18: 257:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#46),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:30 (#158),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:29: 258:30 (#159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                data-url/src/lib.rs:258:18: 258:30 (#158),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:258:29: 258:30 (#159),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:29: 258:30 (#159),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:29: 258:30 (#159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:29: 258:30 (#159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                data-url/src/lib.rs:258:18: 258:30 (#158),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:258:18: 258:30 (#158),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:258:18: 258:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#48),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:30 (#162),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:29: 259:30 (#163),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                data-url/src/lib.rs:259:18: 259:30 (#162),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:259:29: 259:30 (#163),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:29: 259:30 (#163),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:29: 259:30 (#163),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:29: 259:30 (#163),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                data-url/src/lib.rs:259:18: 259:30 (#162),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:259:18: 259:30 (#162),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:18: 259:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:52: 259:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:52: 259:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:259:53: 259:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#48),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:30 (#166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:29: 260:30 (#167),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                data-url/src/lib.rs:260:18: 260:30 (#166),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:260:29: 260:30 (#167),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:29: 260:30 (#167),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:29: 260:30 (#167),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:29: 260:30 (#167),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                data-url/src/lib.rs:260:18: 260:30 (#166),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:260:18: 260:30 (#166),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:18: 260:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:52: 260:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:52: 260:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:260:53: 260:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:30 (#170),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:29: 261:30 (#171),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _72,
                                ),
                                data-url/src/lib.rs:261:18: 261:30 (#170),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:261:29: 261:30 (#171),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:29: 261:30 (#171),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:29: 261:30 (#171),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:29: 261:30 (#171),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _72,
                                ),
                                data-url/src/lib.rs:261:18: 261:30 (#170),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:261:18: 261:30 (#170),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:18: 261:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:52: 261:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:52: 261:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:261:53: 261:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:30 (#174),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:29: 262:30 (#175),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                data-url/src/lib.rs:262:18: 262:30 (#174),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:262:29: 262:30 (#175),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:29: 262:30 (#175),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:29: 262:30 (#175),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:29: 262:30 (#175),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                data-url/src/lib.rs:262:18: 262:30 (#174),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:262:18: 262:30 (#174),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:18: 262:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:52: 262:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:52: 262:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:262:53: 262:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:9: 36:10 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:63 (#178),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::SkipWhile<core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>, Closure(DefId(0:179 ~ data_url[664f]::remove_base64_suffix::{closure#1}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::SkipWhile<core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>, Closure(DefId(0:179 ~ data_url[664f]::remove_base64_suffix::{closure#1}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Rev<core::iter::Filter<&'{erased} mut core::str::Bytes<'{erased}>, Closure(DefId(0:111 ~ data_url[664f]::remove_base64_suffix::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:179 ~ data_url[664f]::remove_base64_suffix::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:34: 263:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:62: 263:63 (#179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _103,
                                ),
                                data-url/src/lib.rs:263:18: 263:63 (#178),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:263:62: 263:63 (#179),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:62: 263:63 (#179),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:62: 263:63 (#179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:62: 263:63 (#179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _103,
                                ),
                                data-url/src/lib.rs:263:18: 263:63 (#178),
                            ),
                        ),
                        pat_span: data-url/src/lib.rs:263:18: 263:63 (#178),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:263:18: 263:63 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:34:24: 36:10 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:10: 265:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:265:5: 265:28 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:10: 265:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:265:5: 265:28 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:12: 265:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:265:5: 265:28 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:11: 265:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:265:5: 265:28 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:13: 265:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:15: 265:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/lib.rs:265:5: 265:28 (#0),
                },
            ),
        ),
        ty: &'{erased} core::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/lib.rs:265:15: 265:20 (#0),
            scope: scope[0],
        },
    },
]