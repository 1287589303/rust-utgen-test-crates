[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = (_1.2: u8),
            StorageLive(_5),
            _5 = (_1.3: u8),
            _3 = (move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:153:9: 153:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt((_3.0: u8)) -> [0: bb2, 12: bb4, 18: bb5, 6: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            StorageLive(_56),
            _56 = forgiving_base64::InvalidBase64Details::Padding,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:170:29: 170:65 (#0),
                    scope: scope[0],
                },
                kind: _55 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _56) -> [return: bb36, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:153:9: 153:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt((_3.1: u8)) -> [0: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:154:13: 154:19 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:153:9: 153:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt((_3.1: u8)) -> [2: bb7, 0: bb7, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:153:9: 153:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt((_3.1: u8)) -> [1: bb8, 0: bb8, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:169:13: 169:19 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:157:13: 157:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:163:13: 163:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:154:23: 156:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = (_1.1: u32),
            _10 = const 4_i32 as u32 (IntToInt),
            _11 = Lt(move _10, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:160:36: 160:58 (#0),
                    scope: scope[0],
                },
                kind: assert(move _11, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb11, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = Shr(move _9, const 4_i32),
            StorageDead(_9),
            _7 = move _8 as u8 (IntToInt),
            StorageDead(_8),
            _6 = [move _7],
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (_1.0: F),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_6,
            _19 = &(*_20),
            _18 = move _19 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_19),
            _17 = (move _18,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:49 (#0),
                    scope: scope[1],
                },
                kind: _15 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _16, move _17) -> [return: bb12, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:82 (#0),
                    scope: scope[1],
                },
                kind: _14 = core::result::Result::<(), E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _15, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb13, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                    scope: scope[1],
                },
                kind: _13 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _14) -> [return: bb14, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _21 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                    scope: scope[1],
                },
                kind: switchInt(move _21) -> [0: bb17, 1: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_13 as Continue).0: ()),
            _12 = _25,
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:83: 161:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb20, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_13 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _24) -> [return: bb19, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb41, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_13),
            StorageDead(_12),
            _2 = const (),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:162:13: 162:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = (_1.1: u32),
            _30 = const 10_i32 as u32 (IntToInt),
            _31 = Lt(move _30, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:166:36: 166:59 (#0),
                    scope: scope[0],
                },
                kind: assert(move _31, "attempt to shift right by `{}`, which would overflow", const 10_i32) -> [success: bb22, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = Shr(move _29, const 10_i32),
            StorageDead(_29),
            _27 = move _28 as u8 (IntToInt),
            StorageDead(_28),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = (_1.1: u32),
            _35 = const 2_i32 as u32 (IntToInt),
            _36 = Lt(move _35, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:166:67: 166:89 (#0),
                    scope: scope[0],
                },
                kind: assert(move _36, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb23, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = Shr(move _34, const 2_i32),
            StorageDead(_34),
            _32 = move _33 as u8 (IntToInt),
            StorageDead(_33),
            _26 = [move _27, move _32],
            StorageDead(_32),
            StorageDead(_27),
            FakeRead(ForLet(None), _26),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut (_1.0: F),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &_26,
            _44 = &(*_45),
            _43 = move _44 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_44),
            _42 = (move _43,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:49 (#0),
                    scope: scope[6],
                },
                kind: _40 = <F as core::ops::FnMut<(&[u8],)>>::call_mut(move _41, move _42) -> [return: bb24, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:82 (#0),
                    scope: scope[6],
                },
                kind: _39 = core::result::Result::<(), E>::map_err::<forgiving_base64::DecodeError<E>, fn(E) -> forgiving_base64::DecodeError<E> {forgiving_base64::DecodeError::<E>::WriteError}>(move _40, forgiving_base64::DecodeError::<E>::WriteError) -> [return: bb25, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                    scope: scope[6],
                },
                kind: _38 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::Try>::branch(move _39) -> [return: bb26, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            PlaceMention(_38),
            _46 = discriminant(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                    scope: scope[6],
                },
                kind: switchInt(move _46) -> [0: bb29, 1: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = ((_38 as Continue).0: ()),
            _37 = _50,
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:83: 167:84 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb32, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = move ((_38 as Break).0: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>),
            StorageLive(_49),
            _49 = move _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<(), forgiving_base64::DecodeError<E>> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E>>>>::from_residual(move _49) -> [return: bb31, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
                    scope: scope[6],
                },
                kind: drop(_47) -> [return: bb39, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_38),
            StorageDead(_37),
            _2 = const (),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:168:13: 168:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            StorageLive(_53),
            _53 = forgiving_base64::InvalidBase64Details::LoneAlphabetSymbol,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:169:34: 169:81 (#0),
                    scope: scope[0],
                },
                kind: _52 = <forgiving_base64::InvalidBase64Details as core::convert::Into<forgiving_base64::DecodeError<E>>>::into(move _53) -> [return: bb34, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:169:81: 169:82 (#0),
                    scope: scope[0],
                },
                kind: drop(_52) -> [return: bb35, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:169:23: 169:82 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Err(move _55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:170:65: 170:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_55) -> [return: bb37, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:170:18: 170:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_57),
            _57 = (),
            _0 = core::result::Result::<(), forgiving_base64::DecodeError<E>>::Ok(move _57),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:173:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb44, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:83: 167:84 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb40, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:83: 161:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb42, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:173:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb44, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:173:6: 173:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#72),
                    scope: scope[8],
                },
                kind: drop(_49) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
                    scope: scope[6],
                },
                kind: drop(_47) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:83: 167:84 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#72),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:167:81: 167:82 (#0),
                    scope: scope[6],
                },
                kind: drop(_40) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#70),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:83: 161:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#70),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:161:81: 161:82 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:173:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:152:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:152:32: 152:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: forgiving_base64::Decoder<F/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:152:19: 152:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:153:9: 171:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:153:15: 153:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:153:16: 153:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:153:40: 153:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:160:35: 160:65 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:160:21: 160:32 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:21: 160:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:36: 160:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:36: 160:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:37: 160:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:36: 160:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:160:36: 160:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8],),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:36: 161:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:36: 161:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:36: 161:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:82: 161:83 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#70),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:161:17: 161:83 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:166:35: 166:96 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:166:21: 166:32 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:21: 166:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:36: 166:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:36: 166:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:37: 166:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:36: 166:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:36: 166:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:67: 166:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:67: 166:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:68: 166:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:67: 166:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:166:67: 166:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8],),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:36: 167:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:36: 167:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:36: 167:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _38,
                                ),
                                data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, forgiving_base64::DecodeError<E/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:82: 167:83 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _38,
                                ),
                                data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#72),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:167:17: 167:83 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:169:23: 169:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: forgiving_base64::DecodeError<E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:169:34: 169:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::InvalidBase64Details,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:169:34: 169:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:170:18: 170:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: forgiving_base64::DecodeError<E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:170:29: 170:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::InvalidBase64Details,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:170:29: 170:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:172:12: 172:14 (#0),
            scope: scope[0],
        },
    },
]