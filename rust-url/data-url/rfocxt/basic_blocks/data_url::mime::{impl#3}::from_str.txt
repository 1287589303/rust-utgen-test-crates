[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:43:9: 43:17 (#0),
                    scope: scope[0],
                },
                kind: _2 = mime::parse(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = (),
            _4 = mime::MimeParsingError(move _5),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:43:9: 43:45 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<mime::Mime>::ok_or::<mime::MimeParsingError>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:44:6: 44:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:43:44: 43:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:42:5: 44:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<mime::Mime, mime::MimeParsingError>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:42:29: 42:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:42:20: 42:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:42:17: 42:18 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:42:17: 42:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:42:17: 42:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:43:9: 43:45 (#0),
                },
            ),
        ),
        ty: core::option::Option<mime::Mime>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:43:9: 43:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:43:9: 43:45 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:43:15: 43:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:43:9: 43:45 (#0),
                },
            ),
        ),
        ty: mime::MimeParsingError,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:43:24: 43:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:43:41: 43:43 (#0),
            scope: scope[0],
        },
    },
]