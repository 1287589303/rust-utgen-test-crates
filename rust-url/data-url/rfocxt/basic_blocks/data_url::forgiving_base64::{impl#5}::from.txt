[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:63:9: 63:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:63:15: 63:16 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:64:13: 64:42 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_1 as WriteError).0: forgiving_base64::Impossible),
            StorageLive(_5),
            PlaceMention(_4),
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:65:49: 65:50 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move ((_1 as InvalidBase64).0: forgiving_base64::InvalidBase64),
            _0 = move _3,
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/forgiving_base64.rs:67:6: 67:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: forgiving_base64::InvalidBase64,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:62:44: 62:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/forgiving_base64.rs:62:16: 62:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/forgiving_base64.rs:62:13: 62:14 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:62:13: 62:14 (#0),
                    },
                ),
            ),
        ),
        ty: forgiving_base64::DecodeError<forgiving_base64::Impossible>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:62:13: 62:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:64:13: 64:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                data-url/src/forgiving_base64.rs:63:15: 63:16 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:64:13: 64:42 (#0),
                    },
                ),
            ),
        ),
        ty: forgiving_base64::InvalidBase64,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:64:40: 64:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                data-url/src/forgiving_base64.rs:63:15: 63:16 (#0),
                            ),
                        ),
                        pat_span: data-url/src/forgiving_base64.rs:65:13: 65:39 (#0),
                    },
                ),
            ),
        ),
        ty: forgiving_base64::Impossible,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:65:37: 65:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/forgiving_base64.rs:63:9: 66:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/forgiving_base64.rs:65:43: 65:53 (#0),
            scope: scope[0],
        },
    },
]