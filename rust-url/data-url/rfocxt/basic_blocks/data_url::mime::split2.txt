[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:70:20: 70:42 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::<impl str>::splitn::<'_, char>(move _4, const 2_usize, move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:71:17: 71:28 (#0),
                    scope: scope[1],
                },
                kind: _7 = <core::str::SplitN<'_, char> as core::iter::Iterator>::next(move _8) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:71:17: 71:37 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::option::Option::<&str>::unwrap(move _7) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            _9 = &(*_6),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:72:13: 72:24 (#0),
                    scope: scope[2],
                },
                kind: _10 = <core::str::SplitN<'_, char> as core::iter::Iterator>::next(move _11) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _0 = (move _9, move _10),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:73:2: 73:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: data-url/src/mime.rs:69:1: 73:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, core::option::Option<&'{erased} str>),
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:69:40: 69:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:69:14: 69:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:69:11: 69:12 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:69:11: 69:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:69:11: 69:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            data-url/src/mime.rs:69:31: 69:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:69:20: 69:29 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:69:20: 69:29 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:69:20: 69:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:70:20: 70:42 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:70:9: 70:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::SplitN<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:70:9: 70:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:70:20: 70:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:70:32: 70:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                data-url/src/mime.rs:71:17: 71:37 (#0),
                            ),
                        ),
                        pat_span: data-url/src/mime.rs:71:9: 71:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:71:9: 71:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:71:17: 71:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::SplitN<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:71:17: 71:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:72:5: 72:25 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:72:6: 72:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:72:5: 72:25 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:72:13: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: data-url/src/mime.rs:72:5: 72:25 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::SplitN<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: data-url/src/mime.rs:72:13: 72:17 (#0),
            scope: scope[0],
        },
    },
]