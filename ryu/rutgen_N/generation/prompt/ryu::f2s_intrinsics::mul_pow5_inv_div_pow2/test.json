{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/f2s_intrinsics.rs\n// crate name is ryu\nThe function to be tested is presented with each line formatted as 'line number + code':\n75 pub fn mul_pow5_inv_div_pow2(m: u32, q: u32, j: i32) -> u32 {\n76     #[cfg(feature = \"small\")]\n77     {\n78         // The inverse multipliers are defined as [2^x / 5^y] + 1; the upper 64\n79         // bits from the double lookup table are the correct bits for [2^x /\n80         // 5^y], so we have to add 1 here. Note that we rely on the fact that\n81         // the added 1 that's already stored in the table never overflows into\n82         // the upper 64 bits.\n83         let pow5 = unsafe { d2s::compute_inv_pow5(q) };\n84         mul_shift_32(m, pow5.1 + 1, j)\n85     }\n86 \n87     #[cfg(not(feature = \"small\"))]\n88     {\n89         debug_assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);\n90         unsafe {\n91             mul_shift_32(\n92                 m,\n93                 d2s::DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize).1 + 1,\n94                 j,\n95             )\n96         }\n97     }\n98 }\n\n",
  "depend_pt": ""
}