{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/pretty/mantissa.rs\n// crate name is ryu\nThe function to be tested is presented with each line formatted as 'line number + code':\n 5 pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {\n 6     if (output >> 32) != 0 {\n 7         // One expensive 64-bit division.\n 8         let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;\n 9         output /= 100_000_000;\n10 \n11         let c = output2 % 10_000;\n12         output2 /= 10_000;\n13         let d = output2 % 10_000;\n14         let c0 = (c % 100) << 1;\n15         let c1 = (c / 100) << 1;\n16         let d0 = (d % 100) << 1;\n17         let d1 = (d / 100) << 1;\n18         ptr::copy_nonoverlapping(\n19             DIGIT_TABLE.as_ptr().offset(c0 as isize),\n20             result.offset(-2),\n21             2,\n22         );\n23         ptr::copy_nonoverlapping(\n24             DIGIT_TABLE.as_ptr().offset(c1 as isize),\n25             result.offset(-4),\n26             2,\n27         );\n28         ptr::copy_nonoverlapping(\n29             DIGIT_TABLE.as_ptr().offset(d0 as isize),\n30             result.offset(-6),\n31             2,\n32         );\n33         ptr::copy_nonoverlapping(\n34             DIGIT_TABLE.as_ptr().offset(d1 as isize),\n35             result.offset(-8),\n36             2,\n37         );\n38         result = result.offset(-8);\n39     }\n40     write_mantissa(output as u32, result);\n41 }\n\n",
  "depend_pt": ""
}