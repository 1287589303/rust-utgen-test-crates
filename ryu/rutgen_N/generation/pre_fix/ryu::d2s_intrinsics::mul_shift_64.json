{
  "name": "ryu::d2s_intrinsics::mul_shift_64",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:71:1:75:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 2;",
                "    let mul: (u64, u64) = (3, 4);",
                "    let j: u32 = 64;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); // Expecting 0 as (2 * 3) shift 64 is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 1_000_000_000;",
                "    let mul: (u64, u64) = (2, 3);",
                "    let j: u32 = 64;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); // Expecting 0 as (1_000_000_000 * 2) shift 64 is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = u64::MAX; // Maximum value for u64",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 128; // Testing with j greater than 64",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 1); // Expecting 1 as full product fits in the upper half being shifted.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 10;",
                "    let mul: (u64, u64) = (2, 3);",
                "    let j: u32 = 63; // Invalid j, should be >= 64",
                "    let _ = mul_shift_64(m, &mul, j); // Expecting panic or assert failure",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}