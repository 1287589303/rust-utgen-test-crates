{
  "name": "ryu::buffer::{impl#0}::format",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:47:5:53:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatNan;",
                "",
                "    impl Float for FloatNan {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"NaN\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(FloatNan);",
                "    assert_eq!(result, \"NaN\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatPosInf;",
                "",
                "    impl Float for FloatPosInf {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"inf\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(FloatPosInf);",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatNegInf;",
                "",
                "    impl Float for FloatNegInf {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"-inf\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(FloatNegInf);",
                "    assert_eq!(result, \"-inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatFinite(f64);",
                "",
                "    impl Float for FloatFinite {",
                "        fn is_nonfinite(&self) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    impl FloatFinite {",
                "        fn format_finite(&self) -> &str {",
                "            &format!(\"{}\", self.0)",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(FloatFinite(3.14));",
                "    assert_eq!(result, \"3.14\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}