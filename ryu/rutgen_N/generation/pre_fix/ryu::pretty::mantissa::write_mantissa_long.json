{
  "name": "ryu::pretty::mantissa::write_mantissa_long",
  "mod_info": {
    "name": "pretty::mantissa",
    "loc": "src/pretty/mod.rs:2:1:2:14"
  },
  "visible": true,
  "loc": "src/pretty/mantissa.rs:5:1:41:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::ptr;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        // Filling in a small part of the digit table for testing purposes.",
                "        b'0', b'1', b'2', b'3', b'4',",
                "        b'5', b'6', b'7', b'8', b'9',",
                "        // ... etc. Fill in appropriately",
                "    ];",
                "",
                "    let mut result: [u8; 16] = [0; 16];",
                "    let result_ptr = result.as_mut_ptr();",
                "",
                "    unsafe {",
                "        write_mantissa_long(123456789012, result_ptr.add(15)); // Output will be written from end",
                "    }",
                "",
                "    assert_eq!(&result[8..], b\"1234\"); // Adjust this based on the expected output in the result",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        // Filling in a small part of the digit table for testing purposes.",
                "        b'0', b'1', b'2', b'3', b'4',",
                "        b'5', b'6', b'7', b'8', b'9',",
                "        // ... etc. Fill in appropriately",
                "    ];",
                "",
                "    let mut result: [u8; 16] = [0; 16];",
                "    let result_ptr = result.as_mut_ptr();",
                "",
                "    unsafe {",
                "        write_mantissa_long(999999999999, result_ptr.add(15)); // Test maximum value",
                "    }",
                "",
                "    assert_eq!(&result[8..], b\"9999\"); // Adjust this based on the expected output in the result",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}