{
  "name": "ryu::pretty::format64",
  "mod_info": {
    "name": "pretty",
    "loc": "src/lib.rs:117:1:117:12"
  },
  "visible": true,
  "loc": "src/pretty/mod.rs:52:1:118:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::slice;",
            "use std::str;",
            "use std::mem::MaybeUninit;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = 1.234f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"1.234\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = 0.0f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"0.0\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = -1.234f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"-1.234\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = 1e30f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"1e30\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = 1e-30f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"0.000000000000000000000001\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = 1e-324f64;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"0.0\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = f64::NAN;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8); // Expected to panic due to NaN",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::{mem::MaybeUninit, slice, str};",
                "",
                "    let f = f64::INFINITY;",
                "",
                "    unsafe {",
                "        let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
                "        ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8); // Expected to panic due to infinity",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}