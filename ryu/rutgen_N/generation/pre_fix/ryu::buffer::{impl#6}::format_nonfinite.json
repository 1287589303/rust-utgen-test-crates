{
  "name": "ryu::buffer::{impl#6}::format_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:125:5:136:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NonFinite {",
                "        value: f32,",
                "    }",
                "",
                "    impl NonFinite {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "",
                "        fn format_nonfinite(self) -> &'static str {",
                "            const MANTISSA_MASK: u32 = 0x007fffff;",
                "            const SIGN_MASK: u32 = 0x80000000;",
                "            let bits = self.to_bits();",
                "            if bits & MANTISSA_MASK != 0 {",
                "                \"NAN\"",
                "            } else if bits & SIGN_MASK != 0 {",
                "                \"NEG_INFINITY\"",
                "            } else {",
                "                \"INFINITY\"",
                "            }",
                "        }",
                "    }",
                "",
                "    let nan_value = NonFinite { value: f32::NAN };",
                "    assert_eq!(nan_value.format_nonfinite(), \"NAN\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NonFinite {",
                "        value: f32,",
                "    }",
                "",
                "    impl NonFinite {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "",
                "        fn format_nonfinite(self) -> &'static str {",
                "            const MANTISSA_MASK: u32 = 0x007fffff;",
                "            const SIGN_MASK: u32 = 0x80000000;",
                "            let bits = self.to_bits();",
                "            if bits & MANTISSA_MASK != 0 {",
                "                \"NAN\"",
                "            } else if bits & SIGN_MASK != 0 {",
                "                \"NEG_INFINITY\"",
                "            } else {",
                "                \"INFINITY\"",
                "            }",
                "        }",
                "    }",
                "",
                "    let neg_infinity_value = NonFinite { value: f32::NEG_INFINITY };",
                "    assert_eq!(neg_infinity_value.format_nonfinite(), \"NEG_INFINITY\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NonFinite {",
                "        value: f32,",
                "    }",
                "",
                "    impl NonFinite {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "",
                "        fn format_nonfinite(self) -> &'static str {",
                "            const MANTISSA_MASK: u32 = 0x007fffff;",
                "            const SIGN_MASK: u32 = 0x80000000;",
                "            let bits = self.to_bits();",
                "            if bits & MANTISSA_MASK != 0 {",
                "                \"NAN\"",
                "            } else if bits & SIGN_MASK != 0 {",
                "                \"NEG_INFINITY\"",
                "            } else {",
                "                \"INFINITY\"",
                "            }",
                "        }",
                "    }",
                "",
                "    let infinity_value = NonFinite { value: f32::INFINITY };",
                "    assert_eq!(infinity_value.format_nonfinite(), \"INFINITY\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}