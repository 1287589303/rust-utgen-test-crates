{
  "name": "ryu::f2s_intrinsics::mul_pow5_inv_div_pow2",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:75:1:98:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    #[cfg(feature = \"small\")]",
                "    {",
                "        struct DummyD2s;",
                "",
                "        impl DummyD2s {",
                "            unsafe fn compute_inv_pow5(_: u32) -> (u32, u32) {",
                "                (1, 2) // Dummy values for the test",
                "            }",
                "        }",
                "",
                "        let result = mul_pow5_inv_div_pow2(10, 5, 2);",
                "        assert_eq!(result, 20); // Adjust expected result according to the test logic",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    #[cfg(not(feature = \"small\"))]",
                "    {",
                "        struct DummyD2s {",
                "            pub DOUBLE_POW5_INV_SPLIT: [(u32, u32); 1],",
                "        }",
                "",
                "        let d2s = DummyD2s {",
                "            DOUBLE_POW5_INV_SPLIT: [(1, 2)], // Dummy values for the test",
                "        };",
                "",
                "        unsafe {",
                "            let result = mul_pow5_inv_div_pow2(10, 0, 2);",
                "            assert_eq!(result, 20); // Adjust expected result according to the test logic",
                "        }",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}