{
  "name": "ryu::pretty::exponent::write_exponent2",
  "mod_info": {
    "name": "pretty::exponent",
    "loc": "src/pretty/mod.rs:1:1:1:14"
  },
  "visible": true,
  "loc": "src/pretty/exponent.rs:31:1:48:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 3]; // Enough space for '0' + '\\0'",
                "    let result = unsafe { write_exponent2(5, buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 1); // 1 character written",
                "    assert_eq!(&buffer[..result], b\"5\"); // Expected output is \"5\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 3]; // Enough space for \"10\" + '\\0'",
                "    let result = unsafe { write_exponent2(10, buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 2); // 2 characters written",
                "    assert_eq!(&buffer[..result], b\"10\"); // Expected output is \"10\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 4]; // Enough space for \"-5\" + '\\0'",
                "    let result = unsafe { write_exponent2(-5, buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 2); // 2 characters written (including '-')",
                "    assert_eq!(&buffer[..result], b\"-5\"); // Expected output is \"-5\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 4]; // Enough space for \"-10\" + '\\0'",
                "    let result = unsafe { write_exponent2(-10, buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 3); // 3 characters written (including '-')",
                "    assert_eq!(&buffer[..result], b\"-10\"); // Expected output is \"-10\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 3]; // Enough space for '0' + '\\0'",
                "    let result = unsafe { write_exponent2(0, buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 1); // 1 character written",
                "    assert_eq!(&buffer[..result], b\"0\"); // Expected output is \"0\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}