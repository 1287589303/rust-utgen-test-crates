{
  "name": "ryu::pretty::format32",
  "mod_info": {
    "name": "pretty",
    "loc": "src/lib.rs:117:1:117:12"
  },
  "visible": true,
  "loc": "src/pretty/mod.rs:159:1:224:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = 42f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"42\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = -42f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"-42\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = 0.001f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"0.001\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = 12345678.0f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"12345678\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = 0.0f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"0.0\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f = 1e30f32;",
                "    unsafe {",
                "        let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "        let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
                "        let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
                "        let print = std::str::from_utf8_unchecked(slice);",
                "        assert_eq!(print, \"1e30\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}