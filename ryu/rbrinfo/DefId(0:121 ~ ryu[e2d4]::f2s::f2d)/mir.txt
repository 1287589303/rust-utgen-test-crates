bb0
  0: StorageLive(_5)
    SourceInfo(src/f2s.rs:41:20-52:6)
  1: StorageLive(_6)
    SourceInfo(src/f2s.rs:41:23-41:41)
  2: StorageLive(_7)
    SourceInfo(src/f2s.rs:41:23-41:36)
  3: _7 = _2
    SourceInfo(src/f2s.rs:41:23-41:36)
  4: _6 = Eq(move _7, const 0_u32)
    SourceInfo(src/f2s.rs:41:23-41:41)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:41:23-41:41)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_7)
    SourceInfo(src/f2s.rs:41:40-41:41)
  1: StorageLive(_8)
    SourceInfo(src/f2s.rs:44:13-44:60)
  2: StorageLive(_9)
    SourceInfo(src/f2s.rs:44:13-44:56)
  3: StorageLive(_10)
    SourceInfo(src/f2s.rs:44:13-44:27)
  4: _11 = SubWithOverflow(const 1_i32, const f2s::FLOAT_BIAS)
    SourceInfo(src/f2s.rs:44:13-44:27)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:44:13-44:27)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1_i32, const f2s::FLOAT_BIAS) -> [success: bb2, unwind: bb168]
  }
  preds [bb0]
  succs [bb2, bb168]

bb2
  0: _10 = move (_11.0: i32)
    SourceInfo(src/f2s.rs:44:13-44:27)
  1: StorageLive(_12)
    SourceInfo(src/f2s.rs:44:30-44:56)
  2: _12 = const f2s::FLOAT_MANTISSA_BITS as i32 (IntToInt)
    SourceInfo(src/f2s.rs:44:30-44:56)
  3: _13 = SubWithOverflow(_10, _12)
    SourceInfo(src/f2s.rs:44:13-44:56)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:44:13-44:56)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb3, unwind: bb168]
  }
  preds [bb1]
  succs [bb3, bb168]

bb3
  0: _9 = move (_13.0: i32)
    SourceInfo(src/f2s.rs:44:13-44:56)
  1: StorageDead(_12)
    SourceInfo(src/f2s.rs:44:55-44:56)
  2: StorageDead(_10)
    SourceInfo(src/f2s.rs:44:55-44:56)
  3: _14 = SubWithOverflow(_9, const 2_i32)
    SourceInfo(src/f2s.rs:44:13-44:60)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:44:13-44:60)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 2_i32) -> [success: bb4, unwind: bb168]
  }
  preds [bb2]
  succs [bb4, bb168]

bb4
  0: _8 = move (_14.0: i32)
    SourceInfo(src/f2s.rs:44:13-44:60)
  1: StorageDead(_9)
    SourceInfo(src/f2s.rs:44:59-44:60)
  2: StorageLive(_15)
    SourceInfo(src/f2s.rs:45:13-45:26)
  3: _15 = _1
    SourceInfo(src/f2s.rs:45:13-45:26)
  4: _5 = (move _8, move _15)
    SourceInfo(src/f2s.rs:42:9-46:10)
  5: StorageDead(_15)
    SourceInfo(src/f2s.rs:46:9-46:10)
  6: StorageDead(_8)
    SourceInfo(src/f2s.rs:46:9-46:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:41:20-52:6)
      kind: goto -> bb10
  }
  preds [bb3]
  succs [bb10]

bb5
  0: StorageDead(_7)
    SourceInfo(src/f2s.rs:41:40-41:41)
  1: StorageLive(_16)
    SourceInfo(src/f2s.rs:49:13-49:79)
  2: StorageLive(_17)
    SourceInfo(src/f2s.rs:49:13-49:75)
  3: StorageLive(_18)
    SourceInfo(src/f2s.rs:49:13-49:46)
  4: StorageLive(_19)
    SourceInfo(src/f2s.rs:49:13-49:33)
  5: StorageLive(_20)
    SourceInfo(src/f2s.rs:49:13-49:26)
  6: _20 = _2
    SourceInfo(src/f2s.rs:49:13-49:26)
  7: _19 = move _20 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:49:13-49:33)
  8: StorageDead(_20)
    SourceInfo(src/f2s.rs:49:32-49:33)
  9: _21 = SubWithOverflow(_19, const f2s::FLOAT_BIAS)
    SourceInfo(src/f2s.rs:49:13-49:46)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:49:13-49:46)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const f2s::FLOAT_BIAS) -> [success: bb6, unwind: bb168]
  }
  preds [bb0]
  succs [bb6, bb168]

bb6
  0: _18 = move (_21.0: i32)
    SourceInfo(src/f2s.rs:49:13-49:46)
  1: StorageDead(_19)
    SourceInfo(src/f2s.rs:49:45-49:46)
  2: StorageLive(_22)
    SourceInfo(src/f2s.rs:49:49-49:75)
  3: _22 = const f2s::FLOAT_MANTISSA_BITS as i32 (IntToInt)
    SourceInfo(src/f2s.rs:49:49-49:75)
  4: _23 = SubWithOverflow(_18, _22)
    SourceInfo(src/f2s.rs:49:13-49:75)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:49:13-49:75)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, move _22) -> [success: bb7, unwind: bb168]
  }
  preds [bb5]
  succs [bb7, bb168]

bb7
  0: _17 = move (_23.0: i32)
    SourceInfo(src/f2s.rs:49:13-49:75)
  1: StorageDead(_22)
    SourceInfo(src/f2s.rs:49:74-49:75)
  2: StorageDead(_18)
    SourceInfo(src/f2s.rs:49:74-49:75)
  3: _24 = SubWithOverflow(_17, const 2_i32)
    SourceInfo(src/f2s.rs:49:13-49:79)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:49:13-49:79)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, const 2_i32) -> [success: bb8, unwind: bb168]
  }
  preds [bb6]
  succs [bb8, bb168]

bb8
  0: _16 = move (_24.0: i32)
    SourceInfo(src/f2s.rs:49:13-49:79)
  1: StorageDead(_17)
    SourceInfo(src/f2s.rs:49:78-49:79)
  2: StorageLive(_25)
    SourceInfo(src/f2s.rs:50:13-50:58)
  3: StorageLive(_26)
    SourceInfo(src/f2s.rs:50:13-50:42)
  4: _27 = Lt(const f2s::FLOAT_MANTISSA_BITS, const 32_u32)
    SourceInfo(src/f2s.rs:50:13-50:42)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:50:13-50:42)
      kind: assert(move _27, "attempt to shift left by `{}`, which would overflow", const f2s::FLOAT_MANTISSA_BITS) -> [success: bb9, unwind: bb168]
  }
  preds [bb7]
  succs [bb9, bb168]

bb9
  0: _26 = Shl(const 1_u32, const f2s::FLOAT_MANTISSA_BITS)
    SourceInfo(src/f2s.rs:50:13-50:42)
  1: StorageLive(_28)
    SourceInfo(src/f2s.rs:50:45-50:58)
  2: _28 = _1
    SourceInfo(src/f2s.rs:50:45-50:58)
  3: _25 = BitOr(move _26, move _28)
    SourceInfo(src/f2s.rs:50:13-50:58)
  4: StorageDead(_28)
    SourceInfo(src/f2s.rs:50:57-50:58)
  5: StorageDead(_26)
    SourceInfo(src/f2s.rs:50:57-50:58)
  6: _5 = (move _16, move _25)
    SourceInfo(src/f2s.rs:48:9-51:10)
  7: StorageDead(_25)
    SourceInfo(src/f2s.rs:51:9-51:10)
  8: StorageDead(_16)
    SourceInfo(src/f2s.rs:51:9-51:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:41:20-52:6)
      kind: goto -> bb10
  }
  preds [bb8]
  succs [bb10]

bb10
  0: StorageDead(_6)
    SourceInfo(src/f2s.rs:52:5-52:6)
  1: PlaceMention(_5)
    SourceInfo(src/f2s.rs:41:20-52:6)
  2: StorageLive(_3)
    SourceInfo(src/f2s.rs:41:10-41:12)
  3: _3 = (_5.0: i32)
    SourceInfo(src/f2s.rs:41:10-41:12)
  4: StorageLive(_4)
    SourceInfo(src/f2s.rs:41:14-41:16)
  5: _4 = (_5.1: u32)
    SourceInfo(src/f2s.rs:41:14-41:16)
  6: StorageDead(_5)
    SourceInfo(src/f2s.rs:52:6-52:7)
  7: StorageLive(_29)
    SourceInfo(src/f2s.rs:53:9-53:13)
  8: StorageLive(_30)
    SourceInfo(src/f2s.rs:53:16-53:24)
  9: StorageLive(_31)
    SourceInfo(src/f2s.rs:53:17-53:19)
  10: _31 = _4
    SourceInfo(src/f2s.rs:53:17-53:19)
  11: _30 = BitAnd(move _31, const 1_u32)
    SourceInfo(src/f2s.rs:53:16-53:24)
  12: StorageDead(_31)
    SourceInfo(src/f2s.rs:53:23-53:24)
  13: _29 = Eq(move _30, const 0_u32)
    SourceInfo(src/f2s.rs:53:16-53:29)
  14: StorageDead(_30)
    SourceInfo(src/f2s.rs:53:28-53:29)
  15: FakeRead(ForLet(None), _29)
    SourceInfo(src/f2s.rs:53:9-53:13)
  16: StorageLive(_32)
    SourceInfo(src/f2s.rs:54:9-54:22)
  17: _32 = _29
    SourceInfo(src/f2s.rs:54:25-54:29)
  18: FakeRead(ForLet(None), _32)
    SourceInfo(src/f2s.rs:54:9-54:22)
  19: StorageLive(_33)
    SourceInfo(src/f2s.rs:57:9-57:11)
  20: StorageLive(_34)
    SourceInfo(src/f2s.rs:57:18-57:20)
  21: _34 = _4
    SourceInfo(src/f2s.rs:57:18-57:20)
  22: _35 = MulWithOverflow(const 4_u32, _34)
    SourceInfo(src/f2s.rs:57:14-57:20)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:57:14-57:20)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _34) -> [success: bb11, unwind: bb168]
  }
  preds [bb4, bb9]
  succs [bb11, bb168]

bb11
  0: _33 = move (_35.0: u32)
    SourceInfo(src/f2s.rs:57:14-57:20)
  1: StorageDead(_34)
    SourceInfo(src/f2s.rs:57:19-57:20)
  2: FakeRead(ForLet(None), _33)
    SourceInfo(src/f2s.rs:57:9-57:11)
  3: StorageLive(_36)
    SourceInfo(src/f2s.rs:58:9-58:11)
  4: StorageLive(_37)
    SourceInfo(src/f2s.rs:58:14-58:20)
  5: StorageLive(_38)
    SourceInfo(src/f2s.rs:58:18-58:20)
  6: _38 = _4
    SourceInfo(src/f2s.rs:58:18-58:20)
  7: _39 = MulWithOverflow(const 4_u32, _38)
    SourceInfo(src/f2s.rs:58:14-58:20)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:58:14-58:20)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _38) -> [success: bb12, unwind: bb168]
  }
  preds [bb10]
  succs [bb12, bb168]

bb12
  0: _37 = move (_39.0: u32)
    SourceInfo(src/f2s.rs:58:14-58:20)
  1: StorageDead(_38)
    SourceInfo(src/f2s.rs:58:19-58:20)
  2: _40 = AddWithOverflow(_37, const 2_u32)
    SourceInfo(src/f2s.rs:58:14-58:24)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:58:14-58:24)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, const 2_u32) -> [success: bb13, unwind: bb168]
  }
  preds [bb11]
  succs [bb13, bb168]

bb13
  0: _36 = move (_40.0: u32)
    SourceInfo(src/f2s.rs:58:14-58:24)
  1: StorageDead(_37)
    SourceInfo(src/f2s.rs:58:23-58:24)
  2: FakeRead(ForLet(None), _36)
    SourceInfo(src/f2s.rs:58:9-58:11)
  3: StorageLive(_41)
    SourceInfo(src/f2s.rs:60:9-60:17)
  4: StorageLive(_42)
    SourceInfo(src/f2s.rs:60:20-60:62)
  5: StorageLive(_43)
    SourceInfo(src/f2s.rs:60:21-60:39)
  6: StorageLive(_44)
    SourceInfo(src/f2s.rs:60:21-60:34)
  7: _44 = _1
    SourceInfo(src/f2s.rs:60:21-60:34)
  8: _43 = Ne(move _44, const 0_u32)
    SourceInfo(src/f2s.rs:60:21-60:39)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:60:21-60:39)
      kind: switchInt(move _43) -> [0: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_44)
    SourceInfo(src/f2s.rs:60:38-60:39)
  1: _42 = const true
    SourceInfo(src/f2s.rs:60:20-60:62)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:60:20-60:62)
      kind: goto -> bb16
  }
  preds [bb13]
  succs [bb16]

bb15
  0: StorageDead(_44)
    SourceInfo(src/f2s.rs:60:38-60:39)
  1: StorageLive(_45)
    SourceInfo(src/f2s.rs:60:43-60:56)
  2: _45 = _2
    SourceInfo(src/f2s.rs:60:43-60:56)
  3: _42 = Le(move _45, const 1_u32)
    SourceInfo(src/f2s.rs:60:43-60:61)
  4: StorageDead(_45)
    SourceInfo(src/f2s.rs:60:60-60:61)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:60:20-60:62)
      kind: goto -> bb16
  }
  preds [bb13]
  succs [bb16]

bb16
  0: StorageDead(_43)
    SourceInfo(src/f2s.rs:60:61-60:62)
  1: _41 = move _42 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:60:20-60:69)
  2: StorageDead(_42)
    SourceInfo(src/f2s.rs:60:68-60:69)
  3: FakeRead(ForLet(None), _41)
    SourceInfo(src/f2s.rs:60:9-60:17)
  4: StorageLive(_46)
    SourceInfo(src/f2s.rs:61:9-61:11)
  5: StorageLive(_47)
    SourceInfo(src/f2s.rs:61:14-61:24)
  6: StorageLive(_48)
    SourceInfo(src/f2s.rs:61:14-61:20)
  7: StorageLive(_49)
    SourceInfo(src/f2s.rs:61:18-61:20)
  8: _49 = _4
    SourceInfo(src/f2s.rs:61:18-61:20)
  9: _50 = MulWithOverflow(const 4_u32, _49)
    SourceInfo(src/f2s.rs:61:14-61:20)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:61:14-61:20)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _49) -> [success: bb17, unwind: bb168]
  }
  preds [bb14, bb15]
  succs [bb17, bb168]

bb17
  0: _48 = move (_50.0: u32)
    SourceInfo(src/f2s.rs:61:14-61:20)
  1: StorageDead(_49)
    SourceInfo(src/f2s.rs:61:19-61:20)
  2: _51 = SubWithOverflow(_48, const 1_u32)
    SourceInfo(src/f2s.rs:61:14-61:24)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:61:14-61:24)
      kind: assert(!move (_51.1: bool), "attempt to compute `{} - {}`, which would overflow", move _48, const 1_u32) -> [success: bb18, unwind: bb168]
  }
  preds [bb16]
  succs [bb18, bb168]

bb18
  0: _47 = move (_51.0: u32)
    SourceInfo(src/f2s.rs:61:14-61:24)
  1: StorageDead(_48)
    SourceInfo(src/f2s.rs:61:23-61:24)
  2: StorageLive(_52)
    SourceInfo(src/f2s.rs:61:27-61:35)
  3: _52 = _41
    SourceInfo(src/f2s.rs:61:27-61:35)
  4: _53 = SubWithOverflow(_47, _52)
    SourceInfo(src/f2s.rs:61:14-61:35)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:61:14-61:35)
      kind: assert(!move (_53.1: bool), "attempt to compute `{} - {}`, which would overflow", move _47, move _52) -> [success: bb19, unwind: bb168]
  }
  preds [bb17]
  succs [bb19, bb168]

bb19
  0: _46 = move (_53.0: u32)
    SourceInfo(src/f2s.rs:61:14-61:35)
  1: StorageDead(_52)
    SourceInfo(src/f2s.rs:61:34-61:35)
  2: StorageDead(_47)
    SourceInfo(src/f2s.rs:61:34-61:35)
  3: FakeRead(ForLet(None), _46)
    SourceInfo(src/f2s.rs:61:9-61:11)
  4: StorageLive(_54)
    SourceInfo(src/f2s.rs:64:9-64:15)
  5: StorageLive(_55)
    SourceInfo(src/f2s.rs:65:9-65:15)
  6: StorageLive(_56)
    SourceInfo(src/f2s.rs:66:9-66:15)
  7: StorageLive(_57)
    SourceInfo(src/f2s.rs:67:9-67:12)
  8: StorageLive(_58)
    SourceInfo(src/f2s.rs:68:9-68:33)
  9: _58 = const false
    SourceInfo(src/f2s.rs:68:36-68:41)
  10: FakeRead(ForLet(None), _58)
    SourceInfo(src/f2s.rs:68:9-68:33)
  11: StorageLive(_59)
    SourceInfo(src/f2s.rs:69:9-69:33)
  12: _59 = const false
    SourceInfo(src/f2s.rs:69:36-69:41)
  13: FakeRead(ForLet(None), _59)
    SourceInfo(src/f2s.rs:69:9-69:33)
  14: StorageLive(_60)
    SourceInfo(src/f2s.rs:70:9-70:31)
  15: _60 = const 0_u8
    SourceInfo(src/f2s.rs:70:34-70:37)
  16: FakeRead(ForLet(None), _60)
    SourceInfo(src/f2s.rs:70:9-70:31)
  17: StorageLive(_61)
    SourceInfo(src/f2s.rs:71:5-126:6)
  18: StorageLive(_62)
    SourceInfo(src/f2s.rs:71:8-71:15)
  19: StorageLive(_63)
    SourceInfo(src/f2s.rs:71:8-71:10)
  20: _63 = _3
    SourceInfo(src/f2s.rs:71:8-71:10)
  21: _62 = Ge(move _63, const 0_i32)
    SourceInfo(src/f2s.rs:71:8-71:15)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:71:8-71:15)
      kind: switchInt(move _62) -> [0: bb65, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb65]

bb20
  0: StorageDead(_63)
    SourceInfo(src/f2s.rs:71:14-71:15)
  1: StorageLive(_64)
    SourceInfo(src/f2s.rs:72:13-72:14)
  2: StorageLive(_65)
    SourceInfo(src/f2s.rs:72:28-72:30)
  3: _65 = _3
    SourceInfo(src/f2s.rs:72:28-72:30)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:72:17-72:31)
      kind: _64 = common::log10_pow2(move _65) -> [return: bb21, unwind: bb168]
  }
  preds [bb19]
  succs [bb21, bb168]

bb21
  0: StorageDead(_65)
    SourceInfo(src/f2s.rs:72:30-72:31)
  1: FakeRead(ForLet(None), _64)
    SourceInfo(src/f2s.rs:72:13-72:14)
  2: StorageLive(_66)
    SourceInfo(src/f2s.rs:73:15-73:16)
  3: _66 = _64
    SourceInfo(src/f2s.rs:73:15-73:16)
  4: _57 = move _66 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:73:9-73:23)
  5: StorageDead(_66)
    SourceInfo(src/f2s.rs:73:22-73:23)
  6: StorageLive(_67)
    SourceInfo(src/f2s.rs:74:13-74:14)
  7: StorageLive(_68)
    SourceInfo(src/f2s.rs:74:17-74:61)
  8: StorageLive(_69)
    SourceInfo(src/f2s.rs:74:43-74:61)
  9: StorageLive(_70)
    SourceInfo(src/f2s.rs:74:52-74:60)
  10: StorageLive(_71)
    SourceInfo(src/f2s.rs:74:52-74:53)
  11: _71 = _64
    SourceInfo(src/f2s.rs:74:52-74:53)
  12: _70 = move _71 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:74:52-74:60)
  13: StorageDead(_71)
    SourceInfo(src/f2s.rs:74:59-74:60)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:74:43-74:61)
      kind: _69 = common::pow5bits(move _70) -> [return: bb22, unwind: bb168]
  }
  preds [bb20]
  succs [bb22, bb168]

bb22
  0: StorageDead(_70)
    SourceInfo(src/f2s.rs:74:60-74:61)
  1: _72 = AddWithOverflow(const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, _69)
    SourceInfo(src/f2s.rs:74:17-74:61)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:74:17-74:61)
      kind: assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, move _69) -> [success: bb23, unwind: bb168]
  }
  preds [bb21]
  succs [bb23, bb168]

bb23
  0: _68 = move (_72.0: i32)
    SourceInfo(src/f2s.rs:74:17-74:61)
  1: StorageDead(_69)
    SourceInfo(src/f2s.rs:74:60-74:61)
  2: _73 = SubWithOverflow(_68, const 1_i32)
    SourceInfo(src/f2s.rs:74:17-74:65)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:74:17-74:65)
      kind: assert(!move (_73.1: bool), "attempt to compute `{} - {}`, which would overflow", move _68, const 1_i32) -> [success: bb24, unwind: bb168]
  }
  preds [bb22]
  succs [bb24, bb168]

bb24
  0: _67 = move (_73.0: i32)
    SourceInfo(src/f2s.rs:74:17-74:65)
  1: StorageDead(_68)
    SourceInfo(src/f2s.rs:74:64-74:65)
  2: FakeRead(ForLet(None), _67)
    SourceInfo(src/f2s.rs:74:13-74:14)
  3: StorageLive(_74)
    SourceInfo(src/f2s.rs:75:13-75:14)
  4: StorageLive(_75)
    SourceInfo(src/f2s.rs:75:17-75:31)
  5: StorageLive(_76)
    SourceInfo(src/f2s.rs:75:17-75:20)
  6: StorageLive(_77)
    SourceInfo(src/f2s.rs:75:18-75:20)
  7: _77 = _3
    SourceInfo(src/f2s.rs:75:18-75:20)
  8: _78 = Eq(_77, const i32::MIN)
    SourceInfo(src/f2s.rs:75:17-75:20)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:75:17-75:20)
      kind: assert(!move _78, "attempt to negate `{}`, which would overflow", _77) -> [success: bb25, unwind: bb168]
  }
  preds [bb23]
  succs [bb25, bb168]

bb25
  0: _76 = Neg(move _77)
    SourceInfo(src/f2s.rs:75:17-75:20)
  1: StorageDead(_77)
    SourceInfo(src/f2s.rs:75:19-75:20)
  2: StorageLive(_79)
    SourceInfo(src/f2s.rs:75:23-75:31)
  3: StorageLive(_80)
    SourceInfo(src/f2s.rs:75:23-75:24)
  4: _80 = _64
    SourceInfo(src/f2s.rs:75:23-75:24)
  5: _79 = move _80 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:75:23-75:31)
  6: StorageDead(_80)
    SourceInfo(src/f2s.rs:75:30-75:31)
  7: _81 = AddWithOverflow(_76, _79)
    SourceInfo(src/f2s.rs:75:17-75:31)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:75:17-75:31)
      kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _76, move _79) -> [success: bb26, unwind: bb168]
  }
  preds [bb24]
  succs [bb26, bb168]

bb26
  0: _75 = move (_81.0: i32)
    SourceInfo(src/f2s.rs:75:17-75:31)
  1: StorageDead(_79)
    SourceInfo(src/f2s.rs:75:30-75:31)
  2: StorageDead(_76)
    SourceInfo(src/f2s.rs:75:30-75:31)
  3: StorageLive(_82)
    SourceInfo(src/f2s.rs:75:34-75:35)
  4: _82 = _67
    SourceInfo(src/f2s.rs:75:34-75:35)
  5: _83 = AddWithOverflow(_75, _82)
    SourceInfo(src/f2s.rs:75:17-75:35)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:75:17-75:35)
      kind: assert(!move (_83.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, move _82) -> [success: bb27, unwind: bb168]
  }
  preds [bb25]
  succs [bb27, bb168]

bb27
  0: _74 = move (_83.0: i32)
    SourceInfo(src/f2s.rs:75:17-75:35)
  1: StorageDead(_82)
    SourceInfo(src/f2s.rs:75:34-75:35)
  2: StorageDead(_75)
    SourceInfo(src/f2s.rs:75:34-75:35)
  3: FakeRead(ForLet(None), _74)
    SourceInfo(src/f2s.rs:75:13-75:14)
  4: StorageLive(_84)
    SourceInfo(src/f2s.rs:76:14-76:45)
  5: StorageLive(_85)
    SourceInfo(src/f2s.rs:76:36-76:38)
  6: _85 = _33
    SourceInfo(src/f2s.rs:76:36-76:38)
  7: StorageLive(_86)
    SourceInfo(src/f2s.rs:76:40-76:41)
  8: _86 = _64
    SourceInfo(src/f2s.rs:76:40-76:41)
  9: StorageLive(_87)
    SourceInfo(src/f2s.rs:76:43-76:44)
  10: _87 = _74
    SourceInfo(src/f2s.rs:76:43-76:44)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:76:14-76:45)
      kind: _84 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _85, move _86, move _87) -> [return: bb28, unwind: bb168]
  }
  preds [bb26]
  succs [bb28, bb168]

bb28
  0: StorageDead(_87)
    SourceInfo(src/f2s.rs:76:44-76:45)
  1: StorageDead(_86)
    SourceInfo(src/f2s.rs:76:44-76:45)
  2: StorageDead(_85)
    SourceInfo(src/f2s.rs:76:44-76:45)
  3: _54 = move _84
    SourceInfo(src/f2s.rs:76:9-76:45)
  4: StorageDead(_84)
    SourceInfo(src/f2s.rs:76:44-76:45)
  5: StorageLive(_88)
    SourceInfo(src/f2s.rs:77:14-77:45)
  6: StorageLive(_89)
    SourceInfo(src/f2s.rs:77:36-77:38)
  7: _89 = _36
    SourceInfo(src/f2s.rs:77:36-77:38)
  8: StorageLive(_90)
    SourceInfo(src/f2s.rs:77:40-77:41)
  9: _90 = _64
    SourceInfo(src/f2s.rs:77:40-77:41)
  10: StorageLive(_91)
    SourceInfo(src/f2s.rs:77:43-77:44)
  11: _91 = _74
    SourceInfo(src/f2s.rs:77:43-77:44)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:77:14-77:45)
      kind: _88 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _89, move _90, move _91) -> [return: bb29, unwind: bb168]
  }
  preds [bb27]
  succs [bb29, bb168]

bb29
  0: StorageDead(_91)
    SourceInfo(src/f2s.rs:77:44-77:45)
  1: StorageDead(_90)
    SourceInfo(src/f2s.rs:77:44-77:45)
  2: StorageDead(_89)
    SourceInfo(src/f2s.rs:77:44-77:45)
  3: _55 = move _88
    SourceInfo(src/f2s.rs:77:9-77:45)
  4: StorageDead(_88)
    SourceInfo(src/f2s.rs:77:44-77:45)
  5: StorageLive(_92)
    SourceInfo(src/f2s.rs:78:14-78:45)
  6: StorageLive(_93)
    SourceInfo(src/f2s.rs:78:36-78:38)
  7: _93 = _46
    SourceInfo(src/f2s.rs:78:36-78:38)
  8: StorageLive(_94)
    SourceInfo(src/f2s.rs:78:40-78:41)
  9: _94 = _64
    SourceInfo(src/f2s.rs:78:40-78:41)
  10: StorageLive(_95)
    SourceInfo(src/f2s.rs:78:43-78:44)
  11: _95 = _74
    SourceInfo(src/f2s.rs:78:43-78:44)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:78:14-78:45)
      kind: _92 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _93, move _94, move _95) -> [return: bb30, unwind: bb168]
  }
  preds [bb28]
  succs [bb30, bb168]

bb30
  0: StorageDead(_95)
    SourceInfo(src/f2s.rs:78:44-78:45)
  1: StorageDead(_94)
    SourceInfo(src/f2s.rs:78:44-78:45)
  2: StorageDead(_93)
    SourceInfo(src/f2s.rs:78:44-78:45)
  3: _56 = move _92
    SourceInfo(src/f2s.rs:78:9-78:45)
  4: StorageDead(_92)
    SourceInfo(src/f2s.rs:78:44-78:45)
  5: StorageLive(_96)
    SourceInfo(src/f2s.rs:79:9-86:10)
  6: StorageLive(_97)
    SourceInfo(src/f2s.rs:79:12-79:18)
  7: StorageLive(_98)
    SourceInfo(src/f2s.rs:79:12-79:13)
  8: _98 = _64
    SourceInfo(src/f2s.rs:79:12-79:13)
  9: _97 = Ne(move _98, const 0_u32)
    SourceInfo(src/f2s.rs:79:12-79:18)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:12-79:18)
      kind: switchInt(move _97) -> [0: bb48, otherwise: bb31]
  }
  preds [bb29]
  succs [bb31, bb48]

bb31
  0: StorageDead(_98)
    SourceInfo(src/f2s.rs:79:17-79:18)
  1: StorageLive(_99)
    SourceInfo(src/f2s.rs:79:22-79:46)
  2: StorageLive(_100)
    SourceInfo(src/f2s.rs:79:22-79:35)
  3: StorageLive(_101)
    SourceInfo(src/f2s.rs:79:22-79:30)
  4: StorageLive(_102)
    SourceInfo(src/f2s.rs:79:23-79:25)
  5: _102 = _55
    SourceInfo(src/f2s.rs:79:23-79:25)
  6: _103 = SubWithOverflow(_102, const 1_u32)
    SourceInfo(src/f2s.rs:79:22-79:30)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:22-79:30)
      kind: assert(!move (_103.1: bool), "attempt to compute `{} - {}`, which would overflow", move _102, const 1_u32) -> [success: bb32, unwind: bb168]
  }
  preds [bb30]
  succs [bb32, bb168]

bb32
  0: _101 = move (_103.0: u32)
    SourceInfo(src/f2s.rs:79:22-79:30)
  1: StorageDead(_102)
    SourceInfo(src/f2s.rs:79:29-79:30)
  2: _104 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:79:22-79:35)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:22-79:35)
      kind: assert(!move _104, "attempt to divide `{}` by zero", _101) -> [success: bb33, unwind: bb168]
  }
  preds [bb31]
  succs [bb33, bb168]

bb33
  0: _100 = Div(move _101, const 10_u32)
    SourceInfo(src/f2s.rs:79:22-79:35)
  1: StorageDead(_101)
    SourceInfo(src/f2s.rs:79:34-79:35)
  2: StorageLive(_105)
    SourceInfo(src/f2s.rs:79:39-79:46)
  3: StorageLive(_106)
    SourceInfo(src/f2s.rs:79:39-79:41)
  4: _106 = _56
    SourceInfo(src/f2s.rs:79:39-79:41)
  5: _107 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:79:39-79:46)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:39-79:46)
      kind: assert(!move _107, "attempt to divide `{}` by zero", _106) -> [success: bb34, unwind: bb168]
  }
  preds [bb32]
  succs [bb34, bb168]

bb34
  0: _105 = Div(move _106, const 10_u32)
    SourceInfo(src/f2s.rs:79:39-79:46)
  1: StorageDead(_106)
    SourceInfo(src/f2s.rs:79:45-79:46)
  2: _99 = Le(move _100, move _105)
    SourceInfo(src/f2s.rs:79:22-79:46)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:22-79:46)
      kind: switchInt(move _99) -> [0: bb47, otherwise: bb35]
  }
  preds [bb33]
  succs [bb35, bb47]

bb35
  0: StorageDead(_105)
    SourceInfo(src/f2s.rs:79:45-79:46)
  1: StorageDead(_100)
    SourceInfo(src/f2s.rs:79:45-79:46)
  2: StorageLive(_108)
    SourceInfo(src/f2s.rs:83:17-83:18)
  3: StorageLive(_109)
    SourceInfo(src/f2s.rs:83:21-83:69)
  4: StorageLive(_110)
    SourceInfo(src/f2s.rs:83:47-83:69)
  5: StorageLive(_111)
    SourceInfo(src/f2s.rs:83:56-83:68)
  6: StorageLive(_112)
    SourceInfo(src/f2s.rs:83:56-83:64)
  7: StorageLive(_113)
    SourceInfo(src/f2s.rs:83:56-83:57)
  8: _113 = _64
    SourceInfo(src/f2s.rs:83:56-83:57)
  9: _112 = move _113 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:83:56-83:64)
  10: StorageDead(_113)
    SourceInfo(src/f2s.rs:83:63-83:64)
  11: _114 = SubWithOverflow(_112, const 1_i32)
    SourceInfo(src/f2s.rs:83:56-83:68)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:83:56-83:68)
      kind: assert(!move (_114.1: bool), "attempt to compute `{} - {}`, which would overflow", move _112, const 1_i32) -> [success: bb36, unwind: bb168]
  }
  preds [bb34]
  succs [bb36, bb168]

bb36
  0: _111 = move (_114.0: i32)
    SourceInfo(src/f2s.rs:83:56-83:68)
  1: StorageDead(_112)
    SourceInfo(src/f2s.rs:83:67-83:68)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:83:47-83:69)
      kind: _110 = common::pow5bits(move _111) -> [return: bb37, unwind: bb168]
  }
  preds [bb35]
  succs [bb37, bb168]

bb37
  0: StorageDead(_111)
    SourceInfo(src/f2s.rs:83:68-83:69)
  1: _115 = AddWithOverflow(const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, _110)
    SourceInfo(src/f2s.rs:83:21-83:69)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:83:21-83:69)
      kind: assert(!move (_115.1: bool), "attempt to compute `{} + {}`, which would overflow", const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, move _110) -> [success: bb38, unwind: bb168]
  }
  preds [bb36]
  succs [bb38, bb168]

bb38
  0: _109 = move (_115.0: i32)
    SourceInfo(src/f2s.rs:83:21-83:69)
  1: StorageDead(_110)
    SourceInfo(src/f2s.rs:83:68-83:69)
  2: _116 = SubWithOverflow(_109, const 1_i32)
    SourceInfo(src/f2s.rs:83:21-83:73)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:83:21-83:73)
      kind: assert(!move (_116.1: bool), "attempt to compute `{} - {}`, which would overflow", move _109, const 1_i32) -> [success: bb39, unwind: bb168]
  }
  preds [bb37]
  succs [bb39, bb168]

bb39
  0: _108 = move (_116.0: i32)
    SourceInfo(src/f2s.rs:83:21-83:73)
  1: StorageDead(_109)
    SourceInfo(src/f2s.rs:83:72-83:73)
  2: FakeRead(ForLet(None), _108)
    SourceInfo(src/f2s.rs:83:17-83:18)
  3: StorageLive(_117)
    SourceInfo(src/f2s.rs:85:17-85:80)
  4: StorageLive(_118)
    SourceInfo(src/f2s.rs:85:18-85:74)
  5: StorageLive(_119)
    SourceInfo(src/f2s.rs:85:40-85:42)
  6: _119 = _33
    SourceInfo(src/f2s.rs:85:40-85:42)
  7: StorageLive(_120)
    SourceInfo(src/f2s.rs:85:44-85:49)
  8: StorageLive(_121)
    SourceInfo(src/f2s.rs:85:44-85:45)
  9: _121 = _64
    SourceInfo(src/f2s.rs:85:44-85:45)
  10: _122 = SubWithOverflow(_121, const 1_u32)
    SourceInfo(src/f2s.rs:85:44-85:49)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:44-85:49)
      kind: assert(!move (_122.1: bool), "attempt to compute `{} - {}`, which would overflow", move _121, const 1_u32) -> [success: bb40, unwind: bb168]
  }
  preds [bb38]
  succs [bb40, bb168]

bb40
  0: _120 = move (_122.0: u32)
    SourceInfo(src/f2s.rs:85:44-85:49)
  1: StorageDead(_121)
    SourceInfo(src/f2s.rs:85:48-85:49)
  2: StorageLive(_123)
    SourceInfo(src/f2s.rs:85:51-85:73)
  3: StorageLive(_124)
    SourceInfo(src/f2s.rs:85:51-85:69)
  4: StorageLive(_125)
    SourceInfo(src/f2s.rs:85:51-85:65)
  5: StorageLive(_126)
    SourceInfo(src/f2s.rs:85:51-85:54)
  6: StorageLive(_127)
    SourceInfo(src/f2s.rs:85:52-85:54)
  7: _127 = _3
    SourceInfo(src/f2s.rs:85:52-85:54)
  8: _128 = Eq(_127, const i32::MIN)
    SourceInfo(src/f2s.rs:85:51-85:54)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:51-85:54)
      kind: assert(!move _128, "attempt to negate `{}`, which would overflow", _127) -> [success: bb41, unwind: bb168]
  }
  preds [bb39]
  succs [bb41, bb168]

bb41
  0: _126 = Neg(move _127)
    SourceInfo(src/f2s.rs:85:51-85:54)
  1: StorageDead(_127)
    SourceInfo(src/f2s.rs:85:53-85:54)
  2: StorageLive(_129)
    SourceInfo(src/f2s.rs:85:57-85:65)
  3: StorageLive(_130)
    SourceInfo(src/f2s.rs:85:57-85:58)
  4: _130 = _64
    SourceInfo(src/f2s.rs:85:57-85:58)
  5: _129 = move _130 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:85:57-85:65)
  6: StorageDead(_130)
    SourceInfo(src/f2s.rs:85:64-85:65)
  7: _131 = AddWithOverflow(_126, _129)
    SourceInfo(src/f2s.rs:85:51-85:65)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:51-85:65)
      kind: assert(!move (_131.1: bool), "attempt to compute `{} + {}`, which would overflow", move _126, move _129) -> [success: bb42, unwind: bb168]
  }
  preds [bb40]
  succs [bb42, bb168]

bb42
  0: _125 = move (_131.0: i32)
    SourceInfo(src/f2s.rs:85:51-85:65)
  1: StorageDead(_129)
    SourceInfo(src/f2s.rs:85:64-85:65)
  2: StorageDead(_126)
    SourceInfo(src/f2s.rs:85:64-85:65)
  3: _132 = SubWithOverflow(_125, const 1_i32)
    SourceInfo(src/f2s.rs:85:51-85:69)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:51-85:69)
      kind: assert(!move (_132.1: bool), "attempt to compute `{} - {}`, which would overflow", move _125, const 1_i32) -> [success: bb43, unwind: bb168]
  }
  preds [bb41]
  succs [bb43, bb168]

bb43
  0: _124 = move (_132.0: i32)
    SourceInfo(src/f2s.rs:85:51-85:69)
  1: StorageDead(_125)
    SourceInfo(src/f2s.rs:85:68-85:69)
  2: StorageLive(_133)
    SourceInfo(src/f2s.rs:85:72-85:73)
  3: _133 = _108
    SourceInfo(src/f2s.rs:85:72-85:73)
  4: _134 = AddWithOverflow(_124, _133)
    SourceInfo(src/f2s.rs:85:51-85:73)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:51-85:73)
      kind: assert(!move (_134.1: bool), "attempt to compute `{} + {}`, which would overflow", move _124, move _133) -> [success: bb44, unwind: bb168]
  }
  preds [bb42]
  succs [bb44, bb168]

bb44
  0: _123 = move (_134.0: i32)
    SourceInfo(src/f2s.rs:85:51-85:73)
  1: StorageDead(_133)
    SourceInfo(src/f2s.rs:85:72-85:73)
  2: StorageDead(_124)
    SourceInfo(src/f2s.rs:85:72-85:73)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:18-85:74)
      kind: _118 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _119, move _120, move _123) -> [return: bb45, unwind: bb168]
  }
  preds [bb43]
  succs [bb45, bb168]

bb45
  0: StorageDead(_123)
    SourceInfo(src/f2s.rs:85:73-85:74)
  1: StorageDead(_120)
    SourceInfo(src/f2s.rs:85:73-85:74)
  2: StorageDead(_119)
    SourceInfo(src/f2s.rs:85:73-85:74)
  3: _135 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:85:17-85:80)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:85:17-85:80)
      kind: assert(!move _135, "attempt to calculate the remainder of `{}` with a divisor of zero", _118) -> [success: bb46, unwind: bb168]
  }
  preds [bb44]
  succs [bb46, bb168]

bb46
  0: _117 = Rem(move _118, const 10_u32)
    SourceInfo(src/f2s.rs:85:17-85:80)
  1: StorageDead(_118)
    SourceInfo(src/f2s.rs:85:79-85:80)
  2: _60 = move _117 as u8 (IntToInt)
    SourceInfo(src/f2s.rs:84:13-85:86)
  3: StorageDead(_117)
    SourceInfo(src/f2s.rs:85:85-85:86)
  4: _96 = const ()
    SourceInfo(src/f2s.rs:79:47-86:10)
  5: StorageDead(_108)
    SourceInfo(src/f2s.rs:86:9-86:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:9-86:10)
      kind: goto -> bb50
  }
  preds [bb45]
  succs [bb50]

bb47
  0: StorageDead(_105)
    SourceInfo(src/f2s.rs:79:45-79:46)
  1: StorageDead(_100)
    SourceInfo(src/f2s.rs:79:45-79:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb49
  }
  preds [bb34]
  succs [bb49]

bb48
  0: StorageDead(_98)
    SourceInfo(src/f2s.rs:79:17-79:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb49
  }
  preds [bb30]
  succs [bb49]

bb49
  0: _96 = const ()
    SourceInfo(src/f2s.rs:86:10-86:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:79:9-86:10)
      kind: goto -> bb50
  }
  preds [bb47, bb48]
  succs [bb50]

bb50
  0: StorageDead(_99)
    SourceInfo(src/f2s.rs:86:9-86:10)
  1: StorageDead(_97)
    SourceInfo(src/f2s.rs:86:9-86:10)
  2: StorageDead(_96)
    SourceInfo(src/f2s.rs:86:9-86:10)
  3: StorageLive(_136)
    SourceInfo(src/f2s.rs:87:12-87:18)
  4: StorageLive(_137)
    SourceInfo(src/f2s.rs:87:12-87:13)
  5: _137 = _64
    SourceInfo(src/f2s.rs:87:12-87:13)
  6: _136 = Le(move _137, const 9_u32)
    SourceInfo(src/f2s.rs:87:12-87:18)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:87:12-87:18)
      kind: switchInt(move _136) -> [0: bb63, otherwise: bb51]
  }
  preds [bb46, bb49]
  succs [bb51, bb63]

bb51
  0: StorageDead(_137)
    SourceInfo(src/f2s.rs:87:17-87:18)
  1: StorageLive(_138)
    SourceInfo(src/f2s.rs:90:16-90:27)
  2: StorageLive(_139)
    SourceInfo(src/f2s.rs:90:16-90:22)
  3: StorageLive(_140)
    SourceInfo(src/f2s.rs:90:16-90:18)
  4: _140 = _33
    SourceInfo(src/f2s.rs:90:16-90:18)
  5: _141 = Eq(const 5_u32, const 0_u32)
    SourceInfo(src/f2s.rs:90:16-90:22)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:90:16-90:22)
      kind: assert(!move _141, "attempt to calculate the remainder of `{}` with a divisor of zero", _140) -> [success: bb52, unwind: bb168]
  }
  preds [bb50]
  succs [bb52, bb168]

bb52
  0: _139 = Rem(move _140, const 5_u32)
    SourceInfo(src/f2s.rs:90:16-90:22)
  1: StorageDead(_140)
    SourceInfo(src/f2s.rs:90:21-90:22)
  2: _138 = Eq(move _139, const 0_u32)
    SourceInfo(src/f2s.rs:90:16-90:27)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:90:16-90:27)
      kind: switchInt(move _138) -> [0: bb55, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb55]

bb53
  0: StorageDead(_139)
    SourceInfo(src/f2s.rs:90:26-90:27)
  1: StorageLive(_142)
    SourceInfo(src/f2s.rs:91:40-91:72)
  2: StorageLive(_143)
    SourceInfo(src/f2s.rs:91:66-91:68)
  3: _143 = _33
    SourceInfo(src/f2s.rs:91:66-91:68)
  4: StorageLive(_144)
    SourceInfo(src/f2s.rs:91:70-91:71)
  5: _144 = _64
    SourceInfo(src/f2s.rs:91:70-91:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:91:40-91:72)
      kind: _142 = f2s_intrinsics::multiple_of_power_of_5_32(move _143, move _144) -> [return: bb54, unwind: bb168]
  }
  preds [bb52]
  succs [bb54, bb168]

bb54
  0: StorageDead(_144)
    SourceInfo(src/f2s.rs:91:71-91:72)
  1: StorageDead(_143)
    SourceInfo(src/f2s.rs:91:71-91:72)
  2: _59 = move _142
    SourceInfo(src/f2s.rs:91:17-91:72)
  3: StorageDead(_142)
    SourceInfo(src/f2s.rs:91:71-91:72)
  4: _61 = const ()
    SourceInfo(src/f2s.rs:90:28-92:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:90:13-96:14)
      kind: goto -> bb62
  }
  preds [bb53]
  succs [bb62]

bb55
  0: StorageDead(_139)
    SourceInfo(src/f2s.rs:90:26-90:27)
  1: StorageLive(_145)
    SourceInfo(src/f2s.rs:92:23-92:36)
  2: _145 = _32
    SourceInfo(src/f2s.rs:92:23-92:36)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:92:23-92:36)
      kind: switchInt(move _145) -> [0: bb58, otherwise: bb56]
  }
  preds [bb52]
  succs [bb56, bb58]

bb56
  0: StorageLive(_146)
    SourceInfo(src/f2s.rs:93:40-93:72)
  1: StorageLive(_147)
    SourceInfo(src/f2s.rs:93:66-93:68)
  2: _147 = _46
    SourceInfo(src/f2s.rs:93:66-93:68)
  3: StorageLive(_148)
    SourceInfo(src/f2s.rs:93:70-93:71)
  4: _148 = _64
    SourceInfo(src/f2s.rs:93:70-93:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:93:40-93:72)
      kind: _146 = f2s_intrinsics::multiple_of_power_of_5_32(move _147, move _148) -> [return: bb57, unwind: bb168]
  }
  preds [bb55]
  succs [bb57, bb168]

bb57
  0: StorageDead(_148)
    SourceInfo(src/f2s.rs:93:71-93:72)
  1: StorageDead(_147)
    SourceInfo(src/f2s.rs:93:71-93:72)
  2: _58 = move _146
    SourceInfo(src/f2s.rs:93:17-93:72)
  3: StorageDead(_146)
    SourceInfo(src/f2s.rs:93:71-93:72)
  4: _61 = const ()
    SourceInfo(src/f2s.rs:92:37-94:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:92:20-96:14)
      kind: goto -> bb61
  }
  preds [bb56]
  succs [bb61]

bb58
  0: StorageLive(_149)
    SourceInfo(src/f2s.rs:95:23-95:62)
  1: StorageLive(_150)
    SourceInfo(src/f2s.rs:95:23-95:55)
  2: StorageLive(_151)
    SourceInfo(src/f2s.rs:95:49-95:51)
  3: _151 = _36
    SourceInfo(src/f2s.rs:95:49-95:51)
  4: StorageLive(_152)
    SourceInfo(src/f2s.rs:95:53-95:54)
  5: _152 = _64
    SourceInfo(src/f2s.rs:95:53-95:54)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:95:23-95:55)
      kind: _150 = f2s_intrinsics::multiple_of_power_of_5_32(move _151, move _152) -> [return: bb59, unwind: bb168]
  }
  preds [bb55]
  succs [bb59, bb168]

bb59
  0: StorageDead(_152)
    SourceInfo(src/f2s.rs:95:54-95:55)
  1: StorageDead(_151)
    SourceInfo(src/f2s.rs:95:54-95:55)
  2: _149 = move _150 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:95:23-95:62)
  3: StorageDead(_150)
    SourceInfo(src/f2s.rs:95:61-95:62)
  4: _153 = SubWithOverflow(_55, _149)
    SourceInfo(src/f2s.rs:95:17-95:62)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:95:17-95:62)
      kind: assert(!move (_153.1: bool), "attempt to compute `{} - {}`, which would overflow", _55, move _149) -> [success: bb60, unwind: bb168]
  }
  preds [bb58]
  succs [bb60, bb168]

bb60
  0: _55 = move (_153.0: u32)
    SourceInfo(src/f2s.rs:95:17-95:62)
  1: StorageDead(_149)
    SourceInfo(src/f2s.rs:95:61-95:62)
  2: _61 = const ()
    SourceInfo(src/f2s.rs:94:20-96:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:92:20-96:14)
      kind: goto -> bb61
  }
  preds [bb59]
  succs [bb61]

bb61
  0: StorageDead(_145)
    SourceInfo(src/f2s.rs:96:13-96:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:90:13-96:14)
      kind: goto -> bb62
  }
  preds [bb57, bb60]
  succs [bb62]

bb62
  0: StorageDead(_138)
    SourceInfo(src/f2s.rs:96:13-96:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:87:9-97:10)
      kind: goto -> bb64
  }
  preds [bb54, bb61]
  succs [bb64]

bb63
  0: StorageDead(_137)
    SourceInfo(src/f2s.rs:87:17-87:18)
  1: _61 = const ()
    SourceInfo(src/f2s.rs:97:10-97:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:87:9-97:10)
      kind: goto -> bb64
  }
  preds [bb50]
  succs [bb64]

bb64
  0: StorageDead(_136)
    SourceInfo(src/f2s.rs:97:9-97:10)
  1: StorageDead(_74)
    SourceInfo(src/f2s.rs:98:5-98:6)
  2: StorageDead(_67)
    SourceInfo(src/f2s.rs:98:5-98:6)
  3: StorageDead(_64)
    SourceInfo(src/f2s.rs:98:5-98:6)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:71:5-126:6)
      kind: goto -> bb106
  }
  preds [bb62, bb63]
  succs [bb106]

bb65
  0: StorageDead(_63)
    SourceInfo(src/f2s.rs:71:14-71:15)
  1: StorageLive(_154)
    SourceInfo(src/f2s.rs:99:13-99:14)
  2: StorageLive(_155)
    SourceInfo(src/f2s.rs:99:28-99:31)
  3: StorageLive(_156)
    SourceInfo(src/f2s.rs:99:29-99:31)
  4: _156 = _3
    SourceInfo(src/f2s.rs:99:29-99:31)
  5: _157 = Eq(_156, const i32::MIN)
    SourceInfo(src/f2s.rs:99:28-99:31)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:99:28-99:31)
      kind: assert(!move _157, "attempt to negate `{}`, which would overflow", _156) -> [success: bb66, unwind: bb168]
  }
  preds [bb19]
  succs [bb66, bb168]

bb66
  0: _155 = Neg(move _156)
    SourceInfo(src/f2s.rs:99:28-99:31)
  1: StorageDead(_156)
    SourceInfo(src/f2s.rs:99:30-99:31)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:99:17-99:32)
      kind: _154 = common::log10_pow5(move _155) -> [return: bb67, unwind: bb168]
  }
  preds [bb65]
  succs [bb67, bb168]

bb67
  0: StorageDead(_155)
    SourceInfo(src/f2s.rs:99:31-99:32)
  1: FakeRead(ForLet(None), _154)
    SourceInfo(src/f2s.rs:99:13-99:14)
  2: StorageLive(_158)
    SourceInfo(src/f2s.rs:100:15-100:23)
  3: StorageLive(_159)
    SourceInfo(src/f2s.rs:100:15-100:16)
  4: _159 = _154
    SourceInfo(src/f2s.rs:100:15-100:16)
  5: _158 = move _159 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:100:15-100:23)
  6: StorageDead(_159)
    SourceInfo(src/f2s.rs:100:22-100:23)
  7: StorageLive(_160)
    SourceInfo(src/f2s.rs:100:26-100:28)
  8: _160 = _3
    SourceInfo(src/f2s.rs:100:26-100:28)
  9: _161 = AddWithOverflow(_158, _160)
    SourceInfo(src/f2s.rs:100:15-100:28)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:100:15-100:28)
      kind: assert(!move (_161.1: bool), "attempt to compute `{} + {}`, which would overflow", move _158, move _160) -> [success: bb68, unwind: bb168]
  }
  preds [bb66]
  succs [bb68, bb168]

bb68
  0: _57 = move (_161.0: i32)
    SourceInfo(src/f2s.rs:100:9-100:28)
  1: StorageDead(_160)
    SourceInfo(src/f2s.rs:100:27-100:28)
  2: StorageDead(_158)
    SourceInfo(src/f2s.rs:100:27-100:28)
  3: StorageLive(_162)
    SourceInfo(src/f2s.rs:101:13-101:14)
  4: StorageLive(_163)
    SourceInfo(src/f2s.rs:101:17-101:20)
  5: StorageLive(_164)
    SourceInfo(src/f2s.rs:101:18-101:20)
  6: _164 = _3
    SourceInfo(src/f2s.rs:101:18-101:20)
  7: _165 = Eq(_164, const i32::MIN)
    SourceInfo(src/f2s.rs:101:17-101:20)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:101:17-101:20)
      kind: assert(!move _165, "attempt to negate `{}`, which would overflow", _164) -> [success: bb69, unwind: bb168]
  }
  preds [bb67]
  succs [bb69, bb168]

bb69
  0: _163 = Neg(move _164)
    SourceInfo(src/f2s.rs:101:17-101:20)
  1: StorageDead(_164)
    SourceInfo(src/f2s.rs:101:19-101:20)
  2: StorageLive(_166)
    SourceInfo(src/f2s.rs:101:23-101:31)
  3: StorageLive(_167)
    SourceInfo(src/f2s.rs:101:23-101:24)
  4: _167 = _154
    SourceInfo(src/f2s.rs:101:23-101:24)
  5: _166 = move _167 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:101:23-101:31)
  6: StorageDead(_167)
    SourceInfo(src/f2s.rs:101:30-101:31)
  7: _168 = SubWithOverflow(_163, _166)
    SourceInfo(src/f2s.rs:101:17-101:31)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:101:17-101:31)
      kind: assert(!move (_168.1: bool), "attempt to compute `{} - {}`, which would overflow", move _163, move _166) -> [success: bb70, unwind: bb168]
  }
  preds [bb68]
  succs [bb70, bb168]

bb70
  0: _162 = move (_168.0: i32)
    SourceInfo(src/f2s.rs:101:17-101:31)
  1: StorageDead(_166)
    SourceInfo(src/f2s.rs:101:30-101:31)
  2: StorageDead(_163)
    SourceInfo(src/f2s.rs:101:30-101:31)
  3: FakeRead(ForLet(None), _162)
    SourceInfo(src/f2s.rs:101:13-101:14)
  4: StorageLive(_169)
    SourceInfo(src/f2s.rs:102:13-102:14)
  5: StorageLive(_170)
    SourceInfo(src/f2s.rs:102:17-102:28)
  6: StorageLive(_171)
    SourceInfo(src/f2s.rs:102:26-102:27)
  7: _171 = _162
    SourceInfo(src/f2s.rs:102:26-102:27)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:102:17-102:28)
      kind: _170 = common::pow5bits(move _171) -> [return: bb71, unwind: bb168]
  }
  preds [bb69]
  succs [bb71, bb168]

bb71
  0: StorageDead(_171)
    SourceInfo(src/f2s.rs:102:27-102:28)
  1: _172 = SubWithOverflow(_170, const f2s_intrinsics::FLOAT_POW5_BITCOUNT)
    SourceInfo(src/f2s.rs:102:17-102:50)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:102:17-102:50)
      kind: assert(!move (_172.1: bool), "attempt to compute `{} - {}`, which would overflow", move _170, const f2s_intrinsics::FLOAT_POW5_BITCOUNT) -> [success: bb72, unwind: bb168]
  }
  preds [bb70]
  succs [bb72, bb168]

bb72
  0: _169 = move (_172.0: i32)
    SourceInfo(src/f2s.rs:102:17-102:50)
  1: StorageDead(_170)
    SourceInfo(src/f2s.rs:102:49-102:50)
  2: FakeRead(ForLet(None), _169)
    SourceInfo(src/f2s.rs:102:13-102:14)
  3: StorageLive(_173)
    SourceInfo(src/f2s.rs:103:13-103:18)
  4: StorageLive(_174)
    SourceInfo(src/f2s.rs:103:21-103:29)
  5: StorageLive(_175)
    SourceInfo(src/f2s.rs:103:21-103:22)
  6: _175 = _154
    SourceInfo(src/f2s.rs:103:21-103:22)
  7: _174 = move _175 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:103:21-103:29)
  8: StorageDead(_175)
    SourceInfo(src/f2s.rs:103:28-103:29)
  9: StorageLive(_176)
    SourceInfo(src/f2s.rs:103:32-103:33)
  10: _176 = _169
    SourceInfo(src/f2s.rs:103:32-103:33)
  11: _177 = SubWithOverflow(_174, _176)
    SourceInfo(src/f2s.rs:103:21-103:33)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:103:21-103:33)
      kind: assert(!move (_177.1: bool), "attempt to compute `{} - {}`, which would overflow", move _174, move _176) -> [success: bb73, unwind: bb168]
  }
  preds [bb71]
  succs [bb73, bb168]

bb73
  0: _173 = move (_177.0: i32)
    SourceInfo(src/f2s.rs:103:21-103:33)
  1: StorageDead(_176)
    SourceInfo(src/f2s.rs:103:32-103:33)
  2: StorageDead(_174)
    SourceInfo(src/f2s.rs:103:32-103:33)
  3: FakeRead(ForLet(None), _173)
    SourceInfo(src/f2s.rs:103:13-103:18)
  4: StorageLive(_178)
    SourceInfo(src/f2s.rs:104:14-104:48)
  5: StorageLive(_179)
    SourceInfo(src/f2s.rs:104:32-104:34)
  6: _179 = _33
    SourceInfo(src/f2s.rs:104:32-104:34)
  7: StorageLive(_180)
    SourceInfo(src/f2s.rs:104:36-104:44)
  8: StorageLive(_181)
    SourceInfo(src/f2s.rs:104:36-104:37)
  9: _181 = _162
    SourceInfo(src/f2s.rs:104:36-104:37)
  10: _180 = move _181 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:104:36-104:44)
  11: StorageDead(_181)
    SourceInfo(src/f2s.rs:104:43-104:44)
  12: StorageLive(_182)
    SourceInfo(src/f2s.rs:104:46-104:47)
  13: _182 = _173
    SourceInfo(src/f2s.rs:104:46-104:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:104:14-104:48)
      kind: _178 = f2s_intrinsics::mul_pow5_div_pow2(move _179, move _180, move _182) -> [return: bb74, unwind: bb168]
  }
  preds [bb72]
  succs [bb74, bb168]

bb74
  0: StorageDead(_182)
    SourceInfo(src/f2s.rs:104:47-104:48)
  1: StorageDead(_180)
    SourceInfo(src/f2s.rs:104:47-104:48)
  2: StorageDead(_179)
    SourceInfo(src/f2s.rs:104:47-104:48)
  3: _54 = move _178
    SourceInfo(src/f2s.rs:104:9-104:48)
  4: StorageDead(_178)
    SourceInfo(src/f2s.rs:104:47-104:48)
  5: StorageLive(_183)
    SourceInfo(src/f2s.rs:105:14-105:48)
  6: StorageLive(_184)
    SourceInfo(src/f2s.rs:105:32-105:34)
  7: _184 = _36
    SourceInfo(src/f2s.rs:105:32-105:34)
  8: StorageLive(_185)
    SourceInfo(src/f2s.rs:105:36-105:44)
  9: StorageLive(_186)
    SourceInfo(src/f2s.rs:105:36-105:37)
  10: _186 = _162
    SourceInfo(src/f2s.rs:105:36-105:37)
  11: _185 = move _186 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:105:36-105:44)
  12: StorageDead(_186)
    SourceInfo(src/f2s.rs:105:43-105:44)
  13: StorageLive(_187)
    SourceInfo(src/f2s.rs:105:46-105:47)
  14: _187 = _173
    SourceInfo(src/f2s.rs:105:46-105:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:105:14-105:48)
      kind: _183 = f2s_intrinsics::mul_pow5_div_pow2(move _184, move _185, move _187) -> [return: bb75, unwind: bb168]
  }
  preds [bb73]
  succs [bb75, bb168]

bb75
  0: StorageDead(_187)
    SourceInfo(src/f2s.rs:105:47-105:48)
  1: StorageDead(_185)
    SourceInfo(src/f2s.rs:105:47-105:48)
  2: StorageDead(_184)
    SourceInfo(src/f2s.rs:105:47-105:48)
  3: _55 = move _183
    SourceInfo(src/f2s.rs:105:9-105:48)
  4: StorageDead(_183)
    SourceInfo(src/f2s.rs:105:47-105:48)
  5: StorageLive(_188)
    SourceInfo(src/f2s.rs:106:14-106:48)
  6: StorageLive(_189)
    SourceInfo(src/f2s.rs:106:32-106:34)
  7: _189 = _46
    SourceInfo(src/f2s.rs:106:32-106:34)
  8: StorageLive(_190)
    SourceInfo(src/f2s.rs:106:36-106:44)
  9: StorageLive(_191)
    SourceInfo(src/f2s.rs:106:36-106:37)
  10: _191 = _162
    SourceInfo(src/f2s.rs:106:36-106:37)
  11: _190 = move _191 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:106:36-106:44)
  12: StorageDead(_191)
    SourceInfo(src/f2s.rs:106:43-106:44)
  13: StorageLive(_192)
    SourceInfo(src/f2s.rs:106:46-106:47)
  14: _192 = _173
    SourceInfo(src/f2s.rs:106:46-106:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:106:14-106:48)
      kind: _188 = f2s_intrinsics::mul_pow5_div_pow2(move _189, move _190, move _192) -> [return: bb76, unwind: bb168]
  }
  preds [bb74]
  succs [bb76, bb168]

bb76
  0: StorageDead(_192)
    SourceInfo(src/f2s.rs:106:47-106:48)
  1: StorageDead(_190)
    SourceInfo(src/f2s.rs:106:47-106:48)
  2: StorageDead(_189)
    SourceInfo(src/f2s.rs:106:47-106:48)
  3: _56 = move _188
    SourceInfo(src/f2s.rs:106:9-106:48)
  4: StorageDead(_188)
    SourceInfo(src/f2s.rs:106:47-106:48)
  5: StorageLive(_193)
    SourceInfo(src/f2s.rs:107:9-110:10)
  6: StorageLive(_194)
    SourceInfo(src/f2s.rs:107:12-107:18)
  7: StorageLive(_195)
    SourceInfo(src/f2s.rs:107:12-107:13)
  8: _195 = _154
    SourceInfo(src/f2s.rs:107:12-107:13)
  9: _194 = Ne(move _195, const 0_u32)
    SourceInfo(src/f2s.rs:107:12-107:18)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:12-107:18)
      kind: switchInt(move _194) -> [0: bb91, otherwise: bb77]
  }
  preds [bb75]
  succs [bb77, bb91]

bb77
  0: StorageDead(_195)
    SourceInfo(src/f2s.rs:107:17-107:18)
  1: StorageLive(_196)
    SourceInfo(src/f2s.rs:107:22-107:46)
  2: StorageLive(_197)
    SourceInfo(src/f2s.rs:107:22-107:35)
  3: StorageLive(_198)
    SourceInfo(src/f2s.rs:107:22-107:30)
  4: StorageLive(_199)
    SourceInfo(src/f2s.rs:107:23-107:25)
  5: _199 = _55
    SourceInfo(src/f2s.rs:107:23-107:25)
  6: _200 = SubWithOverflow(_199, const 1_u32)
    SourceInfo(src/f2s.rs:107:22-107:30)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:22-107:30)
      kind: assert(!move (_200.1: bool), "attempt to compute `{} - {}`, which would overflow", move _199, const 1_u32) -> [success: bb78, unwind: bb168]
  }
  preds [bb76]
  succs [bb78, bb168]

bb78
  0: _198 = move (_200.0: u32)
    SourceInfo(src/f2s.rs:107:22-107:30)
  1: StorageDead(_199)
    SourceInfo(src/f2s.rs:107:29-107:30)
  2: _201 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:107:22-107:35)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:22-107:35)
      kind: assert(!move _201, "attempt to divide `{}` by zero", _198) -> [success: bb79, unwind: bb168]
  }
  preds [bb77]
  succs [bb79, bb168]

bb79
  0: _197 = Div(move _198, const 10_u32)
    SourceInfo(src/f2s.rs:107:22-107:35)
  1: StorageDead(_198)
    SourceInfo(src/f2s.rs:107:34-107:35)
  2: StorageLive(_202)
    SourceInfo(src/f2s.rs:107:39-107:46)
  3: StorageLive(_203)
    SourceInfo(src/f2s.rs:107:39-107:41)
  4: _203 = _56
    SourceInfo(src/f2s.rs:107:39-107:41)
  5: _204 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:107:39-107:46)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:39-107:46)
      kind: assert(!move _204, "attempt to divide `{}` by zero", _203) -> [success: bb80, unwind: bb168]
  }
  preds [bb78]
  succs [bb80, bb168]

bb80
  0: _202 = Div(move _203, const 10_u32)
    SourceInfo(src/f2s.rs:107:39-107:46)
  1: StorageDead(_203)
    SourceInfo(src/f2s.rs:107:45-107:46)
  2: _196 = Le(move _197, move _202)
    SourceInfo(src/f2s.rs:107:22-107:46)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:22-107:46)
      kind: switchInt(move _196) -> [0: bb90, otherwise: bb81]
  }
  preds [bb79]
  succs [bb81, bb90]

bb81
  0: StorageDead(_202)
    SourceInfo(src/f2s.rs:107:45-107:46)
  1: StorageDead(_197)
    SourceInfo(src/f2s.rs:107:45-107:46)
  2: StorageLive(_205)
    SourceInfo(src/f2s.rs:108:17-108:29)
  3: StorageLive(_206)
    SourceInfo(src/f2s.rs:108:17-108:25)
  4: StorageLive(_207)
    SourceInfo(src/f2s.rs:108:17-108:18)
  5: _207 = _154
    SourceInfo(src/f2s.rs:108:17-108:18)
  6: _206 = move _207 as i32 (IntToInt)
    SourceInfo(src/f2s.rs:108:17-108:25)
  7: StorageDead(_207)
    SourceInfo(src/f2s.rs:108:24-108:25)
  8: _208 = SubWithOverflow(_206, const 1_i32)
    SourceInfo(src/f2s.rs:108:17-108:29)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:108:17-108:29)
      kind: assert(!move (_208.1: bool), "attempt to compute `{} - {}`, which would overflow", move _206, const 1_i32) -> [success: bb82, unwind: bb168]
  }
  preds [bb80]
  succs [bb82, bb168]

bb82
  0: _205 = move (_208.0: i32)
    SourceInfo(src/f2s.rs:108:17-108:29)
  1: StorageDead(_206)
    SourceInfo(src/f2s.rs:108:28-108:29)
  2: StorageLive(_209)
    SourceInfo(src/f2s.rs:108:32-108:71)
  3: StorageLive(_210)
    SourceInfo(src/f2s.rs:108:33-108:48)
  4: StorageLive(_211)
    SourceInfo(src/f2s.rs:108:42-108:47)
  5: StorageLive(_212)
    SourceInfo(src/f2s.rs:108:42-108:43)
  6: _212 = _162
    SourceInfo(src/f2s.rs:108:42-108:43)
  7: _213 = AddWithOverflow(_212, const 1_i32)
    SourceInfo(src/f2s.rs:108:42-108:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:108:42-108:47)
      kind: assert(!move (_213.1: bool), "attempt to compute `{} + {}`, which would overflow", move _212, const 1_i32) -> [success: bb83, unwind: bb168]
  }
  preds [bb81]
  succs [bb83, bb168]

bb83
  0: _211 = move (_213.0: i32)
    SourceInfo(src/f2s.rs:108:42-108:47)
  1: StorageDead(_212)
    SourceInfo(src/f2s.rs:108:46-108:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:108:33-108:48)
      kind: _210 = common::pow5bits(move _211) -> [return: bb84, unwind: bb168]
  }
  preds [bb82]
  succs [bb84, bb168]

bb84
  0: StorageDead(_211)
    SourceInfo(src/f2s.rs:108:47-108:48)
  1: _214 = SubWithOverflow(_210, const f2s_intrinsics::FLOAT_POW5_BITCOUNT)
    SourceInfo(src/f2s.rs:108:32-108:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:108:32-108:71)
      kind: assert(!move (_214.1: bool), "attempt to compute `{} - {}`, which would overflow", move _210, const f2s_intrinsics::FLOAT_POW5_BITCOUNT) -> [success: bb85, unwind: bb168]
  }
  preds [bb83]
  succs [bb85, bb168]

bb85
  0: _209 = move (_214.0: i32)
    SourceInfo(src/f2s.rs:108:32-108:71)
  1: StorageDead(_210)
    SourceInfo(src/f2s.rs:108:70-108:71)
  2: _215 = SubWithOverflow(_205, _209)
    SourceInfo(src/f2s.rs:108:17-108:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:108:17-108:71)
      kind: assert(!move (_215.1: bool), "attempt to compute `{} - {}`, which would overflow", move _205, move _209) -> [success: bb86, unwind: bb168]
  }
  preds [bb84]
  succs [bb86, bb168]

bb86
  0: _173 = move (_215.0: i32)
    SourceInfo(src/f2s.rs:108:13-108:71)
  1: StorageDead(_209)
    SourceInfo(src/f2s.rs:108:70-108:71)
  2: StorageDead(_205)
    SourceInfo(src/f2s.rs:108:70-108:71)
  3: StorageLive(_216)
    SourceInfo(src/f2s.rs:109:34-109:81)
  4: StorageLive(_217)
    SourceInfo(src/f2s.rs:109:35-109:75)
  5: StorageLive(_218)
    SourceInfo(src/f2s.rs:109:53-109:55)
  6: _218 = _33
    SourceInfo(src/f2s.rs:109:53-109:55)
  7: StorageLive(_219)
    SourceInfo(src/f2s.rs:109:57-109:71)
  8: StorageLive(_220)
    SourceInfo(src/f2s.rs:109:57-109:64)
  9: StorageLive(_221)
    SourceInfo(src/f2s.rs:109:58-109:59)
  10: _221 = _162
    SourceInfo(src/f2s.rs:109:58-109:59)
  11: _222 = AddWithOverflow(_221, const 1_i32)
    SourceInfo(src/f2s.rs:109:57-109:64)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:109:57-109:64)
      kind: assert(!move (_222.1: bool), "attempt to compute `{} + {}`, which would overflow", move _221, const 1_i32) -> [success: bb87, unwind: bb168]
  }
  preds [bb85]
  succs [bb87, bb168]

bb87
  0: _220 = move (_222.0: i32)
    SourceInfo(src/f2s.rs:109:57-109:64)
  1: StorageDead(_221)
    SourceInfo(src/f2s.rs:109:63-109:64)
  2: _219 = move _220 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:109:57-109:71)
  3: StorageDead(_220)
    SourceInfo(src/f2s.rs:109:70-109:71)
  4: StorageLive(_223)
    SourceInfo(src/f2s.rs:109:73-109:74)
  5: _223 = _173
    SourceInfo(src/f2s.rs:109:73-109:74)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:109:35-109:75)
      kind: _217 = f2s_intrinsics::mul_pow5_div_pow2(move _218, move _219, move _223) -> [return: bb88, unwind: bb168]
  }
  preds [bb86]
  succs [bb88, bb168]

bb88
  0: StorageDead(_223)
    SourceInfo(src/f2s.rs:109:74-109:75)
  1: StorageDead(_219)
    SourceInfo(src/f2s.rs:109:74-109:75)
  2: StorageDead(_218)
    SourceInfo(src/f2s.rs:109:74-109:75)
  3: _224 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:109:34-109:81)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:109:34-109:81)
      kind: assert(!move _224, "attempt to calculate the remainder of `{}` with a divisor of zero", _217) -> [success: bb89, unwind: bb168]
  }
  preds [bb87]
  succs [bb89, bb168]

bb89
  0: _216 = Rem(move _217, const 10_u32)
    SourceInfo(src/f2s.rs:109:34-109:81)
  1: StorageDead(_217)
    SourceInfo(src/f2s.rs:109:80-109:81)
  2: _60 = move _216 as u8 (IntToInt)
    SourceInfo(src/f2s.rs:109:13-109:87)
  3: StorageDead(_216)
    SourceInfo(src/f2s.rs:109:86-109:87)
  4: _193 = const ()
    SourceInfo(src/f2s.rs:107:47-110:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:9-110:10)
      kind: goto -> bb93
  }
  preds [bb88]
  succs [bb93]

bb90
  0: StorageDead(_202)
    SourceInfo(src/f2s.rs:107:45-107:46)
  1: StorageDead(_197)
    SourceInfo(src/f2s.rs:107:45-107:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb80]
  succs [bb92]

bb91
  0: StorageDead(_195)
    SourceInfo(src/f2s.rs:107:17-107:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb76]
  succs [bb92]

bb92
  0: _193 = const ()
    SourceInfo(src/f2s.rs:110:10-110:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:107:9-110:10)
      kind: goto -> bb93
  }
  preds [bb90, bb91]
  succs [bb93]

bb93
  0: StorageDead(_196)
    SourceInfo(src/f2s.rs:110:9-110:10)
  1: StorageDead(_194)
    SourceInfo(src/f2s.rs:110:9-110:10)
  2: StorageDead(_193)
    SourceInfo(src/f2s.rs:110:9-110:10)
  3: StorageLive(_225)
    SourceInfo(src/f2s.rs:111:12-111:18)
  4: StorageLive(_226)
    SourceInfo(src/f2s.rs:111:12-111:13)
  5: _226 = _154
    SourceInfo(src/f2s.rs:111:12-111:13)
  6: _225 = Le(move _226, const 1_u32)
    SourceInfo(src/f2s.rs:111:12-111:18)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:111:12-111:18)
      kind: switchInt(move _225) -> [0: bb99, otherwise: bb94]
  }
  preds [bb89, bb92]
  succs [bb94, bb99]

bb94
  0: StorageDead(_226)
    SourceInfo(src/f2s.rs:111:17-111:18)
  1: _59 = const true
    SourceInfo(src/f2s.rs:114:13-114:40)
  2: StorageLive(_227)
    SourceInfo(src/f2s.rs:115:16-115:29)
  3: _227 = _32
    SourceInfo(src/f2s.rs:115:16-115:29)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:115:16-115:29)
      kind: switchInt(move _227) -> [0: bb96, otherwise: bb95]
  }
  preds [bb93]
  succs [bb95, bb96]

bb95
  0: StorageLive(_228)
    SourceInfo(src/f2s.rs:117:40-117:48)
  1: _228 = _41
    SourceInfo(src/f2s.rs:117:40-117:48)
  2: _58 = Eq(move _228, const 1_u32)
    SourceInfo(src/f2s.rs:117:17-117:53)
  3: StorageDead(_228)
    SourceInfo(src/f2s.rs:117:52-117:53)
  4: _61 = const ()
    SourceInfo(src/f2s.rs:115:30-118:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:115:13-121:14)
      kind: goto -> bb98
  }
  preds [bb94]
  succs [bb98]

bb96
  0: _229 = SubWithOverflow(_55, const 1_u32)
    SourceInfo(src/f2s.rs:120:17-120:24)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:120:17-120:24)
      kind: assert(!move (_229.1: bool), "attempt to compute `{} - {}`, which would overflow", _55, const 1_u32) -> [success: bb97, unwind: bb168]
  }
  preds [bb94]
  succs [bb97, bb168]

bb97
  0: _55 = move (_229.0: u32)
    SourceInfo(src/f2s.rs:120:17-120:24)
  1: _61 = const ()
    SourceInfo(src/f2s.rs:118:20-121:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:115:13-121:14)
      kind: goto -> bb98
  }
  preds [bb96]
  succs [bb98]

bb98
  0: StorageDead(_227)
    SourceInfo(src/f2s.rs:121:13-121:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:111:9-125:10)
      kind: goto -> bb105
  }
  preds [bb95, bb97]
  succs [bb105]

bb99
  0: StorageDead(_226)
    SourceInfo(src/f2s.rs:111:17-111:18)
  1: StorageLive(_230)
    SourceInfo(src/f2s.rs:122:19-122:25)
  2: StorageLive(_231)
    SourceInfo(src/f2s.rs:122:19-122:20)
  3: _231 = _154
    SourceInfo(src/f2s.rs:122:19-122:20)
  4: _230 = Lt(move _231, const 31_u32)
    SourceInfo(src/f2s.rs:122:19-122:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:122:19-122:25)
      kind: switchInt(move _230) -> [0: bb103, otherwise: bb100]
  }
  preds [bb93]
  succs [bb100, bb103]

bb100
  0: StorageDead(_231)
    SourceInfo(src/f2s.rs:122:24-122:25)
  1: StorageLive(_232)
    SourceInfo(src/f2s.rs:124:36-124:72)
  2: StorageLive(_233)
    SourceInfo(src/f2s.rs:124:62-124:64)
  3: _233 = _33
    SourceInfo(src/f2s.rs:124:62-124:64)
  4: StorageLive(_234)
    SourceInfo(src/f2s.rs:124:66-124:71)
  5: StorageLive(_235)
    SourceInfo(src/f2s.rs:124:66-124:67)
  6: _235 = _154
    SourceInfo(src/f2s.rs:124:66-124:67)
  7: _236 = SubWithOverflow(_235, const 1_u32)
    SourceInfo(src/f2s.rs:124:66-124:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:124:66-124:71)
      kind: assert(!move (_236.1: bool), "attempt to compute `{} - {}`, which would overflow", move _235, const 1_u32) -> [success: bb101, unwind: bb168]
  }
  preds [bb99]
  succs [bb101, bb168]

bb101
  0: _234 = move (_236.0: u32)
    SourceInfo(src/f2s.rs:124:66-124:71)
  1: StorageDead(_235)
    SourceInfo(src/f2s.rs:124:70-124:71)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:124:36-124:72)
      kind: _232 = f2s_intrinsics::multiple_of_power_of_2_32(move _233, move _234) -> [return: bb102, unwind: bb168]
  }
  preds [bb100]
  succs [bb102, bb168]

bb102
  0: StorageDead(_234)
    SourceInfo(src/f2s.rs:124:71-124:72)
  1: StorageDead(_233)
    SourceInfo(src/f2s.rs:124:71-124:72)
  2: _59 = move _232
    SourceInfo(src/f2s.rs:124:13-124:72)
  3: StorageDead(_232)
    SourceInfo(src/f2s.rs:124:71-124:72)
  4: _61 = const ()
    SourceInfo(src/f2s.rs:122:26-125:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:122:16-125:10)
      kind: goto -> bb104
  }
  preds [bb101]
  succs [bb104]

bb103
  0: StorageDead(_231)
    SourceInfo(src/f2s.rs:122:24-122:25)
  1: _61 = const ()
    SourceInfo(src/f2s.rs:125:10-125:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:122:16-125:10)
      kind: goto -> bb104
  }
  preds [bb99]
  succs [bb104]

bb104
  0: StorageDead(_230)
    SourceInfo(src/f2s.rs:125:9-125:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:111:9-125:10)
      kind: goto -> bb105
  }
  preds [bb102, bb103]
  succs [bb105]

bb105
  0: StorageDead(_225)
    SourceInfo(src/f2s.rs:125:9-125:10)
  1: StorageDead(_173)
    SourceInfo(src/f2s.rs:126:5-126:6)
  2: StorageDead(_169)
    SourceInfo(src/f2s.rs:126:5-126:6)
  3: StorageDead(_162)
    SourceInfo(src/f2s.rs:126:5-126:6)
  4: StorageDead(_154)
    SourceInfo(src/f2s.rs:126:5-126:6)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:71:5-126:6)
      kind: goto -> bb106
  }
  preds [bb98, bb104]
  succs [bb106]

bb106
  0: StorageDead(_62)
    SourceInfo(src/f2s.rs:126:5-126:6)
  1: StorageDead(_61)
    SourceInfo(src/f2s.rs:126:5-126:6)
  2: StorageLive(_237)
    SourceInfo(src/f2s.rs:129:9-129:20)
  3: _237 = const 0_i32
    SourceInfo(src/f2s.rs:129:23-129:27)
  4: FakeRead(ForLet(None), _237)
    SourceInfo(src/f2s.rs:129:9-129:20)
  5: StorageLive(_238)
    SourceInfo(src/f2s.rs:130:9-130:15)
  6: StorageLive(_239)
    SourceInfo(src/f2s.rs:130:21-130:41)
  7: _239 = _58
    SourceInfo(src/f2s.rs:130:21-130:41)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:130:21-130:41)
      kind: switchInt(move _239) -> [0: bb107, otherwise: bb108]
  }
  preds [bb64, bb105]
  succs [bb107, bb108]

bb107
  0: StorageLive(_240)
    SourceInfo(src/f2s.rs:130:45-130:65)
  1: _240 = _59
    SourceInfo(src/f2s.rs:130:45-130:65)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:130:45-130:65)
      kind: switchInt(move _240) -> [0: bb150, otherwise: bb108]
  }
  preds [bb106]
  succs [bb108, bb150]

bb108
  0: StorageLive(_241)
    SourceInfo(src/f2s.rs:132:9-140:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:9-140:10)
      kind: goto -> bb109
  }
  preds [bb106, bb107]
  succs [bb109]

bb109
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:9-140:10)
      kind: falseUnwind -> [real: bb110, unwind: bb168]
  }
  preds [bb108, bb121]
  succs [bb110, bb168]

bb110
  0: StorageLive(_243)
    SourceInfo(src/f2s.rs:132:15-132:32)
  1: StorageLive(_244)
    SourceInfo(src/f2s.rs:132:15-132:22)
  2: StorageLive(_245)
    SourceInfo(src/f2s.rs:132:15-132:17)
  3: _245 = _55
    SourceInfo(src/f2s.rs:132:15-132:17)
  4: _246 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:132:15-132:22)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:15-132:22)
      kind: assert(!move _246, "attempt to divide `{}` by zero", _245) -> [success: bb111, unwind: bb168]
  }
  preds [bb109]
  succs [bb111, bb168]

bb111
  0: _244 = Div(move _245, const 10_u32)
    SourceInfo(src/f2s.rs:132:15-132:22)
  1: StorageDead(_245)
    SourceInfo(src/f2s.rs:132:21-132:22)
  2: StorageLive(_247)
    SourceInfo(src/f2s.rs:132:25-132:32)
  3: StorageLive(_248)
    SourceInfo(src/f2s.rs:132:25-132:27)
  4: _248 = _56
    SourceInfo(src/f2s.rs:132:25-132:27)
  5: _249 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:132:25-132:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:25-132:32)
      kind: assert(!move _249, "attempt to divide `{}` by zero", _248) -> [success: bb112, unwind: bb168]
  }
  preds [bb110]
  succs [bb112, bb168]

bb112
  0: _247 = Div(move _248, const 10_u32)
    SourceInfo(src/f2s.rs:132:25-132:32)
  1: StorageDead(_248)
    SourceInfo(src/f2s.rs:132:31-132:32)
  2: _243 = Gt(move _244, move _247)
    SourceInfo(src/f2s.rs:132:15-132:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:15-132:32)
      kind: switchInt(move _243) -> [0: bb122, otherwise: bb113]
  }
  preds [bb111]
  succs [bb113, bb122]

bb113
  0: StorageDead(_247)
    SourceInfo(src/f2s.rs:132:31-132:32)
  1: StorageDead(_244)
    SourceInfo(src/f2s.rs:132:31-132:32)
  2: StorageLive(_250)
    SourceInfo(src/f2s.rs:133:37-133:61)
  3: StorageLive(_251)
    SourceInfo(src/f2s.rs:133:37-133:56)
  4: StorageLive(_252)
    SourceInfo(src/f2s.rs:133:37-133:39)
  5: _252 = _56
    SourceInfo(src/f2s.rs:133:37-133:39)
  6: StorageLive(_253)
    SourceInfo(src/f2s.rs:133:42-133:56)
  7: StorageLive(_254)
    SourceInfo(src/f2s.rs:133:42-133:51)
  8: StorageLive(_255)
    SourceInfo(src/f2s.rs:133:43-133:45)
  9: _255 = _56
    SourceInfo(src/f2s.rs:133:43-133:45)
  10: _256 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:133:42-133:51)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:133:42-133:51)
      kind: assert(!move _256, "attempt to divide `{}` by zero", _255) -> [success: bb114, unwind: bb168]
  }
  preds [bb112]
  succs [bb114, bb168]

bb114
  0: _254 = Div(move _255, const 10_u32)
    SourceInfo(src/f2s.rs:133:42-133:51)
  1: StorageDead(_255)
    SourceInfo(src/f2s.rs:133:50-133:51)
  2: _257 = MulWithOverflow(_254, const 10_u32)
    SourceInfo(src/f2s.rs:133:42-133:56)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:133:42-133:56)
      kind: assert(!move (_257.1: bool), "attempt to compute `{} * {}`, which would overflow", move _254, const 10_u32) -> [success: bb115, unwind: bb168]
  }
  preds [bb113]
  succs [bb115, bb168]

bb115
  0: _253 = move (_257.0: u32)
    SourceInfo(src/f2s.rs:133:42-133:56)
  1: StorageDead(_254)
    SourceInfo(src/f2s.rs:133:55-133:56)
  2: _258 = SubWithOverflow(_252, _253)
    SourceInfo(src/f2s.rs:133:37-133:56)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:133:37-133:56)
      kind: assert(!move (_258.1: bool), "attempt to compute `{} - {}`, which would overflow", move _252, move _253) -> [success: bb116, unwind: bb168]
  }
  preds [bb114]
  succs [bb116, bb168]

bb116
  0: _251 = move (_258.0: u32)
    SourceInfo(src/f2s.rs:133:37-133:56)
  1: StorageDead(_253)
    SourceInfo(src/f2s.rs:133:55-133:56)
  2: StorageDead(_252)
    SourceInfo(src/f2s.rs:133:55-133:56)
  3: _250 = Eq(move _251, const 0_u32)
    SourceInfo(src/f2s.rs:133:37-133:61)
  4: StorageDead(_251)
    SourceInfo(src/f2s.rs:133:60-133:61)
  5: _58 = BitAnd(_58, move _250)
    SourceInfo(src/f2s.rs:133:13-133:61)
  6: StorageDead(_250)
    SourceInfo(src/f2s.rs:133:60-133:61)
  7: StorageLive(_259)
    SourceInfo(src/f2s.rs:134:37-134:60)
  8: StorageLive(_260)
    SourceInfo(src/f2s.rs:134:37-134:55)
  9: _260 = _60
    SourceInfo(src/f2s.rs:134:37-134:55)
  10: _259 = Eq(move _260, const 0_u8)
    SourceInfo(src/f2s.rs:134:37-134:60)
  11: StorageDead(_260)
    SourceInfo(src/f2s.rs:134:59-134:60)
  12: _59 = BitAnd(_59, move _259)
    SourceInfo(src/f2s.rs:134:13-134:60)
  13: StorageDead(_259)
    SourceInfo(src/f2s.rs:134:59-134:60)
  14: StorageLive(_261)
    SourceInfo(src/f2s.rs:135:34-135:43)
  15: StorageLive(_262)
    SourceInfo(src/f2s.rs:135:35-135:37)
  16: _262 = _54
    SourceInfo(src/f2s.rs:135:35-135:37)
  17: _263 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:135:34-135:43)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:135:34-135:43)
      kind: assert(!move _263, "attempt to calculate the remainder of `{}` with a divisor of zero", _262) -> [success: bb117, unwind: bb168]
  }
  preds [bb115]
  succs [bb117, bb168]

bb117
  0: _261 = Rem(move _262, const 10_u32)
    SourceInfo(src/f2s.rs:135:34-135:43)
  1: StorageDead(_262)
    SourceInfo(src/f2s.rs:135:42-135:43)
  2: _60 = move _261 as u8 (IntToInt)
    SourceInfo(src/f2s.rs:135:13-135:49)
  3: StorageDead(_261)
    SourceInfo(src/f2s.rs:135:48-135:49)
  4: _264 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:136:13-136:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:136:13-136:21)
      kind: assert(!move _264, "attempt to divide `{}` by zero", _54) -> [success: bb118, unwind: bb168]
  }
  preds [bb116]
  succs [bb118, bb168]

bb118
  0: _54 = Div(_54, const 10_u32)
    SourceInfo(src/f2s.rs:136:13-136:21)
  1: _265 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:137:13-137:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:137:13-137:21)
      kind: assert(!move _265, "attempt to divide `{}` by zero", _55) -> [success: bb119, unwind: bb168]
  }
  preds [bb117]
  succs [bb119, bb168]

bb119
  0: _55 = Div(_55, const 10_u32)
    SourceInfo(src/f2s.rs:137:13-137:21)
  1: _266 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:138:13-138:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:138:13-138:21)
      kind: assert(!move _266, "attempt to divide `{}` by zero", _56) -> [success: bb120, unwind: bb168]
  }
  preds [bb118]
  succs [bb120, bb168]

bb120
  0: _56 = Div(_56, const 10_u32)
    SourceInfo(src/f2s.rs:138:13-138:21)
  1: _267 = AddWithOverflow(_237, const 1_i32)
    SourceInfo(src/f2s.rs:139:13-139:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:139:13-139:25)
      kind: assert(!move (_267.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb121, unwind: bb168]
  }
  preds [bb119]
  succs [bb121, bb168]

bb121
  0: _237 = move (_267.0: i32)
    SourceInfo(src/f2s.rs:139:13-139:25)
  1: _242 = const ()
    SourceInfo(src/f2s.rs:132:33-140:10)
  2: StorageDead(_243)
    SourceInfo(src/f2s.rs:140:9-140:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:132:9-140:10)
      kind: goto -> bb109
  }
  preds [bb120]
  succs [bb109]

bb122
  0: StorageDead(_247)
    SourceInfo(src/f2s.rs:132:31-132:32)
  1: StorageDead(_244)
    SourceInfo(src/f2s.rs:132:31-132:32)
  2: StorageLive(_269)
    SourceInfo(src/f2s.rs:132:9-140:10)
  3: _241 = const ()
    SourceInfo(src/f2s.rs:132:9-140:10)
  4: StorageDead(_269)
    SourceInfo(src/f2s.rs:140:9-140:10)
  5: StorageDead(_243)
    SourceInfo(src/f2s.rs:140:9-140:10)
  6: StorageDead(_241)
    SourceInfo(src/f2s.rs:140:9-140:10)
  7: StorageLive(_271)
    SourceInfo(src/f2s.rs:141:9-150:10)
  8: StorageLive(_272)
    SourceInfo(src/f2s.rs:141:12-141:32)
  9: _272 = _58
    SourceInfo(src/f2s.rs:141:12-141:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:141:12-141:32)
      kind: switchInt(move _272) -> [0: bb123, otherwise: bb124]
  }
  preds [bb112]
  succs [bb123, bb124]

bb123
  0: _271 = const ()
    SourceInfo(src/f2s.rs:150:10-150:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:141:9-150:10)
      kind: goto -> bb134
  }
  preds [bb122]
  succs [bb134]

bb124
  Terminator {
      source_info: SourceInfo(src/f2s.rs:142:13-149:14)
      kind: falseUnwind -> [real: bb125, unwind: bb168]
  }
  preds [bb122, bb132]
  succs [bb125, bb168]

bb125
  0: StorageLive(_273)
    SourceInfo(src/f2s.rs:142:19-142:31)
  1: StorageLive(_274)
    SourceInfo(src/f2s.rs:142:19-142:26)
  2: StorageLive(_275)
    SourceInfo(src/f2s.rs:142:19-142:21)
  3: _275 = _56
    SourceInfo(src/f2s.rs:142:19-142:21)
  4: _276 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:142:19-142:26)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:142:19-142:26)
      kind: assert(!move _276, "attempt to calculate the remainder of `{}` with a divisor of zero", _275) -> [success: bb126, unwind: bb168]
  }
  preds [bb124]
  succs [bb126, bb168]

bb126
  0: _274 = Rem(move _275, const 10_u32)
    SourceInfo(src/f2s.rs:142:19-142:26)
  1: StorageDead(_275)
    SourceInfo(src/f2s.rs:142:25-142:26)
  2: _273 = Eq(move _274, const 0_u32)
    SourceInfo(src/f2s.rs:142:19-142:31)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:142:19-142:31)
      kind: switchInt(move _273) -> [0: bb133, otherwise: bb127]
  }
  preds [bb125]
  succs [bb127, bb133]

bb127
  0: StorageDead(_274)
    SourceInfo(src/f2s.rs:142:30-142:31)
  1: StorageLive(_277)
    SourceInfo(src/f2s.rs:143:41-143:64)
  2: StorageLive(_278)
    SourceInfo(src/f2s.rs:143:41-143:59)
  3: _278 = _60
    SourceInfo(src/f2s.rs:143:41-143:59)
  4: _277 = Eq(move _278, const 0_u8)
    SourceInfo(src/f2s.rs:143:41-143:64)
  5: StorageDead(_278)
    SourceInfo(src/f2s.rs:143:63-143:64)
  6: _59 = BitAnd(_59, move _277)
    SourceInfo(src/f2s.rs:143:17-143:64)
  7: StorageDead(_277)
    SourceInfo(src/f2s.rs:143:63-143:64)
  8: StorageLive(_279)
    SourceInfo(src/f2s.rs:144:38-144:47)
  9: StorageLive(_280)
    SourceInfo(src/f2s.rs:144:39-144:41)
  10: _280 = _54
    SourceInfo(src/f2s.rs:144:39-144:41)
  11: _281 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:144:38-144:47)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:144:38-144:47)
      kind: assert(!move _281, "attempt to calculate the remainder of `{}` with a divisor of zero", _280) -> [success: bb128, unwind: bb168]
  }
  preds [bb126]
  succs [bb128, bb168]

bb128
  0: _279 = Rem(move _280, const 10_u32)
    SourceInfo(src/f2s.rs:144:38-144:47)
  1: StorageDead(_280)
    SourceInfo(src/f2s.rs:144:46-144:47)
  2: _60 = move _279 as u8 (IntToInt)
    SourceInfo(src/f2s.rs:144:17-144:53)
  3: StorageDead(_279)
    SourceInfo(src/f2s.rs:144:52-144:53)
  4: _282 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:145:17-145:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:145:17-145:25)
      kind: assert(!move _282, "attempt to divide `{}` by zero", _54) -> [success: bb129, unwind: bb168]
  }
  preds [bb127]
  succs [bb129, bb168]

bb129
  0: _54 = Div(_54, const 10_u32)
    SourceInfo(src/f2s.rs:145:17-145:25)
  1: _283 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:146:17-146:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:146:17-146:25)
      kind: assert(!move _283, "attempt to divide `{}` by zero", _55) -> [success: bb130, unwind: bb168]
  }
  preds [bb128]
  succs [bb130, bb168]

bb130
  0: _55 = Div(_55, const 10_u32)
    SourceInfo(src/f2s.rs:146:17-146:25)
  1: _284 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:147:17-147:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:147:17-147:25)
      kind: assert(!move _284, "attempt to divide `{}` by zero", _56) -> [success: bb131, unwind: bb168]
  }
  preds [bb129]
  succs [bb131, bb168]

bb131
  0: _56 = Div(_56, const 10_u32)
    SourceInfo(src/f2s.rs:147:17-147:25)
  1: _285 = AddWithOverflow(_237, const 1_i32)
    SourceInfo(src/f2s.rs:148:17-148:29)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:148:17-148:29)
      kind: assert(!move (_285.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb132, unwind: bb168]
  }
  preds [bb130]
  succs [bb132, bb168]

bb132
  0: _237 = move (_285.0: i32)
    SourceInfo(src/f2s.rs:148:17-148:29)
  1: _242 = const ()
    SourceInfo(src/f2s.rs:142:32-149:14)
  2: StorageDead(_273)
    SourceInfo(src/f2s.rs:149:13-149:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:142:13-149:14)
      kind: goto -> bb124
  }
  preds [bb131]
  succs [bb124]

bb133
  0: StorageDead(_274)
    SourceInfo(src/f2s.rs:142:30-142:31)
  1: StorageLive(_287)
    SourceInfo(src/f2s.rs:142:13-149:14)
  2: _271 = const ()
    SourceInfo(src/f2s.rs:142:13-149:14)
  3: StorageDead(_287)
    SourceInfo(src/f2s.rs:149:13-149:14)
  4: StorageDead(_273)
    SourceInfo(src/f2s.rs:149:13-149:14)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:141:9-150:10)
      kind: goto -> bb134
  }
  preds [bb126]
  succs [bb134]

bb134
  0: StorageDead(_272)
    SourceInfo(src/f2s.rs:150:9-150:10)
  1: StorageDead(_271)
    SourceInfo(src/f2s.rs:150:9-150:10)
  2: StorageLive(_289)
    SourceInfo(src/f2s.rs:151:9-154:10)
  3: StorageLive(_290)
    SourceInfo(src/f2s.rs:151:12-151:32)
  4: _290 = _59
    SourceInfo(src/f2s.rs:151:12-151:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:12-151:32)
      kind: switchInt(move _290) -> [0: bb141, otherwise: bb135]
  }
  preds [bb123, bb133]
  succs [bb135, bb141]

bb135
  0: StorageLive(_291)
    SourceInfo(src/f2s.rs:151:36-151:59)
  1: StorageLive(_292)
    SourceInfo(src/f2s.rs:151:36-151:54)
  2: _292 = _60
    SourceInfo(src/f2s.rs:151:36-151:54)
  3: _291 = Eq(move _292, const 5_u8)
    SourceInfo(src/f2s.rs:151:36-151:59)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:36-151:59)
      kind: switchInt(move _291) -> [0: bb140, otherwise: bb136]
  }
  preds [bb134]
  succs [bb136, bb140]

bb136
  0: StorageDead(_292)
    SourceInfo(src/f2s.rs:151:58-151:59)
  1: StorageLive(_293)
    SourceInfo(src/f2s.rs:151:63-151:74)
  2: StorageLive(_294)
    SourceInfo(src/f2s.rs:151:63-151:69)
  3: StorageLive(_295)
    SourceInfo(src/f2s.rs:151:63-151:65)
  4: _295 = _54
    SourceInfo(src/f2s.rs:151:63-151:65)
  5: _296 = Eq(const 2_u32, const 0_u32)
    SourceInfo(src/f2s.rs:151:63-151:69)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:63-151:69)
      kind: assert(!move _296, "attempt to calculate the remainder of `{}` with a divisor of zero", _295) -> [success: bb137, unwind: bb168]
  }
  preds [bb135]
  succs [bb137, bb168]

bb137
  0: _294 = Rem(move _295, const 2_u32)
    SourceInfo(src/f2s.rs:151:63-151:69)
  1: StorageDead(_295)
    SourceInfo(src/f2s.rs:151:68-151:69)
  2: _293 = Eq(move _294, const 0_u32)
    SourceInfo(src/f2s.rs:151:63-151:74)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:63-151:74)
      kind: switchInt(move _293) -> [0: bb139, otherwise: bb138]
  }
  preds [bb136]
  succs [bb138, bb139]

bb138
  0: StorageDead(_294)
    SourceInfo(src/f2s.rs:151:73-151:74)
  1: _60 = const 4_u8
    SourceInfo(src/f2s.rs:153:13-153:35)
  2: _289 = const ()
    SourceInfo(src/f2s.rs:151:75-154:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:9-154:10)
      kind: goto -> bb142
  }
  preds [bb137]
  succs [bb142]

bb139
  0: StorageDead(_294)
    SourceInfo(src/f2s.rs:151:73-151:74)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb141
  }
  preds [bb137]
  succs [bb141]

bb140
  0: StorageDead(_292)
    SourceInfo(src/f2s.rs:151:58-151:59)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb141
  }
  preds [bb135]
  succs [bb141]

bb141
  0: _289 = const ()
    SourceInfo(src/f2s.rs:154:10-154:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:151:9-154:10)
      kind: goto -> bb142
  }
  preds [bb134, bb139, bb140]
  succs [bb142]

bb142
  0: StorageDead(_293)
    SourceInfo(src/f2s.rs:154:9-154:10)
  1: StorageDead(_291)
    SourceInfo(src/f2s.rs:154:9-154:10)
  2: StorageDead(_290)
    SourceInfo(src/f2s.rs:154:9-154:10)
  3: StorageDead(_289)
    SourceInfo(src/f2s.rs:154:9-154:10)
  4: StorageLive(_297)
    SourceInfo(src/f2s.rs:156:9-156:11)
  5: _297 = _54
    SourceInfo(src/f2s.rs:156:9-156:11)
  6: StorageLive(_298)
    SourceInfo(src/f2s.rs:156:14-157:19)
  7: StorageLive(_299)
    SourceInfo(src/f2s.rs:156:14-156:98)
  8: StorageLive(_300)
    SourceInfo(src/f2s.rs:156:16-156:24)
  9: StorageLive(_301)
    SourceInfo(src/f2s.rs:156:16-156:18)
  10: _301 = _54
    SourceInfo(src/f2s.rs:156:16-156:18)
  11: StorageLive(_302)
    SourceInfo(src/f2s.rs:156:22-156:24)
  12: _302 = _56
    SourceInfo(src/f2s.rs:156:22-156:24)
  13: _300 = Eq(move _301, move _302)
    SourceInfo(src/f2s.rs:156:16-156:24)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:16-156:24)
      kind: switchInt(move _300) -> [0: bb146, otherwise: bb143]
  }
  preds [bb138, bb141]
  succs [bb143, bb146]

bb143
  0: StorageDead(_302)
    SourceInfo(src/f2s.rs:156:23-156:24)
  1: StorageDead(_301)
    SourceInfo(src/f2s.rs:156:23-156:24)
  2: StorageLive(_303)
    SourceInfo(src/f2s.rs:156:30-156:43)
  3: _303 = _32
    SourceInfo(src/f2s.rs:156:30-156:43)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:30-156:43)
      kind: switchInt(move _303) -> [0: bb145, otherwise: bb144]
  }
  preds [bb142]
  succs [bb144, bb145]

bb144
  0: StorageLive(_304)
    SourceInfo(src/f2s.rs:156:48-156:68)
  1: _304 = _58
    SourceInfo(src/f2s.rs:156:48-156:68)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:48-156:68)
      kind: switchInt(move _304) -> [0: bb145, otherwise: bb147]
  }
  preds [bb143]
  succs [bb145, bb147]

bb145
  0: _299 = const true
    SourceInfo(src/f2s.rs:156:14-156:98)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:14-156:98)
      kind: goto -> bb148
  }
  preds [bb143, bb144]
  succs [bb148]

bb146
  0: StorageDead(_302)
    SourceInfo(src/f2s.rs:156:23-156:24)
  1: StorageDead(_301)
    SourceInfo(src/f2s.rs:156:23-156:24)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb147
  }
  preds [bb142]
  succs [bb147]

bb147
  0: StorageLive(_305)
    SourceInfo(src/f2s.rs:156:74-156:92)
  1: _305 = _60
    SourceInfo(src/f2s.rs:156:74-156:92)
  2: _299 = Ge(move _305, const 5_u8)
    SourceInfo(src/f2s.rs:156:74-156:97)
  3: StorageDead(_305)
    SourceInfo(src/f2s.rs:156:96-156:97)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:14-156:98)
      kind: goto -> bb148
  }
  preds [bb144, bb146]
  succs [bb148]

bb148
  0: StorageDead(_304)
    SourceInfo(src/f2s.rs:156:97-156:98)
  1: StorageDead(_303)
    SourceInfo(src/f2s.rs:156:97-156:98)
  2: StorageDead(_300)
    SourceInfo(src/f2s.rs:156:97-156:98)
  3: _298 = move _299 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:156:14-157:19)
  4: StorageDead(_299)
    SourceInfo(src/f2s.rs:157:18-157:19)
  5: _306 = AddWithOverflow(_297, _298)
    SourceInfo(src/f2s.rs:156:9-157:19)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:156:9-157:19)
      kind: assert(!move (_306.1: bool), "attempt to compute `{} + {}`, which would overflow", move _297, move _298) -> [success: bb149, unwind: bb168]
  }
  preds [bb145, bb147]
  succs [bb149, bb168]

bb149
  0: _238 = move (_306.0: u32)
    SourceInfo(src/f2s.rs:156:9-157:19)
  1: StorageDead(_298)
    SourceInfo(src/f2s.rs:157:18-157:19)
  2: StorageDead(_297)
    SourceInfo(src/f2s.rs:157:18-157:19)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:130:18-171:6)
      kind: goto -> bb166
  }
  preds [bb148]
  succs [bb166]

bb150
  0: StorageLive(_307)
    SourceInfo(src/f2s.rs:162:9-168:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:9-168:10)
      kind: goto -> bb151
  }
  preds [bb107]
  succs [bb151]

bb151
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:9-168:10)
      kind: falseUnwind -> [real: bb152, unwind: bb168]
  }
  preds [bb150, bb160]
  succs [bb152, bb168]

bb152
  0: StorageLive(_308)
    SourceInfo(src/f2s.rs:162:15-162:32)
  1: StorageLive(_309)
    SourceInfo(src/f2s.rs:162:15-162:22)
  2: StorageLive(_310)
    SourceInfo(src/f2s.rs:162:15-162:17)
  3: _310 = _55
    SourceInfo(src/f2s.rs:162:15-162:17)
  4: _311 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:162:15-162:22)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:15-162:22)
      kind: assert(!move _311, "attempt to divide `{}` by zero", _310) -> [success: bb153, unwind: bb168]
  }
  preds [bb151]
  succs [bb153, bb168]

bb153
  0: _309 = Div(move _310, const 10_u32)
    SourceInfo(src/f2s.rs:162:15-162:22)
  1: StorageDead(_310)
    SourceInfo(src/f2s.rs:162:21-162:22)
  2: StorageLive(_312)
    SourceInfo(src/f2s.rs:162:25-162:32)
  3: StorageLive(_313)
    SourceInfo(src/f2s.rs:162:25-162:27)
  4: _313 = _56
    SourceInfo(src/f2s.rs:162:25-162:27)
  5: _314 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:162:25-162:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:25-162:32)
      kind: assert(!move _314, "attempt to divide `{}` by zero", _313) -> [success: bb154, unwind: bb168]
  }
  preds [bb152]
  succs [bb154, bb168]

bb154
  0: _312 = Div(move _313, const 10_u32)
    SourceInfo(src/f2s.rs:162:25-162:32)
  1: StorageDead(_313)
    SourceInfo(src/f2s.rs:162:31-162:32)
  2: _308 = Gt(move _309, move _312)
    SourceInfo(src/f2s.rs:162:15-162:32)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:15-162:32)
      kind: switchInt(move _308) -> [0: bb161, otherwise: bb155]
  }
  preds [bb153]
  succs [bb155, bb161]

bb155
  0: StorageDead(_312)
    SourceInfo(src/f2s.rs:162:31-162:32)
  1: StorageDead(_309)
    SourceInfo(src/f2s.rs:162:31-162:32)
  2: StorageLive(_315)
    SourceInfo(src/f2s.rs:163:34-163:43)
  3: StorageLive(_316)
    SourceInfo(src/f2s.rs:163:35-163:37)
  4: _316 = _54
    SourceInfo(src/f2s.rs:163:35-163:37)
  5: _317 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:163:34-163:43)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:163:34-163:43)
      kind: assert(!move _317, "attempt to calculate the remainder of `{}` with a divisor of zero", _316) -> [success: bb156, unwind: bb168]
  }
  preds [bb154]
  succs [bb156, bb168]

bb156
  0: _315 = Rem(move _316, const 10_u32)
    SourceInfo(src/f2s.rs:163:34-163:43)
  1: StorageDead(_316)
    SourceInfo(src/f2s.rs:163:42-163:43)
  2: _60 = move _315 as u8 (IntToInt)
    SourceInfo(src/f2s.rs:163:13-163:49)
  3: StorageDead(_315)
    SourceInfo(src/f2s.rs:163:48-163:49)
  4: _318 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:164:13-164:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:164:13-164:21)
      kind: assert(!move _318, "attempt to divide `{}` by zero", _54) -> [success: bb157, unwind: bb168]
  }
  preds [bb155]
  succs [bb157, bb168]

bb157
  0: _54 = Div(_54, const 10_u32)
    SourceInfo(src/f2s.rs:164:13-164:21)
  1: _319 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:165:13-165:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:165:13-165:21)
      kind: assert(!move _319, "attempt to divide `{}` by zero", _55) -> [success: bb158, unwind: bb168]
  }
  preds [bb156]
  succs [bb158, bb168]

bb158
  0: _55 = Div(_55, const 10_u32)
    SourceInfo(src/f2s.rs:165:13-165:21)
  1: _320 = Eq(const 10_u32, const 0_u32)
    SourceInfo(src/f2s.rs:166:13-166:21)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:166:13-166:21)
      kind: assert(!move _320, "attempt to divide `{}` by zero", _56) -> [success: bb159, unwind: bb168]
  }
  preds [bb157]
  succs [bb159, bb168]

bb159
  0: _56 = Div(_56, const 10_u32)
    SourceInfo(src/f2s.rs:166:13-166:21)
  1: _321 = AddWithOverflow(_237, const 1_i32)
    SourceInfo(src/f2s.rs:167:13-167:25)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:167:13-167:25)
      kind: assert(!move (_321.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb160, unwind: bb168]
  }
  preds [bb158]
  succs [bb160, bb168]

bb160
  0: _237 = move (_321.0: i32)
    SourceInfo(src/f2s.rs:167:13-167:25)
  1: _242 = const ()
    SourceInfo(src/f2s.rs:162:33-168:10)
  2: StorageDead(_308)
    SourceInfo(src/f2s.rs:168:9-168:10)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:162:9-168:10)
      kind: goto -> bb151
  }
  preds [bb159]
  succs [bb151]

bb161
  0: StorageDead(_312)
    SourceInfo(src/f2s.rs:162:31-162:32)
  1: StorageDead(_309)
    SourceInfo(src/f2s.rs:162:31-162:32)
  2: StorageLive(_323)
    SourceInfo(src/f2s.rs:162:9-168:10)
  3: _307 = const ()
    SourceInfo(src/f2s.rs:162:9-168:10)
  4: StorageDead(_323)
    SourceInfo(src/f2s.rs:168:9-168:10)
  5: StorageDead(_308)
    SourceInfo(src/f2s.rs:168:9-168:10)
  6: StorageDead(_307)
    SourceInfo(src/f2s.rs:168:9-168:10)
  7: StorageLive(_325)
    SourceInfo(src/f2s.rs:170:9-170:11)
  8: _325 = _54
    SourceInfo(src/f2s.rs:170:9-170:11)
  9: StorageLive(_326)
    SourceInfo(src/f2s.rs:170:14-170:58)
  10: StorageLive(_327)
    SourceInfo(src/f2s.rs:170:14-170:51)
  11: StorageLive(_328)
    SourceInfo(src/f2s.rs:170:15-170:23)
  12: StorageLive(_329)
    SourceInfo(src/f2s.rs:170:15-170:17)
  13: _329 = _54
    SourceInfo(src/f2s.rs:170:15-170:17)
  14: StorageLive(_330)
    SourceInfo(src/f2s.rs:170:21-170:23)
  15: _330 = _56
    SourceInfo(src/f2s.rs:170:21-170:23)
  16: _328 = Eq(move _329, move _330)
    SourceInfo(src/f2s.rs:170:15-170:23)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:170:15-170:23)
      kind: switchInt(move _328) -> [0: bb163, otherwise: bb162]
  }
  preds [bb154]
  succs [bb162, bb163]

bb162
  0: StorageDead(_330)
    SourceInfo(src/f2s.rs:170:22-170:23)
  1: StorageDead(_329)
    SourceInfo(src/f2s.rs:170:22-170:23)
  2: _327 = const true
    SourceInfo(src/f2s.rs:170:14-170:51)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:170:14-170:51)
      kind: goto -> bb164
  }
  preds [bb161]
  succs [bb164]

bb163
  0: StorageDead(_330)
    SourceInfo(src/f2s.rs:170:22-170:23)
  1: StorageDead(_329)
    SourceInfo(src/f2s.rs:170:22-170:23)
  2: StorageLive(_331)
    SourceInfo(src/f2s.rs:170:27-170:45)
  3: _331 = _60
    SourceInfo(src/f2s.rs:170:27-170:45)
  4: _327 = Ge(move _331, const 5_u8)
    SourceInfo(src/f2s.rs:170:27-170:50)
  5: StorageDead(_331)
    SourceInfo(src/f2s.rs:170:49-170:50)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:170:14-170:51)
      kind: goto -> bb164
  }
  preds [bb161]
  succs [bb164]

bb164
  0: StorageDead(_328)
    SourceInfo(src/f2s.rs:170:50-170:51)
  1: _326 = move _327 as u32 (IntToInt)
    SourceInfo(src/f2s.rs:170:14-170:58)
  2: StorageDead(_327)
    SourceInfo(src/f2s.rs:170:57-170:58)
  3: _332 = AddWithOverflow(_325, _326)
    SourceInfo(src/f2s.rs:170:9-170:58)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:170:9-170:58)
      kind: assert(!move (_332.1: bool), "attempt to compute `{} + {}`, which would overflow", move _325, move _326) -> [success: bb165, unwind: bb168]
  }
  preds [bb162, bb163]
  succs [bb165, bb168]

bb165
  0: _238 = move (_332.0: u32)
    SourceInfo(src/f2s.rs:170:9-170:58)
  1: StorageDead(_326)
    SourceInfo(src/f2s.rs:170:57-170:58)
  2: StorageDead(_325)
    SourceInfo(src/f2s.rs:170:57-170:58)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:130:18-171:6)
      kind: goto -> bb166
  }
  preds [bb164]
  succs [bb166]

bb166
  0: StorageDead(_240)
    SourceInfo(src/f2s.rs:171:5-171:6)
  1: StorageDead(_239)
    SourceInfo(src/f2s.rs:171:5-171:6)
  2: FakeRead(ForLet(None), _238)
    SourceInfo(src/f2s.rs:130:9-130:15)
  3: StorageLive(_333)
    SourceInfo(src/f2s.rs:172:9-172:12)
  4: StorageLive(_334)
    SourceInfo(src/f2s.rs:172:15-172:18)
  5: _334 = _57
    SourceInfo(src/f2s.rs:172:15-172:18)
  6: StorageLive(_335)
    SourceInfo(src/f2s.rs:172:21-172:28)
  7: _335 = _237
    SourceInfo(src/f2s.rs:172:21-172:28)
  8: _336 = AddWithOverflow(_334, _335)
    SourceInfo(src/f2s.rs:172:15-172:28)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:172:15-172:28)
      kind: assert(!move (_336.1: bool), "attempt to compute `{} + {}`, which would overflow", move _334, move _335) -> [success: bb167, unwind: bb168]
  }
  preds [bb149, bb165]
  succs [bb167, bb168]

bb167
  0: _333 = move (_336.0: i32)
    SourceInfo(src/f2s.rs:172:15-172:28)
  1: StorageDead(_335)
    SourceInfo(src/f2s.rs:172:27-172:28)
  2: StorageDead(_334)
    SourceInfo(src/f2s.rs:172:27-172:28)
  3: FakeRead(ForLet(None), _333)
    SourceInfo(src/f2s.rs:172:9-172:12)
  4: StorageLive(_337)
    SourceInfo(src/f2s.rs:175:19-175:22)
  5: _337 = _333
    SourceInfo(src/f2s.rs:175:19-175:22)
  6: StorageLive(_338)
    SourceInfo(src/f2s.rs:176:19-176:25)
  7: _338 = _238
    SourceInfo(src/f2s.rs:176:19-176:25)
  8: _0 = f2s::FloatingDecimal32 { mantissa: move _338, exponent: move _337 }
    SourceInfo(src/f2s.rs:174:5-177:6)
  9: StorageDead(_338)
    SourceInfo(src/f2s.rs:177:5-177:6)
  10: StorageDead(_337)
    SourceInfo(src/f2s.rs:177:5-177:6)
  11: StorageDead(_333)
    SourceInfo(src/f2s.rs:178:1-178:2)
  12: StorageDead(_238)
    SourceInfo(src/f2s.rs:178:1-178:2)
  13: StorageDead(_237)
    SourceInfo(src/f2s.rs:178:1-178:2)
  14: StorageDead(_60)
    SourceInfo(src/f2s.rs:178:1-178:2)
  15: StorageDead(_59)
    SourceInfo(src/f2s.rs:178:1-178:2)
  16: StorageDead(_58)
    SourceInfo(src/f2s.rs:178:1-178:2)
  17: StorageDead(_57)
    SourceInfo(src/f2s.rs:178:1-178:2)
  18: StorageDead(_56)
    SourceInfo(src/f2s.rs:178:1-178:2)
  19: StorageDead(_55)
    SourceInfo(src/f2s.rs:178:1-178:2)
  20: StorageDead(_54)
    SourceInfo(src/f2s.rs:178:1-178:2)
  21: StorageDead(_46)
    SourceInfo(src/f2s.rs:178:1-178:2)
  22: StorageDead(_41)
    SourceInfo(src/f2s.rs:178:1-178:2)
  23: StorageDead(_36)
    SourceInfo(src/f2s.rs:178:1-178:2)
  24: StorageDead(_33)
    SourceInfo(src/f2s.rs:178:1-178:2)
  25: StorageDead(_32)
    SourceInfo(src/f2s.rs:178:1-178:2)
  26: StorageDead(_29)
    SourceInfo(src/f2s.rs:178:1-178:2)
  27: StorageDead(_4)
    SourceInfo(src/f2s.rs:178:1-178:2)
  28: StorageDead(_3)
    SourceInfo(src/f2s.rs:178:1-178:2)
  Terminator {
      source_info: SourceInfo(src/f2s.rs:178:2-178:2)
      kind: return
  }
  preds [bb166]
  succs []

bb168
  Terminator {
      source_info: SourceInfo(src/f2s.rs:40:1-178:2)
      kind: resume
  }
  preds [bb1, bb2, bb3, bb5, bb6, bb7, bb8, bb10, bb11, bb12, bb16, bb17, bb18, bb20, bb21, bb22, bb23, bb24, bb25, bb26, bb27, bb28, bb29, bb31, bb32, bb33, bb35, bb36, bb37, bb38, bb39, bb40, bb41, bb42, bb43, bb44, bb45, bb51, bb53, bb56, bb58, bb59, bb65, bb66, bb67, bb68, bb69, bb70, bb71, bb72, bb73, bb74, bb75, bb77, bb78, bb79, bb81, bb82, bb83, bb84, bb85, bb86, bb87, bb88, bb96, bb100, bb101, bb109, bb110, bb111, bb113, bb114, bb115, bb116, bb117, bb118, bb119, bb120, bb124, bb125, bb127, bb128, bb129, bb130, bb131, bb136, bb148, bb151, bb152, bb153, bb155, bb156, bb157, bb158, bb159, bb164, bb166]
  succs []

