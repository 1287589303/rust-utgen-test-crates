{
  "name": "ryu::buffer::{impl#0}::format",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:47:5:53:6",
  "doc": "/// Print a floating point number into this buffer and return a reference to\n/// its string representation within the buffer.\n///\n/// # Special cases\n///\n/// This function formats NaN as the string \"NaN\", positive infinity as\n/// \"inf\", and negative infinity as \"-inf\" to match std::fmt.\n///\n/// If your input is known to be finite, you may get better performance by\n/// calling the `format_finite` method instead of `format` to avoid the\n/// checks for special cases.\n",
  "code": [
    "pub fn format<F: Float>(&mut self, f: F) -> &str {",
    "    if f.is_nonfinite() {",
    "        f.format_nonfinite()",
    "    } else {",
    "        self.format_finite(f)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "f.is_nonfinite()",
          "norm": null,
          "value": "true",
          "line": 48,
          "bound": null
        }
      ],
      "ret": "f.format_nonfinite()",
      "path": [
        0,
        1,
        2,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "f.is_nonfinite()",
          "norm": null,
          "value": "false",
          "line": 48,
          "bound": null
        }
      ],
      "ret": "self.format_finite(f)",
      "path": [
        0,
        1,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}