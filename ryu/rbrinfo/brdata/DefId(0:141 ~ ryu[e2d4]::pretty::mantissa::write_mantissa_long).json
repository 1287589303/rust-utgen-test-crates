{
  "name": "ryu::pretty::mantissa::write_mantissa_long",
  "mod_info": {
    "name": "pretty::mantissa",
    "loc": "src/pretty/mod.rs:2:1:2:14"
  },
  "visible": true,
  "loc": "src/pretty/mantissa.rs:5:1:41:2",
  "doc": "",
  "code": [
    "pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {",
    "    if (output >> 32) != 0 {",
    "        // One expensive 64-bit division.",
    "        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;",
    "        output /= 100_000_000;",
    "",
    "        let c = output2 % 10_000;",
    "        output2 /= 10_000;",
    "        let d = output2 % 10_000;",
    "        let c0 = (c % 100) << 1;",
    "        let c1 = (c / 100) << 1;",
    "        let d0 = (d % 100) << 1;",
    "        let d1 = (d / 100) << 1;",
    "        ptr::copy_nonoverlapping(",
    "            DIGIT_TABLE.as_ptr().offset(c0 as isize),",
    "            result.offset(-2),",
    "            2,",
    "        );",
    "        ptr::copy_nonoverlapping(",
    "            DIGIT_TABLE.as_ptr().offset(c1 as isize),",
    "            result.offset(-4),",
    "            2,",
    "        );",
    "        ptr::copy_nonoverlapping(",
    "            DIGIT_TABLE.as_ptr().offset(d0 as isize),",
    "            result.offset(-6),",
    "            2,",
    "        );",
    "        ptr::copy_nonoverlapping(",
    "            DIGIT_TABLE.as_ptr().offset(d1 as isize),",
    "            result.offset(-8),",
    "            2,",
    "        );",
    "        result = result.offset(-8);",
    "    }",
    "    write_mantissa(output as u32, result);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(output >> 32) != 0",
          "norm": null,
          "value": "true",
          "line": 6,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(output >> 32) != 0",
          "norm": null,
          "value": "false",
          "line": 6,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}