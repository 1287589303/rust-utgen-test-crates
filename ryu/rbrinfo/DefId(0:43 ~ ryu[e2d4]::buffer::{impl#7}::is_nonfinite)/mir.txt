bb0
  0: StorageLive(_2)
    SourceInfo(src/buffer/mod.rs:148:13-148:17)
  1: StorageLive(_3)
    SourceInfo(src/buffer/mod.rs:148:20-148:24)
  2: _3 = _1
    SourceInfo(src/buffer/mod.rs:148:20-148:24)
  Terminator {
      source_info: SourceInfo(src/buffer/mod.rs:148:20-148:34)
      kind: _2 = core::f64::<impl f64>::to_bits(move _3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(src/buffer/mod.rs:148:33-148:34)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(src/buffer/mod.rs:148:13-148:17)
  2: StorageLive(_4)
    SourceInfo(src/buffer/mod.rs:149:9-149:24)
  3: StorageLive(_5)
    SourceInfo(src/buffer/mod.rs:149:9-149:13)
  4: _5 = _2
    SourceInfo(src/buffer/mod.rs:149:9-149:13)
  5: _4 = BitAnd(move _5, const <f64 as buffer::Sealed>::is_nonfinite::EXP_MASK)
    SourceInfo(src/buffer/mod.rs:149:9-149:24)
  6: StorageDead(_5)
    SourceInfo(src/buffer/mod.rs:149:23-149:24)
  7: _0 = Eq(move _4, const <f64 as buffer::Sealed>::is_nonfinite::EXP_MASK)
    SourceInfo(src/buffer/mod.rs:149:9-149:36)
  8: StorageDead(_4)
    SourceInfo(src/buffer/mod.rs:149:35-149:36)
  9: StorageDead(_2)
    SourceInfo(src/buffer/mod.rs:150:5-150:6)
  Terminator {
      source_info: SourceInfo(src/buffer/mod.rs:150:6-150:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/buffer/mod.rs:146:5-150:6)
      kind: resume
  }
  preds [bb0]
  succs []

