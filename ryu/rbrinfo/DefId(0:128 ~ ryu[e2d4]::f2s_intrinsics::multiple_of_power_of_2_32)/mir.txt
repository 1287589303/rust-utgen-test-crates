bb0
  0: StorageLive(_3)
    SourceInfo(src/f2s_intrinsics.rs:52:5-52:32)
  1: StorageLive(_4)
    SourceInfo(src/f2s_intrinsics.rs:52:6-52:11)
  2: _4 = _1
    SourceInfo(src/f2s_intrinsics.rs:52:6-52:11)
  3: StorageLive(_5)
    SourceInfo(src/f2s_intrinsics.rs:52:14-52:31)
  4: StorageLive(_6)
    SourceInfo(src/f2s_intrinsics.rs:52:15-52:26)
  5: StorageLive(_7)
    SourceInfo(src/f2s_intrinsics.rs:52:24-52:25)
  6: _7 = _2
    SourceInfo(src/f2s_intrinsics.rs:52:24-52:25)
  7: _8 = Lt(_7, const 32_u32)
    SourceInfo(src/f2s_intrinsics.rs:52:15-52:26)
  Terminator {
      source_info: SourceInfo(src/f2s_intrinsics.rs:52:15-52:26)
      kind: assert(move _8, "attempt to shift left by `{}`, which would overflow", _7) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _6 = Shl(const 1_u32, move _7)
    SourceInfo(src/f2s_intrinsics.rs:52:15-52:26)
  1: StorageDead(_7)
    SourceInfo(src/f2s_intrinsics.rs:52:25-52:26)
  2: _9 = SubWithOverflow(_6, const 1_u32)
    SourceInfo(src/f2s_intrinsics.rs:52:14-52:31)
  Terminator {
      source_info: SourceInfo(src/f2s_intrinsics.rs:52:14-52:31)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_u32) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _5 = move (_9.0: u32)
    SourceInfo(src/f2s_intrinsics.rs:52:14-52:31)
  1: StorageDead(_6)
    SourceInfo(src/f2s_intrinsics.rs:52:30-52:31)
  2: _3 = BitAnd(move _4, move _5)
    SourceInfo(src/f2s_intrinsics.rs:52:5-52:32)
  3: StorageDead(_5)
    SourceInfo(src/f2s_intrinsics.rs:52:31-52:32)
  4: StorageDead(_4)
    SourceInfo(src/f2s_intrinsics.rs:52:31-52:32)
  5: _0 = Eq(move _3, const 0_u32)
    SourceInfo(src/f2s_intrinsics.rs:52:5-52:37)
  6: StorageDead(_3)
    SourceInfo(src/f2s_intrinsics.rs:52:36-52:37)
  Terminator {
      source_info: SourceInfo(src/f2s_intrinsics.rs:53:2-53:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/f2s_intrinsics.rs:50:1-53:2)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

