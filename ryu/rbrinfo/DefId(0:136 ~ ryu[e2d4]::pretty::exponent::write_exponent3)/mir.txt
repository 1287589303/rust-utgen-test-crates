bb0
  0: StorageLive(_3)
    SourceInfo(src/pretty/exponent.rs:6:9-6:13)
  1: StorageLive(_4)
    SourceInfo(src/pretty/exponent.rs:6:16-6:17)
  2: _4 = _1
    SourceInfo(src/pretty/exponent.rs:6:16-6:17)
  3: _3 = Lt(move _4, const 0_isize)
    SourceInfo(src/pretty/exponent.rs:6:16-6:21)
  4: StorageDead(_4)
    SourceInfo(src/pretty/exponent.rs:6:20-6:21)
  5: FakeRead(ForLet(None), _3)
    SourceInfo(src/pretty/exponent.rs:6:9-6:13)
  6: StorageLive(_5)
    SourceInfo(src/pretty/exponent.rs:7:5-11:6)
  7: StorageLive(_6)
    SourceInfo(src/pretty/exponent.rs:7:8-7:12)
  8: _6 = _3
    SourceInfo(src/pretty/exponent.rs:7:8-7:12)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:7:8-7:12)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb1]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: (*_2) = const 45_u8
    SourceInfo(src/pretty/exponent.rs:8:9-8:23)
  1: StorageLive(_7)
    SourceInfo(src/pretty/exponent.rs:9:18-9:34)
  2: StorageLive(_8)
    SourceInfo(src/pretty/exponent.rs:9:18-9:24)
  3: _8 = _2
    SourceInfo(src/pretty/exponent.rs:9:18-9:24)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:9:18-9:34)
      kind: _7 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _8, const 1_isize) -> [return: bb2, unwind: bb35]
  }
  preds [bb0]
  succs [bb2, bb35]

bb2
  0: StorageDead(_8)
    SourceInfo(src/pretty/exponent.rs:9:33-9:34)
  1: _2 = move _7
    SourceInfo(src/pretty/exponent.rs:9:9-9:34)
  2: StorageDead(_7)
    SourceInfo(src/pretty/exponent.rs:9:33-9:34)
  3: StorageLive(_9)
    SourceInfo(src/pretty/exponent.rs:10:14-10:15)
  4: _9 = _1
    SourceInfo(src/pretty/exponent.rs:10:14-10:15)
  5: _10 = Eq(_9, const isize::MIN)
    SourceInfo(src/pretty/exponent.rs:10:13-10:15)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:10:13-10:15)
      kind: assert(!move _10, "attempt to negate `{}`, which would overflow", _9) -> [success: bb3, unwind: bb35]
  }
  preds [bb1]
  succs [bb3, bb35]

bb3
  0: _1 = Neg(move _9)
    SourceInfo(src/pretty/exponent.rs:10:9-10:15)
  1: StorageDead(_9)
    SourceInfo(src/pretty/exponent.rs:10:14-10:15)
  2: _5 = const ()
    SourceInfo(src/pretty/exponent.rs:7:13-11:6)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:7:5-11:6)
      kind: goto -> bb5
  }
  preds [bb2]
  succs [bb5]

bb4
  0: _5 = const ()
    SourceInfo(src/pretty/exponent.rs:11:6-11:6)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:7:5-11:6)
      kind: goto -> bb5
  }
  preds [bb0]
  succs [bb5]

bb5
  0: StorageDead(_6)
    SourceInfo(src/pretty/exponent.rs:11:5-11:6)
  1: StorageDead(_5)
    SourceInfo(src/pretty/exponent.rs:11:5-11:6)
  2: StorageLive(_11)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9-318:10)
  3: StorageLive(_12)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12-316:42)
  4: _12 = const true
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12-316:42)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12-316:42)
      kind: switchInt(move _12) -> [0: bb9, otherwise: bb6]
  }
  preds [bb3, bb4]
  succs [bb6, bb9]

bb6
  0: StorageLive(_13)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13-317:38)
  1: StorageLive(_14)
    SourceInfo(src/pretty/exponent.rs:13:19-13:27)
  2: StorageLive(_15)
    SourceInfo(src/pretty/exponent.rs:13:19-13:20)
  3: _15 = _1
    SourceInfo(src/pretty/exponent.rs:13:19-13:20)
  4: _14 = Lt(move _15, const 1000_isize)
    SourceInfo(src/pretty/exponent.rs:13:19-13:27)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:13:19-13:27)
      kind: switchInt(move _14) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_15)
    SourceInfo(src/pretty/exponent.rs:13:26-13:27)
  1: _13 = const ()
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:38-317:38)
  2: StorageDead(_14)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:37-317:38)
  3: StorageDead(_13)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:37-317:38)
  4: _11 = const ()
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:43-318:10)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9-318:10)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb8
  0: StorageDead(_15)
    SourceInfo(src/pretty/exponent.rs:13:26-13:27)
  1: StorageLive(_16)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13-317:38)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13-317:38)
      kind: _16 = core::panicking::panic(const "assertion failed: k < 1000") -> bb35
  }
  preds [bb6]
  succs [bb35]

bb9
  0: _11 = const ()
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:318:10-318:10)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9-318:10)
      kind: goto -> bb10
  }
  preds [bb5]
  succs [bb10]

bb10
  0: StorageDead(_12)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:318:9-318:10)
  1: StorageDead(_11)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:318:9-318:10)
  2: StorageLive(_17)
    SourceInfo(src/pretty/exponent.rs:14:8-14:16)
  3: StorageLive(_18)
    SourceInfo(src/pretty/exponent.rs:14:8-14:9)
  4: _18 = _1
    SourceInfo(src/pretty/exponent.rs:14:8-14:9)
  5: _17 = Ge(move _18, const 100_isize)
    SourceInfo(src/pretty/exponent.rs:14:8-14:16)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:14:8-14:16)
      kind: switchInt(move _17) -> [0: bb23, otherwise: bb11]
  }
  preds [bb7, bb9]
  succs [bb11, bb23]

bb11
  0: StorageDead(_18)
    SourceInfo(src/pretty/exponent.rs:14:15-14:16)
  1: StorageLive(_19)
    SourceInfo(src/pretty/exponent.rs:15:26-15:41)
  2: StorageLive(_20)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  3: StorageLive(_21)
    SourceInfo(src/pretty/exponent.rs:15:27-15:28)
  4: _21 = _1
    SourceInfo(src/pretty/exponent.rs:15:27-15:28)
  5: _22 = Eq(const 100_isize, const 0_isize)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:15:26-15:35)
      kind: assert(!move _22, "attempt to divide `{}` by zero", _21) -> [success: bb12, unwind: bb35]
  }
  preds [bb10]
  succs [bb12, bb35]

bb12
  0: _23 = Eq(const 100_isize, const -1_isize)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  1: _24 = Eq(_21, const isize::MIN)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  2: _25 = BitAnd(move _23, move _24)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:15:26-15:35)
      kind: assert(!move _25, "attempt to compute `{} / {}`, which would overflow", _21, const 100_isize) -> [success: bb13, unwind: bb35]
  }
  preds [bb11]
  succs [bb13, bb35]

bb13
  0: _20 = Div(move _21, const 100_isize)
    SourceInfo(src/pretty/exponent.rs:15:26-15:35)
  1: StorageDead(_21)
    SourceInfo(src/pretty/exponent.rs:15:34-15:35)
  2: _19 = move _20 as u8 (IntToInt)
    SourceInfo(src/pretty/exponent.rs:15:26-15:41)
  3: StorageDead(_20)
    SourceInfo(src/pretty/exponent.rs:15:40-15:41)
  4: _26 = AddWithOverflow(const 48_u8, _19)
    SourceInfo(src/pretty/exponent.rs:15:19-15:41)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:15:19-15:41)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _19) -> [success: bb14, unwind: bb35]
  }
  preds [bb12]
  succs [bb14, bb35]

bb14
  0: (*_2) = move (_26.0: u8)
    SourceInfo(src/pretty/exponent.rs:15:9-15:41)
  1: StorageDead(_19)
    SourceInfo(src/pretty/exponent.rs:15:40-15:41)
  2: _27 = Eq(const 100_isize, const 0_isize)
    SourceInfo(src/pretty/exponent.rs:16:9-16:17)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:16:9-16:17)
      kind: assert(!move _27, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> [success: bb15, unwind: bb35]
  }
  preds [bb13]
  succs [bb15, bb35]

bb15
  0: _28 = Eq(const 100_isize, const -1_isize)
    SourceInfo(src/pretty/exponent.rs:16:9-16:17)
  1: _29 = Eq(_1, const isize::MIN)
    SourceInfo(src/pretty/exponent.rs:16:9-16:17)
  2: _30 = BitAnd(move _28, move _29)
    SourceInfo(src/pretty/exponent.rs:16:9-16:17)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:16:9-16:17)
      kind: assert(!move _30, "attempt to compute the remainder of `{} % {}`, which would overflow", _1, const 100_isize) -> [success: bb16, unwind: bb35]
  }
  preds [bb14]
  succs [bb16, bb35]

bb16
  0: _1 = Rem(_1, const 100_isize)
    SourceInfo(src/pretty/exponent.rs:16:9-16:17)
  1: StorageLive(_31)
    SourceInfo(src/pretty/exponent.rs:17:13-17:14)
  2: StorageLive(_32)
    SourceInfo(src/pretty/exponent.rs:17:17-17:37)
  3: StorageLive(_33)
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  4: StorageLive(_34)
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  5: StorageLive(_35)
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  6: _35 = const <static(DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE))>
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  7: _34 = &(*_35)
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  8: _33 = move _34 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(src/pretty/exponent.rs:17:17-17:28)
  9: StorageDead(_34)
    SourceInfo(src/pretty/exponent.rs:17:27-17:28)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:17:17-17:37)
      kind: _32 = core::slice::<impl [u8]>::as_ptr(move _33) -> [return: bb17, unwind: bb35]
  }
  preds [bb15]
  succs [bb17, bb35]

bb17
  0: StorageDead(_33)
    SourceInfo(src/pretty/exponent.rs:17:36-17:37)
  1: StorageLive(_36)
    SourceInfo(src/pretty/exponent.rs:17:45-17:50)
  2: StorageLive(_37)
    SourceInfo(src/pretty/exponent.rs:17:45-17:46)
  3: _37 = _1
    SourceInfo(src/pretty/exponent.rs:17:45-17:46)
  4: _38 = MulWithOverflow(_37, const 2_isize)
    SourceInfo(src/pretty/exponent.rs:17:45-17:50)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:17:45-17:50)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _37, const 2_isize) -> [success: bb18, unwind: bb35]
  }
  preds [bb16]
  succs [bb18, bb35]

bb18
  0: _36 = move (_38.0: isize)
    SourceInfo(src/pretty/exponent.rs:17:45-17:50)
  1: StorageDead(_37)
    SourceInfo(src/pretty/exponent.rs:17:49-17:50)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:17:17-17:51)
      kind: _31 = core::ptr::const_ptr::<impl *const u8>::offset(move _32, move _36) -> [return: bb19, unwind: bb35]
  }
  preds [bb17]
  succs [bb19, bb35]

bb19
  0: StorageDead(_36)
    SourceInfo(src/pretty/exponent.rs:17:50-17:51)
  1: StorageDead(_32)
    SourceInfo(src/pretty/exponent.rs:17:50-17:51)
  2: FakeRead(ForLet(None), _31)
    SourceInfo(src/pretty/exponent.rs:17:13-17:14)
  3: StorageDead(_35)
    SourceInfo(src/pretty/exponent.rs:17:51-17:52)
  4: StorageLive(_39)
    SourceInfo(src/pretty/exponent.rs:18:9-18:57)
  5: StorageLive(_40)
    SourceInfo(src/pretty/exponent.rs:18:34-18:35)
  6: _40 = _31
    SourceInfo(src/pretty/exponent.rs:18:34-18:35)
  7: StorageLive(_41)
    SourceInfo(src/pretty/exponent.rs:18:37-18:53)
  8: StorageLive(_42)
    SourceInfo(src/pretty/exponent.rs:18:37-18:43)
  9: _42 = _2
    SourceInfo(src/pretty/exponent.rs:18:37-18:43)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:18:37-18:53)
      kind: _41 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _42, const 1_isize) -> [return: bb20, unwind: bb35]
  }
  preds [bb18]
  succs [bb20, bb35]

bb20
  0: StorageDead(_42)
    SourceInfo(src/pretty/exponent.rs:18:52-18:53)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:18:9-18:57)
      kind: _39 = core::intrinsics::copy_nonoverlapping::<u8>(move _40, move _41, const 2_usize) -> [return: bb21, unwind: bb35]
  }
  preds [bb19]
  succs [bb21, bb35]

bb21
  0: StorageDead(_41)
    SourceInfo(src/pretty/exponent.rs:18:56-18:57)
  1: StorageDead(_40)
    SourceInfo(src/pretty/exponent.rs:18:56-18:57)
  2: StorageDead(_39)
    SourceInfo(src/pretty/exponent.rs:18:57-18:58)
  3: StorageLive(_43)
    SourceInfo(src/pretty/exponent.rs:19:9-19:22)
  4: StorageLive(_44)
    SourceInfo(src/pretty/exponent.rs:19:9-19:13)
  5: _44 = _3
    SourceInfo(src/pretty/exponent.rs:19:9-19:13)
  6: _43 = move _44 as usize (IntToInt)
    SourceInfo(src/pretty/exponent.rs:19:9-19:22)
  7: StorageDead(_44)
    SourceInfo(src/pretty/exponent.rs:19:21-19:22)
  8: _45 = AddWithOverflow(_43, const 3_usize)
    SourceInfo(src/pretty/exponent.rs:19:9-19:26)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:19:9-19:26)
      kind: assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 3_usize) -> [success: bb22, unwind: bb35]
  }
  preds [bb20]
  succs [bb22, bb35]

bb22
  0: _0 = move (_45.0: usize)
    SourceInfo(src/pretty/exponent.rs:19:9-19:26)
  1: StorageDead(_43)
    SourceInfo(src/pretty/exponent.rs:19:25-19:26)
  2: StorageDead(_31)
    SourceInfo(src/pretty/exponent.rs:20:5-20:6)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:14:5-27:6)
      kind: goto -> bb34
  }
  preds [bb21]
  succs [bb34]

bb23
  0: StorageDead(_18)
    SourceInfo(src/pretty/exponent.rs:14:15-14:16)
  1: StorageLive(_46)
    SourceInfo(src/pretty/exponent.rs:20:15-20:22)
  2: StorageLive(_47)
    SourceInfo(src/pretty/exponent.rs:20:15-20:16)
  3: _47 = _1
    SourceInfo(src/pretty/exponent.rs:20:15-20:16)
  4: _46 = Ge(move _47, const 10_isize)
    SourceInfo(src/pretty/exponent.rs:20:15-20:22)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:20:15-20:22)
      kind: switchInt(move _46) -> [0: bb30, otherwise: bb24]
  }
  preds [bb10]
  succs [bb24, bb30]

bb24
  0: StorageDead(_47)
    SourceInfo(src/pretty/exponent.rs:20:21-20:22)
  1: StorageLive(_48)
    SourceInfo(src/pretty/exponent.rs:21:13-21:14)
  2: StorageLive(_49)
    SourceInfo(src/pretty/exponent.rs:21:17-21:37)
  3: StorageLive(_50)
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  4: StorageLive(_51)
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  5: StorageLive(_52)
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  6: _52 = const <static(DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE))>
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  7: _51 = &(*_52)
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  8: _50 = move _51 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(src/pretty/exponent.rs:21:17-21:28)
  9: StorageDead(_51)
    SourceInfo(src/pretty/exponent.rs:21:27-21:28)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:21:17-21:37)
      kind: _49 = core::slice::<impl [u8]>::as_ptr(move _50) -> [return: bb25, unwind: bb35]
  }
  preds [bb23]
  succs [bb25, bb35]

bb25
  0: StorageDead(_50)
    SourceInfo(src/pretty/exponent.rs:21:36-21:37)
  1: StorageLive(_53)
    SourceInfo(src/pretty/exponent.rs:21:45-21:50)
  2: StorageLive(_54)
    SourceInfo(src/pretty/exponent.rs:21:45-21:46)
  3: _54 = _1
    SourceInfo(src/pretty/exponent.rs:21:45-21:46)
  4: _55 = MulWithOverflow(_54, const 2_isize)
    SourceInfo(src/pretty/exponent.rs:21:45-21:50)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:21:45-21:50)
      kind: assert(!move (_55.1: bool), "attempt to compute `{} * {}`, which would overflow", move _54, const 2_isize) -> [success: bb26, unwind: bb35]
  }
  preds [bb24]
  succs [bb26, bb35]

bb26
  0: _53 = move (_55.0: isize)
    SourceInfo(src/pretty/exponent.rs:21:45-21:50)
  1: StorageDead(_54)
    SourceInfo(src/pretty/exponent.rs:21:49-21:50)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:21:17-21:51)
      kind: _48 = core::ptr::const_ptr::<impl *const u8>::offset(move _49, move _53) -> [return: bb27, unwind: bb35]
  }
  preds [bb25]
  succs [bb27, bb35]

bb27
  0: StorageDead(_53)
    SourceInfo(src/pretty/exponent.rs:21:50-21:51)
  1: StorageDead(_49)
    SourceInfo(src/pretty/exponent.rs:21:50-21:51)
  2: FakeRead(ForLet(None), _48)
    SourceInfo(src/pretty/exponent.rs:21:13-21:14)
  3: StorageDead(_52)
    SourceInfo(src/pretty/exponent.rs:21:51-21:52)
  4: StorageLive(_56)
    SourceInfo(src/pretty/exponent.rs:22:9-22:47)
  5: StorageLive(_57)
    SourceInfo(src/pretty/exponent.rs:22:34-22:35)
  6: _57 = _48
    SourceInfo(src/pretty/exponent.rs:22:34-22:35)
  7: StorageLive(_58)
    SourceInfo(src/pretty/exponent.rs:22:37-22:43)
  8: _58 = _2
    SourceInfo(src/pretty/exponent.rs:22:37-22:43)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:22:9-22:47)
      kind: _56 = core::intrinsics::copy_nonoverlapping::<u8>(move _57, move _58, const 2_usize) -> [return: bb28, unwind: bb35]
  }
  preds [bb26]
  succs [bb28, bb35]

bb28
  0: StorageDead(_58)
    SourceInfo(src/pretty/exponent.rs:22:46-22:47)
  1: StorageDead(_57)
    SourceInfo(src/pretty/exponent.rs:22:46-22:47)
  2: StorageDead(_56)
    SourceInfo(src/pretty/exponent.rs:22:47-22:48)
  3: StorageLive(_59)
    SourceInfo(src/pretty/exponent.rs:23:9-23:22)
  4: StorageLive(_60)
    SourceInfo(src/pretty/exponent.rs:23:9-23:13)
  5: _60 = _3
    SourceInfo(src/pretty/exponent.rs:23:9-23:13)
  6: _59 = move _60 as usize (IntToInt)
    SourceInfo(src/pretty/exponent.rs:23:9-23:22)
  7: StorageDead(_60)
    SourceInfo(src/pretty/exponent.rs:23:21-23:22)
  8: _61 = AddWithOverflow(_59, const 2_usize)
    SourceInfo(src/pretty/exponent.rs:23:9-23:26)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:23:9-23:26)
      kind: assert(!move (_61.1: bool), "attempt to compute `{} + {}`, which would overflow", move _59, const 2_usize) -> [success: bb29, unwind: bb35]
  }
  preds [bb27]
  succs [bb29, bb35]

bb29
  0: _0 = move (_61.0: usize)
    SourceInfo(src/pretty/exponent.rs:23:9-23:26)
  1: StorageDead(_59)
    SourceInfo(src/pretty/exponent.rs:23:25-23:26)
  2: StorageDead(_48)
    SourceInfo(src/pretty/exponent.rs:24:5-24:6)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:20:12-27:6)
      kind: goto -> bb33
  }
  preds [bb28]
  succs [bb33]

bb30
  0: StorageDead(_47)
    SourceInfo(src/pretty/exponent.rs:20:21-20:22)
  1: StorageLive(_62)
    SourceInfo(src/pretty/exponent.rs:25:26-25:33)
  2: StorageLive(_63)
    SourceInfo(src/pretty/exponent.rs:25:26-25:27)
  3: _63 = _1
    SourceInfo(src/pretty/exponent.rs:25:26-25:27)
  4: _62 = move _63 as u8 (IntToInt)
    SourceInfo(src/pretty/exponent.rs:25:26-25:33)
  5: StorageDead(_63)
    SourceInfo(src/pretty/exponent.rs:25:32-25:33)
  6: _64 = AddWithOverflow(const 48_u8, _62)
    SourceInfo(src/pretty/exponent.rs:25:19-25:33)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:25:19-25:33)
      kind: assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _62) -> [success: bb31, unwind: bb35]
  }
  preds [bb23]
  succs [bb31, bb35]

bb31
  0: (*_2) = move (_64.0: u8)
    SourceInfo(src/pretty/exponent.rs:25:9-25:33)
  1: StorageDead(_62)
    SourceInfo(src/pretty/exponent.rs:25:32-25:33)
  2: StorageLive(_65)
    SourceInfo(src/pretty/exponent.rs:26:9-26:22)
  3: StorageLive(_66)
    SourceInfo(src/pretty/exponent.rs:26:9-26:13)
  4: _66 = _3
    SourceInfo(src/pretty/exponent.rs:26:9-26:13)
  5: _65 = move _66 as usize (IntToInt)
    SourceInfo(src/pretty/exponent.rs:26:9-26:22)
  6: StorageDead(_66)
    SourceInfo(src/pretty/exponent.rs:26:21-26:22)
  7: _67 = AddWithOverflow(_65, const 1_usize)
    SourceInfo(src/pretty/exponent.rs:26:9-26:26)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:26:9-26:26)
      kind: assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _65, const 1_usize) -> [success: bb32, unwind: bb35]
  }
  preds [bb30]
  succs [bb32, bb35]

bb32
  0: _0 = move (_67.0: usize)
    SourceInfo(src/pretty/exponent.rs:26:9-26:26)
  1: StorageDead(_65)
    SourceInfo(src/pretty/exponent.rs:26:25-26:26)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:20:12-27:6)
      kind: goto -> bb33
  }
  preds [bb31]
  succs [bb33]

bb33
  0: StorageDead(_46)
    SourceInfo(src/pretty/exponent.rs:27:5-27:6)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:14:5-27:6)
      kind: goto -> bb34
  }
  preds [bb29, bb32]
  succs [bb34]

bb34
  0: StorageDead(_17)
    SourceInfo(src/pretty/exponent.rs:27:5-27:6)
  1: StorageDead(_3)
    SourceInfo(src/pretty/exponent.rs:28:1-28:2)
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:28:2-28:2)
      kind: return
  }
  preds [bb22, bb33]
  succs []

bb35
  Terminator {
      source_info: SourceInfo(src/pretty/exponent.rs:5:1-28:2)
      kind: resume
  }
  preds [bb1, bb2, bb8, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19, bb20, bb21, bb24, bb25, bb26, bb27, bb28, bb30, bb31]
  succs []

