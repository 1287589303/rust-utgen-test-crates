{
  "name": "ryu::buffer::{impl#7}::format_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:154:5:165:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is true\n",
        "expected return value/type: NAN\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NaNWrapper(f64);",
                "    impl Copy for NaNWrapper {}",
                "",
                "    let nan_value = NaNWrapper(f64::NAN);",
                "    let result = nan_value.format_nonfinite();",
                "    assert_eq!(result, \"NaN\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "  #[derive(Clone, Copy)]",
                "  struct NegInfinityWrapper(f64);",
                "  ",
                "  let neg_infinity_value = NegInfinityWrapper(f64::NEG_INFINITY);",
                "  let result = neg_infinity_value.0.format_nonfinite();",
                "  assert_eq!(result, \"-inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct InfinityWrapper(f64);",
                "    impl Copy for InfinityWrapper {}",
                "",
                "    let infinity_value = InfinityWrapper(f64::INFINITY);",
                "    let result = infinity_value.format_nonfinite();",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 160 is true\n",
        "expected return value/type: NEG_INFINITY\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct(f64);",
                "    ",
                "    let value = TestStruct(f64::from_bits(0x8000000000000000)); // negative infinity",
                "    assert_eq!(value.0.format_nonfinite(), NEG_INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct(f64);",
                "    ",
                "    let value = TestStruct(f64::from_bits(0x7ff0000000000000)); // positive infinity",
                "    assert_eq!(value.0.format_nonfinite(), INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct(f64);",
                "    ",
                "    let value = TestStruct(f64::from_bits(0x7ff8000000000000)); // NaN",
                "    assert_eq!(value.0.format_nonfinite(), NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 160 is false\n",
        "expected return value/type: INFINITY\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   #[derive(Clone)]  ",
                "   struct F64Wrapper(f64);  ",
                "   impl Copy for F64Wrapper {}  ",
                " ",
                "   let value = F64Wrapper(f64::INFINITY);  ",
                "   let result = value.format_nonfinite();  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   struct F64Wrapper(f64);",
                "   impl Copy for F64Wrapper {}",
                "   ",
                "   let value = F64Wrapper(1.0e308); // A large positive number",
                "   let result = value.0.format_nonfinite();",
                "   assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   #[derive(Clone)]  ",
                "   struct F64Wrapper(f64);  ",
                "   impl Copy for F64Wrapper {}  ",
                " ",
                "   let value = F64Wrapper(0.0); // Zero  ",
                "   let result = value.format_nonfinite();  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}