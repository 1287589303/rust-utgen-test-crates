{
  "name": "ryu::buffer::{impl#7}::write_to_ryu_buffer",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:168:5:170:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let mut buffer: [MaybeUninit<u8>; 20] = unsafe { MaybeUninit::uninit().assume_init() };",
                "   let result = unsafe { buffer.as_mut_ptr() };",
                "   let size = unsafe { (0.0_f64).write_to_ryu_buffer(result) };",
                "   let output = unsafe { core::str::from_utf8(&*(buffer[..size].as_ptr() as *const [u8; 20])).unwrap() };",
                "   assert_eq!(output, \"0.0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let mut buffer: [MaybeUninit<u8>; 20] = unsafe { MaybeUninit::uninit().assume_init() };",
                "   let result = buffer.as_mut_ptr() as *mut u8;",
                "   let size = unsafe { (f64::INFINITY).write_to_ryu_buffer(result) };",
                "   let output = unsafe { core::str::from_utf8(core::mem::transmute::<&[MaybeUninit<u8>], &[u8]>(&buffer[..size])).unwrap() };",
                "   assert_eq!(output, \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "  let mut buffer: [u8; 20] = [0; 20]; // Allocate a regular array of u8",
                "  let result = buffer.as_mut_ptr();",
                "  let size = unsafe { (-f64::INFINITY).write_to_ryu_buffer(result) };",
                "  let output = unsafe { core::str::from_utf8(&buffer[..size]).unwrap() }; // Convert the buffer directly",
                "  assert_eq!(output, \"-inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let mut buffer: [u8; 20] = [0; 20];",
                "   let result = buffer.as_mut_ptr();",
                "   let size = unsafe { (f64::NAN).write_to_ryu_buffer(result) };",
                "   let output = unsafe { core::str::from_utf8(&buffer[..size]).unwrap() };",
                "    assert_eq!(output, \"NaN\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let mut buffer: [u8; 20] = unsafe { MaybeUninit::uninit().assume_init() };",
                "   let result = buffer.as_mut_ptr();",
                "   let size = unsafe { (0.001_f64).write_to_ryu_buffer(result) };",
                "   let output = unsafe { core::str::from_utf8(&buffer[..size]).unwrap() };",
                "   assert_eq!(output, \"0.001\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let mut buffer: [u8; 20] = [0; 20];",
                "   let result = buffer.as_mut_ptr();",
                "   let size = unsafe { (1234567890.0_f64).write_to_ryu_buffer(result) };",
                "   let output = core::str::from_utf8(&buffer[..size]).unwrap();",
                "   assert_eq!(output, \"1234567890\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}