{
  "name": "ryu::buffer::{impl#6}::write_to_ryu_buffer",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:139:5:141:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { (0.0_f32).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 4); // Length of \"0.0\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"0.0\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { (-0.0_f32).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 4); // Length of \"-0.0\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"-0.0\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { f32::INFINITY.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 3); // Length of \"inf\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { (-f32::INFINITY).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 4); // Length of \"-inf\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"-inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { f32::NAN.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 3); // Length of \"NaN\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"NaN\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { 1.23_f32.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 4); // Length of \"1.23\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"1.23\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let result = unsafe { 123456789.0_f32.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    assert_eq!(result, 11); // Length of \"123456789\"",
                "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"123456789\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}