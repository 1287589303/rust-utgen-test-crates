{
  "name": "ryu::d2s_intrinsics::multiple_of_power_of_2",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:63:1:68:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value != 0 at line 64 is true\n",
        "precondition: p < 64 at line 65 is true\n",
        "expected return value/type: (value & ((1u64 << p) - 1)) == 0\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 8; // 0b1000",
                "    let p: u32 = 3; // 2^3 = 8",
                "    assert_eq!(multiple_of_power_of_2(value, p), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 20; // 0b10100",
                "    let p: u32 = 2; // 2^2 = 4",
                "    assert_eq!(multiple_of_power_of_2(value, p), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 16; // 0b10000",
                "    let p: u32 = 4; // 2^4 = 16",
                "    assert_eq!(multiple_of_power_of_2(value, p), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 0b11111111; // 255",
                "    let p: u32 = 8; // 2^8 = 256",
                "    assert_eq!(multiple_of_power_of_2(value, p), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 1; // 0b1",
                "    let p: u32 = 1; // 2^1 = 2",
                "    assert_eq!(multiple_of_power_of_2(value, p), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 32; // 0b100000",
                "    let p: u32 = 5; // 2^5 = 32",
                "    assert_eq!(multiple_of_power_of_2(value, p), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value != 0 at line 64 is true\n",
        "precondition: p < 64 at line 65 is false, with bound p == 64\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 8; // Example of a non-zero value",
                "    let p: u32 = 64; // p should be equal to 64 to trigger the panic",
                "    multiple_of_power_of_2(value, p);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 8; // A non-zero value",
                "    let p: u32 = 3; // A valid p within bounds",
                "    assert!(multiple_of_power_of_2(value, p));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 0; // Zero value to trigger the panic on value",
                "    let p: u32 = 5; // Valid p within bounds",
                "    multiple_of_power_of_2(value, p);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: value != 0 at line 64 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": []
        }
      ]
    }
  ]
}