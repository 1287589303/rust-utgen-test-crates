{
  "name": "ryu::f2s_intrinsics::pow5factor_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": false,
  "loc": "src/f2s_intrinsics.rs:27:1:40:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is true\n",
        "precondition: r != 0 at line 33 is true\n",
        "expected return value/type: count\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 7; // 7 is not a multiple of 5",
                "    let expected_count: u32 = 0; // Since 7 is not a multiple of 5, the count should be 0",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 25; // 25 is 5^2",
                "    let expected_count: u32 = 2; // 25 can be divided by 5 twice before reaching a non-multiple of 5",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 125; // 125 is 5^3",
                "    let expected_count: u32 = 3; // 125 can be divided by 5 three times before reaching a non-multiple of 5",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 100; // 100 is 5^2 * 4",
                "    let expected_count: u32 = 2; // 100 can be divided by 5 two times before reaching a non-multiple of 5",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_pow5factor_32_zero() {",
                "    let value: u32 = 0;",
                "    pow5factor_32(value);",
                "}",
                "    let value: u32 = 125; // 125 = 5^3, so should return 3",
                "    assert_eq!(pow5factor_32(value), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_pow5factor_32_zero() {",
                "    let value: u32 = 0;",
                "    pow5factor_32(value);",
                "}",
                "    let value: u32 = 3125; // 3125 = 5^5, so should return 5",
                "    assert_eq!(pow5factor_32(value), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_pow5factor_32_zero() {",
                "    let value: u32 = 0;",
                "    pow5factor_32(value);",
                "}",
                "    let value: u32 = 14; // 14 mod 5 != 0, should return 0",
                "    assert_eq!(pow5factor_32(value), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}