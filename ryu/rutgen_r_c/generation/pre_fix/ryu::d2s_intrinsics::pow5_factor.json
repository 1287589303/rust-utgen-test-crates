{
  "name": "ryu::d2s_intrinsics::pow5_factor",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:39:1:52:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value != 0 at line 44 is true\n",
        "precondition: value > N_DIV_5 at line 46 is true\n",
        "expected return value/type: count\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 1; // value is non-zero and should produce a count of 0",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 3689348814741910324; // value is just below N_DIV_5",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 3689348814741910325; // value is just above N_DIV_5",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 1); // first multiplication will exceed N_DIV_5",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 3_000_000_000_000_000_000; // a large non-zero value",
                "    let result = pow5_factor(value);",
                "    assert!(result > 0); // this should produce a positive count",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value != 0 at line 44 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 0;",
                "    let _result = pow5_factor(value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 1;",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 3689348814741910322; // One less than N_DIV_5",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 3689348814741910323; // Equal to N_DIV_5",
                "    let result = pow5_factor(value);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u64 = 4620696611202056981; // A value that will go through multiple iterations before exceeding N_DIV_5",
                "    let result = pow5_factor(value);",
                "    assert!(result > 1); // Expect more than 1 iteration",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}