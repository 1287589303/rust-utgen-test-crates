{
  "name": "ryu::d2s_intrinsics::mul_shift_64",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:71:1:75:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (((b0 >> 64) + b2) >> (j - 64)) as u64\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 2;",
                "    let mul: (u64, u64) = (3, 5);",
                "    let j: u32 = 66;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); //  (((2 * 3) >> 64) + (2 * 5)) >> (66 - 64)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (0, 1);",
                "    let j: u32 = 64;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); //  (((1 * 0) >> 64) + (1 * 1)) >> (64 - 64)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 10;",
                "    let mul: (u64, u64) = (20, 30);",
                "    let j: u32 = 75;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); //  (((10 * 20) >> 64) + (10 * 30)) >> (75 - 64)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (100, 200);",
                "    let j: u32 = 64;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); //  (((0 * 100) >> 64) + (0 * 200)) >> (64 - 64)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u64 = 5;",
                "    let mul: (u64, u64) = (12, 8);",
                "    let j: u32 = 65;",
                "    let result = mul_shift_64(m, &mul, j);",
                "    assert_eq!(result, 0); //  (((5 * 12) >> 64) + (5 * 8)) >> (65 - 64)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}