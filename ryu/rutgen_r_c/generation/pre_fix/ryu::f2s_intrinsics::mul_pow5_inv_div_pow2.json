{
  "name": "ryu::f2s_intrinsics::mul_pow5_inv_div_pow2",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:75:1:98:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 at line 89 is true\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 10;",
                "    let q: u32 = 1; // Assuming this is within valid range",
                "    let j: i32 = 37; // A valid shift greater than 32",
                "    let result = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert!(result <= u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 0; // Minimal case for m",
                "    let q: u32 = 0; // Minimal case for q",
                "    let j: i32 = 40; // A valid shift greater than 32",
                "    let result = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert!(result <= u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = u32::MAX; // Maximal case for m",
                "    let q: u32 = 1; // Assuming this is within valid range",
                "    let j: i32 = 37; // A valid shift greater than 32",
                "    let result = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert!(result <= u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 at line 89 is false, with bound q == d2s::DOUBLE_POW5_INV_SPLIT.len() as u32\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Assuming the length of DOUBLE_POW5_INV_SPLIT is known for the test",
                "    const DOUBLE_POW5_INV_SPLIT_LEN: usize = 100; // Replace with actual length",
                "",
                "    let m: u32 = 10;",
                "    let q: u32 = DOUBLE_POW5_INV_SPLIT_LEN as u32; // Bound condition",
                "    let j: i32 = 40; // Arbitrary valid shift value",
                "",
                "    unsafe {",
                "        let _ = mul_pow5_inv_div_pow2(m, q, j); // This should trigger a panic at line 89",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}