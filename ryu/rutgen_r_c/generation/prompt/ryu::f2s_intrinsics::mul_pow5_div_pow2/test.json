{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/f2s_intrinsics.rs\n// crate name is ryu\nuse crate::d2s;\npub const FLOAT_POW5_INV_BITCOUNT: i32 = d2s::DOUBLE_POW5_INV_BITCOUNT - 64;\npub const FLOAT_POW5_BITCOUNT: i32 = d2s::DOUBLE_POW5_BITCOUNT - 64;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub fn mul_pow5_div_pow2(m: u32, i: u32, j: i32) -> u32 {\n    #[cfg(feature = \"small\")]\n    {\n        let pow5 = unsafe { d2s::compute_pow5(i) };\n        mul_shift_32(m, pow5.1, j)\n    }\n    #[cfg(not(feature = \"small\"))]\n    {\n        debug_assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);\n        unsafe { mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT.get_unchecked(i as usize).1, j) }\n    }\n}\n#[cfg_attr(feature = \"no-panic\", inline)]\nfn mul_shift_32(m: u32, factor: u64, shift: i32) -> u32 {\n    debug_assert!(shift > 32);\n    let factor_lo = factor as u32;\n    let factor_hi = (factor >> 32) as u32;\n    let bits0 = m as u64 * factor_lo as u64;\n    let bits1 = m as u64 * factor_hi as u64;\n    let sum = (bits0 >> 32) + bits1;\n    let shifted_sum = sum >> (shift - 32);\n    debug_assert!(shifted_sum <= u32::max_value() as u64);\n    shifted_sum as u32\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n101 pub fn mul_pow5_div_pow2(m: u32, i: u32, j: i32) -> u32 {\n102     #[cfg(feature = \"small\")]\n103     {\n104         let pow5 = unsafe { d2s::compute_pow5(i) };\n105         mul_shift_32(m, pow5.1, j)\n106     }\n107 \n108     #[cfg(not(feature = \"small\"))]\n109     {\n110         debug_assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);\n111         unsafe { mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT.get_unchecked(i as usize).1, j) }\n112     }\n113 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}