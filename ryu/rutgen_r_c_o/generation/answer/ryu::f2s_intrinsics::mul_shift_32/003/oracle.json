[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let m: u32 = 0; // test lower bound for m",
          "    let factor: u64 = 0; // test lower bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 0, 32)).is_err());"
        ],
        "code": [
          "{",
          "    let m: u32 = 0; // test lower bound for m",
          "    let factor: u64 = 0; // test lower bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 0, 32)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let m: u32 = 4294967295; // test upper bound for m",
          "    let factor: u64 = 0; // test lower bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 0, 32)).is_err());"
        ],
        "code": [
          "{",
          "    let m: u32 = 4294967295; // test upper bound for m",
          "    let factor: u64 = 0; // test lower bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 0, 32)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let m: u32 = 0; // test lower bound for m",
          "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 18446744073709551615, 32)).is_err());"
        ],
        "code": [
          "{",
          "    let m: u32 = 0; // test lower bound for m",
          "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 18446744073709551615, 32)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let m: u32 = 4294967295; // test upper bound for m",
          "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 18446744073709551615, 32)).is_err());"
        ],
        "code": [
          "{",
          "    let m: u32 = 4294967295; // test upper bound for m",
          "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
          "    let shift: i32 = 32; // shift == 32",
          "    let _result = mul_shift_32(m, factor, shift);",
          "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 18446744073709551615, 32)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]