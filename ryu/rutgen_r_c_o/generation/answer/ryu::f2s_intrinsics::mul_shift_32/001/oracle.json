[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 0;",
          "    let factor: u64 = 1;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_shift_32(0, 1, 33), 0);",
          "    assert_eq!(mul_shift_32(u32::max_value(), 1, 33), 0);",
          "    assert_eq!(mul_shift_32(1, 1, 33), 0);",
          "    assert_eq!(mul_shift_32(1, 0xFFFFFFFFFFFFFFFF, 33), 0xFFFFFFFF);",
          "    assert_eq!(mul_shift_32(1, 2, 33), 0);",
          "    assert_eq!(mul_shift_32(0, 0xFFFFFFFFFFFFFFFF, 33), 0);"
        ],
        "code": [
          "{",
          "    let m: u32 = 0;",
          "    let factor: u64 = 1;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "    assert_eq!(mul_shift_32(0, 1, 33), 0);",
          "    assert_eq!(mul_shift_32(u32::max_value(), 1, 33), 0);",
          "    assert_eq!(mul_shift_32(1, 1, 33), 0);",
          "    assert_eq!(mul_shift_32(1, 0xFFFFFFFFFFFFFFFF, 33), 0xFFFFFFFF);",
          "    assert_eq!(mul_shift_32(1, 2, 33), 0);",
          "    assert_eq!(mul_shift_32(0, 0xFFFFFFFFFFFFFFFF, 33), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 4294967295;",
          "    let factor: u64 = 1;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(mul_shift_32(4294967295, 1, 33) <= u32::max_value());",
          "    assert_eq!(mul_shift_32(4294967295, 1, 33), 1);"
        ],
        "code": [
          "{",
          "    let m: u32 = 4294967295;",
          "    let factor: u64 = 1;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "    assert!(mul_shift_32(4294967295, 1, 33) <= u32::max_value());",
          "    assert_eq!(mul_shift_32(4294967295, 1, 33), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 1;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    let m: u32 = 1;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 33;",
          "    assert_eq!(mul_shift_32(m, factor, shift), 1);",
          "    assert!(shift > 32);",
          "    assert!(mul_shift_32(m, factor, shift) <= u32::max_value());"
        ],
        "code": [
          "{",
          "    let m: u32 = 1;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 33;",
          "    mul_shift_32(m, factor, shift);",
          "    let m: u32 = 1;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 33;",
          "    assert_eq!(mul_shift_32(m, factor, shift), 1);",
          "    assert!(shift > 32);",
          "    assert!(mul_shift_32(m, factor, shift) <= u32::max_value());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 2147483647;",
          "    let factor: u64 = 18446744073709551615;",
          "    let shift: i32 = 63;",
          "    mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert!(mul_shift_32(2147483647, 18446744073709551615, 63) == u32::max_value());",
          "    assert!(mul_shift_32(2147483647, 18446744073709551615, 64) == u32::max_value());",
          "    assert!(mul_shift_32(0, 18446744073709551615, 33) == 0);",
          "    assert!(mul_shift_32(1, 1, 65) == 1);",
          "    assert!(mul_shift_32(1, 4294967295, 66) == 1);",
          "    assert!(mul_shift_32(2147483647, 0, 100) == 0);"
        ],
        "code": [
          "{",
          "    let m: u32 = 2147483647;",
          "    let factor: u64 = 18446744073709551615;",
          "    let shift: i32 = 63;",
          "    mul_shift_32(m, factor, shift);",
          "    assert!(mul_shift_32(2147483647, 18446744073709551615, 63) == u32::max_value());",
          "    assert!(mul_shift_32(2147483647, 18446744073709551615, 64) == u32::max_value());",
          "    assert!(mul_shift_32(0, 18446744073709551615, 33) == 0);",
          "    assert!(mul_shift_32(1, 1, 65) == 1);",
          "    assert!(mul_shift_32(1, 4294967295, 66) == 1);",
          "    assert!(mul_shift_32(2147483647, 0, 100) == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 4294967295;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 63;",
          "    mul_shift_32(m, factor, shift);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_shift_32(4294967295, 4294967295, 63), 4294967295);"
        ],
        "code": [
          "{",
          "    let m: u32 = 4294967295;",
          "    let factor: u64 = 4294967295;",
          "    let shift: i32 = 63;",
          "    mul_shift_32(m, factor, shift);",
          "    assert_eq!(mul_shift_32(4294967295, 4294967295, 63), 4294967295);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]