[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f64 = 0.0;",
          "    let expected_len = 3;",
          "    assert_eq!(len, expected_len);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"0.0\");",
          "    assert!(len <= 24);",
          "    assert!(len > 0);",
          "    assert!(buffer.iter().take(len).all(|&b| b.is_some()));",
          "    assert_eq!(buffer[0].assume_init(), 48);  // ASCII for '0'",
          "    assert_eq!(buffer[1].assume_init(), 46);  // ASCII for '.'",
          "    assert_eq!(buffer[2].assume_init(), 48);  // ASCII for '0'"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f64 = 0.0;",
          "    let expected_len = 3;",
          "    assert_eq!(len, expected_len);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"0.0\");",
          "    assert!(len <= 24);",
          "    assert!(len > 0);",
          "    assert!(buffer.iter().take(len).all(|&b| b.is_some()));",
          "    assert_eq!(buffer[0].assume_init(), 48);  // ASCII for '0'",
          "    assert_eq!(buffer[1].assume_init(), 46);  // ASCII for '.'",
          "    assert_eq!(buffer[2].assume_init(), 48);  // ASCII for '0'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.0; // Testing with 0.0",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.0; // Testing with 0.0",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]