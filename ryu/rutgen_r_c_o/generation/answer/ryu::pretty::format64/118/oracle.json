[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = 0.0f64;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');"
        ],
        "code": [
          "{",
          "    let f = 0.0f64;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(_len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = 1.0e300f64; // This value will result in k < -324",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    assert_eq!(buffer[0], 0);",
          "    assert_eq!(buffer[1], 0);",
          "    assert_eq!(buffer[2], 0);",
          "    assert_eq!(buffer[3], 0);",
          "    assert_eq!(buffer[4], 0);",
          "    assert_eq!(buffer[5], 0);",
          "    assert_eq!(buffer[6], 0);",
          "    assert_eq!(buffer[7], 0);",
          "    assert_eq!(buffer[8], 0);",
          "    assert_eq!(buffer[9], 0);",
          "    assert_eq!(buffer[10], 0);",
          "    assert_eq!(buffer[11], 0);",
          "    assert_eq!(buffer[12], 0);",
          "    assert_eq!(buffer[13], 0);",
          "    assert_eq!(buffer[14], 0);",
          "    assert_eq!(buffer[15], 0);",
          "    assert_eq!(buffer[16], 0);",
          "    assert_eq!(buffer[17], 0);",
          "    assert_eq!(buffer[18], 0);",
          "    assert_eq!(buffer[19], 0);",
          "    assert_eq!(buffer[20], 0);",
          "    assert_eq!(buffer[21], 0);",
          "    assert_eq!(buffer[22], 0);",
          "    assert_eq!(buffer[23], 0);"
        ],
        "code": [
          "{",
          "    let f = 1.0e300f64; // This value will result in k < -324",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 0);",
          "    assert_eq!(buffer[0], 0);",
          "    assert_eq!(buffer[1], 0);",
          "    assert_eq!(buffer[2], 0);",
          "    assert_eq!(buffer[3], 0);",
          "    assert_eq!(buffer[4], 0);",
          "    assert_eq!(buffer[5], 0);",
          "    assert_eq!(buffer[6], 0);",
          "    assert_eq!(buffer[7], 0);",
          "    assert_eq!(buffer[8], 0);",
          "    assert_eq!(buffer[9], 0);",
          "    assert_eq!(buffer[10], 0);",
          "    assert_eq!(buffer[11], 0);",
          "    assert_eq!(buffer[12], 0);",
          "    assert_eq!(buffer[13], 0);",
          "    assert_eq!(buffer[14], 0);",
          "    assert_eq!(buffer[15], 0);",
          "    assert_eq!(buffer[16], 0);",
          "    assert_eq!(buffer[17], 0);",
          "    assert_eq!(buffer[18], 0);",
          "    assert_eq!(buffer[19], 0);",
          "    assert_eq!(buffer[20], 0);",
          "    assert_eq!(buffer[21], 0);",
          "    assert_eq!(buffer[22], 0);",
          "    assert_eq!(buffer[23], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = -0.0f64; // Sign is false, ieee_exponent == 0",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    *assert_eq!(len, 3);*",
          "    *assert_eq!(buffer[..3], [b'0', b'.', b'0']);*",
          "    *assert!(!is_finite(f));*",
          "    *assert!(is_nan(f) == false);*",
          "    *assert!(is_infinite(f) == false);*"
        ],
        "code": [
          "{",
          "    let f = -0.0f64; // Sign is false, ieee_exponent == 0",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let _len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    *assert_eq!(len, 3);*",
          "    *assert_eq!(buffer[..3], [b'0', b'.', b'0']);*",
          "    *assert!(!is_finite(f));*",
          "    *assert!(is_nan(f) == false);*",
          "    *assert!(is_infinite(f) == false);*",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]