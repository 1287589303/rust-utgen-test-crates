[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 5e-324; // Smallest positive subnormal number",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    len == 16",
          "    result[0] == b'0'",
          "    result[1] == b'.'",
          "    result[2] == b'0'",
          "    result[3] == b'0'",
          "    result[4] == b'0'",
          "    result[5] == b'0'",
          "    result[6] == b'0'",
          "    result[7] == b'0'",
          "    result[8] == b'0'",
          "    result[9] == b'0'",
          "    result[10] == b'0'",
          "    result[11] == b'0'",
          "    result[12] == b'0'",
          "    result[13] == b'0'",
          "    result[14] == b'0'",
          "    result[15] == b'5'"
        ],
        "code": [
          "{",
          "    let f: f64 = 5e-324; // Smallest positive subnormal number",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "    len == 16",
          "    result[0] == b'0'",
          "    result[1] == b'.'",
          "    result[2] == b'0'",
          "    result[3] == b'0'",
          "    result[4] == b'0'",
          "    result[5] == b'0'",
          "    result[6] == b'0'",
          "    result[7] == b'0'",
          "    result[8] == b'0'",
          "    result[9] == b'0'",
          "    result[10] == b'0'",
          "    result[11] == b'0'",
          "    result[12] == b'0'",
          "    result[13] == b'0'",
          "    result[14] == b'0'",
          "    result[15] == b'5'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 1e-324; // Another small subnormal number",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(result[..len], b\"0.01\");",
          "    assert!(len <= 24);",
          "    assert!(result[len] == 0);",
          "    assert!(len > 0);",
          "    assert!(result[0] == b'0');",
          "    assert!(result[1] == b'.');",
          "    assert!(result[2] == b'0');",
          "    assert!(result[3] == b'0');",
          "    assert!(result[4] == b'1');",
          "    assert!(result[5] == b'\\0');",
          "    assert!(len == index + length + offset);",
          "    assert!(k == 0);",
          "    assert!(kk == 0);"
        ],
        "code": [
          "{",
          "    let f: f64 = 1e-324; // Another small subnormal number",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(result[..len], b\"0.01\");",
          "    assert!(len <= 24);",
          "    assert!(result[len] == 0);",
          "    assert!(len > 0);",
          "    assert!(result[0] == b'0');",
          "    assert!(result[1] == b'.');",
          "    assert!(result[2] == b'0');",
          "    assert!(result[3] == b'0');",
          "    assert!(result[4] == b'1');",
          "    assert!(result[5] == b'\\0');",
          "    assert!(len == index + length + offset);",
          "    assert!(k == 0);",
          "    assert!(kk == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 1.5e-324; // Larger subnormal value",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(result[0], b'0');",
          "    assert_eq!(result[1], b'.');",
          "    assert_eq!(result[2], b'0');",
          "    assert_eq!(result[3], b'0');",
          "    assert_eq!(result[4], b'0');",
          "    assert_eq!(result[5], b'0');",
          "    assert_eq!(result[6], b'0');",
          "    assert_eq!(result[7], b'1');",
          "    assert_eq!(result[8], b'5');",
          "    assert_eq!(result[9], b'0');",
          "    assert_eq!(result[10], b'0');",
          "    assert_eq!(result[11], b'0');",
          "    assert_eq!(result[12], b'0');",
          "    assert_eq!(result[13], b'0');",
          "    assert_eq!(result[14], b'0');",
          "    assert_eq!(result[15], b'\\0');",
          "    assert_eq!(len, length + offset);",
          "    assert!(len <= 24);"
        ],
        "code": [
          "{",
          "    let f: f64 = 1.5e-324; // Larger subnormal value",
          "    let mut result = [0u8; 24];",
          "    let len = format64(f, result.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(result[0], b'0');",
          "    assert_eq!(result[1], b'.');",
          "    assert_eq!(result[2], b'0');",
          "    assert_eq!(result[3], b'0');",
          "    assert_eq!(result[4], b'0');",
          "    assert_eq!(result[5], b'0');",
          "    assert_eq!(result[6], b'0');",
          "    assert_eq!(result[7], b'1');",
          "    assert_eq!(result[8], b'5');",
          "    assert_eq!(result[9], b'0');",
          "    assert_eq!(result[10], b'0');",
          "    assert_eq!(result[11], b'0');",
          "    assert_eq!(result[12], b'0');",
          "    assert_eq!(result[13], b'0');",
          "    assert_eq!(result[14], b'0');",
          "    assert_eq!(result[15], b'\\0');",
          "    assert_eq!(len, length + offset);",
          "    assert!(len <= 24);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]