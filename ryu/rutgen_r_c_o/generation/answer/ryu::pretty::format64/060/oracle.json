[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 2.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 6);",
          "    assert_eq!(buffer[0].assume_init(), b'2');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'0');"
        ],
        "code": [
          "{",
          "    let f: f64 = 2.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 6);",
          "    assert_eq!(buffer[0].assume_init(), b'2');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 123456789.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 12);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"123456789.0\");",
          "    assert!(buffer[11].assume_init() == b'\\0' );",
          "    assert!(buffer[10].assume_init() == b'0' );"
        ],
        "code": [
          "{",
          "    let f: f64 = 123456789.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 12);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"123456789.0\");",
          "    assert!(buffer[11].assume_init() == b'\\0' );",
          "    assert!(buffer[10].assume_init() == b'0' );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.1;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_ne!(buffer[0].assume_init(), b'-');",
          "    assert!(buffer[1].assume_init() != b'0' || buffer[2].assume_init() != b'0');",
          "    assert!(buffer[1].assume_init() != b'0' || buffer[3].assume_init() != b'0');",
          "    assert_eq!(&buffer[0..len], b\"0.1\");"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.1;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_ne!(buffer[0].assume_init(), b'-');",
          "    assert!(buffer[1].assume_init() != b'0' || buffer[2].assume_init() != b'0');",
          "    assert!(buffer[1].assume_init() != b'0' || buffer[3].assume_init() != b'0');",
          "    assert_eq!(&buffer[0..len], b\"0.1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 1.2345;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 6);",
          "    assert_eq!(buffer[0].assume_init(), b'1');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'2');",
          "    assert_eq!(buffer[3].assume_init(), b'3');",
          "    assert_eq!(buffer[4].assume_init(), b'4');",
          "    assert_eq!(buffer[5].assume_init(), b'5');"
        ],
        "code": [
          "{",
          "    let f: f64 = 1.2345;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 6);",
          "    assert_eq!(buffer[0].assume_init(), b'1');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'2');",
          "    assert_eq!(buffer[3].assume_init(), b'3');",
          "    assert_eq!(buffer[4].assume_init(), b'4');",
          "    assert_eq!(buffer[5].assume_init(), b'5');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 1.0e30;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'1');",
          "    assert_eq!(buffer[1].assume_init(), b'e');",
          "    assert_eq!(buffer[2].assume_init(), b'30');"
        ],
        "code": [
          "{",
          "    let f: f64 = 1.0e30;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'1');",
          "    assert_eq!(buffer[1].assume_init(), b'e');",
          "    assert_eq!(buffer[2].assume_init(), b'30');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]