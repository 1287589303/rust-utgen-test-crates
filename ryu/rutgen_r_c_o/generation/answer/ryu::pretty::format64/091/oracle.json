[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'\\0');",
          "    assert_eq!(len as usize, 3);"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.0;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'\\0');",
          "    assert_eq!(len as usize, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.5;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[..len], *b\"0.0\");",
          "    assert_eq!(buffer[0], b'0');",
          "    assert_eq!(buffer[1], b'.');",
          "    assert_eq!(buffer[2], b'0');",
          "    assert_eq!(buffer[3], 0);",
          "    assert!(buffer[4] == 0 || buffer[4] == b'\\0');",
          "    assert!(buffer[5] == 0 || buffer[5] == b'\\0');",
          "    assert!(buffer[6] == 0 || buffer[6] == b'\\0');",
          "    assert!(buffer[7] == 0 || buffer[7] == b'\\0');",
          "    assert!(buffer[8] == 0 || buffer[8] == b'\\0');",
          "    assert!(buffer[9] == 0 || buffer[9] == b'\\0');",
          "    assert!(buffer[10] == 0 || buffer[10] == b'\\0');",
          "    assert!(buffer[11] == 0 || buffer[11] == b'\\0');",
          "    assert!(buffer[12] == 0 || buffer[12] == b'\\0');",
          "    assert!(buffer[13] == 0 || buffer[13] == b'\\0');",
          "    assert!(buffer[14] == 0 || buffer[14] == b'\\0');",
          "    assert!(buffer[15] == 0 || buffer[15] == b'\\0');",
          "    assert!(buffer[16] == 0 || buffer[16] == b'\\0');",
          "    assert!(buffer[17] == 0 || buffer[17] == b'\\0');",
          "    assert!(buffer[18] == 0 || buffer[18] == b'\\0');",
          "    assert!(buffer[19] == 0 || buffer[19] == b'\\0');",
          "    assert!(buffer[20] == 0 || buffer[20] == b'\\0');",
          "    assert!(buffer[21] == 0 || buffer[21] == b'\\0');",
          "    assert!(buffer[22] == 0 || buffer[22] == b'\\0');",
          "    assert!(buffer[23] == 0 || buffer[23] == b'\\0');"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.5;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[..len], *b\"0.0\");",
          "    assert_eq!(buffer[0], b'0');",
          "    assert_eq!(buffer[1], b'.');",
          "    assert_eq!(buffer[2], b'0');",
          "    assert_eq!(buffer[3], 0);",
          "    assert!(buffer[4] == 0 || buffer[4] == b'\\0');",
          "    assert!(buffer[5] == 0 || buffer[5] == b'\\0');",
          "    assert!(buffer[6] == 0 || buffer[6] == b'\\0');",
          "    assert!(buffer[7] == 0 || buffer[7] == b'\\0');",
          "    assert!(buffer[8] == 0 || buffer[8] == b'\\0');",
          "    assert!(buffer[9] == 0 || buffer[9] == b'\\0');",
          "    assert!(buffer[10] == 0 || buffer[10] == b'\\0');",
          "    assert!(buffer[11] == 0 || buffer[11] == b'\\0');",
          "    assert!(buffer[12] == 0 || buffer[12] == b'\\0');",
          "    assert!(buffer[13] == 0 || buffer[13] == b'\\0');",
          "    assert!(buffer[14] == 0 || buffer[14] == b'\\0');",
          "    assert!(buffer[15] == 0 || buffer[15] == b'\\0');",
          "    assert!(buffer[16] == 0 || buffer[16] == b'\\0');",
          "    assert!(buffer[17] == 0 || buffer[17] == b'\\0');",
          "    assert!(buffer[18] == 0 || buffer[18] == b'\\0');",
          "    assert!(buffer[19] == 0 || buffer[19] == b'\\0');",
          "    assert!(buffer[20] == 0 || buffer[20] == b'\\0');",
          "    assert!(buffer[21] == 0 || buffer[21] == b'\\0');",
          "    assert!(buffer[22] == 0 || buffer[22] == b'\\0');",
          "    assert!(buffer[23] == 0 || buffer[23] == b'\\0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f64 = 0.9999999999999999;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    len == 3 + 0usize + 2",
          "    buffer[0] == b'0'",
          "    buffer[1] == b'.'",
          "    buffer[2] == b'0'",
          "    buffer[3] == b'0'"
        ],
        "code": [
          "{",
          "    let f: f64 = 0.9999999999999999;",
          "    let mut buffer = [MaybeUninit::<u8>::uninit(); 24];",
          "    let len = format64(f, buffer.as_mut_ptr() as *mut u8);",
          "    len == 3 + 0usize + 2",
          "    buffer[0] == b'0'",
          "    buffer[1] == b'.'",
          "    buffer[2] == b'0'",
          "    buffer[3] == b'0'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]