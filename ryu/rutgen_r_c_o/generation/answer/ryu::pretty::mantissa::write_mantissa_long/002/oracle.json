[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(0, result.as_mut_ptr().offset(10)); ",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(0, result.as_mut_ptr().offset(10)); ",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(42, result.as_mut_ptr().offset(10)); ",
          "    }",
          "}"
        ],
        "oracle": [
          "    * assert_eq!(unsafe { &result[8..] }, &[b'4', b'2', 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    * assert_eq!(result[0], 0);",
          "    * assert_eq!(result[1], 0);",
          "    * assert_eq!(result[2], 0);",
          "    * assert_eq!(result[3], 0);",
          "    * assert_eq!(result[4], 0);",
          "    * assert_eq!(result[5], 0);",
          "    * assert_eq!(result[6], 0);",
          "    * assert_eq!(result[7], 0);"
        ],
        "code": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(42, result.as_mut_ptr().offset(10)); ",
          "    }",
          "    * assert_eq!(unsafe { &result[8..] }, &[b'4', b'2', 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    * assert_eq!(result[0], 0);",
          "    * assert_eq!(result[1], 0);",
          "    * assert_eq!(result[2], 0);",
          "    * assert_eq!(result[3], 0);",
          "    * assert_eq!(result[4], 0);",
          "    * assert_eq!(result[5], 0);",
          "    * assert_eq!(result[6], 0);",
          "    * assert_eq!(result[7], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(4_294_967_295, result.as_mut_ptr().offset(10)); ",
          "    }",
          "}"
        ],
        "oracle": [
          "    result[8..10].copy_from_slice(&DIGIT_TABLE[98..100]);",
          "    result[6..8].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[4..6].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[2..4].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[0] = b'0';"
        ],
        "code": [
          "{",
          "    let mut result = [0u8; 10];",
          "    unsafe {",
          "        write_mantissa_long(4_294_967_295, result.as_mut_ptr().offset(10)); ",
          "    }",
          "    result[8..10].copy_from_slice(&DIGIT_TABLE[98..100]);",
          "    result[6..8].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[4..6].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[2..4].copy_from_slice(&DIGIT_TABLE[42..44]);",
          "    result[0] = b'0';",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]