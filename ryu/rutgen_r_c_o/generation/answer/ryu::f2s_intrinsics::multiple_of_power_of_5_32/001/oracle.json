[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 0;",
          "    let p = 0;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    let value = 0;",
          "    let p = 0;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 5;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 10;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 10;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), false);",
          "    ",
          "    let value = 25;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 30;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 100;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 100;",
          "    let p = 3;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), false);"
        ],
        "code": [
          "{",
          "    let value = 0;",
          "    let p = 0;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    let value = 0;",
          "    let p = 0;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 5;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 10;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 10;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), false);",
          "    ",
          "    let value = 25;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 30;",
          "    let p = 1;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 100;",
          "    let p = 2;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
          "    ",
          "    let value = 100;",
          "    let p = 3;",
          "    assert_eq!(multiple_of_power_of_5_32(value, p), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1;",
          "    let p = 0;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(15, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(100, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);"
        ],
        "code": [
          "{",
          "    let value = 1;",
          "    let p = 0;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(15, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(100, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 5;",
          "    let p = 1;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(27, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(30, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(50, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(2, 1), false);"
        ],
        "code": [
          "{",
          "    let value = 5;",
          "    let p = 1;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(27, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(30, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(50, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(2, 1), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 25;",
          "    let p = 2;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(24, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), false);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);"
        ],
        "code": [
          "{",
          "    let value = 25;",
          "    let p = 2;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(24, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), false);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 125;",
          "    let p = 3;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(26, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(3125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3124, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(16, 0), true);"
        ],
        "code": [
          "{",
          "    let value = 125;",
          "    let p = 3;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(26, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(3125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3124, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(16, 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 625;",
          "    let p = 4;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(625, 4), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(100, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3124, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(15625, 6), false);",
          "    assert_eq!(multiple_of_power_of_5_32(78125, 6), true);"
        ],
        "code": [
          "{",
          "    let value = 625;",
          "    let p = 4;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 4), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(100, 2), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3124, 5), false);",
          "    assert_eq!(multiple_of_power_of_5_32(15625, 6), false);",
          "    assert_eq!(multiple_of_power_of_5_32(78125, 6), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 5;",
          "    let p = 5;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(5, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(7, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), true);"
        ],
        "code": [
          "{",
          "    let value = 5;",
          "    let p = 5;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(5, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(3, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(10, 1), true);",
          "    assert_eq!(multiple_of_power_of_5_32(7, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 4), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 625;",
          "    let p = 5;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_5_32(625, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 4), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 6), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(20, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(40, 2), false);"
        ],
        "code": [
          "{",
          "    let value = 625;",
          "    let p = 5;",
          "    let _ = multiple_of_power_of_5_32(value, p);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 4), true);",
          "    assert_eq!(multiple_of_power_of_5_32(625, 6), false);",
          "    assert_eq!(multiple_of_power_of_5_32(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_5_32(0, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 3), true);",
          "    assert_eq!(multiple_of_power_of_5_32(25, 2), true);",
          "    assert_eq!(multiple_of_power_of_5_32(20, 1), false);",
          "    assert_eq!(multiple_of_power_of_5_32(125, 5), true);",
          "    assert_eq!(multiple_of_power_of_5_32(40, 2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]