[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -1e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f32 = -1e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, expected_value);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"expected_result\");"
        ],
        "code": [
          "{",
          "    let f: f32 = -1e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f32 = -1e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, expected_value);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr() as *const u8, len), b\"expected_result\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -1e-6;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert!(len == (2 + write_exponent2(-1 - 1, buffer.as_mut_ptr().add(2) as *mut u8)));",
          "    assert_eq!(buffer[0], b'-');",
          "    assert_eq!(buffer[1], b'0');",
          "    assert_eq!(buffer[2], b'.');",
          "    assert_eq!(buffer[3], b'0');",
          "    assert_eq!(buffer[4], b'0');",
          "    assert_eq!(buffer[5], b'1');",
          "    assert_eq!(buffer[6], b'2');",
          "    assert_eq!(buffer[7], b'3');",
          "    assert_eq!(buffer[8], b'4');",
          "    assert_eq!(buffer[9], b'e');",
          "    assert_eq!(buffer[10], b'-');",
          "    assert_eq!(buffer[11], b'1');  // verifies exponent part",
          "    assert_eq!(buffer[12], b'0');  // verifies exponent part",
          "    assert!(buffer[13] == 0);  // null terminator in unused space",
          "    assert!(buffer[14] == 0);  // null terminator in unused space",
          "    assert!(buffer[15] == 0);  // null terminator in unused space"
        ],
        "code": [
          "{",
          "    let f: f32 = -1e-6;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert!(len == (2 + write_exponent2(-1 - 1, buffer.as_mut_ptr().add(2) as *mut u8)));",
          "    assert_eq!(buffer[0], b'-');",
          "    assert_eq!(buffer[1], b'0');",
          "    assert_eq!(buffer[2], b'.');",
          "    assert_eq!(buffer[3], b'0');",
          "    assert_eq!(buffer[4], b'0');",
          "    assert_eq!(buffer[5], b'1');",
          "    assert_eq!(buffer[6], b'2');",
          "    assert_eq!(buffer[7], b'3');",
          "    assert_eq!(buffer[8], b'4');",
          "    assert_eq!(buffer[9], b'e');",
          "    assert_eq!(buffer[10], b'-');",
          "    assert_eq!(buffer[11], b'1');  // verifies exponent part",
          "    assert_eq!(buffer[12], b'0');  // verifies exponent part",
          "    assert!(buffer[13] == 0);  // null terminator in unused space",
          "    assert!(buffer[14] == 0);  // null terminator in unused space",
          "    assert!(buffer[15] == 0);  // null terminator in unused space",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -5e-20;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(buffer[0], b'-');",
          "    assert_eq!(&buffer[1..3], b\"0.\");",
          "    assert_eq!(buffer[3], b'0');",
          "    assert_eq!(buffer[4], b'0');",
          "    assert_eq!(buffer[5], b'0');",
          "    assert_eq!(buffer[6], b'0');",
          "    assert_eq!(buffer[7], b'0');",
          "    assert_eq!(buffer[8], b'0');",
          "    assert_eq!(buffer[9], b'0');",
          "    assert_eq!(buffer[10], b'0');",
          "    assert_eq!(buffer[11], b'0');",
          "    assert_eq!(buffer[12], b'0');",
          "    assert_eq!(buffer[13], b'0');",
          "    assert_eq!(buffer[14], b'0');",
          "    assert_eq!(buffer[15], b'\\0');"
        ],
        "code": [
          "{",
          "    let f: f32 = -5e-20;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, expected_length);",
          "    assert_eq!(buffer[0], b'-');",
          "    assert_eq!(&buffer[1..3], b\"0.\");",
          "    assert_eq!(buffer[3], b'0');",
          "    assert_eq!(buffer[4], b'0');",
          "    assert_eq!(buffer[5], b'0');",
          "    assert_eq!(buffer[6], b'0');",
          "    assert_eq!(buffer[7], b'0');",
          "    assert_eq!(buffer[8], b'0');",
          "    assert_eq!(buffer[9], b'0');",
          "    assert_eq!(buffer[10], b'0');",
          "    assert_eq!(buffer[11], b'0');",
          "    assert_eq!(buffer[12], b'0');",
          "    assert_eq!(buffer[13], b'0');",
          "    assert_eq!(buffer[14], b'0');",
          "    assert_eq!(buffer[15], b'\\0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]