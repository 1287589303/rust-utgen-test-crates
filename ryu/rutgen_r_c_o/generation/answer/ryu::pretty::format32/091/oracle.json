[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(&buffer[..len], b\"0.0\");"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(&buffer[..len], b\"0.0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 5);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(std::str::from_utf8_unchecked(slice), \"0.0\");"
        ],
        "code": [
          "{",
          "    let f: f32 = -0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 5);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(std::str::from_utf8_unchecked(slice), \"0.0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]