[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 1234.5678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f32 = 1234.5678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"1234.5678\");"
        ],
        "code": [
          "{",
          "    let f: f32 = 1234.5678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f32 = 1234.5678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"1234.5678\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -9876.5432;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    len == 3",
          "    buffer[0] == b'-'",
          "    buffer[1] == b'9'",
          "    buffer[2] == b'8'",
          "    buffer[3] == b'7'",
          "    buffer[4] == b'6'",
          "    buffer[5] == b'.'",
          "    buffer[6] == b'5'",
          "    buffer[7] == b'4'",
          "    buffer[8] == b'3'",
          "    buffer[9] == b'2'",
          "    buffer[10] == b'0'",
          "    buffer[11] == b'0'",
          "    buffer[12] == b'0'",
          "    buffer[13] == b'0'",
          "    buffer[14] == b'0'",
          "    buffer[15] == b'\\0'"
        ],
        "code": [
          "{",
          "    let f: f32 = -9876.5432;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    len == 3",
          "    buffer[0] == b'-'",
          "    buffer[1] == b'9'",
          "    buffer[2] == b'8'",
          "    buffer[3] == b'7'",
          "    buffer[4] == b'6'",
          "    buffer[5] == b'.'",
          "    buffer[6] == b'5'",
          "    buffer[7] == b'4'",
          "    buffer[8] == b'3'",
          "    buffer[9] == b'2'",
          "    buffer[10] == b'0'",
          "    buffer[11] == b'0'",
          "    buffer[12] == b'0'",
          "    buffer[13] == b'0'",
          "    buffer[14] == b'0'",
          "    buffer[15] == b'\\0'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.0001234;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    len == 3",
          "    buffer[0] == b'0'",
          "    buffer[1] == b'.'",
          "    buffer[2] == b'0'",
          "    buffer[3] == b'0'",
          "    buffer[4] == b'0'",
          "    buffer[5] == b'1'",
          "    buffer[6] == b'2'",
          "    buffer[7] == b'3'",
          "    buffer[8] == b'4'",
          "    buffer[9] == b'\\0'",
          "    buffer[10] == b'\\0'",
          "    buffer[11] == b'\\0'",
          "    buffer[12] == b'\\0'",
          "    buffer[13] == b'\\0'",
          "    buffer[14] == b'\\0'",
          "    buffer[15] == b'\\0'"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.0001234;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    len == 3",
          "    buffer[0] == b'0'",
          "    buffer[1] == b'.'",
          "    buffer[2] == b'0'",
          "    buffer[3] == b'0'",
          "    buffer[4] == b'0'",
          "    buffer[5] == b'1'",
          "    buffer[6] == b'2'",
          "    buffer[7] == b'3'",
          "    buffer[8] == b'4'",
          "    buffer[9] == b'\\0'",
          "    buffer[10] == b'\\0'",
          "    buffer[11] == b'\\0'",
          "    buffer[12] == b'\\0'",
          "    buffer[13] == b'\\0'",
          "    buffer[14] == b'\\0'",
          "    buffer[15] == b'\\0'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -0.0005678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'-');",
          "    assert_eq!(buffer[1].assume_init(), b'0');",
          "    assert_eq!(buffer[2].assume_init(), b'.');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'5');",
          "    assert_eq!(buffer[6].assume_init(), b'6');",
          "    assert_eq!(buffer[7].assume_init(), b'7');",
          "    assert_eq!(buffer[8].assume_init(), b'8');"
        ],
        "code": [
          "{",
          "    let f: f32 = -0.0005678;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'-');",
          "    assert_eq!(buffer[1].assume_init(), b'0');",
          "    assert_eq!(buffer[2].assume_init(), b'.');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'5');",
          "    assert_eq!(buffer[6].assume_init(), b'6');",
          "    assert_eq!(buffer[7].assume_init(), b'7');",
          "    assert_eq!(buffer[8].assume_init(), b'8');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 1.234e30;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    ptr::copy_nonoverlapping(b\"0.0\".as_ptr(), result.offset(index), 3);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');"
        ],
        "code": [
          "{",
          "    let f: f32 = 1.234e30;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    ptr::copy_nonoverlapping(b\"0.0\".as_ptr(), result.offset(index), 3);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -9.876e30;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(&buffer[0..len], b\"-0.0\");"
        ],
        "code": [
          "{",
          "    let f: f32 = -9.876e30;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(&buffer[0..len], b\"-0.0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]