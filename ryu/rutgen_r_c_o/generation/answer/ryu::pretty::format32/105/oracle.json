[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert_eq!(slice, b\"0.0\");",
          "    assert_eq!(slice.len(), len);",
          "    assert_eq!(len, 1 + common::decimal_length9(0));",
          "    assert!(len <= 16);",
          "    assert!(slice[0] == b'0');",
          "    assert!(slice[1] == b'.');",
          "    assert!(slice[2] == b'0');"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(slice, b\"0.0\");",
          "    assert_eq!(slice.len(), len);",
          "    assert_eq!(len, 1 + common::decimal_length9(0));",
          "    assert!(len <= 16);",
          "    assert!(slice[0] == b'0');",
          "    assert!(slice[1] == b'.');",
          "    assert!(slice[2] == b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.1;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, expected_value);",
          "    assert_eq!(slice, b\"0.10000000\");",
          "    assert!(len <= 16);",
          "    assert!(len > 0);",
          "    assert!(slice[0] != b'\\0');",
          "    assert!(slice[len - 1] != b'\\0');"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.1;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(len, expected_value);",
          "    assert_eq!(slice, b\"0.10000000\");",
          "    assert!(len <= 16);",
          "    assert!(len > 0);",
          "    assert!(slice[0] != b'\\0');",
          "    assert!(slice[len - 1] != b'\\0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.5;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"0.5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
          "    assert!(slice.len() <= 16);",
          "    assert_eq!(slice[3], 0);",
          "    assert_eq!(slice[2], b'5');",
          "    assert_eq!(slice[1], b'.');",
          "    assert_eq!(slice[0], b'0');",
          "    assert!(len >= 1);",
          "    assert!(len <= 16);",
          "    assert!(slice.len() > 0);",
          "    assert_eq!(slice[0..3], b\"0.5\");"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.5;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"0.5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
          "    assert!(slice.len() <= 16);",
          "    assert_eq!(slice[3], 0);",
          "    assert_eq!(slice[2], b'5');",
          "    assert_eq!(slice[1], b'.');",
          "    assert_eq!(slice[0], b'0');",
          "    assert!(len >= 1);",
          "    assert!(len <= 16);",
          "    assert!(slice.len() > 0);",
          "    assert_eq!(slice[0..3], b\"0.5\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.9;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"0.9\\0\");",
          "    assert_eq!(slice.len(), 4);",
          "    assert!(len <= 16);",
          "    assert!(slice.ends_with(&[0]));",
          "    assert!(slice.iter().all(|&x| x < 128));",
          "    assert!(slice.iter().all(|&x| x.is_ascii()));"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.9;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"0.9\\0\");",
          "    assert_eq!(slice.len(), 4);",
          "    assert!(len <= 16);",
          "    assert!(slice.ends_with(&[0]));",
          "    assert!(slice.iter().all(|&x| x < 128));",
          "    assert!(slice.iter().all(|&x| x.is_ascii()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 1.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"1.0\\0\");",
          "    assert!(slice.len() <= 16);"
        ],
        "code": [
          "{",
          "    let f: f32 = 1.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    assert_eq!(len, 4);",
          "    assert_eq!(slice, b\"1.0\\0\");",
          "    assert!(slice.len() <= 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]