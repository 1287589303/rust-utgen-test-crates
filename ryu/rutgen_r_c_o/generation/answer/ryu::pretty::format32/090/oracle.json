[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) }, b\"0.0\");",
          "    assert!(len <= 16);"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f32 = 0.0;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 3);",
          "    assert_eq!(unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) }, b\"0.0\");",
          "    assert!(len <= 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 1.0e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f: f32 = 1.0e-45;",
          "    assert_eq!(len, 16);",
          "    assert_eq!(buffer[0..len], b\"0.0\\0\"[..]);",
          "    assert_eq!(len, sign as usize + 3);",
          "    assert_eq!(len, index as usize + kk as usize + 2);",
          "    assert!(k >= -45);",
          "    assert!(0 <= k);",
          "    assert!(kk <= 13);",
          "    assert!(i >= length);",
          "    assert!(!(i >= length && i < kk));"
        ],
        "code": [
          "{",
          "    let f: f32 = 1.0e-45;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f: f32 = 1.0e-45;",
          "    assert_eq!(len, 16);",
          "    assert_eq!(buffer[0..len], b\"0.0\\0\"[..]);",
          "    assert_eq!(len, sign as usize + 3);",
          "    assert_eq!(len, index as usize + kk as usize + 2);",
          "    assert!(k >= -45);",
          "    assert!(0 <= k);",
          "    assert!(kk <= 13);",
          "    assert!(i >= length);",
          "    assert!(!(i >= length && i < kk));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 1.0e-44;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 6);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"0.0000\");"
        ],
        "code": [
          "{",
          "    let f: f32 = 1.0e-44;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(len, 6);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"0.0000\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]