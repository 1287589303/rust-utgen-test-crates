[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = 1e-38f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 12);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, length);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"0.00000000000001\");"
        ],
        "code": [
          "{",
          "    let f = 1e-38f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(length, 12);",
          "    let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, length);",
          "    let print = std::str::from_utf8_unchecked(slice);",
          "    assert_eq!(print, \"0.00000000000001\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = 1e-40f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    let f = 1e-40f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(length, expected_length);",
          "    assert_eq!(buffer[..length], expected_output);"
        ],
        "code": [
          "{",
          "    let f = 1e-40f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    let f = 1e-40f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(length, expected_length);",
          "    assert_eq!(buffer[..length], expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = 1e-39f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, expected_length);",
          "    assert_eq!(buffer[..length].as_ptr() as *const u8, b\"0.00000000001\\0\".as_ptr());",
          "    assert!(length <= 16);",
          "    assert!(length > 0);",
          "    assert!(buffer.iter().all(|&x| x.is_uninit() || x != 0));"
        ],
        "code": [
          "{",
          "    let f = 1e-39f32;",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let length = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(length, expected_length);",
          "    assert_eq!(buffer[..length].as_ptr() as *const u8, b\"0.00000000001\\0\".as_ptr());",
          "    assert!(length <= 16);",
          "    assert!(length > 0);",
          "    assert!(buffer.iter().all(|&x| x.is_uninit() || x != 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]