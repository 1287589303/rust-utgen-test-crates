[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -1e-38; // Edge case just above -3.4028235e38",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'0');",
          "    assert_eq!(buffer[6].assume_init(), b'0');",
          "    assert_eq!(buffer[7].assume_init(), b'0');",
          "    assert_eq!(buffer[8].assume_init(), b'0');",
          "    assert_eq!(buffer[9].assume_init(), b'0');",
          "    assert_eq!(buffer[10].assume_init(), b'0');",
          "    assert_eq!(buffer[11].assume_init(), b'0');",
          "    assert_eq!(buffer[12].assume_init(), b'0');",
          "    assert_eq!(buffer[13].assume_init(), b'0');",
          "    assert_eq!(buffer[14].assume_init(), b'0');",
          "    assert_eq!(buffer[15].assume_init(), b'\\0');"
        ],
        "code": [
          "{",
          "    let f: f32 = -1e-38; // Edge case just above -3.4028235e38",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), b'0');",
          "    assert_eq!(buffer[4].assume_init(), b'0');",
          "    assert_eq!(buffer[5].assume_init(), b'0');",
          "    assert_eq!(buffer[6].assume_init(), b'0');",
          "    assert_eq!(buffer[7].assume_init(), b'0');",
          "    assert_eq!(buffer[8].assume_init(), b'0');",
          "    assert_eq!(buffer[9].assume_init(), b'0');",
          "    assert_eq!(buffer[10].assume_init(), b'0');",
          "    assert_eq!(buffer[11].assume_init(), b'0');",
          "    assert_eq!(buffer[12].assume_init(), b'0');",
          "    assert_eq!(buffer[13].assume_init(), b'0');",
          "    assert_eq!(buffer[14].assume_init(), b'0');",
          "    assert_eq!(buffer[15].assume_init(), b'\\0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = 0.0; // Valid input where ieee_exponent == 0",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer[0], b'0');",
          "    assert_eq!(buffer[1], b'.');",
          "    assert_eq!(buffer[2], b'0');",
          "    assert_eq!(_len, 3);"
        ],
        "code": [
          "{",
          "    let f: f32 = 0.0; // Valid input where ieee_exponent == 0",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(buffer[0], b'0');",
          "    assert_eq!(buffer[1], b'.');",
          "    assert_eq!(buffer[2], b'0');",
          "    assert_eq!(_len, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -1e-39; // Valid input that is denormalized",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sign, false);",
          "    assert_eq!(ieee_exponent, 0);",
          "    assert!(k < -45);",
          "    assert_eq!(buffer[..3], [b'0', b'.', b'0']);",
          "    assert_eq!(_len, 3);"
        ],
        "code": [
          "{",
          "    let f: f32 = -1e-39; // Valid input that is denormalized",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(sign, false);",
          "    assert_eq!(ieee_exponent, 0);",
          "    assert!(k < -45);",
          "    assert_eq!(buffer[..3], [b'0', b'.', b'0']);",
          "    assert_eq!(_len, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -1.17549435e-38; // The smallest magnitude float",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), 0);",
          "    assert_eq!(buffer[4].assume_init(), 0);",
          "    assert_eq!(buffer[5].assume_init(), 0);",
          "    assert_eq!(buffer[6].assume_init(), 0);",
          "    assert_eq!(buffer[7].assume_init(), 0);",
          "    assert_eq!(buffer[8].assume_init(), 0);",
          "    assert_eq!(buffer[9].assume_init(), 0);",
          "    assert_eq!(buffer[10].assume_init(), 0);",
          "    assert_eq!(buffer[11].assume_init(), 0);",
          "    assert_eq!(buffer[12].assume_init(), 0);",
          "    assert_eq!(buffer[13].assume_init(), 0);",
          "    assert_eq!(buffer[14].assume_init(), 0);",
          "    assert_eq!(buffer[15].assume_init(), 0);"
        ],
        "code": [
          "{",
          "    let f: f32 = -1.17549435e-38; // The smallest magnitude float",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(_len, 3);",
          "    assert_eq!(buffer[0].assume_init(), b'0');",
          "    assert_eq!(buffer[1].assume_init(), b'.');",
          "    assert_eq!(buffer[2].assume_init(), b'0');",
          "    assert_eq!(buffer[3].assume_init(), 0);",
          "    assert_eq!(buffer[4].assume_init(), 0);",
          "    assert_eq!(buffer[5].assume_init(), 0);",
          "    assert_eq!(buffer[6].assume_init(), 0);",
          "    assert_eq!(buffer[7].assume_init(), 0);",
          "    assert_eq!(buffer[8].assume_init(), 0);",
          "    assert_eq!(buffer[9].assume_init(), 0);",
          "    assert_eq!(buffer[10].assume_init(), 0);",
          "    assert_eq!(buffer[11].assume_init(), 0);",
          "    assert_eq!(buffer[12].assume_init(), 0);",
          "    assert_eq!(buffer[13].assume_init(), 0);",
          "    assert_eq!(buffer[14].assume_init(), 0);",
          "    assert_eq!(buffer[15].assume_init(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f: f32 = -5e-38; // Negative float within valid range",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sign, false);",
          "    assert_eq!(ieee_exponent, 0);",
          "    assert!(k < -45);"
        ],
        "code": [
          "{",
          "    let f: f32 = -5e-38; // Negative float within valid range",
          "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
          "    let _len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);",
          "    assert_eq!(sign, false);",
          "    assert_eq!(ieee_exponent, 0);",
          "    assert!(k < -45);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]