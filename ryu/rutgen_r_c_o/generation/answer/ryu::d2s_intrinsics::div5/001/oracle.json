[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(10), 2);",
          "    assert_eq!(div5(15), 3);",
          "    assert_eq!(div5(20), 4);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(30), 6);",
          "    assert_eq!(div5(100), 20);",
          "    assert_eq!(div5(1000), 200);",
          "    assert_eq!(div5(5000), 1000);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);"
        ],
        "code": [
          "{",
          "    let result = div5(0);",
          "    assert_eq!(result, 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(10), 2);",
          "    assert_eq!(div5(15), 3);",
          "    assert_eq!(div5(20), 4);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(30), 6);",
          "    assert_eq!(div5(100), 20);",
          "    assert_eq!(div5(1000), 200);",
          "    assert_eq!(div5(5000), 1000);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    result = div5(5);",
          "    assert_eq!(result, 1);",
          "    result = div5(10);",
          "    assert_eq!(result, 2);",
          "    result = div5(15);",
          "    assert_eq!(result, 3);",
          "    result = div5(20);",
          "    assert_eq!(result, 4);",
          "    result = div5(25);",
          "    assert_eq!(result, 5);",
          "    result = div5(0);",
          "    assert_eq!(result, 0);",
          "    result = div5(u64::MAX);",
          "    assert_eq!(result, u64::MAX / 5);"
        ],
        "code": [
          "{",
          "    let result = div5(1);",
          "    assert_eq!(result, 0);",
          "    result = div5(5);",
          "    assert_eq!(result, 1);",
          "    result = div5(10);",
          "    assert_eq!(result, 2);",
          "    result = div5(15);",
          "    assert_eq!(result, 3);",
          "    result = div5(20);",
          "    assert_eq!(result, 4);",
          "    result = div5(25);",
          "    assert_eq!(result, 5);",
          "    result = div5(0);",
          "    assert_eq!(result, 0);",
          "    result = div5(u64::MAX);",
          "    assert_eq!(result, u64::MAX / 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    result = div5(5);",
          "    assert_eq!(result, 1);",
          "    result = div5(10);",
          "    assert_eq!(result, 2);",
          "    result = div5(0);",
          "    assert_eq!(result, 0);",
          "    result = div5(20);",
          "    assert_eq!(result, 4);",
          "    result = div5(25);",
          "    assert_eq!(result, 5);",
          "    result = div5(30);",
          "    assert_eq!(result, 6);",
          "    result = div5(100);",
          "    assert_eq!(result, 20);"
        ],
        "code": [
          "{",
          "    let result = div5(4);",
          "    assert_eq!(result, 0);",
          "    result = div5(5);",
          "    assert_eq!(result, 1);",
          "    result = div5(10);",
          "    assert_eq!(result, 2);",
          "    result = div5(0);",
          "    assert_eq!(result, 0);",
          "    result = div5(20);",
          "    assert_eq!(result, 4);",
          "    result = div5(25);",
          "    assert_eq!(result, 5);",
          "    result = div5(30);",
          "    assert_eq!(result, 6);",
          "    result = div5(100);",
          "    assert_eq!(result, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(5);",
          "}"
        ],
        "oracle": [
          "    let result = div5(5); assert_eq!(result, 1);",
          "    let result = div5(10); assert_eq!(result, 2);",
          "    let result = div5(15); assert_eq!(result, 3);",
          "    let result = div5(0); assert_eq!(result, 0);",
          "    let result = div5(25); assert_eq!(result, 5);",
          "    let result = div5(100); assert_eq!(result, 20);",
          "    let result = div5(1); assert_eq!(result, 0);",
          "    let result = div5(2); assert_eq!(result, 0);",
          "    let result = div5(3); assert_eq!(result, 0);",
          "    let result = div5(4); assert_eq!(result, 0);",
          "    let result = div5(50); assert_eq!(result, 10);",
          "    let result = div5(55); assert_eq!(result, 11);",
          "    let result = div5(75); assert_eq!(result, 15);",
          "    let result = div5(99); assert_eq!(result, 19);",
          "    let result = div5(200); assert_eq!(result, 40);",
          "    let result = div5(u64::MAX); assert_eq!(result, u64::MAX / 5);"
        ],
        "code": [
          "{",
          "    let result = div5(5);",
          "    let result = div5(5); assert_eq!(result, 1);",
          "    let result = div5(10); assert_eq!(result, 2);",
          "    let result = div5(15); assert_eq!(result, 3);",
          "    let result = div5(0); assert_eq!(result, 0);",
          "    let result = div5(25); assert_eq!(result, 5);",
          "    let result = div5(100); assert_eq!(result, 20);",
          "    let result = div5(1); assert_eq!(result, 0);",
          "    let result = div5(2); assert_eq!(result, 0);",
          "    let result = div5(3); assert_eq!(result, 0);",
          "    let result = div5(4); assert_eq!(result, 0);",
          "    let result = div5(50); assert_eq!(result, 10);",
          "    let result = div5(55); assert_eq!(result, 11);",
          "    let result = div5(75); assert_eq!(result, 15);",
          "    let result = div5(99); assert_eq!(result, 19);",
          "    let result = div5(200); assert_eq!(result, 40);",
          "    let result = div5(u64::MAX); assert_eq!(result, u64::MAX / 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);",
          "    assert_eq!(div5(0), 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);",
          "    assert_eq!(div5(15), 3);"
        ],
        "code": [
          "{",
          "    let result = div5(10);",
          "    assert_eq!(result, 2);",
          "    assert_eq!(div5(0), 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);",
          "    assert_eq!(div5(15), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = div5(u64::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(div5(0), 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(10), 2);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(50), 10);",
          "    assert_eq!(div5(100), 20);",
          "    assert_eq!(div5(1_000_000), 200_000);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);"
        ],
        "code": [
          "{",
          "    let result = div5(u64::MAX);",
          "    assert_eq!(div5(0), 0);",
          "    assert_eq!(div5(5), 1);",
          "    assert_eq!(div5(10), 2);",
          "    assert_eq!(div5(25), 5);",
          "    assert_eq!(div5(50), 10);",
          "    assert_eq!(div5(100), 20);",
          "    assert_eq!(div5(1_000_000), 200_000);",
          "    assert_eq!(div5(u64::MAX), u64::MAX / 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]