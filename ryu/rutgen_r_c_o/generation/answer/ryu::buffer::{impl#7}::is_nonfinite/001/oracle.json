[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::NAN;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = 1.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = -1.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = 0.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = f64::from_bits(0x7ff8000000000000); // QNaN",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::from_bits(0x7ff0000000000001); // SNaN",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::from_bits(0x7fff000000000000); // Extended NaN",
          "    assert!(value.is_nonfinite() == true);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::NAN;",
          "    value.is_nonfinite();",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = 1.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = -1.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = 0.0;",
          "    assert!(value.is_nonfinite() == false);",
          "    let value: f64 = f64::from_bits(0x7ff8000000000000); // QNaN",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::from_bits(0x7ff0000000000001); // SNaN",
          "    assert!(value.is_nonfinite() == true);",
          "    let value: f64 = f64::from_bits(0x7fff000000000000); // Extended NaN",
          "    assert!(value.is_nonfinite() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::INFINITY;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f64::INFINITY.is_nonfinite(), true);",
          "    assert_eq!(f64::NAN.is_nonfinite(), true);",
          "    assert_eq!(f64::from_bits(0x7fe0000000000000).is_nonfinite(), false);",
          "    assert_eq!(f64::from_bits(0x7ff8000000000000).is_nonfinite(), true);",
          "    assert_eq!(f64::from_bits(0x0000000000000000).is_nonfinite(), false);",
          "    assert_eq!(f64::from_bits(0x8000000000000000).is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::INFINITY;",
          "    value.is_nonfinite();",
          "    assert_eq!(f64::INFINITY.is_nonfinite(), true);",
          "    assert_eq!(f64::NAN.is_nonfinite(), true);",
          "    assert_eq!(f64::from_bits(0x7fe0000000000000).is_nonfinite(), false);",
          "    assert_eq!(f64::from_bits(0x7ff8000000000000).is_nonfinite(), true);",
          "    assert_eq!(f64::from_bits(0x0000000000000000).is_nonfinite(), false);",
          "    assert_eq!(f64::from_bits(0x8000000000000000).is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), true);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 3.14;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = 3.14;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = -2.71;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert!(!value.is_nonfinite());"
        ],
        "code": [
          "{",
          "    let value: f64 = -2.71;",
          "    value.is_nonfinite();",
          "    assert!(!value.is_nonfinite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 0.0;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = -f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 1.0;",
          "    assert_eq!(value.is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = 0.0;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = -f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 1.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = -0.0;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 1.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -1.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = 1.0e308;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -1.0e308;",
          "    assert_eq!(value.is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = -0.0;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 1.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -1.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = 1.0e308;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -1.0e308;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::MAX;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -0.0;",
          "    assert_eq!(value.is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::MAX;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::MIN;",
          "    value.is_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::MAX;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -0.0;",
          "    assert_eq!(value.is_nonfinite(), false);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::MIN;",
          "    value.is_nonfinite();",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::MAX;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = f64::NAN;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    assert_eq!(value.is_nonfinite(), true);",
          "    let value: f64 = 0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "    let value: f64 = -0.0;",
          "    assert_eq!(value.is_nonfinite(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]