[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::NAN;",
          "    let result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NAN);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::NAN;",
          "    let result = value.format_nonfinite();",
          "    assert_eq!(result, NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 0.0 / 0.0; // Alternative way to create NaN",
          "    let result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NAN);"
        ],
        "code": [
          "{",
          "    let value: f64 = 0.0 / 0.0; // Alternative way to create NaN",
          "    let result = value.format_nonfinite();",
          "    assert_eq!(result, NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::from_bits(0x7FF8000000000000); // Quiet NaN",
          "    let result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NAN);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::from_bits(0x7FF8000000000000); // Quiet NaN",
          "    let result = value.format_nonfinite();",
          "    assert_eq!(result, NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = f64::from_bits(0x7FF0000000000000); // Signaling NaN",
          "    let result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NAN);"
        ],
        "code": [
          "{",
          "    let value: f64 = f64::from_bits(0x7FF0000000000000); // Signaling NaN",
          "    let result = value.format_nonfinite();",
          "    assert_eq!(result, NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]