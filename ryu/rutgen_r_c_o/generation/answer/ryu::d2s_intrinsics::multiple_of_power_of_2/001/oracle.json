[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 1;",
          "    let p: u32 = 0;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(4, 2) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == false);",
          "    assert!(multiple_of_power_of_2(7, 2) == false);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(3, 2) == false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 1;",
          "    let p: u32 = 0;",
          "    multiple_of_power_of_2(value, p);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(4, 2) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == false);",
          "    assert!(multiple_of_power_of_2(7, 2) == false);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(3, 2) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 2;",
          "    let p: u32 = 1;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(3, 1), false);",
          "    assert_eq!(multiple_of_power_of_2(5, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(7, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(9, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 2;",
          "    let p: u32 = 1;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(3, 1), false);",
          "    assert_eq!(multiple_of_power_of_2(5, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(7, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(9, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 4;",
          "    let p: u32 = 2;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert!(multiple_of_power_of_2(4, 2) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(6, 2) == false);",
          "    assert!(multiple_of_power_of_2(5, 3) == false);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(15, 4) == false);",
          "    assert!(multiple_of_power_of_2(7, 3) == false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 4;",
          "    let p: u32 = 2;",
          "    multiple_of_power_of_2(value, p);",
          "    assert!(multiple_of_power_of_2(4, 2) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(6, 2) == false);",
          "    assert!(multiple_of_power_of_2(5, 3) == false);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(15, 4) == false);",
          "    assert!(multiple_of_power_of_2(7, 3) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 8;",
          "    let p: u32 = 3;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(63, 6) == false);",
          "    assert!(multiple_of_power_of_2(0b111111, 6) == false);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(3, 1) == false);",
          "    assert!(multiple_of_power_of_2(64, 6) == true);",
          "    assert!(multiple_of_power_of_2(255, 8) == false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 8;",
          "    let p: u32 = 3;",
          "    multiple_of_power_of_2(value, p);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(63, 6) == false);",
          "    assert!(multiple_of_power_of_2(0b111111, 6) == false);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(3, 1) == false);",
          "    assert!(multiple_of_power_of_2(64, 6) == true);",
          "    assert!(multiple_of_power_of_2(255, 8) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 16;",
          "    let p: u32 = 4;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(0, 4), panic!());",
          "    assert_eq!(multiple_of_power_of_2(16, 64), panic!());"
        ],
        "code": [
          "{",
          "    let value: u64 = 16;",
          "    let p: u32 = 4;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(0, 4), panic!());",
          "    assert_eq!(multiple_of_power_of_2(16, 64), panic!());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 32;",
          "    let p: u32 = 5;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(64, 6) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(15, 4) == false);",
          "    assert!(multiple_of_power_of_2(12, 3) == false);",
          "    assert!(multiple_of_power_of_2(5, 2) == false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 32;",
          "    let p: u32 = 5;",
          "    multiple_of_power_of_2(value, p);",
          "    assert!(multiple_of_power_of_2(32, 5) == true);",
          "    assert!(multiple_of_power_of_2(16, 4) == true);",
          "    assert!(multiple_of_power_of_2(8, 3) == true);",
          "    assert!(multiple_of_power_of_2(64, 6) == true);",
          "    assert!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63) == true);",
          "    assert!(multiple_of_power_of_2(1, 0) == true);",
          "    assert!(multiple_of_power_of_2(2, 1) == true);",
          "    assert!(multiple_of_power_of_2(15, 4) == false);",
          "    assert!(multiple_of_power_of_2(12, 3) == false);",
          "    assert!(multiple_of_power_of_2(5, 2) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 64;",
          "    let p: u32 = 6;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(3, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(128, 7), true);",
          "    assert_eq!(multiple_of_power_of_2(255, 8), false);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(10, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(1024, 10), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);"
        ],
        "code": [
          "{",
          "    let value: u64 = 64;",
          "    let p: u32 = 6;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(3, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(128, 7), true);",
          "    assert_eq!(multiple_of_power_of_2(255, 8), false);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(10, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(1024, 10), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 128;",
          "    let p: u32 = 7;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(128, 7), true);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(7, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(256, 8), true);",
          "    assert_eq!(multiple_of_power_of_2(255, 8), false);",
          "    assert_eq!(multiple_of_power_of_2(0b11111111, 8), true);"
        ],
        "code": [
          "{",
          "    let value: u64 = 128;",
          "    let p: u32 = 7;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(128, 7), true);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(15, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(7, 3), false);",
          "    assert_eq!(multiple_of_power_of_2(256, 8), true);",
          "    assert_eq!(multiple_of_power_of_2(255, 8), false);",
          "    assert_eq!(multiple_of_power_of_2(0b11111111, 8), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 3;",
          "    let p: u32 = 2;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1111, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(18, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(0b1100, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(7, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);"
        ],
        "code": [
          "{",
          "    let value: u64 = 3;",
          "    let p: u32 = 2;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(4, 2), true);",
          "    assert_eq!(multiple_of_power_of_2(8, 3), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1111, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(16, 4), true);",
          "    assert_eq!(multiple_of_power_of_2(32, 5), true);",
          "    assert_eq!(multiple_of_power_of_2(18, 4), false);",
          "    assert_eq!(multiple_of_power_of_2(0b1100, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(7, 2), false);",
          "    assert_eq!(multiple_of_power_of_2(64, 6), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF;",
          "    let p: u32 = 63;",
          "    multiple_of_power_of_2(value, p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 62), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 61), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 0), false);",
          "    assert_eq!(multiple_of_power_of_2(0b1111111111111111111111111111111111111111111111111111111111111111, 63), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1000000000000000000000000000000000000000000000000000000000000000, 63), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1000000000000000000000000000000000000000000000000000000000000001, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(0x1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(0x2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(0x4, 2), true);"
        ],
        "code": [
          "{",
          "    let value: u64 = 0xFFFFFFFFFFFFFFFF;",
          "    let p: u32 = 63;",
          "    multiple_of_power_of_2(value, p);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 62), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 61), false);",
          "    assert_eq!(multiple_of_power_of_2(0xFFFFFFFFFFFFFFFF, 0), false);",
          "    assert_eq!(multiple_of_power_of_2(0b1111111111111111111111111111111111111111111111111111111111111111, 63), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1000000000000000000000000000000000000000000000000000000000000000, 63), true);",
          "    assert_eq!(multiple_of_power_of_2(0b1000000000000000000000000000000000000000000000000000000000000001, 63), false);",
          "    assert_eq!(multiple_of_power_of_2(0x1, 0), true);",
          "    assert_eq!(multiple_of_power_of_2(0x2, 1), true);",
          "    assert_eq!(multiple_of_power_of_2(0x4, 2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]