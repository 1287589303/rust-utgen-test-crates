[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 0; ",
          "    let q: u32 = 0; ",
          "    let j: i32 = 33; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_pow5_inv_div_pow2(0, 0, 33), expected_value_1);",
          "    assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);",
          "    assert!(j > 32);"
        ],
        "code": [
          "{",
          "    let m: u32 = 0; ",
          "    let q: u32 = 0; ",
          "    let j: i32 = 33; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "    assert_eq!(mul_pow5_inv_div_pow2(0, 0, 33), expected_value_1);",
          "    assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);",
          "    assert!(j > 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 1; ",
          "    let q: u32 = 1; ",
          "    let j: i32 = 34; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "}"
        ],
        "oracle": [
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 34) == expected_value_1);",
          "    assert!(mul_pow5_inv_div_pow2(1, 2, 34) == expected_value_2);",
          "    assert!(mul_pow5_inv_div_pow2(1, 0, 34) == expected_value_3);",
          "    assert!(mul_pow5_inv_div_pow2(u32::max_value(), 1, 34) == expected_value_4);",
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 33) == expected_value_5);",
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 35) == expected_value_6);"
        ],
        "code": [
          "{",
          "    let m: u32 = 1; ",
          "    let q: u32 = 1; ",
          "    let j: i32 = 34; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 34) == expected_value_1);",
          "    assert!(mul_pow5_inv_div_pow2(1, 2, 34) == expected_value_2);",
          "    assert!(mul_pow5_inv_div_pow2(1, 0, 34) == expected_value_3);",
          "    assert!(mul_pow5_inv_div_pow2(u32::max_value(), 1, 34) == expected_value_4);",
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 33) == expected_value_5);",
          "    assert!(mul_pow5_inv_div_pow2(1, 1, 35) == expected_value_6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 4294967295; ",
          "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1; ",
          "    let j: i32 = 35; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_pow5_inv_div_pow2(4294967295, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1, 35), expected_value);"
        ],
        "code": [
          "{",
          "    let m: u32 = 4294967295; ",
          "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1; ",
          "    let j: i32 = 35; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "    assert_eq!(mul_pow5_inv_div_pow2(4294967295, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1, 35), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 2147483648; ",
          "    let q: u32 = 100; ",
          "    let j: i32 = 40; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_pow5_inv_div_pow2(2147483648, 100, 40), expected_value);"
        ],
        "code": [
          "{",
          "    let m: u32 = 2147483648; ",
          "    let q: u32 = 100; ",
          "    let j: i32 = 40; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "    assert_eq!(mul_pow5_inv_div_pow2(2147483648, 100, 40), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let m: u32 = 100; ",
          "    let q: u32 = 2; ",
          "    let j: i32 = 50; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mul_pow5_inv_div_pow2(100, 2, 50), expected_value);"
        ],
        "code": [
          "{",
          "    let m: u32 = 100; ",
          "    let q: u32 = 2; ",
          "    let j: i32 = 50; ",
          "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
          "    assert_eq!(mul_pow5_inv_div_pow2(100, 2, 50), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]