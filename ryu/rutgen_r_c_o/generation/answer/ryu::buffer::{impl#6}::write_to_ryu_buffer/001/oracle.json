[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    result == 3 && buffer[0] == b'-' && buffer[1] == b'i' && buffer[2] == b'n' && buffer[3] == b'f' && buffer[4] == b'i' && buffer[5] == b'n' && buffer[6] == b'i' && buffer[7] == b't' && buffer[8] == b'y'"
        ],
        "code": [
          "{",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    result == 3 && buffer[0] == b'-' && buffer[1] == b'i' && buffer[2] == b'n' && buffer[3] == b'f' && buffer[4] == b'i' && buffer[5] == b'n' && buffer[6] == b'i' && buffer[7] == b't' && buffer[8] == b'y'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = -1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let expected_output_for_negative_one = \"-1.0\";",
          "    let expected_length_for_negative_one = expected_output_for_negative_one.len();",
          "    let actual_length_for_negative_one = result;",
          "    assert_eq!(actual_length_for_negative_one, expected_length_for_negative_one);",
          "    assert_eq!(str::from_utf8(&buffer[..actual_length_for_negative_one]).unwrap(), expected_output_for_negative_one);"
        ],
        "code": [
          "{",
          "    let value: f32 = -1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let expected_output_for_negative_one = \"-1.0\";",
          "    let expected_length_for_negative_one = expected_output_for_negative_one.len();",
          "    let actual_length_for_negative_one = result;",
          "    assert_eq!(actual_length_for_negative_one, expected_length_for_negative_one);",
          "    assert_eq!(str::from_utf8(&buffer[..actual_length_for_negative_one]).unwrap(), expected_output_for_negative_one);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 0.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    result == 4",
          "    buffer[0..4] == [b'0', b'.', b'0', b'0']"
        ],
        "code": [
          "{",
          "    let value: f32 = 0.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    result == 4",
          "    buffer[0..4] == [b'0', b'.', b'0', b'0']",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let value: f32 = 1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_output: &[u8] = b\"1.0\";",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_output.len());",
          "    assert_eq!(&buffer[..result], expected_output);"
        ],
        "code": [
          "{",
          "    let value: f32 = 1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let value: f32 = 1.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_output: &[u8] = b\"1.0\";",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_output.len());",
          "    assert_eq!(&buffer[..result], expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = f32::INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let expected_result_infinity = 8; // Length for \"inf\"",
          "    let expected_buffer_infinity = b\"inf\\0\"; // Buffer should contain \"inf\" followed by null terminator",
          "    assert_eq!(result, expected_result_infinity);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_infinity), expected_buffer_infinity);",
          "    ",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let expected_result_neg_infinity = 9; // Length for \"-inf\"",
          "    let expected_buffer_neg_infinity = b\"-inf\\0\"; // Buffer should contain \"-inf\" followed by null terminator",
          "    let result_neg_infinity = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_neg_infinity, expected_result_neg_infinity);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_neg_infinity), expected_buffer_neg_infinity);",
          "    ",
          "    let value: f32 = f32::NAN;",
          "    let expected_result_nan = 4; // Length for \"NaN\"",
          "    let expected_buffer_nan = b\"NaN\\0\"; // Buffer should contain \"NaN\" followed by null terminator",
          "    let result_nan = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_nan, expected_result_nan);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_nan), expected_buffer_nan);",
          "    ",
          "    let value: f32 = 0.0;",
          "    let expected_result_zero = 4; // Length for \"0.0\"",
          "    let expected_buffer_zero = b\"0.0\\0\"; // Buffer should contain \"0.0\" followed by null terminator",
          "    let result_zero = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_zero, expected_result_zero);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_zero), expected_buffer_zero);",
          "    ",
          "    let value: f32 = -0.0;",
          "    let expected_result_neg_zero = 4; // Length for \"-0.0\"",
          "    let expected_buffer_neg_zero = b\"-0.0\\0\"; // Buffer should contain \"-0.0\" followed by null terminator",
          "    let result_neg_zero = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_neg_zero, expected_result_neg_zero);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_neg_zero), expected_buffer_neg_zero);",
          "    ",
          "    let value: f32 = 1.5;",
          "    let expected_result_one_point_five = 4; // Length for \"1.5\"",
          "    let expected_buffer_one_point_five = b\"1.5\\0\"; // Buffer should contain \"1.5\" followed by null terminator",
          "    let result_one_point_five = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_one_point_five, expected_result_one_point_five);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_one_point_five), expected_buffer_one_point_five);"
        ],
        "code": [
          "{",
          "    let value: f32 = f32::INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let expected_result_infinity = 8; // Length for \"inf\"",
          "    let expected_buffer_infinity = b\"inf\\0\"; // Buffer should contain \"inf\" followed by null terminator",
          "    assert_eq!(result, expected_result_infinity);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_infinity), expected_buffer_infinity);",
          "    ",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let expected_result_neg_infinity = 9; // Length for \"-inf\"",
          "    let expected_buffer_neg_infinity = b\"-inf\\0\"; // Buffer should contain \"-inf\" followed by null terminator",
          "    let result_neg_infinity = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_neg_infinity, expected_result_neg_infinity);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_neg_infinity), expected_buffer_neg_infinity);",
          "    ",
          "    let value: f32 = f32::NAN;",
          "    let expected_result_nan = 4; // Length for \"NaN\"",
          "    let expected_buffer_nan = b\"NaN\\0\"; // Buffer should contain \"NaN\" followed by null terminator",
          "    let result_nan = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_nan, expected_result_nan);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_nan), expected_buffer_nan);",
          "    ",
          "    let value: f32 = 0.0;",
          "    let expected_result_zero = 4; // Length for \"0.0\"",
          "    let expected_buffer_zero = b\"0.0\\0\"; // Buffer should contain \"0.0\" followed by null terminator",
          "    let result_zero = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_zero, expected_result_zero);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_zero), expected_buffer_zero);",
          "    ",
          "    let value: f32 = -0.0;",
          "    let expected_result_neg_zero = 4; // Length for \"-0.0\"",
          "    let expected_buffer_neg_zero = b\"-0.0\\0\"; // Buffer should contain \"-0.0\" followed by null terminator",
          "    let result_neg_zero = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_neg_zero, expected_result_neg_zero);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_neg_zero), expected_buffer_neg_zero);",
          "    ",
          "    let value: f32 = 1.5;",
          "    let expected_result_one_point_five = 4; // Length for \"1.5\"",
          "    let expected_buffer_one_point_five = b\"1.5\\0\"; // Buffer should contain \"1.5\" followed by null terminator",
          "    let result_one_point_five = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result_one_point_five, expected_result_one_point_five);",
          "    assert_eq!(slice::from_raw_parts(buffer.as_ptr(), expected_result_one_point_five), expected_buffer_one_point_five);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = f32::NAN;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3);",
          "    assert_eq!(buffer[0], b'N');",
          "    assert_eq!(buffer[1], b'a');",
          "    assert_eq!(buffer[2], b'N');"
        ],
        "code": [
          "{",
          "    let value: f32 = f32::NAN;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, 3);",
          "    assert_eq!(buffer[0], b'N');",
          "    assert_eq!(buffer[1], b'a');",
          "    assert_eq!(buffer[2], b'N');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 1.0e-40; // Example of a subnormal value",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let value: f32 = 1.0e-40;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_length);",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"0.0000000000000000000000000000000000000000000000000000000000000000\");"
        ],
        "code": [
          "{",
          "    let value: f32 = 1.0e-40; // Example of a subnormal value",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let value: f32 = 1.0e-40;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_length);",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"0.0000000000000000000000000000000000000000000000000000000000000000\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let value: f32 = 123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_length);",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"123.456\");"
        ],
        "code": [
          "{",
          "    let value: f32 = 123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let value: f32 = 123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_length);",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), \"123.456\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = -123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let expected_length: usize = 14; // Size of the output string representation for -123.456 in buffer",
          "    let expected_result: &[u8] = b\"-123.456\\0\"; // Expected string representation for -123.456 including null terminator",
          "    assert_eq!(result, expected_length); // Validate that the length returned matches the expected length",
          "    assert_eq!(&buffer[..expected_length], expected_result); // Validate that the buffer contains the expected string representation"
        ],
        "code": [
          "{",
          "    let value: f32 = -123.456;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let expected_length: usize = 14; // Size of the output string representation for -123.456 in buffer",
          "    let expected_result: &[u8] = b\"-123.456\\0\"; // Expected string representation for -123.456 including null terminator",
          "    assert_eq!(result, expected_length); // Validate that the length returned matches the expected length",
          "    assert_eq!(&buffer[..expected_length], expected_result); // Validate that the buffer contains the expected string representation",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 3.4e38; // Near the upper limit of f32",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, expected_length); // Verify the returned length matches the expectation",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), expected_string); // Validate the output string representation matches the expected format",
          "    buffer.iter().take(result).for_each(|&b| assert!(b != 0)); // Ensure the buffer is not zeroed out",
          "    assert!(buffer[0] != 0); // Check the first byte is not zero, confirming some data was written",
          "    assert!(result <= 64); // Confirm that the written length does not exceed buffer size"
        ],
        "code": [
          "{",
          "    let value: f32 = 3.4e38; // Near the upper limit of f32",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(result, expected_length); // Verify the returned length matches the expectation",
          "    assert_eq!(str::from_utf8(&buffer[..result]).unwrap(), expected_string); // Validate the output string representation matches the expected format",
          "    buffer.iter().take(result).for_each(|&b| assert!(b != 0)); // Ensure the buffer is not zeroed out",
          "    assert!(buffer[0] != 0); // Check the first byte is not zero, confirming some data was written",
          "    assert!(result <= 64); // Confirm that the written length does not exceed buffer size",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f32 = 1.4e-45; // Near the lower limit of f32",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "}"
        ],
        "oracle": [
          "    let value: f32 = 1.4e-45;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"0.0\"[..]);",
          "    ",
          "    let value: f32 = 0.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"0.0\"[..]);",
          "    ",
          "    let value: f32 = f32::INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"inf\"[..]);",
          "    ",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"-inf\"[..]);",
          "    ",
          "    let value: f32 = f32::NAN;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"NaN\"[..]);"
        ],
        "code": [
          "{",
          "    let value: f32 = 1.4e-45; // Near the lower limit of f32",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let result = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    let value: f32 = 1.4e-45;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"0.0\"[..]);",
          "    ",
          "    let value: f32 = 0.0;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"0.0\"[..]);",
          "    ",
          "    let value: f32 = f32::INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"inf\"[..]);",
          "    ",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"-inf\"[..]);",
          "    ",
          "    let value: f32 = f32::NAN;",
          "    let mut buffer: [u8; 64] = [0; 64];",
          "    let expected_length = unsafe { value.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
          "    assert_eq!(expected_length, expected_length);",
          "    assert_eq!(buffer[..expected_length], b\"NaN\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]