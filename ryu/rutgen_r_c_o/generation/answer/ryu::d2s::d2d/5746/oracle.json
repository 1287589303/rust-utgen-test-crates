[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent); // Check if the exponent matches the expected value",
          "    assert_eq!(result.mantissa, expected_mantissa); // Check if the mantissa matches the expected value",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not zero",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Ensure the exponent is within valid range",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa is within bounds",
          "    assert_eq!(result.mantissa % 10, 0); // Verify last digit of mantissa for specific cases",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2); // Check upper bound on exponent"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Check if the exponent matches the expected value",
          "    assert_eq!(result.mantissa, expected_mantissa); // Check if the mantissa matches the expected value",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not zero",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Ensure the exponent is within valid range",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa is within bounds",
          "    assert_eq!(result.mantissa % 10, 0); // Verify last digit of mantissa for specific cases",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2); // Check upper bound on exponent",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let expected_exponent: i32 = // expected value based on conditions;",
          "    let expected_mantissa: u64 = // expected value based on conditions;",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let expected_exponent: i32 = // expected value based on conditions;",
          "    let expected_mantissa: u64 = // expected value based on conditions;",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 2; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let result = d2d(2, 0); // Call the function with ieee_mantissa = 2 and ieee_exponent = 0",
          "    assert_eq!(result.exponent, expected_exponent); // Check if expected exponent matches",
          "    assert_eq!(result.mantissa, expected_mantissa); // Check if expected mantissa matches",
          "    assert!(result.mantissa != 0); // Ensure mantissa is non-zero",
          "    assert!(result.exponent <= 0); // Validate exponent is less than or equal to 0",
          "    assert!(result.mantissa % 10 == 0); // Check if mantissa is divisible by 10",
          "    assert!(result.mantissa % 5 != 0); // Ensure mantissa is not divisible by 5",
          "    assert!(result.mantissa % 2 == 0); // Check if mantissa is even"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 2; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let result = d2d(2, 0); // Call the function with ieee_mantissa = 2 and ieee_exponent = 0",
          "    assert_eq!(result.exponent, expected_exponent); // Check if expected exponent matches",
          "    assert_eq!(result.mantissa, expected_mantissa); // Check if expected mantissa matches",
          "    assert!(result.mantissa != 0); // Ensure mantissa is non-zero",
          "    assert!(result.exponent <= 0); // Validate exponent is less than or equal to 0",
          "    assert!(result.mantissa % 10 == 0); // Check if mantissa is divisible by 10",
          "    assert!(result.mantissa % 5 != 0); // Ensure mantissa is not divisible by 5",
          "    assert!(result.mantissa % 2 == 0); // Check if mantissa is even",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 2^52 - 1; // max value within limit",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, // expected exponent value based on given conditions);",
          "    assert_eq!(result.mantissa, // expected mantissa value based on given conditions);",
          "    assert!(result.exponent > 0); // ensure exponent is positive under the preconditions",
          "    assert!(result.mantissa != 0); // ensure mantissa is non-zero"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 2^52 - 1; // max value within limit",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, // expected exponent value based on given conditions);",
          "    assert_eq!(result.mantissa, // expected mantissa value based on given conditions);",
          "    assert!(result.exponent > 0); // ensure exponent is positive under the preconditions",
          "    assert!(result.mantissa != 0); // ensure mantissa is non-zero",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]