[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 0);",
          "    assert!(result.mantissa & (1u64 << DOUBLE_MANTISSA_BITS) == 0);",
          "    assert!(result.exponent >= -DOUBLE_BIAS);",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS + DOUBLE_BIAS);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS) - 1);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 0);",
          "    assert!(result.mantissa & (1u64 << DOUBLE_MANTISSA_BITS) == 0);",
          "    assert!(result.exponent >= -DOUBLE_BIAS);",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS + DOUBLE_BIAS);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS) - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1023);",
          "    assert_eq!(result.mantissa, 2);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, -1071);",
          "    assert_eq!(result.mantissa, 1);",
          "    let ieee_mantissa: u64 = 2;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1023);",
          "    assert_eq!(result.mantissa, 4);",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 0);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2048;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1021);",
          "    assert_eq!(result.mantissa, 2);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2046;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1022);",
          "    assert_eq!(result.mantissa, 2);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1023);",
          "    assert_eq!(result.mantissa, 2);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, -1071);",
          "    assert_eq!(result.mantissa, 1);",
          "    let ieee_mantissa: u64 = 2;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1023);",
          "    assert_eq!(result.mantissa, 4);",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 0);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2048;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1021);",
          "    assert_eq!(result.mantissa, 2);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 2046;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1022);",
          "    assert_eq!(result.mantissa, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2046; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, -1021); // Expected exponent calculation when ieee_exponent == 2046 and ieee_mantissa == 0",
          "    assert_eq!(result.mantissa, 0); // Expected mantissa value when ieee_mantissa is 0",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa respects bit count constraint",
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // Validate exponent boundary condition",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS as i32 - 1); // Validate maximum exponent limit",
          "    assert!(result.mantissa & 1 == 0); // Even mantissa condition based on line 104"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2046; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, -1021); // Expected exponent calculation when ieee_exponent == 2046 and ieee_mantissa == 0",
          "    assert_eq!(result.mantissa, 0); // Expected mantissa value when ieee_mantissa is 0",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa respects bit count constraint",
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // Validate exponent boundary condition",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS as i32 - 1); // Validate maximum exponent limit",
          "    assert!(result.mantissa & 1 == 0); // Even mantissa condition based on line 104",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2048; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2);",
          "    assert_eq!(result.mantissa, ieee_mantissa);",
          "    assert!(result.exponent < 0);",
          "    assert!(result.mantissa < 1 << DOUBLE_MANTISSA_BITS);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2048; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2);",
          "    assert_eq!(result.mantissa, ieee_mantissa);",
          "    assert!(result.exponent < 0);",
          "    assert!(result.mantissa < 1 << DOUBLE_MANTISSA_BITS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0;",
          "    let ieee_exponent: u32 = 2047; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]