[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000001;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent >= 0);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000001;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000010;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 0x0000000000000010;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exp value */);",
          "    assert_eq!(result.mantissa, /* expected output value */);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000010;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 0x0000000000000010;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exp value */);",
          "    assert_eq!(result.mantissa, /* expected output value */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000100;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert_eq!(result.mantissa, 0x0000000000000004);  // Expected mantissa for the specific inputs",
          "    assert_eq!(result.exponent, -1075); // Expected exponent for the specific inputs",
          "    assert!(result.mantissa % 10 == 0); // Ensure mantissa is a multiple of 10",
          "    assert!(result.mantissa > 0); // Ensure mantissa is positive",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Ensure exponent is within valid range"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000000100;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert_eq!(result.mantissa, 0x0000000000000004);  // Expected mantissa for the specific inputs",
          "    assert_eq!(result.exponent, -1075); // Expected exponent for the specific inputs",
          "    assert!(result.mantissa % 10 == 0); // Ensure mantissa is a multiple of 10",
          "    assert!(result.mantissa > 0); // Ensure mantissa is positive",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Ensure exponent is within valid range",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000001000;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 4096);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa % 5 == 0);",
          "    assert!(result.mantissa % 2 == 0);",
          "    assert!(result.mantissa < 1u64 << (DOUBLE_MANTISSA_BITS + 1));",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent < 1 << DOUBLE_EXPONENT_BITS);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000001000;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, 4096);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa % 5 == 0);",
          "    assert!(result.mantissa % 2 == 0);",
          "    assert!(result.mantissa < 1u64 << (DOUBLE_MANTISSA_BITS + 1));",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent < 1 << DOUBLE_EXPONENT_BITS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000010000;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, expected_mantissa); // Replace `expected_mantissa` with the actual expected value based on inputs",
          "    assert!(result.mantissa > 0);  // Validate non-zero mantissa",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Validate exponent is within expected range",
          "    assert!(result.mantissa & 1 == 0); // Validate mantissa is even",
          "    assert!(result.mantissa % 5 == 0); // Validate mantissa is multiple of 5",
          "    assert!(result.mantissa % 10 == 0); // Validate mantissa is multiple of 10",
          "    assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32); // Ensure q is within bounds",
          "    assert!(result.exponent + DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2 == 0); // Check exponent computation",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa is within the valid range",
          "    assert!(result.exponent <= 21); // Check exponent does not exceed expected bounds",
          "    assert!(result.mantissa > 0); // Ensure mantissa is valid and greater than zero"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0x0000000000010000;",
          "    let ieee_exponent: u32 = 0;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 0);",
          "    assert_eq!(result.mantissa, expected_mantissa); // Replace `expected_mantissa` with the actual expected value based on inputs",
          "    assert!(result.mantissa > 0);  // Validate non-zero mantissa",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Validate exponent is within expected range",
          "    assert!(result.mantissa & 1 == 0); // Validate mantissa is even",
          "    assert!(result.mantissa % 5 == 0); // Validate mantissa is multiple of 5",
          "    assert!(result.mantissa % 10 == 0); // Validate mantissa is multiple of 10",
          "    assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32); // Ensure q is within bounds",
          "    assert!(result.exponent + DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2 == 0); // Check exponent computation",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Ensure mantissa is within the valid range",
          "    assert!(result.exponent <= 21); // Check exponent does not exceed expected bounds",
          "    assert!(result.mantissa > 0); // Ensure mantissa is valid and greater than zero",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]