[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value */);",
          "    ",
          "    let ieee_mantissa: u64 = 0; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value when mantissa is 0 */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value when mantissa is 0 */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 1024; // ensuring e2 >= 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value when e2 >= 0 */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value when e2 >= 0 */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2048; // ensuring precondition i < DOUBLE_POW5_SPLIT.len() as i32 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 1023; // ensuring q <= 1 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2080; // ensuring q < 63 is false, with bound q == 63",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2048; // ensuring vp_div100 > vm_div100 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ensuring vp_div10 <= vm_div10 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2049; // ensuring vr == vm is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value */);",
          "    ",
          "    let ieee_mantissa: u64 = 0; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value when mantissa is 0 */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value when mantissa is 0 */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 1024; // ensuring e2 >= 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value when e2 >= 0 */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value when e2 >= 0 */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2048; // ensuring precondition i < DOUBLE_POW5_SPLIT.len() as i32 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 1023; // ensuring q <= 1 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2080; // ensuring q < 63 is false, with bound q == 63",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2048; // ensuring vp_div100 > vm_div100 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ensuring vp_div10 <= vm_div10 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "    ",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 2049; // ensuring vr == vm is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected value based on computation */);",
          "    assert_eq!(result.mantissa, /* expected value based on computation */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa is non-zero",
          "    let ieee_exponent: u32 = 0; // ieee_exponent is zero",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // checking the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // checking the expected mantissa",
          "    assert!(result.mantissa > 0); // mantissa should be greater than 0",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS); // exponent should be within valid bounds",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // exponent should not underflow",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS)); // mantissa should not exceed normalized range",
          "    assert!(result.mantissa & 1 == 0); // mantissa should be even where applicable",
          "    assert!(result.exponent < 0 || result.mantissa > 0); // if exponent is negative, mantissa must be positive"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa is non-zero",
          "    let ieee_exponent: u32 = 0; // ieee_exponent is zero",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // checking the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // checking the expected mantissa",
          "    assert!(result.mantissa > 0); // mantissa should be greater than 0",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS); // exponent should be within valid bounds",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // exponent should not underflow",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS)); // mantissa should not exceed normalized range",
          "    assert!(result.mantissa & 1 == 0); // mantissa should be even where applicable",
          "    assert!(result.exponent < 0 || result.mantissa > 0); // if exponent is negative, mantissa must be positive",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 4; // choose within valid range",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, /* expected exponent value */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value */);",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not zero",
          "    assert!(result.exponent >= 0); // Adjust based on e2 condition",
          "    assert!(expected_conditions_based_on_path_compatibility); // Assert conditions based on path conditions",
          "    assert!(/* additional assertions based on specific expected outputs */);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 4; // choose within valid range",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, /* expected exponent value */);",
          "    assert_eq!(result.mantissa, /* expected mantissa value */);",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not zero",
          "    assert!(result.exponent >= 0); // Adjust based on e2 condition",
          "    assert!(expected_conditions_based_on_path_compatibility); // Assert conditions based on path conditions",
          "    assert!(/* additional assertions based on specific expected outputs */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 2u64.pow(52) - 1; // maximum valid mantissa",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);",
          "    assert!(q > 1);",
          "    assert!(!vm_is_trailing_zeros);",
          "    assert!(!vr_is_trailing_zeros);",
          "    assert!(vp_div100 <= vm_div100);",
          "    assert!(vp_div10 > vm_div10);",
          "    assert!(result.mantissa != result.exponent);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 2u64.pow(52) - 1; // maximum valid mantissa",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);",
          "    assert!(q > 1);",
          "    assert!(!vm_is_trailing_zeros);",
          "    assert!(!vr_is_trailing_zeros);",
          "    assert!(vp_div100 <= vm_div100);",
          "    assert!(vp_div10 > vm_div10);",
          "    assert!(result.mantissa != result.exponent);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 3; // odd to ensure no trailing zeros",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 3; // odd to ensure no trailing zeros",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent); // precondition: ieee_exponent == 0 is true",
          "    assert!(result.exponent > 0); // precondition: e2 >= 0 is false",
          "    assert_eq!(result.mantissa, 0); // expected return value/type: mantissa should not be 0",
          "    assert!(result.exponent < 63); // expected return value/type: exponent should not be equal to or exceed 63",
          "    assert!(!result.is_trailing_zeros()); // precondition: vm_is_trailing_zeros is false",
          "    assert!(!result.is_round_trailing_zeros()); // precondition: vr_is_trailing_zeros is false",
          "    let vp_div100: u64 = div100(result.mantissa);",
          "    let vm_div100: u64 = div100(result.mantissa);",
          "    assert_eq!(vp_div100, vm_div100); // precondition: vp_div100 == vm_div100",
          "    let vp_div10: u64 = div10(result.mantissa);",
          "    let vm_div10: u64 = div10(result.mantissa);",
          "    assert!(vp_div10 <= vm_div10); // precondition: vp_div10 <= vm_div10 is true",
          "    assert_ne!(result.mantissa, result.mantissa); // precondition: vr == vm is false",
          "    assert!(result.exponent < 0); // precondition: exp should be less than 0"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 3; // odd to ensure no trailing zeros",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 3; // odd to ensure no trailing zeros",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent); // precondition: ieee_exponent == 0 is true",
          "    assert!(result.exponent > 0); // precondition: e2 >= 0 is false",
          "    assert_eq!(result.mantissa, 0); // expected return value/type: mantissa should not be 0",
          "    assert!(result.exponent < 63); // expected return value/type: exponent should not be equal to or exceed 63",
          "    assert!(!result.is_trailing_zeros()); // precondition: vm_is_trailing_zeros is false",
          "    assert!(!result.is_round_trailing_zeros()); // precondition: vr_is_trailing_zeros is false",
          "    let vp_div100: u64 = div100(result.mantissa);",
          "    let vm_div100: u64 = div100(result.mantissa);",
          "    assert_eq!(vp_div100, vm_div100); // precondition: vp_div100 == vm_div100",
          "    let vp_div10: u64 = div10(result.mantissa);",
          "    let vm_div10: u64 = div10(result.mantissa);",
          "    assert!(vp_div10 <= vm_div10); // precondition: vp_div10 <= vm_div10 is true",
          "    assert_ne!(result.mantissa, result.mantissa); // precondition: vr == vm is false",
          "    assert!(result.exponent < 0); // precondition: exp should be less than 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 100; // to create the condition that vp_div100 == vm_div100",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 100; // precondition: ieee_mantissa != 0 is false",
          "    let ieee_exponent: u32 = 0; // precondition: ieee_exponent == 0 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent.is_some()); // check if the exponent is appropriately set",
          "    assert!(result.mantissa.is_some()); // check if the mantissa is appropriately set",
          "    assert_eq!(result.exponent, 0); // assuming expected exponent based on test case context",
          "    assert_eq!(result.mantissa, 0); // assuming expected mantissa based on test case context"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 100; // to create the condition that vp_div100 == vm_div100",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 100; // precondition: ieee_mantissa != 0 is false",
          "    let ieee_exponent: u32 = 0; // precondition: ieee_exponent == 0 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent.is_some()); // check if the exponent is appropriately set",
          "    assert!(result.mantissa.is_some()); // check if the mantissa is appropriately set",
          "    assert_eq!(result.exponent, 0); // assuming expected exponent based on test case context",
          "    assert_eq!(result.mantissa, 0); // assuming expected mantissa based on test case context",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 10; // makes vp_div10 == vm_div10",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the mantissa of the result",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the exponent of the result",
          "    assert!(result.mantissa != 0); // Ensure the mantissa is not zero",
          "    assert!(result.exponent >= 0); // Ensure the exponent is non-negative",
          "    assert!(result.mantissa < 1 << DOUBLE_MANTISSA_BITS); // Ensure mantissa is within valid range",
          "    assert!(result.exponent <= 2 * DOUBLE_BIAS); // Ensure exponent does not exceed allowed range",
          "    assert!(!(result.mantissa % 10 == 0 && result.exponent < 0)); // Ensure mantissa is not a trailing zero with negative exponent",
          "    assert!(result.mantissa % 2 == 0 || result.mantissa % 5 == 0); // Ensure mantissa is multiple of 2 or 5 if necessary",
          "    assert!(div10(result.mantissa) <= result.mantissa); // Validate that division by 10 holds true for the mantissa"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 10; // makes vp_div10 == vm_div10",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the mantissa of the result",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the exponent of the result",
          "    assert!(result.mantissa != 0); // Ensure the mantissa is not zero",
          "    assert!(result.exponent >= 0); // Ensure the exponent is non-negative",
          "    assert!(result.mantissa < 1 << DOUBLE_MANTISSA_BITS); // Ensure mantissa is within valid range",
          "    assert!(result.exponent <= 2 * DOUBLE_BIAS); // Ensure exponent does not exceed allowed range",
          "    assert!(!(result.mantissa % 10 == 0 && result.exponent < 0)); // Ensure mantissa is not a trailing zero with negative exponent",
          "    assert!(result.mantissa % 2 == 0 || result.mantissa % 5 == 0); // Ensure mantissa is multiple of 2 or 5 if necessary",
          "    assert!(div10(result.mantissa) <= result.mantissa); // Validate that division by 10 holds true for the mantissa",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 5; // to ensure vr != vm",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert!(result.mantissa != 0); // Ensures output mantissa is not zero",
          "    assert_eq!(result.exponent, /* expected exponent value based on input */); // Validate exponent value",
          "    assert!(result.mantissa != ieee_mantissa); // Ensures output mantissa is not equal to input mantissa",
          "    assert!(result.exponent > 0); // Validate that exponent is positive based on conditions",
          "    assert!(result.mantissa < (1u64 << (DOUBLE_MANTISSA_BITS + 1))); // Check mantissa fits in its representation",
          "    assert!(result.mantissa > 0); // Check the mantissa is greater than 0"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 5; // to ensure vr != vm",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.mantissa != 0); // Ensures output mantissa is not zero",
          "    assert_eq!(result.exponent, /* expected exponent value based on input */); // Validate exponent value",
          "    assert!(result.mantissa != ieee_mantissa); // Ensures output mantissa is not equal to input mantissa",
          "    assert!(result.exponent > 0); // Validate that exponent is positive based on conditions",
          "    assert!(result.mantissa < (1u64 << (DOUBLE_MANTISSA_BITS + 1))); // Check mantissa fits in its representation",
          "    assert!(result.mantissa > 0); // Check the mantissa is greater than 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]