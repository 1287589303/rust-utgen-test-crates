[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    assert_eq!(result.exponent, 0); // e2 == 0",
          "    assert!(result.mantissa > 0); // non-zero mantissa",
          "    assert!(result.mantissa % 2 == 0); // vr % 2 == 0",
          "    assert!(result.mantissa == result.mantissa); // vr == vm",
          "    assert!(result.exponent >= -2); // valid exponent range",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS) - 1); // valid mantissa range"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    assert_eq!(result.exponent, 0); // e2 == 0",
          "    assert!(result.mantissa > 0); // non-zero mantissa",
          "    assert!(result.mantissa % 2 == 0); // vr % 2 == 0",
          "    assert!(result.mantissa == result.mantissa); // vr == vm",
          "    assert!(result.exponent >= -2); // valid exponent range",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS) - 1); // valid mantissa range",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 8; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, exp); // Expected exponent calculated based on preconditions",
          "    assert_eq!(result.mantissa, output); // Expected mantissa calculated based on preconditions",
          "    assert_eq!(result.mantissa % 2, 0); // Check if mantissa is even based on precondition vr % 2 == 0",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not null",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_EXPONENT_BITS as i32); // Check that exponent is within valid bounds",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Check that exponent is not below minimum value",
          "    assert!(result.mantissa & 1 == 0); // Check if mantissa is even for additional validation",
          "    assert!(result.exponent == 0 || (result.mantissa & (1u64 << DOUBLE_MANTISSA_BITS) != 0)); // Validating correct lower boundary for exponent"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 8; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, exp); // Expected exponent calculated based on preconditions",
          "    assert_eq!(result.mantissa, output); // Expected mantissa calculated based on preconditions",
          "    assert_eq!(result.mantissa % 2, 0); // Check if mantissa is even based on precondition vr % 2 == 0",
          "    assert!(result.mantissa != 0); // Ensure mantissa is not null",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_EXPONENT_BITS as i32); // Check that exponent is within valid bounds",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Check that exponent is not below minimum value",
          "    assert!(result.mantissa & 1 == 0); // Check if mantissa is even for additional validation",
          "    assert!(result.exponent == 0 || (result.mantissa & (1u64 << DOUBLE_MANTISSA_BITS) != 0)); // Validating correct lower boundary for exponent",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 16; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent); // check expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // check expected mantissa",
          "    assert!(result.mantissa % 2 == 0); // check vr % 2 == 0",
          "    assert!(result.exponent == 0); // check final exponent is 0",
          "    assert!(result.mantissa != 0); // ensure mantissa is not zero",
          "    assert!(result.mantissa % 10 != 0); // ensure output mantissa does not end in 0",
          "    assert!(result.mantissa.reduced()); // custom check if mantissa is in reduced form",
          "    assert!(vm_is_trailing_zeros == false); // check trailing zeros condition not met",
          "    assert!(accept_bounds == true); // check accept bounds condition is true",
          "    assert!(vr_is_trailing_zeros == true); // check result VR is trailing zeros",
          "    assert!(last_removed_digit != 5); // ensure last removed digit is not 5",
          "    assert!(vm_mod10 != 0); // ensure vm_mod10 is not 0"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 16; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // check expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // check expected mantissa",
          "    assert!(result.mantissa % 2 == 0); // check vr % 2 == 0",
          "    assert!(result.exponent == 0); // check final exponent is 0",
          "    assert!(result.mantissa != 0); // ensure mantissa is not zero",
          "    assert!(result.mantissa % 10 != 0); // ensure output mantissa does not end in 0",
          "    assert!(result.mantissa.reduced()); // custom check if mantissa is in reduced form",
          "    assert!(vm_is_trailing_zeros == false); // check trailing zeros condition not met",
          "    assert!(accept_bounds == true); // check accept bounds condition is true",
          "    assert!(vr_is_trailing_zeros == true); // check result VR is trailing zeros",
          "    assert!(last_removed_digit != 5); // ensure last removed digit is not 5",
          "    assert!(vm_mod10 != 0); // ensure vm_mod10 is not 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 24; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 24; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 24; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 24; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]