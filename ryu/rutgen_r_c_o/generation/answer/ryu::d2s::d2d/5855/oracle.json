[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1; // precondition: ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // precondition: ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 0); // precondition: e2 >= 0 is false",
          "    assert!(result.mantissa > 0); // expected mantissa is non-zero",
          "    assert!(result.exponent == -2); // expected exponent value",
          "    assert_eq!(result.mantissa, 1); // expected mantissa value",
          "    assert!(result.mantissa % 10 < 10); // general assertion for mantissa",
          "    assert!(result.mantissa != 0); // general assertion check for mantissa",
          "    assert!(result.exponent != 0); // confirm exponent is not zero"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1; // precondition: ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // precondition: ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 0); // precondition: e2 >= 0 is false",
          "    assert!(result.mantissa > 0); // expected mantissa is non-zero",
          "    assert!(result.exponent == -2); // expected exponent value",
          "    assert_eq!(result.mantissa, 1); // expected mantissa value",
          "    assert!(result.mantissa % 10 < 10); // general assertion for mantissa",
          "    assert!(result.mantissa != 0); // general assertion check for mantissa",
          "    assert!(result.exponent != 0); // confirm exponent is not zero",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 2; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa & (result.mantissa - 1) == 0);",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS as i32);",
          "    assert!(result.exponent >= -DOUBLE_BIAS);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 2; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa & (result.mantissa - 1) == 0);",
          "    assert!(result.exponent <= DOUBLE_EXPONENT_BITS as i32);",
          "    assert!(result.exponent >= -DOUBLE_BIAS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = (1u64 << DOUBLE_MANTISSA_BITS) - 1; // max value, ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent <= DOUBLE_BIAS);",
          "    assert!(result.exponent >= -DOUBLE_EXPONENT_BITS);",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.mantissa % 10 == 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent >= -1100 && result.exponent <= 1000);",
          "    assert!(result.mantissa.trailing_zeros() < 4);",
          "    assert!(result.mantissa.count_ones() < 34);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = (1u64 << DOUBLE_MANTISSA_BITS) - 1; // max value, ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent <= DOUBLE_BIAS);",
          "    assert!(result.exponent >= -DOUBLE_EXPONENT_BITS);",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.mantissa % 10 == 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent >= -1100 && result.exponent <= 1000);",
          "    assert!(result.mantissa.trailing_zeros() < 4);",
          "    assert!(result.mantissa.count_ones() < 34);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]