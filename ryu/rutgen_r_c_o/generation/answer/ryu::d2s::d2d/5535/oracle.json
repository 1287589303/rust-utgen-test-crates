[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let expected_output = FloatingDecimal64 { exponent: 0, mantissa: expected_mantissa };",
          "    assert_eq!(result, expected_output);",
          "    let accept_bounds = true;",
          "    let vp_div10 = vm_div10;",
          "    assert!(vp_div10 <= vm_div10);",
          "    assert!(result.exponent == 0);",
          "    assert!(result.mantissa % 2 != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(last_removed_digit != 5);",
          "    assert_eq!(last_removed_digit >= 5, false);",
          "    assert!(vm_is_trailing_zeros == true);",
          "    assert!(vr_is_trailing_zeros == false);",
          "    assert!(vm_is_trailing_zeros == true);",
          "    assert_eq!(result.mantissa % 10, 0);",
          "    assert!(result.mantissa != output);",
          "    assert!(result.mantissa == vm);",
          "    assert!(result.exponent == exp + removed);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let expected_output = FloatingDecimal64 { exponent: 0, mantissa: expected_mantissa };",
          "    assert_eq!(result, expected_output);",
          "    let accept_bounds = true;",
          "    let vp_div10 = vm_div10;",
          "    assert!(vp_div10 <= vm_div10);",
          "    assert!(result.exponent == 0);",
          "    assert!(result.mantissa % 2 != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(last_removed_digit != 5);",
          "    assert_eq!(last_removed_digit >= 5, false);",
          "    assert!(vm_is_trailing_zeros == true);",
          "    assert!(vr_is_trailing_zeros == false);",
          "    assert!(vm_is_trailing_zeros == true);",
          "    assert_eq!(result.mantissa % 10, 0);",
          "    assert!(result.mantissa != output);",
          "    assert!(result.mantissa == vm);",
          "    assert!(result.exponent == exp + removed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // replace expected_exponent with the actual expected value",
          "    assert_eq!(result.mantissa, expected_mantissa); // replace expected_mantissa with the actual expected value"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 3; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // replace expected_exponent with the actual expected value",
          "    assert_eq!(result.mantissa, expected_mantissa); // replace expected_mantissa with the actual expected value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 5; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 5; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // e2 == 0",
          "    assert!(result.mantissa > 0); // output should be non-zero",
          "    assert!(result.mantissa % 2 == 1); // mantissa should be odd due to preconditions and rounding logic",
          "    assert!(result.exponent >= DOUBLE_EXPONENT_BITS as i32); // ensure exponent is reasonable",
          "    assert!(vm_is_trailing_zeros == false); // vm_is_trailing_zeros should be false",
          "    assert!(vr_is_trailing_zeros == true); // vr_is_trailing_zeros should be true",
          "    assert!(vp_div10 <= vm_div10); // ensure division conditions hold",
          "    assert!(vm_is_trailing_zeros == false); // vm_is_trailing_zeros remains false after processing",
          "    assert!(last_removed_digit != 5); // last_removed_digit must not equal 5",
          "    assert!(vr % 2 != 0); // vr must not be evenly divisible",
          "    assert!(result.mantissa == result.mantissa); // ensure that vr == vm holds",
          "    assert!(accept_bounds); // precondition must hold",
          "    assert!(vm_is_trailing_zeros); // vm_is_trailing_zeros should be true after all evaluations"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 5; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 5; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // e2 == 0",
          "    assert!(result.mantissa > 0); // output should be non-zero",
          "    assert!(result.mantissa % 2 == 1); // mantissa should be odd due to preconditions and rounding logic",
          "    assert!(result.exponent >= DOUBLE_EXPONENT_BITS as i32); // ensure exponent is reasonable",
          "    assert!(vm_is_trailing_zeros == false); // vm_is_trailing_zeros should be false",
          "    assert!(vr_is_trailing_zeros == true); // vr_is_trailing_zeros should be true",
          "    assert!(vp_div10 <= vm_div10); // ensure division conditions hold",
          "    assert!(vm_is_trailing_zeros == false); // vm_is_trailing_zeros remains false after processing",
          "    assert!(last_removed_digit != 5); // last_removed_digit must not equal 5",
          "    assert!(vr % 2 != 0); // vr must not be evenly divisible",
          "    assert!(result.mantissa == result.mantissa); // ensure that vr == vm holds",
          "    assert!(accept_bounds); // precondition must hold",
          "    assert!(vm_is_trailing_zeros); // vm_is_trailing_zeros should be true after all evaluations",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]