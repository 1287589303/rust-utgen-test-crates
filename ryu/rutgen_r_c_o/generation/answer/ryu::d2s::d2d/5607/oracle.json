[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0; // iee_mantissa = 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent = 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.mantissa, 0); // Expected mantissa when ieee_mantissa is 0 and ieee_exponent is 0",
          "    assert_eq!(result.exponent, -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // Expected exponent when e2 == 0"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0; // iee_mantissa = 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent = 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa, 0); // Expected mantissa when ieee_mantissa is 0 and ieee_exponent is 0",
          "    assert_eq!(result.exponent, -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2); // Expected exponent when e2 == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0b1; // non-zero sequence",
          "    let ieee_exponent: u32 = 0; // ieee_exponent = 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.mantissa, expected_mantissa_value); // replace with the expected mantissa value",
          "    assert_eq!(result.exponent, expected_exponent_value); // replace with the expected exponent value",
          "    assert!(result.exponent >= 0); // ensure exponent is non-negative",
          "    assert!(result.mantissa != 0); // ensure mantissa is non-zero",
          "    assert!(log10_pow5(-1) == u32::MAX); // validate log10_pow5 result under precondition"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0b1; // non-zero sequence",
          "    let ieee_exponent: u32 = 0; // ieee_exponent = 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa_value); // replace with the expected mantissa value",
          "    assert_eq!(result.exponent, expected_exponent_value); // replace with the expected exponent value",
          "    assert!(result.exponent >= 0); // ensure exponent is non-negative",
          "    assert!(result.mantissa != 0); // ensure mantissa is non-zero",
          "    assert!(log10_pow5(-1) == u32::MAX); // validate log10_pow5 result under precondition",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0; // leading zero",
          "    let ieee_exponent: u32 = 1; // valid exponent for e2 >= 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert_eq!(result.mantissa, ieee_mantissa);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa != 0);",
          "    assert_eq!(result.mantissa & 1, 0);",
          "    assert!(log10_pow2(result.exponent) < DOUBLE_POW5_INV_SPLIT.len() as u32);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0; // leading zero",
          "    let ieee_exponent: u32 = 1; // valid exponent for e2 >= 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert_eq!(result.mantissa, ieee_mantissa);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa != 0);",
          "    assert_eq!(result.mantissa & 1, 0);",
          "    assert!(log10_pow2(result.exponent) < DOUBLE_POW5_INV_SPLIT.len() as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0; // leading zero",
          "    let ieee_exponent: u32 = 2047; // largest exponent, valid e2",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, -1023);",
          "    assert_eq!(result.mantissa, 0);",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.exponent >= -1024);",
          "    assert!(result.mantissa == 0);",
          "    assert!(result.exponent <= 0);",
          "    assert!(result.mantissa != 0 || ieee_exponent == 2047);",
          "    assert!(result.exponent == -1023);",
          "    assert!(result.mantissa >> 52 == 0);",
          "    assert!(result.mantissa == 0);",
          "    assert!(result.exponent == i32::MIN);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0; // leading zero",
          "    let ieee_exponent: u32 = 2047; // largest exponent, valid e2",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, -1023);",
          "    assert_eq!(result.mantissa, 0);",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.exponent >= -1024);",
          "    assert!(result.mantissa == 0);",
          "    assert!(result.exponent <= 0);",
          "    assert!(result.mantissa != 0 || ieee_exponent == 2047);",
          "    assert!(result.exponent == -1023);",
          "    assert!(result.mantissa >> 52 == 0);",
          "    assert!(result.mantissa == 0);",
          "    assert!(result.exponent == i32::MIN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]