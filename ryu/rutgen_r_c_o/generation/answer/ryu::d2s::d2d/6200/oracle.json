[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa < (1 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent <= (DOUBLE_BIAS + DOUBLE_EXPONENT_BITS as i32));",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert_eq!(result.mantissa & 1, 0);",
          "    assert!(result.exponent != DOUBLE_BIAS);",
          "    assert!(result.mantissa != (1 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent.is_positive());"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1; // ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent_value);",
          "    assert_eq!(result.mantissa, expected_mantissa_value);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.mantissa < (1 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent <= (DOUBLE_BIAS + DOUBLE_EXPONENT_BITS as i32));",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert_eq!(result.mantissa & 1, 0);",
          "    assert!(result.exponent != DOUBLE_BIAS);",
          "    assert!(result.mantissa != (1 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent.is_positive());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 0; // to ensure i < DOUBLE_POW5_SPLIT.len() as i32",
          "    let ieee_exponent: u32 = 2047; // to enforce e2 being negative",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(e2 < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);",
          "    assert!(q >= 1);",
          "    assert!(q >= 63);",
          "    assert!(!vm_is_trailing_zeros);",
          "    assert!(!vr_is_trailing_zeros);",
          "    assert!(vp_div100 > vm_div100);",
          "    assert!(vp_div10 == vm_div10);",
          "    assert!(vr == vm);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 0; // to ensure i < DOUBLE_POW5_SPLIT.len() as i32",
          "    let ieee_exponent: u32 = 2047; // to enforce e2 being negative",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent);",
          "    assert_eq!(result.mantissa, expected_mantissa);",
          "    assert!(e2 < 0);",
          "    assert!(i < DOUBLE_POW5_SPLIT.len() as i32);",
          "    assert!(q >= 1);",
          "    assert!(q >= 63);",
          "    assert!(!vm_is_trailing_zeros);",
          "    assert!(!vr_is_trailing_zeros);",
          "    assert!(vp_div100 > vm_div100);",
          "    assert!(vp_div10 == vm_div10);",
          "    assert!(vr == vm);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1048576; // to meet q < 63",
          "    let ieee_exponent: u32 = 1; // to satisfy q <= 1 condition",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 0; // Ensure ieee_mantissa != 0 is false",
          "    let ieee_exponent: u32 = 0; // Ensure ieee_exponent == 0 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the expected mantissa",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Meet requirement for q < 63",
          "    let ieee_exponent: u32 = 0; // Set ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent >= 0); // Ensure exponent is not negative",
          "    assert!(result.mantissa > 0); // Ensure mantissa is positive",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Provide a sample input",
          "    let ieee_exponent: u32 = 1; // Provide a sample input",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the expected mantissa",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Ensure this meets q < 63",
          "    let ieee_exponent: u32 = 2; // Ensure that q <= 1 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 0); // Ensure exponent is validated for invalid input",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Sample input",
          "    let ieee_exponent: u32 = 8; // Sample exponent",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.mantissa > 0); // Ensure mantissa is valid",
          "    assert!(result.exponent >= 0); // Validate exponent",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Provide an input for testing",
          "    let ieee_exponent: u32 = 0; // Check that ieee_exponent == 0 is fulfilled",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.mantissa > 0); // Assert mantissa is greater than zero",
          "    ",
          "    let ieee_mantissa: u64 = 1; // Value for testing",
          "    let ieee_exponent: u32 = 2; // Provide an exponent",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate expected exponent behavior",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Sample input for conditions",
          "    let ieee_exponent: u32 = 24; // Ensure it satisfies condition for the test",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa % 10, 0); // Verify last digit meets expected pattern",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Input that leads to vm_is_trailing_zeros",
          "    let ieee_exponent: u32 = 64; // Set up to leverage trailing zeros check",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 1); // Ensure that the exponent is less than a limit"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1048576; // to meet q < 63",
          "    let ieee_exponent: u32 = 1; // to satisfy q <= 1 condition",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 0; // Ensure ieee_mantissa != 0 is false",
          "    let ieee_exponent: u32 = 0; // Ensure ieee_exponent == 0 is true",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the expected mantissa",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Meet requirement for q < 63",
          "    let ieee_exponent: u32 = 0; // Set ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent >= 0); // Ensure exponent is not negative",
          "    assert!(result.mantissa > 0); // Ensure mantissa is positive",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Provide a sample input",
          "    let ieee_exponent: u32 = 1; // Provide a sample input",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate the expected exponent",
          "    assert_eq!(result.mantissa, expected_mantissa); // Validate the expected mantissa",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Ensure this meets q < 63",
          "    let ieee_exponent: u32 = 2; // Ensure that q <= 1 is false",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 0); // Ensure exponent is validated for invalid input",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Sample input",
          "    let ieee_exponent: u32 = 8; // Sample exponent",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.mantissa > 0); // Ensure mantissa is valid",
          "    assert!(result.exponent >= 0); // Validate exponent",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Provide an input for testing",
          "    let ieee_exponent: u32 = 0; // Check that ieee_exponent == 0 is fulfilled",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.mantissa > 0); // Assert mantissa is greater than zero",
          "    ",
          "    let ieee_mantissa: u64 = 1; // Value for testing",
          "    let ieee_exponent: u32 = 2; // Provide an exponent",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // Validate expected exponent behavior",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Sample input for conditions",
          "    let ieee_exponent: u32 = 24; // Ensure it satisfies condition for the test",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.mantissa % 10, 0); // Verify last digit meets expected pattern",
          "    ",
          "    let ieee_mantissa: u64 = 1048576; // Input that leads to vm_is_trailing_zeros",
          "    let ieee_exponent: u32 = 64; // Set up to leverage trailing zeros check",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent < 1); // Ensure that the exponent is less than a limit",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 5; // to ensure vp_div100 > vm_div100",
          "    let ieee_exponent: u32 = 1048; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 5; // ensures ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ensures ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent >= 0); // checks pk >= 0 for case where e2 < 0",
          "    assert!(result.mantissa > 0); // checks for non-zero mantissa",
          "    let vr_condition = (result.mantissa & 1) == 0; // checks if vr == vm condition holds true",
          "    assert!(vr_condition); // ensures vr == vm",
          "    let q_value = log10_pow5(-result.exponent); // establishes q value for further assertions",
          "    assert!(q_value < 63); // verifies condition q < 63 holds true"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 5; // to ensure vp_div100 > vm_div100",
          "    let ieee_exponent: u32 = 1048; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 5; // ensures ieee_mantissa != 0",
          "    let ieee_exponent: u32 = 0; // ensures ieee_exponent == 0",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent >= 0); // checks pk >= 0 for case where e2 < 0",
          "    assert!(result.mantissa > 0); // checks for non-zero mantissa",
          "    let vr_condition = (result.mantissa & 1) == 0; // checks if vr == vm condition holds true",
          "    assert!(vr_condition); // ensures vr == vm",
          "    let q_value = log10_pow5(-result.exponent); // establishes q value for further assertions",
          "    assert!(q_value < 63); // verifies condition q < 63 holds true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1048576; // value ensuring vp_div10 == vm_div10",
          "    let ieee_exponent: u32 = 2047; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent_value); // Assign the expected exponent value",
          "    assert_eq!(result.mantissa, expected_mantissa_value); // Assign the expected mantissa value",
          "    assert!(result.mantissa != 0); // Ensure that the mantissa is not zero",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2); // Validate exponent bounds",
          "    assert!(result.mantissa & 1 == 0); // Check if mantissa is even (from line 104)",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Check exponent lower bound",
          "    assert!(result.exponent <= 2 * DOUBLE_BIAS); // Check exponent upper bound",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Confirm mantissa bit limit",
          "    assert_eq!(vp_div100, vm_div100 + 1); // Validate that vp_div100 is greater than vm_div100",
          "    assert_eq!(vp_div10, vm_div10); // Validate that vp_div10 equals vm_div10",
          "    assert_eq!(result.mantissa >> 1, 0); // Verify that mantissa divided by 2 results in zero",
          "    assert!(result.mantissa >= (1u64 << (DOUBLE_MANTISSA_BITS - 1))); // Check for mantissa size"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1048576; // value ensuring vp_div10 == vm_div10",
          "    let ieee_exponent: u32 = 2047; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent_value); // Assign the expected exponent value",
          "    assert_eq!(result.mantissa, expected_mantissa_value); // Assign the expected mantissa value",
          "    assert!(result.mantissa != 0); // Ensure that the mantissa is not zero",
          "    assert!(result.exponent <= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32 + 2); // Validate exponent bounds",
          "    assert!(result.mantissa & 1 == 0); // Check if mantissa is even (from line 104)",
          "    assert!(result.exponent >= -DOUBLE_BIAS); // Check exponent lower bound",
          "    assert!(result.exponent <= 2 * DOUBLE_BIAS); // Check exponent upper bound",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS)); // Confirm mantissa bit limit",
          "    assert_eq!(vp_div100, vm_div100 + 1); // Validate that vp_div100 is greater than vm_div100",
          "    assert_eq!(vp_div10, vm_div10); // Validate that vp_div10 equals vm_div10",
          "    assert_eq!(result.mantissa >> 1, 0); // Verify that mantissa divided by 2 results in zero",
          "    assert!(result.mantissa >= (1u64 << (DOUBLE_MANTISSA_BITS - 1))); // Check for mantissa size",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 9; // ensuring vr == vm",
          "    let ieee_exponent: u32 = 1023; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exponent); // check for the expected exponent based on conditions",
          "    assert_eq!(result.mantissa, expected_mantissa); // check for the expected mantissa based on conditions",
          "    assert!(result.mantissa != 0); // ensure mantissa is not zero",
          "    assert!(result.exponent >= 0); // ensure exponent is non-negative",
          "    assert!(result.mantissa & 1 == 0); // ensure mantissa is even to satisfy the accept_bounds condition",
          "    assert!(vm_is_trailing_zeros == false); // ensure vm is not trailing zeros",
          "    assert!(vr_is_trailing_zeros == false); // ensure vr is not trailing zeros",
          "    assert!(vp_div100 > vm_div100); // ensure vp_div100 is greater than vm_div100",
          "    assert!(vp_div10 == vm_div10); // ensure vp_div10 is equal to vm_div10",
          "    assert!(vr == vm); // ensure vr equals vm"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 9; // ensuring vr == vm",
          "    let ieee_exponent: u32 = 1023; ",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exponent); // check for the expected exponent based on conditions",
          "    assert_eq!(result.mantissa, expected_mantissa); // check for the expected mantissa based on conditions",
          "    assert!(result.mantissa != 0); // ensure mantissa is not zero",
          "    assert!(result.exponent >= 0); // ensure exponent is non-negative",
          "    assert!(result.mantissa & 1 == 0); // ensure mantissa is even to satisfy the accept_bounds condition",
          "    assert!(vm_is_trailing_zeros == false); // ensure vm is not trailing zeros",
          "    assert!(vr_is_trailing_zeros == false); // ensure vr is not trailing zeros",
          "    assert!(vp_div100 > vm_div100); // ensure vp_div100 is greater than vm_div100",
          "    assert!(vp_div10 == vm_div10); // ensure vp_div10 is equal to vm_div10",
          "    assert!(vr == vm); // ensure vr equals vm",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]