[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 1024;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 1024;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.exponent >= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32);",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa % 2 != 0);",
          "    assert!(result.mantissa > result.exponent as u64);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 1024;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    let ieee_mantissa: u64 = 1;",
          "    let ieee_exponent: u32 = 1024;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent > 0);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.mantissa & 1 == 0);",
          "    assert!(result.exponent >= DOUBLE_BIAS + DOUBLE_MANTISSA_BITS as i32);",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa % 2 != 0);",
          "    assert!(result.mantissa > result.exponent as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = (1 << 52) - 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, exp);",
          "    assert_eq!(result.mantissa, output);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = (1 << 52) - 1;",
          "    let ieee_exponent: u32 = 2047;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, exp);",
          "    assert_eq!(result.mantissa, output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 12345678901234;",
          "    let ieee_exponent: u32 = 1500;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert!(result.exponent.is_i32());",
          "    assert!(result.mantissa.is_u64());",
          "    assert!(result.exponent != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent >= DOUBLE_EXPONENT_BITS as i32);",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa.wrapping_add(1) > result.mantissa);",
          "    assert!(result.mantissa.wrapping_sub(1) < result.mantissa);",
          "    assert_eq!(result.mantissa % 10, 3);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.exponent < 1024);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 12345678901234;",
          "    let ieee_exponent: u32 = 1500;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent.is_i32());",
          "    assert!(result.mantissa.is_u64());",
          "    assert!(result.exponent != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.mantissa < (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.exponent >= DOUBLE_EXPONENT_BITS as i32);",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa.wrapping_add(1) > result.mantissa);",
          "    assert!(result.mantissa.wrapping_sub(1) < result.mantissa);",
          "    assert_eq!(result.mantissa % 10, 3);",
          "    assert!(result.exponent >= 0);",
          "    assert!(result.exponent < 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 98765432101234;",
          "    let ieee_exponent: u32 = 1700;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert!(result.exponent.is_i32());",
          "    assert!(result.mantissa.is_u64());",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert!(result.exponent <= 1 << 30); // Example of a reasonable upper bound for testing.",
          "    assert!(result.mantissa < (1u64 << (DOUBLE_MANTISSA_BITS + 1))); // Must be less than 2^53.",
          "    assert!(result.mantissa % 10 != 0); // Ensure that mantissa is not a multiple of 10 after processing.",
          "    assert!(result.exponent >= 0); // Example check to ensure exponent is non-negative for this test case."
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 98765432101234;",
          "    let ieee_exponent: u32 = 1700;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert!(result.exponent.is_i32());",
          "    assert!(result.mantissa.is_u64());",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent >= -DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
          "    assert!(result.exponent <= 1 << 30); // Example of a reasonable upper bound for testing.",
          "    assert!(result.mantissa < (1u64 << (DOUBLE_MANTISSA_BITS + 1))); // Must be less than 2^53.",
          "    assert!(result.mantissa % 10 != 0); // Ensure that mantissa is not a multiple of 10 after processing.",
          "    assert!(result.exponent >= 0); // Example check to ensure exponent is non-negative for this test case.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ieee_mantissa: u64 = 50000000000000;",
          "    let ieee_exponent: u32 = 1200;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.exponent, expected_exp);",
          "    assert_eq!(result.mantissa, expected_output);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent > -DOUBLE_BIAS);",
          "    assert!(result.exponent < 1110);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent <= 1_000);",
          "    assert_ne!(result.exponent, result.mantissa);"
        ],
        "code": [
          "{",
          "    let ieee_mantissa: u64 = 50000000000000;",
          "    let ieee_exponent: u32 = 1200;",
          "    let result = d2d(ieee_mantissa, ieee_exponent);",
          "    assert_eq!(result.exponent, expected_exp);",
          "    assert_eq!(result.mantissa, expected_output);",
          "    assert!(result.mantissa > 0);",
          "    assert!(result.exponent > -DOUBLE_BIAS);",
          "    assert!(result.exponent < 1110);",
          "    assert!(result.mantissa <= (1u64 << DOUBLE_MANTISSA_BITS));",
          "    assert!(result.mantissa % 10 != 0);",
          "    assert!(result.mantissa != 0);",
          "    assert!(result.exponent <= 1_000);",
          "    assert_ne!(result.exponent, result.mantissa);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]