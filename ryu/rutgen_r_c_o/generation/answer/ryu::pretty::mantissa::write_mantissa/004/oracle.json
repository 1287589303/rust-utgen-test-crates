[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[8], DIGIT_TABLE[(10000 % 100) << 1]);",
          "    assert_eq!(result[6], DIGIT_TABLE[(10000 / 100) << 1]);",
          "    assert_eq!(result[4], b'0');",
          "    assert_eq!(result[5], b'0');",
          "    ",
          "    let output: u32 = 9999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[9], b'9');",
          "    ",
          "    let output: u32 = 101;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[8], DIGIT_TABLE[(101 % 100) << 1]);",
          "    assert_eq!(result[9], b'1');",
          "    ",
          "    let output: u32 = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[9], b'9');"
        ],
        "code": [
          "{",
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[8], DIGIT_TABLE[(10000 % 100) << 1]);",
          "    assert_eq!(result[6], DIGIT_TABLE[(10000 / 100) << 1]);",
          "    assert_eq!(result[4], b'0');",
          "    assert_eq!(result[5], b'0');",
          "    ",
          "    let output: u32 = 9999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[9], b'9');",
          "    ",
          "    let output: u32 = 101;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[8], DIGIT_TABLE[(101 % 100) << 1]);",
          "    assert_eq!(result[9], b'1');",
          "    ",
          "    let output: u32 = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); }",
          "    assert_eq!(result[9], b'9');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 9_999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    unsafe { write_mantissa(10_000, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(9_999, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(100, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(99, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(10, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(9, result.as_mut_ptr().add(9)); }"
        ],
        "code": [
          "{",
          "    let output: u32 = 9_999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    unsafe { write_mantissa(10_000, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(9_999, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(100, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(99, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(10, result.as_mut_ptr().add(9)); }",
          "    unsafe { write_mantissa(9, result.as_mut_ptr().add(9)); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 100;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result[8], b'1');",
          "    assert_eq!(result[9], b'0');"
        ],
        "code": [
          "{",
          "    let output: u32 = 100;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result[8], b'1');",
          "    assert_eq!(result[9], b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 99;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    * write_mantissa(10_000, result.as_mut_ptr().add(9)); // Precondition: output >= 10_000 is true.",
          "    * write_mantissa(9999, result.as_mut_ptr().add(9)); // Precondition: output >= 10_000 is false.",
          "    * write_mantissa(100, result.as_mut_ptr().add(9)); // Precondition: output >= 100 is true.",
          "    * write_mantissa(99, result.as_mut_ptr().add(9)); // Precondition: output >= 100 is false.",
          "    * write_mantissa(10, result.as_mut_ptr().add(9)); // Precondition: output >= 10 is true.",
          "    * write_mantissa(9, result.as_mut_ptr().add(9)); // Precondition: output >= 10 is false."
        ],
        "code": [
          "{",
          "    let output: u32 = 99;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    * write_mantissa(10_000, result.as_mut_ptr().add(9)); // Precondition: output >= 10_000 is true.",
          "    * write_mantissa(9999, result.as_mut_ptr().add(9)); // Precondition: output >= 10_000 is false.",
          "    * write_mantissa(100, result.as_mut_ptr().add(9)); // Precondition: output >= 100 is true.",
          "    * write_mantissa(99, result.as_mut_ptr().add(9)); // Precondition: output >= 100 is false.",
          "    * write_mantissa(10, result.as_mut_ptr().add(9)); // Precondition: output >= 10 is true.",
          "    * write_mantissa(9, result.as_mut_ptr().add(9)); // Precondition: output >= 10 is false.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 10;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, b'0' + 10, 0]); // Test when output < 10_000",
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0' + 0, b'0' + 0]); // Test when output == 10_000",
          "    let output: u32 = 100;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, b'0' + 1, b'0' + 0, 0, 0, 0]); // Test when output == 100",
          "    let output: u32 = 1;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, b'0' + 1, 0]); // Test when output < 10"
        ],
        "code": [
          "{",
          "    let output: u32 = 10;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, b'0' + 10, 0]); // Test when output < 10_000",
          "    let output: u32 = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0' + 0, b'0' + 0]); // Test when output == 10_000",
          "    let output: u32 = 100;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, b'0' + 1, b'0' + 0, 0, 0, 0]); // Test when output == 100",
          "    let output: u32 = 1;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0, b'0' + 1, 0]); // Test when output < 10",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    let output: u32 = 10_000; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_10000); }",
          "    let output: u32 = 9999; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_9999); }",
          "    let output: u32 = 100; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_100); }",
          "    let output: u32 = 99; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_99); }",
          "    let output: u32 = 10; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_10); }",
          "    let output: u32 = 9; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_9); }"
        ],
        "code": [
          "{",
          "    let output: u32 = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    let output: u32 = 10_000; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_10000); }",
          "    let output: u32 = 9999; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_9999); }",
          "    let output: u32 = 100; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_100); }",
          "    let output: u32 = 99; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_99); }",
          "    let output: u32 = 10; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_10); }",
          "    let output: u32 = 9; let mut result: [u8; 10] = [0; 10]; unsafe { write_mantissa(output, result.as_mut_ptr().add(9)); assert_eq!(result, expected_output_for_9); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let output: u32 = 0;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "}"
        ],
        "oracle": [
          "    unsafe {",
          "    let output = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(&result[8..10], &DIGIT_TABLE[(output % 100) << 1..(output % 100) << 1 + 2]);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 9999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 99;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }"
        ],
        "code": [
          "{",
          "    let output: u32 = 0;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    unsafe {",
          "        write_mantissa(output, result.as_mut_ptr().add(9));",
          "    }",
          "    unsafe {",
          "    let output = 10_000;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(&result[8..10], &DIGIT_TABLE[(output % 100) << 1..(output % 100) << 1 + 2]);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 9999;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 99;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }",
          "    ",
          "    unsafe {",
          "    let output = 9;",
          "    let mut result: [u8; 10] = [0; 10];",
          "    write_mantissa(output, result.as_mut_ptr().add(9));",
          "    assert_eq!(result[9], b'0' + output as u8);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]