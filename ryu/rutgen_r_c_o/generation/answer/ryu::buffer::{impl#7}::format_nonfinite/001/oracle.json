[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nan_value: f64 = f64::from_bits(0x7FF8000000000000); // Represents NaN",
          "    assert_eq!(nan_value.format_nonfinite(), NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f64::from_bits(0x7FF8000000000000).format_nonfinite(), NAN);"
        ],
        "code": [
          "{",
          "    let nan_value: f64 = f64::from_bits(0x7FF8000000000000); // Represents NaN",
          "    assert_eq!(nan_value.format_nonfinite(), NAN);",
          "    assert_eq!(f64::from_bits(0x7FF8000000000000).format_nonfinite(), NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nan_value_alternate: f64 = 0.0 / 0.0; // Another representation of NaN",
          "    assert_eq!(nan_value_alternate.format_nonfinite(), NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0.0 / 0.0.format_nonfinite(), NAN);"
        ],
        "code": [
          "{",
          "    let nan_value_alternate: f64 = 0.0 / 0.0; // Another representation of NaN",
          "    assert_eq!(nan_value_alternate.format_nonfinite(), NAN);",
          "    assert_eq!(0.0 / 0.0.format_nonfinite(), NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nan_small: f64 = f64::from_bits(0x7FF0000000000001); // Smallest denormal NaN",
          "    assert_eq!(nan_small.format_nonfinite(), NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f64::from_bits(0x7FF0000000000001).format_nonfinite(), NAN);"
        ],
        "code": [
          "{",
          "    let nan_small: f64 = f64::from_bits(0x7FF0000000000001); // Smallest denormal NaN",
          "    assert_eq!(nan_small.format_nonfinite(), NAN);",
          "    assert_eq!(f64::from_bits(0x7FF0000000000001).format_nonfinite(), NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nan_large: f64 = f64::from_bits(0x7FF0000000000002); // Another NaN representation",
          "    assert_eq!(nan_large.format_nonfinite(), NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f64::from_bits(0x7FF0000000000002).format_nonfinite(), NAN);"
        ],
        "code": [
          "{",
          "    let nan_large: f64 = f64::from_bits(0x7FF0000000000002); // Another NaN representation",
          "    assert_eq!(nan_large.format_nonfinite(), NAN);",
          "    assert_eq!(f64::from_bits(0x7FF0000000000002).format_nonfinite(), NAN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]