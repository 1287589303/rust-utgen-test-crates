[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 1.0;",
          "    let _result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, \"inf\");"
        ],
        "code": [
          "{",
          "    let value: f64 = 1.0;",
          "    let _result = value.format_nonfinite();",
          "    assert_eq!(_result, \"inf\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 1.7976931348623157E308;",
          "    let _result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.format_nonfinite(), INFINITY);"
        ],
        "code": [
          "{",
          "    let value: f64 = 1.7976931348623157E308;",
          "    let _result = value.format_nonfinite();",
          "    assert_eq!(value.format_nonfinite(), INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 1.0E100;",
          "    let _result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.format_nonfinite(), INFINITY);"
        ],
        "code": [
          "{",
          "    let value: f64 = 1.0E100;",
          "    let _result = value.format_nonfinite();",
          "    assert_eq!(value.format_nonfinite(), INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 1.0E-100;",
          "    let _result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.format_nonfinite(), INFINITY);"
        ],
        "code": [
          "{",
          "    let value: f64 = 1.0E-100;",
          "    let _result = value.format_nonfinite();",
          "    assert_eq!(value.format_nonfinite(), INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 5.0E-324; // Smallest positive non-zero f64",
          "    let _result = value.format_nonfinite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.format_nonfinite(), INFINITY);"
        ],
        "code": [
          "{",
          "    let value: f64 = 5.0E-324; // Smallest positive non-zero f64",
          "    let _result = value.format_nonfinite();",
          "    assert_eq!(value.format_nonfinite(), INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]