[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1u64;",
          "    let result = pow5_factor(value);",
          "}"
        ],
        "oracle": [
          "    assert!(result == 0);",
          "    assert!(result == pow5_factor(5));",
          "    assert!(result == pow5_factor(25));",
          "    assert!(result == pow5_factor(125));",
          "    assert!(result == pow5_factor(625));",
          "    assert!(result == 0);  // for values that exceed N_DIV_5, e.g., pow5_factor(3689348814741910324)"
        ],
        "code": [
          "{",
          "    let value = 1u64;",
          "    let result = pow5_factor(value);",
          "    assert!(result == 0);",
          "    assert!(result == pow5_factor(5));",
          "    assert!(result == pow5_factor(25));",
          "    assert!(result == pow5_factor(125));",
          "    assert!(result == pow5_factor(625));",
          "    assert!(result == 0);  // for values that exceed N_DIV_5, e.g., pow5_factor(3689348814741910324)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 3689348814741910323u64;",
          "    let result = pow5_factor(value);",
          "}"
        ],
        "oracle": [
          "    result == 0",
          "    value == 3689348814741910323u64",
          "    value != 0"
        ],
        "code": [
          "{",
          "    let value = 3689348814741910323u64;",
          "    let result = pow5_factor(value);",
          "    result == 0",
          "    value == 3689348814741910323u64",
          "    value != 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 18446744073709551616u64; // This is greater than u64::MAX, used to illustrate another aspect, not a valid input.",
          "    let result = pow5_factor(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pow5_factor(1u64), 0);",
          "    assert_eq!(pow5_factor(5u64), 1);",
          "    assert_eq!(pow5_factor(25u64), 2);",
          "    assert_eq!(pow5_factor(125u64), 3);",
          "    assert_eq!(pow5_factor(3125u64), 5);",
          "    assert_eq!(pow5_factor(18446744073709551615u64), 0);",
          "    assert_eq!(pow5_factor(3689348814741910324u64), 1);",
          "    assert_eq!(pow5_factor(18446744073709551614u64), 0);",
          "    assert_eq!(pow5_factor(18446744073709551613u64), 0);",
          "    assert_eq!(pow5_factor(3689348814741910323u64), 0);",
          "    assert!(pow5_factor(3689348814741910322u64) > 0);"
        ],
        "code": [
          "{",
          "    let value = 18446744073709551616u64; // This is greater than u64::MAX, used to illustrate another aspect, not a valid input.",
          "    let result = pow5_factor(value);",
          "    assert_eq!(pow5_factor(1u64), 0);",
          "    assert_eq!(pow5_factor(5u64), 1);",
          "    assert_eq!(pow5_factor(25u64), 2);",
          "    assert_eq!(pow5_factor(125u64), 3);",
          "    assert_eq!(pow5_factor(3125u64), 5);",
          "    assert_eq!(pow5_factor(18446744073709551615u64), 0);",
          "    assert_eq!(pow5_factor(3689348814741910324u64), 1);",
          "    assert_eq!(pow5_factor(18446744073709551614u64), 0);",
          "    assert_eq!(pow5_factor(18446744073709551613u64), 0);",
          "    assert_eq!(pow5_factor(3689348814741910323u64), 0);",
          "    assert!(pow5_factor(3689348814741910322u64) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 3689348814741910322u64; // Just below N_DIV_5",
          "    let result = pow5_factor(value);",
          "}"
        ],
        "oracle": [
          "    assert!(result == 31);  // The count should be 31 for the input just below N_DIV_5",
          "    assert!(result == pow5_factor(1u64));  // Test with smallest non-zero value",
          "    assert!(result == 0);  // Given value greater than N_DIV_5 should return 0",
          "    assert!(result == pow5_factor(3689348814741910324u64));  // Value equal to N_DIV_5 should return 0",
          "    assert!(result == pow5_factor(14757395258967641293u64));  // Test M_INV_5 directly",
          "    assert!(result == 1);  // Test with a value that is the smallest valid case after multiplication"
        ],
        "code": [
          "{",
          "    let value = 3689348814741910322u64; // Just below N_DIV_5",
          "    let result = pow5_factor(value);",
          "    assert!(result == 31);  // The count should be 31 for the input just below N_DIV_5",
          "    assert!(result == pow5_factor(1u64));  // Test with smallest non-zero value",
          "    assert!(result == 0);  // Given value greater than N_DIV_5 should return 0",
          "    assert!(result == pow5_factor(3689348814741910324u64));  // Value equal to N_DIV_5 should return 0",
          "    assert!(result == pow5_factor(14757395258967641293u64));  // Test M_INV_5 directly",
          "    assert!(result == 1);  // Test with a value that is the smallest valid case after multiplication",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]