[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NaNFloat;",
          "",
          "    impl Copy for NaNFloat {}",
          "",
          "    impl Sealed for NaNFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            NAN",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for NaN",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(NaNFloat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NAN);",
          "    assert!(result.is_ascii());",
          "    assert_eq!(result.len(), 3);",
          "    assert!(buffer.bytes.iter().all(|b| matches!(b.assume_init(), 0)));"
        ],
        "code": [
          "{",
          "    struct NaNFloat;",
          "",
          "    impl Copy for NaNFloat {}",
          "",
          "    impl Sealed for NaNFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            NAN",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for NaN",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(NaNFloat);",
          "    assert_eq!(result, NAN);",
          "    assert!(result.is_ascii());",
          "    assert_eq!(result.len(), 3);",
          "    assert!(buffer.bytes.iter().all(|b| matches!(b.assume_init(), 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InfinityFloat;",
          "",
          "    impl Copy for InfinityFloat {}",
          "",
          "    impl Sealed for InfinityFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            INFINITY",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for positive infinity",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(InfinityFloat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, INFINITY);"
        ],
        "code": [
          "{",
          "    struct InfinityFloat;",
          "",
          "    impl Copy for InfinityFloat {}",
          "",
          "    impl Sealed for InfinityFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            INFINITY",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for positive infinity",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(InfinityFloat);",
          "    assert_eq!(result, INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NegativeInfinityFloat;",
          "",
          "    impl Copy for NegativeInfinityFloat {}",
          "",
          "    impl Sealed for NegativeInfinityFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            NEG_INFINITY",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for negative infinity",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(NegativeInfinityFloat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, NEG_INFINITY);"
        ],
        "code": [
          "{",
          "    struct NegativeInfinityFloat;",
          "",
          "    impl Copy for NegativeInfinityFloat {}",
          "",
          "    impl Sealed for NegativeInfinityFloat {",
          "        fn is_nonfinite(self) -> bool {",
          "            true",
          "        }",
          "",
          "        fn format_nonfinite(self) -> &'static str {",
          "            NEG_INFINITY",
          "        }",
          "",
          "        unsafe fn write_to_ryu_buffer(self, _: *mut u8) -> usize {",
          "            0 // no actual data to write for negative infinity",
          "        }",
          "    }",
          "",
          "    let mut buffer = Buffer::new();",
          "    let result = buffer.format(NegativeInfinityFloat);",
          "    assert_eq!(result, NEG_INFINITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]