[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let value: u32 = 0;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| pow5factor_32(0)).is_err());"
        ],
        "code": [
          "{",
          "    let value: u32 = 0;",
          "    let _result = pow5factor_32(value);",
          "    assert!(std::panic::catch_unwind(|| pow5factor_32(0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 1;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 1;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 2;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 2;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 3;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 3;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 4;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 4;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 5;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);",
          "    let value: u32 = 10;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 1);",
          "    let value: u32 = 25;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 2);",
          "    let value: u32 = 0;",
          "    let _result = pow5factor_32(value);",
          "    assert!(value != 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 5;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 0);",
          "    let value: u32 = 10;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 1);",
          "    let value: u32 = 25;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 2);",
          "    let value: u32 = 0;",
          "    let _result = pow5factor_32(value);",
          "    assert!(value != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 10;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 1);",
          "    assert!(value != 0);",
          "    assert!(_result <= 32);"
        ],
        "code": [
          "{",
          "    let value: u32 = 10;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 1);",
          "    assert!(value != 0);",
          "    assert!(_result <= 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 25;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 2);",
          "    assert!(value != 0);",
          "    assert!(pow5factor_32(0) == 0);",
          "    assert!(pow5factor_32(1) == 0);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(625), 4);",
          "    assert_eq!(pow5factor_32(u32::MAX), 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 25;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 2);",
          "    assert!(value != 0);",
          "    assert!(pow5factor_32(0) == 0);",
          "    assert!(pow5factor_32(1) == 0);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(625), 4);",
          "    assert_eq!(pow5factor_32(u32::MAX), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 50;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(1), 0);",
          "    assert_eq!(pow5factor_32(0), panic);",
          "    assert_eq!(pow5factor_32(7), 0);",
          "    assert_eq!(pow5factor_32(10), 1);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(2), 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 50;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(1), 0);",
          "    assert_eq!(pow5factor_32(0), panic);",
          "    assert_eq!(pow5factor_32(7), 0);",
          "    assert_eq!(pow5factor_32(10), 1);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(2), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 125;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 3);"
        ],
        "code": [
          "{",
          "    let value: u32 = 125;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(_result, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 1_000_000;",
          "    let _result = pow5factor_32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pow5factor_32(1), 0);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(625), 4);",
          "    assert_eq!(pow5factor_32(1_000_000), 0);",
          "    assert_eq!(pow5factor_32(50), 1);",
          "    assert_eq!(pow5factor_32(0), 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 1_000_000;",
          "    let _result = pow5factor_32(value);",
          "    assert_eq!(pow5factor_32(1), 0);",
          "    assert_eq!(pow5factor_32(5), 1);",
          "    assert_eq!(pow5factor_32(25), 2);",
          "    assert_eq!(pow5factor_32(125), 3);",
          "    assert_eq!(pow5factor_32(625), 4);",
          "    assert_eq!(pow5factor_32(1_000_000), 0);",
          "    assert_eq!(pow5factor_32(50), 1);",
          "    assert_eq!(pow5factor_32(0), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]