{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/pretty/exponent.rs\n// crate name is ryu\nuse crate::digit_table::DIGIT_TABLE;\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {\n    let sign = k < 0;\n    if sign {\n        *result = b'-';\n        result = result.offset(1);\n        k = -k;\n    }\n    debug_assert!(k < 1000);\n    if k >= 100 {\n        *result = b'0' + (k / 100) as u8;\n        k %= 100;\n        let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n        ptr::copy_nonoverlapping(d, result.offset(1), 2);\n        sign as usize + 3\n    } else if k >= 10 {\n        let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n        ptr::copy_nonoverlapping(d, result, 2);\n        sign as usize + 2\n    } else {\n        *result = b'0' + k as u8;\n        sign as usize + 1\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 5 pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {\n 6     let sign = k < 0;\n 7     if sign {\n 8         *result = b'-';\n 9         result = result.offset(1);\n10         k = -k;\n11     }\n12 \n13     debug_assert!(k < 1000);\n14     if k >= 100 {\n15         *result = b'0' + (k / 100) as u8;\n16         k %= 100;\n17         let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n18         ptr::copy_nonoverlapping(d, result.offset(1), 2);\n19         sign as usize + 3\n20     } else if k >= 10 {\n21         let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n22         ptr::copy_nonoverlapping(d, result, 2);\n23         sign as usize + 2\n24     } else {\n25         *result = b'0' + k as u8;\n26         sign as usize + 1\n27     }\n28 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}