{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/d2s.rs\n// crate name is ryu\nuse crate::common::{log10_pow2, log10_pow5, pow5bits};\n#[cfg(not(feature = \"small\"))]\npub use crate::d2s_full_table::{DOUBLE_POW5_INV_SPLIT, DOUBLE_POW5_SPLIT};\nuse crate::d2s_intrinsics::{\n    div10, div100, div5, mul_shift_all_64, multiple_of_power_of_2, multiple_of_power_of_5,\n};\n#[cfg(feature = \"small\")]\npub use crate::d2s_small_table::{compute_inv_pow5, compute_pow5};\nuse core::mem::MaybeUninit;\npub const DOUBLE_MANTISSA_BITS: u32 = 52;\npub const DOUBLE_EXPONENT_BITS: u32 = 11;\npub const DOUBLE_BIAS: i32 = 1023;\npub const DOUBLE_POW5_INV_BITCOUNT: i32 = 125;\npub const DOUBLE_POW5_BITCOUNT: i32 = 125;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub fn decimal_length17(v: u64) -> u32 {\n    debug_assert!(v < 100000000000000000);\n    if v >= 10000000000000000 {\n        17\n    } else if v >= 1000000000000000 {\n        16\n    } else if v >= 100000000000000 {\n        15\n    } else if v >= 10000000000000 {\n        14\n    } else if v >= 1000000000000 {\n        13\n    } else if v >= 100000000000 {\n        12\n    } else if v >= 10000000000 {\n        11\n    } else if v >= 1000000000 {\n        10\n    } else if v >= 100000000 {\n        9\n    } else if v >= 10000000 {\n        8\n    } else if v >= 1000000 {\n        7\n    } else if v >= 100000 {\n        6\n    } else if v >= 10000 {\n        5\n    } else if v >= 1000 {\n        4\n    } else if v >= 100 {\n        3\n    } else if v >= 10 {\n        2\n    } else {\n        1\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n38 pub fn decimal_length17(v: u64) -> u32 {\n39     // This is slightly faster than a loop.\n40     // The average output length is 16.38 digits, so we check high-to-low.\n41     // Function precondition: v is not an 18, 19, or 20-digit number.\n42     // (17 digits are sufficient for round-tripping.)\n43     debug_assert!(v < 100000000000000000);\n44 \n45     if v >= 10000000000000000 {\n46         17\n47     } else if v >= 1000000000000000 {\n48         16\n49     } else if v >= 100000000000000 {\n50         15\n51     } else if v >= 10000000000000 {\n52         14\n53     } else if v >= 1000000000000 {\n54         13\n55     } else if v >= 100000000000 {\n56         12\n57     } else if v >= 10000000000 {\n58         11\n59     } else if v >= 1000000000 {\n60         10\n61     } else if v >= 100000000 {\n62         9\n63     } else if v >= 10000000 {\n64         8\n65     } else if v >= 1000000 {\n66         7\n67     } else if v >= 100000 {\n68         6\n69     } else if v >= 10000 {\n70         5\n71     } else if v >= 1000 {\n72         4\n73     } else if v >= 100 {\n74         3\n75     } else if v >= 10 {\n76         2\n77     } else {\n78         1\n79     }\n80 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}