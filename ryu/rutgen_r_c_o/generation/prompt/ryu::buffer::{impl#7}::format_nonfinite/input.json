{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buffer/mod.rs\n// crate name is ryu\nuse crate::raw;\nuse core::mem::MaybeUninit;\nuse core::{slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst NAN: &str = \"NaN\";\nconst INFINITY: &str = \"inf\";\nconst NEG_INFINITY: &str = \"-inf\";\npub trait Sealed: Copy {\n    fn is_nonfinite(self) -> bool;\n    fn format_nonfinite(self) -> &'static str;\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize;\n}\nimpl Sealed for f64 {\n    #[inline]\n    fn is_nonfinite(self) -> bool {}\n    #[cold]\n    #[cfg_attr(feature = \"no-panic\", inline)]\n    fn format_nonfinite(self) -> &'static str {\n        const MANTISSA_MASK: u64 = 0x000fffffffffffff;\n        const SIGN_MASK: u64 = 0x8000000000000000;\n        let bits = self.to_bits();\n        if bits & MANTISSA_MASK != 0 {\n            NAN\n        } else if bits & SIGN_MASK != 0 {\n            NEG_INFINITY\n        } else {\n            INFINITY\n        }\n    }\n    #[inline]\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n154 fn format_nonfinite(self) -> &'static str {\n155     const MANTISSA_MASK: u64 = 0x000fffffffffffff;\n156     const SIGN_MASK: u64 = 0x8000000000000000;\n157     let bits = self.to_bits();\n158     if bits & MANTISSA_MASK != 0 {\n159         NAN\n160     } else if bits & SIGN_MASK != 0 {\n161         NEG_INFINITY\n162     } else {\n163         INFINITY\n164     }\n165 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}