{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buffer/mod.rs\n// crate name is ryu\nuse crate::raw;\nuse core::mem::MaybeUninit;\nuse core::{slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst NAN: &str = \"NaN\";\nconst INFINITY: &str = \"inf\";\nconst NEG_INFINITY: &str = \"-inf\";\npub trait Sealed: Copy {\n    fn is_nonfinite(self) -> bool;\n    fn format_nonfinite(self) -> &'static str;\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize;\n}\npub struct Buffer {\n    bytes: [MaybeUninit<u8>; 24],\n}\nimpl Buffer {\n    #[inline]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn new() -> Self {\n        let bytes = [MaybeUninit::<u8>::uninit(); 24];\n        Buffer { bytes }\n    }\n    #[cfg_attr(feature = \"no-panic\", inline)]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn format<F: Float>(&mut self, f: F) -> &str {\n        if f.is_nonfinite() { f.format_nonfinite() } else { self.format_finite(f) }\n    }\n    #[inline]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {\n        unsafe {\n            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);\n            debug_assert!(n <= self.bytes.len());\n            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);\n            str::from_utf8_unchecked(slice)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print a floating point number into this buffer and return a reference to\n/// its string representation within the buffer.\n///\n/// # Special cases\n///\n/// This function formats NaN as the string \"NaN\", positive infinity as\n/// \"inf\", and negative infinity as \"-inf\" to match std::fmt.\n///\n/// If your input is known to be finite, you may get better performance by\n/// calling the `format_finite` method instead of `format` to avoid the\n/// checks for special cases.\n47 pub fn format<F: Float>(&mut self, f: F) -> &str {\n48     if f.is_nonfinite() {\n49         f.format_nonfinite()\n50     } else {\n51         self.format_finite(f)\n52     }\n53 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}