{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/f2s_intrinsics.rs\n// crate name is ryu\nuse crate::d2s;\npub const FLOAT_POW5_INV_BITCOUNT: i32 = d2s::DOUBLE_POW5_INV_BITCOUNT - 64;\npub const FLOAT_POW5_BITCOUNT: i32 = d2s::DOUBLE_POW5_BITCOUNT - 64;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub fn mul_pow5_inv_div_pow2(m: u32, q: u32, j: i32) -> u32 {\n    #[cfg(feature = \"small\")]\n    {\n        let pow5 = unsafe { d2s::compute_inv_pow5(q) };\n        mul_shift_32(m, pow5.1 + 1, j)\n    }\n    #[cfg(not(feature = \"small\"))]\n    {\n        debug_assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);\n        unsafe {\n            mul_shift_32(\n                m,\n                d2s::DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize).1 + 1,\n                j,\n            )\n        }\n    }\n}\n#[cfg_attr(feature = \"no-panic\", inline)]\nfn mul_shift_32(m: u32, factor: u64, shift: i32) -> u32 {\n    debug_assert!(shift > 32);\n    let factor_lo = factor as u32;\n    let factor_hi = (factor >> 32) as u32;\n    let bits0 = m as u64 * factor_lo as u64;\n    let bits1 = m as u64 * factor_hi as u64;\n    let sum = (bits0 >> 32) + bits1;\n    let shifted_sum = sum >> (shift - 32);\n    debug_assert!(shifted_sum <= u32::max_value() as u64);\n    shifted_sum as u32\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n75 pub fn mul_pow5_inv_div_pow2(m: u32, q: u32, j: i32) -> u32 {\n76     #[cfg(feature = \"small\")]\n77     {\n78         // The inverse multipliers are defined as [2^x / 5^y] + 1; the upper 64\n79         // bits from the double lookup table are the correct bits for [2^x /\n80         // 5^y], so we have to add 1 here. Note that we rely on the fact that\n81         // the added 1 that's already stored in the table never overflows into\n82         // the upper 64 bits.\n83         let pow5 = unsafe { d2s::compute_inv_pow5(q) };\n84         mul_shift_32(m, pow5.1 + 1, j)\n85     }\n86 \n87     #[cfg(not(feature = \"small\"))]\n88     {\n89         debug_assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);\n90         unsafe {\n91             mul_shift_32(\n92                 m,\n93                 d2s::DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize).1 + 1,\n94                 j,\n95             )\n96         }\n97     }\n98 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}