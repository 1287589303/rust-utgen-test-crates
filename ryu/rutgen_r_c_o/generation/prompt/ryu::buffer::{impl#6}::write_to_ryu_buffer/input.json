{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buffer/mod.rs\n// crate name is ryu\nuse crate::raw;\nuse core::mem::MaybeUninit;\nuse core::{slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst NAN: &str = \"NaN\";\nconst INFINITY: &str = \"inf\";\nconst NEG_INFINITY: &str = \"-inf\";\npub trait Sealed: Copy {\n    fn is_nonfinite(self) -> bool;\n    fn format_nonfinite(self) -> &'static str;\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize;\n}\nimpl Sealed for f64 {\n    #[inline]\n    fn is_nonfinite(self) -> bool {}\n    #[cold]\n    #[cfg_attr(feature = \"no-panic\", inline)]\n    fn format_nonfinite(self) -> &'static str {}\n    #[inline]\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {\n        raw::format64(self, result)\n    }\n}\n#[must_use]\n#[cfg_attr(feature = \"no-panic\", no_panic)]\npub unsafe fn format32(f: f32, result: *mut u8) -> usize {\n    let bits = f.to_bits();\n    let sign = ((bits >> (FLOAT_MANTISSA_BITS + FLOAT_EXPONENT_BITS)) & 1) != 0;\n    let ieee_mantissa = bits & ((1u32 << FLOAT_MANTISSA_BITS) - 1);\n    let ieee_exponent = (bits >> FLOAT_MANTISSA_BITS)\n        & ((1u32 << FLOAT_EXPONENT_BITS) - 1);\n    let mut index = 0isize;\n    if sign {\n        *result = b'-';\n        index += 1;\n    }\n    if ieee_exponent == 0 && ieee_mantissa == 0 {\n        ptr::copy_nonoverlapping(b\"0.0\".as_ptr(), result.offset(index), 3);\n        return sign as usize + 3;\n    }\n    let v = f2d(ieee_mantissa, ieee_exponent);\n    let length = common::decimal_length9(v.mantissa) as isize;\n    let k = v.exponent as isize;\n    let kk = length + k;\n    debug_assert!(k >= - 45);\n    if 0 <= k && kk <= 13 {\n        write_mantissa(v.mantissa, result.offset(index + length));\n        for i in length..kk {\n            *result.offset(index + i) = b'0';\n        }\n        *result.offset(index + kk) = b'.';\n        *result.offset(index + kk + 1) = b'0';\n        index as usize + kk as usize + 2\n    } else if 0 < kk && kk <= 13 {\n        write_mantissa(v.mantissa, result.offset(index + length + 1));\n        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);\n        *result.offset(index + kk) = b'.';\n        index as usize + length as usize + 1\n    } else if -6 < kk && kk <= 0 {\n        *result.offset(index) = b'0';\n        *result.offset(index + 1) = b'.';\n        let offset = 2 - kk;\n        for i in 2..offset {\n            *result.offset(index + i) = b'0';\n        }\n        write_mantissa(v.mantissa, result.offset(index + length + offset));\n        index as usize + length as usize + offset as usize\n    } else if length == 1 {\n        *result.offset(index) = b'0' + v.mantissa as u8;\n        *result.offset(index + 1) = b'e';\n        index as usize + 2 + write_exponent2(kk - 1, result.offset(index + 2))\n    } else {\n        write_mantissa(v.mantissa, result.offset(index + length + 1));\n        *result.offset(index) = *result.offset(index + 1);\n        *result.offset(index + 1) = b'.';\n        *result.offset(index + length + 1) = b'e';\n        index as usize + length as usize + 2\n            + write_exponent2(kk - 1, result.offset(index + length + 2))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n139 unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {\n140     raw::format32(self, result)\n141 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}