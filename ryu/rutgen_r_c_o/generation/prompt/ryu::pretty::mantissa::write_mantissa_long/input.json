{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/pretty/mantissa.rs\n// crate name is ryu\nuse crate::digit_table::DIGIT_TABLE;\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {\n    if (output >> 32) != 0 {\n        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;\n        output /= 100_000_000;\n        let c = output2 % 10_000;\n        output2 /= 10_000;\n        let d = output2 % 10_000;\n        let c0 = (c % 100) << 1;\n        let c1 = (c / 100) << 1;\n        let d0 = (d % 100) << 1;\n        let d1 = (d / 100) << 1;\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c0 as isize),\n            result.offset(-2),\n            2,\n        );\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c1 as isize),\n            result.offset(-4),\n            2,\n        );\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(d0 as isize),\n            result.offset(-6),\n            2,\n        );\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(d1 as isize),\n            result.offset(-8),\n            2,\n        );\n        result = result.offset(-8);\n    }\n    write_mantissa(output as u32, result);\n}\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {\n    while output >= 10_000 {\n        let c = output - 10_000 * (output / 10_000);\n        output /= 10_000;\n        let c0 = (c % 100) << 1;\n        let c1 = (c / 100) << 1;\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c0 as isize),\n            result.offset(-2),\n            2,\n        );\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c1 as isize),\n            result.offset(-4),\n            2,\n        );\n        result = result.offset(-4);\n    }\n    if output >= 100 {\n        let c = (output % 100) << 1;\n        output /= 100;\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c as isize),\n            result.offset(-2),\n            2,\n        );\n        result = result.offset(-2);\n    }\n    if output >= 10 {\n        let c = output << 1;\n        ptr::copy_nonoverlapping(\n            DIGIT_TABLE.as_ptr().offset(c as isize),\n            result.offset(-2),\n            2,\n        );\n    } else {\n        *result.offset(-1) = b'0' + output as u8;\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 5 pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {\n 6     if (output >> 32) != 0 {\n 7         // One expensive 64-bit division.\n 8         let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;\n 9         output /= 100_000_000;\n10 \n11         let c = output2 % 10_000;\n12         output2 /= 10_000;\n13         let d = output2 % 10_000;\n14         let c0 = (c % 100) << 1;\n15         let c1 = (c / 100) << 1;\n16         let d0 = (d % 100) << 1;\n17         let d1 = (d / 100) << 1;\n18         ptr::copy_nonoverlapping(\n19             DIGIT_TABLE.as_ptr().offset(c0 as isize),\n20             result.offset(-2),\n21             2,\n22         );\n23         ptr::copy_nonoverlapping(\n24             DIGIT_TABLE.as_ptr().offset(c1 as isize),\n25             result.offset(-4),\n26             2,\n27         );\n28         ptr::copy_nonoverlapping(\n29             DIGIT_TABLE.as_ptr().offset(d0 as isize),\n30             result.offset(-6),\n31             2,\n32         );\n33         ptr::copy_nonoverlapping(\n34             DIGIT_TABLE.as_ptr().offset(d1 as isize),\n35             result.offset(-8),\n36             2,\n37         );\n38         result = result.offset(-8);\n39     }\n40     write_mantissa(output as u32, result);\n41 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}