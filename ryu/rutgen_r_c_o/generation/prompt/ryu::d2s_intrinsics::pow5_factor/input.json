{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/d2s_intrinsics.rs\n// crate name is ryu\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub(crate) fn pow5_factor(mut value: u64) -> u32 {\n    const M_INV_5: u64 = 14757395258967641293;\n    const N_DIV_5: u64 = 3689348814741910323;\n    let mut count = 0u32;\n    loop {\n        debug_assert!(value != 0);\n        value = value.wrapping_mul(M_INV_5);\n        if value > N_DIV_5 {\n            break;\n        }\n        count += 1;\n    }\n    count\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n39 pub(crate) fn pow5_factor(mut value: u64) -> u32 {\n40     const M_INV_5: u64 = 14757395258967641293; // 5 * m_inv_5 = 1 (mod 2^64)\n41     const N_DIV_5: u64 = 3689348814741910323; // #{ n | n = 0 (mod 2^64) } = 2^64 / 5\n42     let mut count = 0u32;\n43     loop {\n44         debug_assert!(value != 0);\n45         value = value.wrapping_mul(M_INV_5);\n46         if value > N_DIV_5 {\n47             break;\n48         }\n49         count += 1;\n50     }\n51     count\n52 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}