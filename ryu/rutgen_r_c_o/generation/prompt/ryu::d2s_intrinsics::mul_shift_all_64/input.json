{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/d2s_intrinsics.rs\n// crate name is ryu\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn mul_shift_all_64(\n    m: u64,\n    mul: &(u64, u64),\n    j: u32,\n    vp: *mut u64,\n    vm: *mut u64,\n    mm_shift: u32,\n) -> u64 {\n    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));\n    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));\n    mul_shift_64(4 * m, mul, j)\n}\n#[cfg_attr(feature = \"no-panic\", inline)]\npub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {\n    let b0 = m as u128 * mul.0 as u128;\n    let b2 = m as u128 * mul.1 as u128;\n    (((b0 >> 64) + b2) >> (j - 64)) as u64\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n78 pub unsafe fn mul_shift_all_64(\n79     m: u64,\n80     mul: &(u64, u64),\n81     j: u32,\n82     vp: *mut u64,\n83     vm: *mut u64,\n84     mm_shift: u32,\n85 ) -> u64 {\n86     ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));\n87     ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));\n88     mul_shift_64(4 * m, mul, j)\n89 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}