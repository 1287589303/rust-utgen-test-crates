{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buffer/mod.rs\n// crate name is ryu\nuse crate::raw;\nuse core::mem::MaybeUninit;\nuse core::{slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst NAN: &str = \"NaN\";\nconst INFINITY: &str = \"inf\";\nconst NEG_INFINITY: &str = \"-inf\";\npub trait Sealed: Copy {\n    fn is_nonfinite(self) -> bool;\n    fn format_nonfinite(self) -> &'static str;\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize;\n}\npub struct Buffer {\n    bytes: [MaybeUninit<u8>; 24],\n}\nimpl Buffer {\n    #[inline]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn new() -> Self {\n        let bytes = [MaybeUninit::<u8>::uninit(); 24];\n        Buffer { bytes }\n    }\n    #[cfg_attr(feature = \"no-panic\", inline)]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn format<F: Float>(&mut self, f: F) -> &str {}\n    #[inline]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {\n        unsafe {\n            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);\n            debug_assert!(n <= self.bytes.len());\n            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);\n            str::from_utf8_unchecked(slice)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print a floating point number into this buffer and return a reference to\n/// its string representation within the buffer.\n///\n/// # Special cases\n///\n/// This function **does not** check for NaN or infinity. If the input\n/// number is not a finite float, the printed representation will be some\n/// correctly formatted but unspecified numerical value.\n///\n/// Please check [`is_finite`] yourself before calling this function, or\n/// check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n///\n/// [`is_finite`]: f64::is_finite\n/// [`is_nan`]: f64::is_nan\n/// [`is_infinite`]: f64::is_infinite\n72 pub fn format_finite<F: Float>(&mut self, f: F) -> &str {\n73     unsafe {\n74         let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);\n75         debug_assert!(n <= self.bytes.len());\n76         let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);\n77         str::from_utf8_unchecked(slice)\n78     }\n79 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}