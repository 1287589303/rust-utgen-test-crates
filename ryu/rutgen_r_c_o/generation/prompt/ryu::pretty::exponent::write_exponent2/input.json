{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/pretty/exponent.rs\n// crate name is ryu\nuse crate::digit_table::DIGIT_TABLE;\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn write_exponent2(mut k: isize, mut result: *mut u8) -> usize {\n    let sign = k < 0;\n    if sign {\n        *result = b'-';\n        result = result.offset(1);\n        k = -k;\n    }\n    debug_assert!(k < 100);\n    if k >= 10 {\n        let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n        ptr::copy_nonoverlapping(d, result, 2);\n        sign as usize + 2\n    } else {\n        *result = b'0' + k as u8;\n        sign as usize + 1\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n31 pub unsafe fn write_exponent2(mut k: isize, mut result: *mut u8) -> usize {\n32     let sign = k < 0;\n33     if sign {\n34         *result = b'-';\n35         result = result.offset(1);\n36         k = -k;\n37     }\n38 \n39     debug_assert!(k < 100);\n40     if k >= 10 {\n41         let d = DIGIT_TABLE.as_ptr().offset(k * 2);\n42         ptr::copy_nonoverlapping(d, result, 2);\n43         sign as usize + 2\n44     } else {\n45         *result = b'0' + k as u8;\n46         sign as usize + 1\n47     }\n48 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}