{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buffer/mod.rs\n// crate name is ryu\nuse crate::raw;\nuse core::mem::MaybeUninit;\nuse core::{slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst NAN: &str = \"NaN\";\nconst INFINITY: &str = \"inf\";\nconst NEG_INFINITY: &str = \"-inf\";\npub trait Sealed: Copy {\n    fn is_nonfinite(self) -> bool;\n    fn format_nonfinite(self) -> &'static str;\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize;\n}\nimpl Sealed for f64 {\n    #[inline]\n    fn is_nonfinite(self) -> bool {\n        const EXP_MASK: u64 = 0x7ff0000000000000;\n        let bits = self.to_bits();\n        bits & EXP_MASK == EXP_MASK\n    }\n    #[cold]\n    #[cfg_attr(feature = \"no-panic\", inline)]\n    fn format_nonfinite(self) -> &'static str {}\n    #[inline]\n    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n117 fn is_nonfinite(self) -> bool {\n118     const EXP_MASK: u32 = 0x7f800000;\n119     let bits = self.to_bits();\n120     bits & EXP_MASK == EXP_MASK\n121 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}