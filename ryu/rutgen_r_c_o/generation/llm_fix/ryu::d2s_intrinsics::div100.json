{
  "name": "ryu::d2s_intrinsics::div100",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:34:1:36:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: x / 100\n"
      ],
      "input_infer": "x input conditions: 0 to u64::MAX, covering values such as 0, 1, 99, 100, 101, 199, 200, 999, 1000, u64::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10001), 100);",
                "    assert_eq!(div100(12345), 123);",
                "    assert_eq!(div100(99999), 999);",
                "    assert_eq!(div100(100000), 1000);",
                "    assert_eq!(div100(u64::MAX), u64::MAX / 100);"
              ],
              "code": [
                "{",
                "    let result = div100(0);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10001), 100);",
                "    assert_eq!(div100(12345), 123);",
                "    assert_eq!(div100(99999), 999);",
                "    assert_eq!(div100(100000), 1000);",
                "    assert_eq!(div100(u64::MAX), u64::MAX / 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    result = div100(100);",
                "    assert_eq!(result, 1);",
                "    result = div100(250);",
                "    assert_eq!(result, 2);",
                "    result = div100(99);",
                "    assert_eq!(result, 0);",
                "    result = div100(10000);",
                "    assert_eq!(result, 100);",
                "    result = div100(10000);",
                "    assert_eq!(result, 100);"
              ],
              "code": [
                "{",
                "   let mut result = div100(1);  ",
                "   assert_eq!(result, 0);  ",
                "   result = div100(100);  ",
                "   assert_eq!(result, 1);  ",
                "   result = div100(250);  ",
                "   assert_eq!(result, 2);  ",
                "   result = div100(99);  ",
                "   assert_eq!(result, 0);  ",
                "   result = div100(10000);  ",
                "   assert_eq!(result, 100);  ",
                "   result = div100(10000);  ",
                "   assert_eq!(result, 100);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(99);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(101), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(300), 3);",
                "    assert_eq!(div100(0), 0);"
              ],
              "code": [
                "{",
                "    let result = div100(99);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(101), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(300), 3);",
                "    assert_eq!(div100(0), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(99), 0);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(500), 5);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10000_0000), 100000);"
              ],
              "code": [
                "{",
                "    let result = div100(100);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(99), 0);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(500), 5);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10000_0000), 100000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(101);",
                "}"
              ],
              "oracle": [
                "    let result = div100(101); assert_eq!(result, 1);",
                "    let result = div100(100); assert_eq!(result, 1);",
                "    let result = div100(99); assert_eq!(result, 0);",
                "    let result = div100(200); assert_eq!(result, 2);",
                "    let result = div100(250); assert_eq!(result, 2);",
                "    let result = div100(0); assert_eq!(result, 0);",
                "    let result = div100(u64::MAX); assert_eq!(result, (u64::MAX / 100));"
              ],
              "code": [
                "{",
                "    let result = div100(101);",
                "    let result = div100(101); assert_eq!(result, 1);",
                "    let result = div100(100); assert_eq!(result, 1);",
                "    let result = div100(99); assert_eq!(result, 0);",
                "    let result = div100(200); assert_eq!(result, 2);",
                "    let result = div100(250); assert_eq!(result, 2);",
                "    let result = div100(0); assert_eq!(result, 0);",
                "    let result = div100(u64::MAX); assert_eq!(result, (u64::MAX / 100));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(199);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let result = div100(199);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(200);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(99), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10001), 100);",
                "    assert_eq!(div100(u64::MAX), u64::MAX / 100);"
              ],
              "code": [
                "{",
                "    let result = div100(200);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(99), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(10001), 100);",
                "    assert_eq!(div100(u64::MAX), u64::MAX / 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(999);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 9);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(101), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(500), 5);",
                "    assert_eq!(div100(1000), 10);",
                "    assert_eq!(div100(9999), 99);"
              ],
              "code": [
                "{",
                "    let result = div100(999);",
                "    assert_eq!(result, 9);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(101), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(250), 2);",
                "    assert_eq!(div100(500), 5);",
                "    assert_eq!(div100(1000), 10);",
                "    assert_eq!(div100(9999), 99);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(1000);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 10);"
              ],
              "code": [
                "{",
                "    let result = div100(1000);",
                "    assert_eq!(result, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = div100(u64::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, u64::MAX / 100);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(300), 3);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(12345), 123);",
                "    assert_eq!(div100(10000 * 100), 10000);",
                "    assert_eq!(div100(50), 0);"
              ],
              "code": [
                "{",
                "    let result = div100(u64::MAX);",
                "    assert_eq!(result, u64::MAX / 100);",
                "    assert_eq!(div100(0), 0);",
                "    assert_eq!(div100(100), 1);",
                "    assert_eq!(div100(200), 2);",
                "    assert_eq!(div100(300), 3);",
                "    assert_eq!(div100(999), 9);",
                "    assert_eq!(div100(10000), 100);",
                "    assert_eq!(div100(12345), 123);",
                "    assert_eq!(div100(10000 * 100), 10000);",
                "    assert_eq!(div100(50), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}