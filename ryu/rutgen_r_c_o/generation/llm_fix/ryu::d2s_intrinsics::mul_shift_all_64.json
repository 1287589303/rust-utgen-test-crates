{
  "name": "ryu::d2s_intrinsics::mul_shift_all_64",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:78:1:89:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "m: 0 to 2^64-1, mul: (0 to 2^64-1, 0 to 2^64-1), j: 64 to 128, vp: valid mutable pointer, vm: valid mutable pointer, mm_shift: 0 to 63\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    let expected_vp = mul_shift_64(2, &mul, j);",
                "    let expected_vm = mul_shift_64(1 - mm_shift as u64, &mul, j);",
                "    assert_eq!(vp, expected_vp);",
                "    assert_eq!(vm, expected_vm);",
                "    let expected_result = mul_shift_64(0, &mul, j);",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    let expected_vp = mul_shift_64(2, &mul, j);",
                "    let expected_vm = mul_shift_64(1 - mm_shift as u64, &mul, j);",
                "    assert_eq!(vp, expected_vp);",
                "    assert_eq!(vm, expected_vm);",
                "    let expected_result = mul_shift_64(0, &mul, j);",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 128;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 63;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vp, mul_shift_64(4 * u64::MAX + 2, &(u64::MAX, u64::MAX), 128));",
                "    assert_eq!(vm, mul_shift_64(4 * u64::MAX - 1 - 63 as u64, &(u64::MAX, u64::MAX), 128));",
                "    assert_eq!(result, mul_shift_64(4 * u64::MAX, &(u64::MAX, u64::MAX), 128));"
              ],
              "code": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 128;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 63;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "    assert_eq!(vp, mul_shift_64(4 * u64::MAX + 2, &(u64::MAX, u64::MAX), 128));",
                "    assert_eq!(vm, mul_shift_64(4 * u64::MAX - 1 - 63 as u64, &(u64::MAX, u64::MAX), 128));",
                "    assert_eq!(result, mul_shift_64(4 * u64::MAX, &(u64::MAX, u64::MAX), 128));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "    let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    assert_eq!(vp, mul_shift_64(4 * m + 2, &mul, j));",
                "    assert_eq!(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j));",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));",
                "    }"
              ],
              "code": [
                "{",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 0;",
                "    unsafe {",
                "    let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    assert_eq!(vp, mul_shift_64(4 * m + 2, &mul, j));",
                "    assert_eq!(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j));",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 2;",
                "    let mul: (u64, u64) = (2, 2);",
                "    let j: u32 = 128;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 32;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vp, mul_shift_64(4 * m + 2, &mul, j));",
                "    assert_eq!(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j));",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));"
              ],
              "code": [
                "{",
                "    let m: u64 = 2;",
                "    let mul: (u64, u64) = (2, 2);",
                "    let j: u32 = 128;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 32;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "    assert_eq!(vp, mul_shift_64(4 * m + 2, &mul, j));",
                "    assert_eq!(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j));",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 123456789;",
                "    let mul: (u64, u64) = (987654321, 123456789);",
                "    let j: u32 = 100;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 15;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let m: u64 = 123456789;",
                "    let mul: (u64, u64) = (987654321, 123456789);",
                "    let j: u32 = 100;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 15;",
                "    let expected_vp = mul_shift_64(4 * m + 2, &mul, j);",
                "    let expected_vm = mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j);",
                "    unsafe {",
                "    let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    assert_eq!(vp, expected_vp);",
                "    assert_eq!(vm, expected_vm);",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));",
                "    }"
              ],
              "code": [
                "{",
                "    let m: u64 = 123456789;",
                "    let mul: (u64, u64) = (987654321, 123456789);",
                "    let j: u32 = 100;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 15;",
                "    unsafe {",
                "        let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    }",
                "    let m: u64 = 123456789;",
                "    let mul: (u64, u64) = (987654321, 123456789);",
                "    let j: u32 = 100;",
                "    let mut vp: u64 = 0;",
                "    let mut vm: u64 = 0;",
                "    let mm_shift: u32 = 15;",
                "    let expected_vp = mul_shift_64(4 * m + 2, &mul, j);",
                "    let expected_vm = mul_shift_64(4 * m - 1 - mm_shift as u64, &mul, j);",
                "    unsafe {",
                "    let result = mul_shift_all_64(m, &mul, j, &mut vp as *mut u64, &mut vm as *mut u64, mm_shift);",
                "    assert_eq!(vp, expected_vp);",
                "    assert_eq!(vm, expected_vm);",
                "    assert_eq!(result, mul_shift_64(4 * m, &mul, j));",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}