{
  "name": "ryu::d2s_intrinsics::mul_shift_64",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:71:1:75:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (((b0 >> 64) + b2) >> (j - 64)) as u64\n"
      ],
      "input_infer": "m: 0 to 2^64-1, mul: (0, 0) to (2^64-1, 2^64-1), j: 64 to 128\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "    ",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "    ",
                "    let m: u64 = 2;",
                "    let mul: (u64, u64) = (2, 3);",
                "    let j: u32 = 65;",
                "    assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "    ",
                "    let m: u64 = 3;",
                "    let mul: (u64, u64) = (4, 5);",
                "    let j: u32 = 66;",
                "    assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "    ",
                "    let m: u64 = std::u64::MAX;",
                "    let mul: (u64, u64) = (std::u64::MAX, std::u64::MAX);",
                "    let j: u32 = 128;",
                "    assert_eq!(mul_shift_64(m, &mul, j), std::u64::MAX);"
              ],
              "code": [
                "{",
                "   let m: u64 = 0;",
                "   let mul: (u64, u64) = (0, 0);",
                "   let j: u32 = 64;",
                "   let _ = mul_shift_64(m, &mul, j);",
                "   assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "   ",
                "   let m: u64 = 1;",
                "   let mul: (u64, u64) = (1, 1);",
                "   let j: u32 = 64;",
                "   assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "   ",
                "   let m: u64 = 2;",
                "   let mul: (u64, u64) = (2, 3);",
                "   let j: u32 = 65;",
                "   assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "   ",
                "   let m: u64 = 3;",
                "   let mul: (u64, u64) = (4, 5);",
                "   let j: u32 = 66;",
                "   assert_eq!(mul_shift_64(m, &mul, j), 0);",
                "   ",
                "   let m: u64 = u64::MAX;",
                "   let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "   let j: u32 = 128;",
                "   assert_eq!(mul_shift_64(m, &mul, j), u64::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 65), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 66), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(2, 3), 64), 0);"
              ],
              "code": [
                "{",
                "    let m: u64 = 1;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 65), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 66), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(2, 3), 64), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 64), 1);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 65), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 65), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 63), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 63), 1);"
              ],
              "code": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(u64::MAX, u64::MAX), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 64), 1);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 65), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 65), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 63), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 63), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(0, &(u64::MAX, u64::MAX), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(3, 5), 70), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), 1);",
                "    assert_eq!(mul_shift_64(2, &(u64::MAX, u64::MAX), 128), 3);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(10, &(2, 3), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 0), 64), 0);"
              ],
              "code": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (u64::MAX, u64::MAX);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(0, &(u64::MAX, u64::MAX), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(3, 5), 70), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), 1);",
                "    assert_eq!(mul_shift_64(2, &(u64::MAX, u64::MAX), 128), 3);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(10, &(2, 3), 64), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 0), 64), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 12345;",
                "    let mul: (u64, u64) = (67890, 13579);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(12345, &(67890, 13579), 64), expected_value);"
              ],
              "code": [
                "{",
                "   let m: u64 = 12345;  ",
                "   let mul: (u64, u64) = (67890, 13579);  ",
                "   let j: u32 = 64;  ",
                "   let expected_value = mul_shift_64(m, &mul, j);  ",
                "   assert_eq!(mul_shift_64(12345, &(67890, 13579), 64), expected_value);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(u64::MAX, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(0, 2), 128), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 64), u64::MAX);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 0), 128), u64::MAX >> (128 - 64));"
              ],
              "code": [
                "{",
                "    let m: u64 = u64::MAX;",
                "    let mul: (u64, u64) = (0, 0);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(0, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(2, &(2, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(2, &(0, 2), 128), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 64), u64::MAX);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 0), 128), u64::MAX >> (128 - 64));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = u64::MAX - 1;",
                "    let mul: (u64, u64) = (1, 0);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(u64::MAX - 1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 1);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(u64::MAX, 0), 128), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), u64::MAX);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 66), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(u64::MAX, u64::MAX), 64), 0);"
              ],
              "code": [
                "{",
                "    let m: u64 = u64::MAX - 1;",
                "    let mul: (u64, u64) = (1, 0);",
                "    let j: u32 = 64;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(u64::MAX - 1, &(1, 0), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 64), 1);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 64), 0);",
                "    assert_eq!(mul_shift_64(1, &(u64::MAX, 0), 128), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), u64::MAX);",
                "    assert_eq!(mul_shift_64(2, &(2, 2), 66), 1);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(u64::MAX, u64::MAX), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(u64::MAX, u64::MAX), 64), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_64(0, &(1, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 128), 1);",
                "    assert_eq!(mul_shift_64(1, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(10, &(2, 3), 128), 25);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 32), 0);",
                "    assert_eq!(mul_shift_64(5, &(1, 1), 64), 5);",
                "    assert_eq!(mul_shift_64(15, &(3, 3), 128), 45);",
                "    assert_eq!(mul_shift_64(10, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), 1);"
              ],
              "code": [
                "{",
                "    let m: u64 = 0;",
                "    let mul: (u64, u64) = (1, 1);",
                "    let j: u32 = 128;",
                "    let _ = mul_shift_64(m, &mul, j);",
                "    assert_eq!(mul_shift_64(0, &(1, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(1, &(1, 1), 128), 1);",
                "    assert_eq!(mul_shift_64(1, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(10, &(2, 3), 128), 25);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(2, 2), 64), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 0), 32), 0);",
                "    assert_eq!(mul_shift_64(5, &(1, 1), 64), 5);",
                "    assert_eq!(mul_shift_64(15, &(3, 3), 128), 45);",
                "    assert_eq!(mul_shift_64(10, &(0, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(1, 0), 128), 0);",
                "    assert_eq!(mul_shift_64(0, &(0, 1), 128), 0);",
                "    assert_eq!(mul_shift_64(u64::MAX, &(1, 1), 128), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}