{
  "name": "ryu::common::log10_pow2",
  "mod_info": {
    "name": "common",
    "loc": "src/lib.rs:107:1:107:12"
  },
  "visible": true,
  "loc": "src/common.rs:81:1:86:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: e >= 0 at line 83 is true, with bound e == 0\n",
        "precondition: e <= 1650 at line 84 is true, with bound e == 1650\n",
        "expected return value/type: (e as u32 * 78913) >> 18\n"
      ],
      "input_infer": "e: 0 to 1650 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow2(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    ",
                "    let e: i32 = 1650;",
                "    let result = log10_pow2(e);",
                "    assert_eq!(result, 18749);"
              ],
              "code": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow2(e);",
                "    assert_eq!(result, 0);",
                "    ",
                "    let e: i32 = 1650;",
                "    let result = log10_pow2(e);",
                "    assert_eq!(result, 18749);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 1650;",
                "    let result = log10_pow2(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1650 as u32 * 78913) >> 18);"
              ],
              "code": [
                "{",
                "    let e: i32 = 1650;",
                "    let result = log10_pow2(e);",
                "    assert_eq!(result, (1650 as u32 * 78913) >> 18);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: e >= 0 at line 83 is true, with bound e == 0\n",
        "precondition: e <= 1650 at line 84 is false\n"
      ],
      "input_infer": "e = 0, e = 1650, e = 1, e = 1651, e = -1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow2(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let result = log10_pow2(0);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow2(1650);",
                "}"
              ],
              "oracle": [
                "    assert!(result == 81873);",
                "    assert!(result > 0);",
                "    assert!(result <= 81873);"
              ],
              "code": [
                "{",
                "    let result = log10_pow2(1650);",
                "    assert!(result == 81873);",
                "    assert!(result > 0);",
                "    assert!(result <= 81873);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log10_pow2(1651);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);  // Check that panic occurs when e is out of bounds"
              ],
              "code": [
                "{",
                "    let result = log10_pow2(1651);",
                "    assert_eq!(result, 0);  // Check that panic occurs when e is out of bounds",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log10_pow2(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow2(0), 0);",
                "    assert!(std::panic::catch_unwind(|| log10_pow2(1651)).is_err());",
                "    assert_eq!(log10_pow2(1), 4);",
                "    assert_eq!(log10_pow2(1650), 74838);",
                "    assert!(std::panic::catch_unwind(|| log10_pow2(-1)).is_err());"
              ],
              "code": [
                "{",
                "    let result = log10_pow2(-1);",
                "    assert_eq!(log10_pow2(0), 0);",
                "    assert!(std::panic::catch_unwind(|| log10_pow2(1651)).is_err());",
                "    assert_eq!(log10_pow2(1), 4);",
                "    assert_eq!(log10_pow2(1650), 74838);",
                "    assert!(std::panic::catch_unwind(|| log10_pow2(-1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow2(1);",
                "}"
              ],
              "oracle": [
                "    debug_assert!(log10_pow2(0) == 0);",
                "    debug_assert!(log10_pow2(1651) == log10_pow2(1650));"
              ],
              "code": [
                "{",
                "    let result = log10_pow2(1);",
                "    debug_assert!(log10_pow2(0) == 0);",
                "    debug_assert!(log10_pow2(1651) == log10_pow2(1650));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: e >= 0 at line 83 is false\n"
      ],
      "input_infer": "e < 0, e == 0, e == 1651, and e within the range 0 to 1650 inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let e: i32 = -1;",
                "    let result = log10_pow2(e);",
                "}"
              ],
              "oracle": [
                "    debug_assert!(e >= 0); // Check precondition for e at line 83",
                "    #[should_panic] // Ensure function panics for invalid input",
                "    let e: i32 = -1; // Input value violating precondition",
                "    let result = log10_pow2(e); // Call function to validate panic behavior"
              ],
              "code": [
                "{",
                "    let e: i32 = -1;",
                "    let result = log10_pow2(e);",
                "    debug_assert!(e >= 0); // Check precondition for e at line 83",
                "    #[should_panic] // Ensure function panics for invalid input",
                "    let e: i32 = -1; // Input value violating precondition",
                "    let result = log10_pow2(e); // Call function to validate panic behavior",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow2(e); // expected to return 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow2(0), 0);",
                "    assert_eq!(log10_pow2(1650), 78716);",
                "    assert_eq!(log10_pow2(1000), 44256);",
                "    assert_eq!(log10_pow2(1), 4);",
                "    assert_eq!(log10_pow2(1651), panic!(\"e should be less than or equal to 1650\"));",
                "    assert_eq!(log10_pow2(-1), panic!(\"e should be greater than or equal to 0\"));"
              ],
              "code": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow2(e); // expected to return 0",
                "    assert_eq!(log10_pow2(0), 0);",
                "    assert_eq!(log10_pow2(1650), 78716);",
                "    assert_eq!(log10_pow2(1000), 44256);",
                "    assert_eq!(log10_pow2(1), 4);",
                "    assert_eq!(log10_pow2(1651), panic!(\"e should be less than or equal to 1650\"));",
                "    assert_eq!(log10_pow2(-1), panic!(\"e should be greater than or equal to 0\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 1651;",
                "    let result = log10_pow2(e); // expected to panic due to debug assertion",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| log10_pow2(1651)).is_err());"
              ],
              "code": [
                "{",
                "    let e: i32 = 1651;",
                "    let result = log10_pow2(e); // expected to panic due to debug assertion",
                "    assert!(std::panic::catch_unwind(|| log10_pow2(1651)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 1650;",
                "    let result = log10_pow2(e); // valid input within the range",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow2(0), 0); // test minimum edge case",
                "    assert_eq!(log10_pow2(1), 4); // test small valid input",
                "    assert_eq!(log10_pow2(2), 8); // test another small valid input",
                "    assert_eq!(log10_pow2(1650), 100000); // test maximum valid input",
                "    assert_panics!(log10_pow2(-1)); // test invalid input below range",
                "    assert_panics!(log10_pow2(-50)); // test invalid input below range"
              ],
              "code": [
                "{  ",
                "    let e: i32 = 1650;  ",
                "    let result = log10_pow2(e); // valid input within the range  ",
                "    assert_eq!(log10_pow2(0), 0); // test minimum edge case  ",
                "    assert_eq!(log10_pow2(1), 4); // test small valid input  ",
                "    assert_eq!(log10_pow2(2), 8); // test another small valid input  ",
                "    assert_eq!(log10_pow2(1650), 100000); // test maximum valid input  ",
                "    let result_panics = std::panic::catch_unwind(|| { log10_pow2(-1) });  ",
                "    assert!(result_panics.is_err()); // test invalid input below range  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}