{
  "name": "ryu::d2s_intrinsics::multiple_of_power_of_5",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:56:1:59:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: pow5_factor(value) >= p\n"
      ],
      "input_infer": "value: 0, 1, 5, 10, 25, 50, 100, 1000; p: 0, 1, 2, 3, 4, 5, 6, 10, 20\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(2, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(30, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0xFFFFFFFFFFFFFFFF, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5_u64.pow(10), 8), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 1), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(2, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(30, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0xFFFFFFFFFFFFFFFF, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5_u64.pow(10), 8), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 1), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(2, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(3, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(30, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(40, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(2, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(3, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(30, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(40, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert!(multiple_of_power_of_5(1, 1) == false);",
                "    assert!(multiple_of_power_of_5(5, 1) == true);",
                "    assert!(multiple_of_power_of_5(25, 1) == true);",
                "    assert!(multiple_of_power_of_5(25, 2) == true);",
                "    assert!(multiple_of_power_of_5(5, 2) == false);",
                "    assert!(multiple_of_power_of_5(125, 3) == true);",
                "    assert!(multiple_of_power_of_5(125, 4) == false);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 2) == false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert!(multiple_of_power_of_5(1, 1) == false);",
                "    assert!(multiple_of_power_of_5(5, 1) == true);",
                "    assert!(multiple_of_power_of_5(25, 1) == true);",
                "    assert!(multiple_of_power_of_5(25, 2) == true);",
                "    assert!(multiple_of_power_of_5(5, 2) == false);",
                "    assert!(multiple_of_power_of_5(125, 3) == true);",
                "    assert!(multiple_of_power_of_5(125, 4) == false);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 2) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(250, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(7, 0), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(250, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(7, 0), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(80, 2), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(80, 2), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(5, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 10), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 5;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 10), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(35, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(20, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(35, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 32), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 32), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 5), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 5), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert!(multiple_of_power_of_5(10, 3) == (pow5_factor(10) >= 3));",
                "    assert!(multiple_of_power_of_5(0, 0) == (pow5_factor(0) >= 0));",
                "    assert!(multiple_of_power_of_5(25, 2) == (pow5_factor(25) >= 2));",
                "    assert!(multiple_of_power_of_5(125, 3) == (pow5_factor(125) >= 3));",
                "    assert!(multiple_of_power_of_5(1, 0) == (pow5_factor(1) >= 0));",
                "    assert!(multiple_of_power_of_5(5, 1) == (pow5_factor(5) >= 1));",
                "    assert!(multiple_of_power_of_5(100, 0) == (pow5_factor(100) >= 0));",
                "    assert!(multiple_of_power_of_5(1000, 1) == (pow5_factor(1000) >= 1));",
                "    assert!(multiple_of_power_of_5(0, 3) == (pow5_factor(0) >= 3));",
                "    assert!(multiple_of_power_of_5(3125, 5) == (pow5_factor(3125) >= 5));",
                "    assert!(multiple_of_power_of_5(10000, 4) == (pow5_factor(10000) >= 4));",
                "    assert!(multiple_of_power_of_5(15625, 6) == (pow5_factor(15625) >= 6));",
                "    assert!(multiple_of_power_of_5(7, 0) == (pow5_factor(7) >= 0));"
              ],
              "code": [
                "{",
                "    let value: u64 = 10;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "    assert!(multiple_of_power_of_5(10, 3) == (pow5_factor(10) >= 3));",
                "    assert!(multiple_of_power_of_5(0, 0) == (pow5_factor(0) >= 0));",
                "    assert!(multiple_of_power_of_5(25, 2) == (pow5_factor(25) >= 2));",
                "    assert!(multiple_of_power_of_5(125, 3) == (pow5_factor(125) >= 3));",
                "    assert!(multiple_of_power_of_5(1, 0) == (pow5_factor(1) >= 0));",
                "    assert!(multiple_of_power_of_5(5, 1) == (pow5_factor(5) >= 1));",
                "    assert!(multiple_of_power_of_5(100, 0) == (pow5_factor(100) >= 0));",
                "    assert!(multiple_of_power_of_5(1000, 1) == (pow5_factor(1000) >= 1));",
                "    assert!(multiple_of_power_of_5(0, 3) == (pow5_factor(0) >= 3));",
                "    assert!(multiple_of_power_of_5(3125, 5) == (pow5_factor(3125) >= 5));",
                "    assert!(multiple_of_power_of_5(10000, 4) == (pow5_factor(10000) >= 4));",
                "    assert!(multiple_of_power_of_5(15625, 6) == (pow5_factor(15625) >= 6));",
                "    assert!(multiple_of_power_of_5(7, 0) == (pow5_factor(7) >= 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(25, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(25, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(243, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(40, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(25, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(243, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(40, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert!(multiple_of_power_of_5(25, 2));",
                "    assert!(!multiple_of_power_of_5(25, 3));",
                "    assert!(multiple_of_power_of_5(125, 3));",
                "    assert!(!multiple_of_power_of_5(100, 2));",
                "    assert!(multiple_of_power_of_5(0, 0));",
                "    assert!(!multiple_of_power_of_5(1, 1));",
                "    assert!(multiple_of_power_of_5(3125, 5));",
                "    assert!(!multiple_of_power_of_5(3124, 5));",
                "    assert!(multiple_of_power_of_5(5, 1));",
                "    assert!(!multiple_of_power_of_5(6, 1));"
              ],
              "code": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "    assert!(multiple_of_power_of_5(25, 2));",
                "    assert!(!multiple_of_power_of_5(25, 3));",
                "    assert!(multiple_of_power_of_5(125, 3));",
                "    assert!(!multiple_of_power_of_5(100, 2));",
                "    assert!(multiple_of_power_of_5(0, 0));",
                "    assert!(!multiple_of_power_of_5(1, 1));",
                "    assert!(multiple_of_power_of_5(3125, 5));",
                "    assert!(!multiple_of_power_of_5(3124, 5));",
                "    assert!(multiple_of_power_of_5(5, 1));",
                "    assert!(!multiple_of_power_of_5(6, 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(25, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 2), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 25;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(25, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(1 << 63, 2), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 50;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert!(multiple_of_power_of_5(50, 0) == true);",
                "    assert!(multiple_of_power_of_5(50, 1) == false);",
                "    assert!(multiple_of_power_of_5(125, 1) == true);",
                "    assert!(multiple_of_power_of_5(125, 2) == false);",
                "    assert!(multiple_of_power_of_5(625, 2) == true);",
                "    assert!(multiple_of_power_of_5(1000, 3) == false);",
                "    assert!(multiple_of_power_of_5(3125, 3) == true);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == false);",
                "    assert!(multiple_of_power_of_5(1, 0) == true);",
                "    assert!(multiple_of_power_of_5(5, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 1) == false);",
                "    assert!(multiple_of_power_of_5(25, 2) == true);",
                "    assert!(multiple_of_power_of_5(50, 2) == false);",
                "    assert!(multiple_of_power_of_5(100, 0) == true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 50;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert!(multiple_of_power_of_5(50, 0) == true);",
                "    assert!(multiple_of_power_of_5(50, 1) == false);",
                "    assert!(multiple_of_power_of_5(125, 1) == true);",
                "    assert!(multiple_of_power_of_5(125, 2) == false);",
                "    assert!(multiple_of_power_of_5(625, 2) == true);",
                "    assert!(multiple_of_power_of_5(1000, 3) == false);",
                "    assert!(multiple_of_power_of_5(3125, 3) == true);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == false);",
                "    assert!(multiple_of_power_of_5(1, 0) == true);",
                "    assert!(multiple_of_power_of_5(5, 1) == true);",
                "    assert!(multiple_of_power_of_5(10, 1) == false);",
                "    assert!(multiple_of_power_of_5(25, 2) == true);",
                "    assert!(multiple_of_power_of_5(50, 2) == false);",
                "    assert!(multiple_of_power_of_5(100, 0) == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 50;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(50, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 50;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(50, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(50, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 100;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert!(multiple_of_power_of_5(100, 0) == true);",
                "    assert!(multiple_of_power_of_5(100, 1) == false);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == false);",
                "    assert!(multiple_of_power_of_5(25, 1) == true);",
                "    assert!(multiple_of_power_of_5(125, 2) == true);",
                "    assert!(multiple_of_power_of_5(20, 1) == false);",
                "    assert!(multiple_of_power_of_5(3125, 5) == true);",
                "    assert!(multiple_of_power_of_5(3124, 5) == false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 100;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert!(multiple_of_power_of_5(100, 0) == true);",
                "    assert!(multiple_of_power_of_5(100, 1) == false);",
                "    assert!(multiple_of_power_of_5(0, 0) == true);",
                "    assert!(multiple_of_power_of_5(0, 1) == false);",
                "    assert!(multiple_of_power_of_5(25, 1) == true);",
                "    assert!(multiple_of_power_of_5(125, 2) == true);",
                "    assert!(multiple_of_power_of_5(20, 1) == false);",
                "    assert!(multiple_of_power_of_5(3125, 5) == true);",
                "    assert!(multiple_of_power_of_5(3124, 5) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 100;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(100, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(624, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 100;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(100, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(624, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(15, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(600, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(600, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(6, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(78125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(15624, 3), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(16, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(6, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(78125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(15624, 3), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(31, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(124999, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(78125, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(15624, 2), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 2;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(31, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(124999, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(78125, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(15624, 2), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 2), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 4;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 4;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), false);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 5;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 6), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 10), true);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 5;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 6), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(u64::MAX, 10), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 6;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 6), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(244140625, 10), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10000, 7), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 6;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 6), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 1), false);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(244140625, 10), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(100, 3), false);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10000, 7), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 10;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 7), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 8), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 9), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 10), false);",
                "    assert_eq!(multiple_of_power_of_5(1_000_000, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(15625, 6), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 10;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 7), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 8), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 9), true);",
                "    assert_eq!(multiple_of_power_of_5(1000, 10), false);",
                "    assert_eq!(multiple_of_power_of_5(1_000_000, 6), true);",
                "    assert_eq!(multiple_of_power_of_5(1, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(625, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(15625, 6), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 20;",
                "    multiple_of_power_of_5(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_5(1000, 20), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(10000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(6, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1000;",
                "    let p: u32 = 20;",
                "    multiple_of_power_of_5(value, p);",
                "    assert_eq!(multiple_of_power_of_5(1000, 20), false);",
                "    assert_eq!(multiple_of_power_of_5(0, 0), true);",
                "    assert_eq!(multiple_of_power_of_5(125, 3), true);",
                "    assert_eq!(multiple_of_power_of_5(10000, 4), true);",
                "    assert_eq!(multiple_of_power_of_5(10, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(6, 2), false);",
                "    assert_eq!(multiple_of_power_of_5(5, 1), true);",
                "    assert_eq!(multiple_of_power_of_5(25, 2), true);",
                "    assert_eq!(multiple_of_power_of_5(3125, 5), true);",
                "    assert_eq!(multiple_of_power_of_5(3124, 5), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}