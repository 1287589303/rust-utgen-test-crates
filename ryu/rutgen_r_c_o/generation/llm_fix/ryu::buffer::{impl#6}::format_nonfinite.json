{
  "name": "ryu::buffer::{impl#6}::format_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:125:5:136:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 129 is true\n",
        "expected return value/type: NAN\n"
      ],
      "input_infer": "Test input conditions or ranges: input value must be a NaN (Not a Number) representation in f64, such as 0.0 / 0.0, or any variant of NaN like f64::NAN.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::NAN;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NAN);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::NAN;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 0.0 / 0.0; // Alternative way to create NaN",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NAN);"
              ],
              "code": [
                "{",
                "    let value: f64 = 0.0 / 0.0; // Alternative way to create NaN",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::from_bits(0x7FF8000000000000); // Quiet NaN",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NAN);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::from_bits(0x7FF8000000000000); // Quiet NaN",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::from_bits(0x7FF0000000000000); // Signaling NaN",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NAN);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::from_bits(0x7FF0000000000000); // Signaling NaN",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 129 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 131 is true\n",
        "expected return value/type: NEG_INFINITY\n"
      ],
      "input_infer": "Test input conditions: f64 value that is negative infinity (i.e., -1.0/0.0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = -1.0 / 0.0; ",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NEG_INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = -1.0 / 0.0; ",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NEG_INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY; ",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NEG_INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY; ",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NEG_INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 129 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 131 is false\n",
        "expected return value/type: INFINITY\n"
      ],
      "input_infer": "Test input conditions/ranges: f64 values must be positive finite numbers greater than 0 and not NaN or any representation of negative infinity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::INFINITY;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::INFINITY;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 0.1;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"inf\");"
              ],
              "code": [
                "{",
                "    let value: f64 = 0.1;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1e308;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 1e308;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"inf\");"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 12345.6789;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 12345.6789;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1e-10;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"inf\");"
              ],
              "code": [
                "{",
                "    let value: f64 = 1e-10;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::EPSILON;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::EPSILON;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}