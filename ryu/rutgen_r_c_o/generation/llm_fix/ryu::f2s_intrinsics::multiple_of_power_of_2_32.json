{
  "name": "ryu::f2s_intrinsics::multiple_of_power_of_2_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:50:1:53:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (value & ((1u32 << p) - 1)) == 0\n"
      ],
      "input_infer": "value: 0 to 2^32-1, p: 0 to 31\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b11111111_11111111_11111111_11111111;",
                "    let p: u32 = 31;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 31), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b10000000_00000000_00000000_00000000, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b10000000_00000000_00000000_00000000, 30), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b11111111_11111111_11111111_11111111;",
                "    let p: u32 = 31;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 31), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b10000000_00000000_00000000_00000000, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b10000000_00000000_00000000_00000000, 30), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000001;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000100, 2), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000001_11111111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 0), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000001;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000100, 2), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000001_11111111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 0), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000010;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000011, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000100, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000010;",
                "    let p: u32 = 1;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000011, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000100, 2), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 31;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 31), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000001_00000000, 8), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 31;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 31), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000001_00000000, 8), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 15;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 15), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 15), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000001_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 16), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 7), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00000000;",
                "    let p: u32 = 15;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 15), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 15), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000001_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 16), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_11111111, 7), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 32), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00001111;",
                "    let p: u32 = 4;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001000, 3), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111110, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00000000_00001111;",
                "    let p: u32 = 4;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001000, 3), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000010, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111110, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00001111_00000000;",
                "    let p: u32 = 8;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_00000000, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00001111_00000000_00000000, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00001111_00000000_01000000, 8), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00001111_00000000;",
                "    let p: u32 = 8;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_00000000, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00001111_00000000_00000000, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00001111_00000000_01000000, 8), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00001111_11111111;",
                "    let p: u32 = 8;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 16), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b00000000_00000000_00001111_11111111;",
                "    let p: u32 = 8;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_11111111_11111111, 16), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00001111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000001, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 32), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b11111111_11111111_11111111_11111111;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 16), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 16), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000010, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000010, 1), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b11111111_11111111_11111111_11111111;",
                "    let p: u32 = 0;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 8), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 16), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 8), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 16), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001, 1), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000010, 0), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000010, 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0b10101010_10101010_10101010_10101010;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_2_32(value, p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(multiple_of_power_of_2_32(0b10101010_10101010_10101010_10101010, 3), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 3), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001_00000000_00000000_00000000, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11000000_00000000_00000000_00000000, 30), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11110000, 4), false);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0b10101010_10101010_10101010_10101010;",
                "    let p: u32 = 3;",
                "    multiple_of_power_of_2_32(value, p);",
                "    assert_eq!(multiple_of_power_of_2_32(0b10101010_10101010_10101010_10101010, 3), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 3), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11111111, 1), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00001111, 4), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000001_00000000_00000000_00000000, 31), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b00000000_00000000_00000000_00000000, 0), true);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11000000_00000000_00000000_00000000, 30), false);",
                "    assert_eq!(multiple_of_power_of_2_32(0b11111111_11111111_11111111_11110000, 4), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}