{
  "name": "ryu::buffer::{impl#7}::format_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:154:5:165:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is true\n",
        "expected return value/type: NAN\n"
      ],
      "input_infer": "Test input conditions: f64 values where the mantissa is non-zero, such as NaN (e.g., 0.0/0.0, or any f64 representation of NaN).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nan_value: f64 = f64::from_bits(0x7FF8000000000000); // Represents NaN",
                "    assert_eq!(nan_value.format_nonfinite(), NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(f64::from_bits(0x7FF8000000000000).format_nonfinite(), NAN);"
              ],
              "code": [
                "{",
                "    let nan_value: f64 = f64::from_bits(0x7FF8000000000000); // Represents NaN",
                "    assert_eq!(nan_value.format_nonfinite(), NAN);",
                "    assert_eq!(f64::from_bits(0x7FF8000000000000).format_nonfinite(), NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nan_value_alternate: f64 = 0.0 / 0.0; // Another representation of NaN",
                "    assert_eq!(nan_value_alternate.format_nonfinite(), NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0.0 / 0.0.format_nonfinite(), NAN);"
              ],
              "code": [
                "{",
                "    let nan_value_alternate: f64 = 0.0 / 0.0; // Another representation of NaN",
                "    assert_eq!(nan_value_alternate.format_nonfinite(), NAN);",
                "    assert_eq!(0.0 / 0.0.format_nonfinite(), NAN);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nan_small: f64 = f64::from_bits(0x7FF0000000000001); // Smallest denormal NaN",
                "    assert_eq!(nan_small.format_nonfinite(), NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(f64::from_bits(0x7FF0000000000001).format_nonfinite(), NAN);"
              ],
              "code": [
                "{",
                "    let nan_small: f64 = f64::from_bits(0x7FF0000000000001); // Smallest denormal NaN",
                "    assert_eq!(nan_small.format_nonfinite(), NAN);",
                "    assert_eq!(f64::from_bits(0x7FF0000000000001).format_nonfinite(), NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nan_large: f64 = f64::from_bits(0x7FF0000000000002); // Another NaN representation",
                "    assert_eq!(nan_large.format_nonfinite(), NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(f64::from_bits(0x7FF0000000000002).format_nonfinite(), NAN);"
              ],
              "code": [
                "{",
                "    let nan_large: f64 = f64::from_bits(0x7FF0000000000002); // Another NaN representation",
                "    assert_eq!(nan_large.format_nonfinite(), NAN);",
                "    assert_eq!(f64::from_bits(0x7FF0000000000002).format_nonfinite(), NAN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 160 is true\n",
        "expected return value/type: NEG_INFINITY\n"
      ],
      "input_infer": "Test input conditions: f64 value equal to any negative infinity (e.g., f64::NEG_INFINITY)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, NEG_INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NEG_INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = -1.0 / 0.0; // Another way to represent negative infinity",
                "    let result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    let value: f64 = -1.0 / 0.0; // Negative infinity",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NEG_INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = -1.0 / 0.0; // Another way to represent negative infinity",
                "    let result = value.format_nonfinite();",
                "    let value: f64 = -1.0 / 0.0; // Negative infinity",
                "    let result = value.format_nonfinite();",
                "    assert_eq!(result, NEG_INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: bits & MANTISSA_MASK != 0 at line 158 is false\n",
        "precondition: bits & SIGN_MASK != 0 at line 160 is false\n",
        "expected return value/type: INFINITY\n"
      ],
      "input_infer": "Test input conditions or ranges: Provide input values for f64 such that self is a finite positive number greater than zero, e.g., 1.0 to 1.7976931348623157E308 (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0;",
                "    let _result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, \"inf\");"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0;",
                "    let _result = value.format_nonfinite();",
                "    assert_eq!(_result, \"inf\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.7976931348623157E308;",
                "    let _result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.format_nonfinite(), INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.7976931348623157E308;",
                "    let _result = value.format_nonfinite();",
                "    assert_eq!(value.format_nonfinite(), INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0E100;",
                "    let _result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.format_nonfinite(), INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0E100;",
                "    let _result = value.format_nonfinite();",
                "    assert_eq!(value.format_nonfinite(), INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0E-100;",
                "    let _result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.format_nonfinite(), INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0E-100;",
                "    let _result = value.format_nonfinite();",
                "    assert_eq!(value.format_nonfinite(), INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 5.0E-324; // Smallest positive non-zero f64",
                "    let _result = value.format_nonfinite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.format_nonfinite(), INFINITY);"
              ],
              "code": [
                "{",
                "    let value: f64 = 5.0E-324; // Smallest positive non-zero f64",
                "    let _result = value.format_nonfinite();",
                "    assert_eq!(value.format_nonfinite(), INFINITY);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}