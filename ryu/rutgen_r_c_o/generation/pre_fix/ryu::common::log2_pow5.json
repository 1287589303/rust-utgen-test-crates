{
  "name": "ryu::common::log2_pow5",
  "mod_info": {
    "name": "common",
    "loc": "src/lib.rs:107:1:107:12"
  },
  "visible": true,
  "loc": "src/common.rs:53:1:60:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: e >= 0 at line 57 is true, with bound e == 0\n",
        "precondition: e <= 3528 at line 58 is true, with bound e == 3528\n",
        "expected return value/type: ((e as u32 * 1217359) >> 19) as i32\n"
      ],
      "input_infer": "e = 0, e = 1, e = 3528, e = 3529, e = -1, e = 4000\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log2_pow5(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log2_pow5(0), 0);",
                "    let result = log2_pow5(3528);",
                "    assert_eq!(result, ((3528 as u32 * 1217359) >> 19) as i32);"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(0);",
                "    assert_eq!(log2_pow5(0), 0);",
                "    let result = log2_pow5(3528);",
                "    assert_eq!(result, ((3528 as u32 * 1217359) >> 19) as i32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log2_pow5(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), 67108863);",
                "    assert_eq!(log2_pow5(1), 647);",
                "    assert_eq!(log2_pow5(3527), 67108796);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(1);",
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), 67108863);",
                "    assert_eq!(log2_pow5(1), 647);",
                "    assert_eq!(log2_pow5(3527), 67108796);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log2_pow5(3528);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, ((3528 as u32 * 1217359) >> 19) as i32);",
                "    let result_zero = log2_pow5(0);",
                "    assert_eq!(result_zero, ((0 as u32 * 1217359) >> 19) as i32);"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(3528);",
                "    assert_eq!(result, ((3528 as u32 * 1217359) >> 19) as i32);",
                "    let result_zero = log2_pow5(0);",
                "    assert_eq!(result_zero, ((0 as u32 * 1217359) >> 19) as i32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log2_pow5(3529);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), 2097151);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(3529);",
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), 2097151);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log2_pow5(-1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());",
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), ((3528 as u32 * 1217359) >> 19) as i32);"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(-1);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());",
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), ((3528 as u32 * 1217359) >> 19) as i32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log2_pow5(4000);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), ((3528 as u32 * 1217359) >> 19) as i32);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(4000)).is_err());"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(4000);",
                "    assert_eq!(log2_pow5(0), 0);",
                "    assert_eq!(log2_pow5(3528), ((3528 as u32 * 1217359) >> 19) as i32);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(4000)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: e >= 0 at line 57 is true, with bound e == 0\n",
        "precondition: e <= 3528 at line 58 is false\n"
      ],
      "input_infer": "e: 0 to 3528\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log2_pow5(0);",
                "}"
              ],
              "oracle": [
                "    assert!(result == 0);"
              ],
              "code": [
                "{",
                "    let result = log2_pow5(0);",
                "    assert!(result == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log2_pow5(3529); ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log2_pow5(3529), 0);  // Expected behavior: will panic due to failed debug assertions."
              ],
              "code": [
                "{",
                "    let result = log2_pow5(3529); ",
                "    assert_eq!(log2_pow5(3529), 0);  // Expected behavior: will panic due to failed debug assertions.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: e >= 0 at line 57 is false\n"
      ],
      "input_infer": "e: 0 to 3528 inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let e = -1; // This input violates the precondition (e >= 0)",
                "    let result = log2_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());"
              ],
              "code": [
                "{",
                "    let e = -1; // This input violates the precondition (e >= 0)",
                "    let result = log2_pow5(e);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(-1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let e = 3529; // This input violates the precondition (e <= 3528)",
                "    let result = log2_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());"
              ],
              "code": [
                "{",
                "    let e = 3529; // This input violates the precondition (e <= 3528)",
                "    let result = log2_pow5(e);",
                "    assert!(std::panic::catch_unwind(|| log2_pow5(3529)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}