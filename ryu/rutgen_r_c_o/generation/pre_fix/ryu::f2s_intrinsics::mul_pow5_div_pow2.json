{
  "name": "ryu::f2s_intrinsics::mul_pow5_div_pow2",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:101:1:113:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: i < d2s::DOUBLE_POW5_SPLIT.len() as u32 at line 110 is true\n"
      ],
      "input_infer": "m: 0 to 4294967295, i: 0 to d2s::DOUBLE_POW5_SPLIT.len() as u32 - 1, j: greater than 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 0;",
                "    let i: u32 = 0;",
                "    let j: i32 = 33; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_div_pow2(0, 0, 33), expected_value);"
              ],
              "code": [
                "{",
                "    let m: u32 = 0;",
                "    let i: u32 = 0;",
                "    let j: i32 = 33; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    assert_eq!(mul_pow5_div_pow2(0, 0, 33), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295; // Maximum value for u32",
                "    let i: u32 = 0;",
                "    let j: i32 = 34; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_div_pow2(4294967295, 0, 34), expected_value);  // Validate result for maximum u32 input with i=0 and j>32",
                "    assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);  // Ensure precondition for i is satisfied",
                "    assert!(j > 32);  // Check that j is greater than 32 as required"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295; // Maximum value for u32",
                "    let i: u32 = 0;",
                "    let j: i32 = 34; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    assert_eq!(mul_pow5_div_pow2(4294967295, 0, 34), expected_value);  // Validate result for maximum u32 input with i=0 and j>32",
                "    assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);  // Ensure precondition for i is satisfied",
                "    assert!(j > 32);  // Check that j is greater than 32 as required",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 0;",
                "    let i: u32 = 1; // Valid index",
                "    let j: i32 = 35; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_div_pow2(0, 1, 35), expected_value);  // Test with zero multiplier, valid index, and shift greater than 32",
                "    assert!(mul_pow5_div_pow2(1, 1, 35) < u32::MAX);  // Test with non-zero multiplier, valid index, and shift greater than 32",
                "    assert!(mul_pow5_div_pow2(0xFFFFFFFF, 1, 35) < u32::MAX);  // Test with maximum u32 value as multiplier, valid index, and shift greater than 32",
                "    assert_eq!(mul_pow5_div_pow2(0, 0, 35), expected_value_for_zero_index);  // Test with zero multiplier, zero index, and shift greater than 32",
                "    assert_eq!(mul_pow5_div_pow2(2, 1, 35), expected_value_for_different_multiplier);  // Test with a different non-zero multiplier, valid index, and shift greater than 32"
              ],
              "code": [
                "{",
                "    let m: u32 = 0;",
                "    let i: u32 = 1; // Valid index",
                "    let j: i32 = 35; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    assert_eq!(mul_pow5_div_pow2(0, 1, 35), expected_value);  // Test with zero multiplier, valid index, and shift greater than 32",
                "    assert!(mul_pow5_div_pow2(1, 1, 35) < u32::MAX);  // Test with non-zero multiplier, valid index, and shift greater than 32",
                "    assert!(mul_pow5_div_pow2(0xFFFFFFFF, 1, 35) < u32::MAX);  // Test with maximum u32 value as multiplier, valid index, and shift greater than 32",
                "    assert_eq!(mul_pow5_div_pow2(0, 0, 35), expected_value_for_zero_index);  // Test with zero multiplier, zero index, and shift greater than 32",
                "    assert_eq!(mul_pow5_div_pow2(2, 1, 35), expected_value_for_different_multiplier);  // Test with a different non-zero multiplier, valid index, and shift greater than 32",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1234; // Arbitrary non-zero value",
                "    let i: u32 = 2; // Valid index",
                "    let j: i32 = 40; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    assert!(_result < u32::max_value());",
                "    assert!(j > 32);",
                "    assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);",
                "    assert_eq!(mul_pow5_div_pow2(0, i, j), 0);",
                "    assert_eq!(mul_pow5_div_pow2(m, 0, j), mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT[0].1, j));",
                "    assert_eq!(mul_pow5_div_pow2(m, 2, j), mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT[2].1, j));"
              ],
              "code": [
                "{",
                "    let m: u32 = 1234; // Arbitrary non-zero value",
                "    let i: u32 = 2; // Valid index",
                "    let j: i32 = 40; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    assert!(_result < u32::max_value());",
                "    assert!(j > 32);",
                "    assert!(i < d2s::DOUBLE_POW5_SPLIT.len() as u32);",
                "    assert_eq!(mul_pow5_div_pow2(0, i, j), 0);",
                "    assert_eq!(mul_pow5_div_pow2(m, 0, j), mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT[0].1, j));",
                "    assert_eq!(mul_pow5_div_pow2(m, 2, j), mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT[2].1, j));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1000; // Arbitrary non-zero value",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1; // Boundary case",
                "    let j: i32 = 36; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_div_pow2(1000, (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1, 36), expected_value_for_boundary_case);"
              ],
              "code": [
                "{",
                "    let m: u32 = 1000; // Arbitrary non-zero value",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1; // Boundary case",
                "    let j: i32 = 36; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    assert_eq!(mul_pow5_div_pow2(1000, (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1, 36), expected_value_for_boundary_case);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 5000; // Arbitrary non-zero value",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1; // Maximum valid index",
                "    let j: i32 = 50; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "}"
              ],
              "oracle": [
                "    let m: u32 = 5000;",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1;",
                "    let j: i32 = 50;",
                "    let expected: u32 = unsafe { mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT.get_unchecked(i as usize).1, j) };",
                "    assert_eq!(mul_pow5_div_pow2(m, i, j), expected);"
              ],
              "code": [
                "{",
                "    let m: u32 = 5000; // Arbitrary non-zero value",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1; // Maximum valid index",
                "    let j: i32 = 50; // Greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j);",
                "    let m: u32 = 5000;",
                "    let i: u32 = (d2s::DOUBLE_POW5_SPLIT.len() as u32) - 1;",
                "    let j: i32 = 50;",
                "    let expected: u32 = unsafe { mul_shift_32(m, d2s::DOUBLE_POW5_SPLIT.get_unchecked(i as usize).1, j) };",
                "    assert_eq!(mul_pow5_div_pow2(m, i, j), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: i < d2s::DOUBLE_POW5_SPLIT.len() as u32 at line 110 is false, with bound i == d2s::DOUBLE_POW5_SPLIT.len() as u32\n"
      ],
      "input_infer": "m: 0 to 4294967295, i: d2s::DOUBLE_POW5_SPLIT.len() as u32, j: greater than 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = 0; // Testing with minimum value of m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 33; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_pow5_div_pow2(0, d2s::DOUBLE_POW5_SPLIT.len() as u32, 33)).is_err());"
              ],
              "code": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = 0; // Testing with minimum value of m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 33; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "    assert!(std::panic::catch_unwind(|| mul_pow5_div_pow2(0, d2s::DOUBLE_POW5_SPLIT.len() as u32, 33)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = u32::max_value(); // Testing with maximum value of m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 34; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "}"
              ],
              "oracle": [
                "    assert!(panic_propagated); // Check if panic occurs when i == DPP_SPLIT_LEN",
                "    assert_eq!(panic_info, \"index out of bounds\"); // Validate panic message for out of bounds access",
                "    assert_eq!(mul_pow5_div_pow2(u32::max_value(), DPP_SPLIT_LEN as u32, 34), 0); // Ensuring return value is 0 during error handling if applicable",
                "    assert!(mul_pow5_div_pow2(1, DPP_SPLIT_LEN as u32, 34) == 1); // Validate edge case where input m is 1"
              ],
              "code": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = u32::max_value(); // Testing with maximum value of m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 34; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "    assert!(panic_propagated); // Check if panic occurs when i == DPP_SPLIT_LEN",
                "    assert_eq!(panic_info, \"index out of bounds\"); // Validate panic message for out of bounds access",
                "    assert_eq!(mul_pow5_div_pow2(u32::max_value(), DPP_SPLIT_LEN as u32, 34), 0); // Ensuring return value is 0 during error handling if applicable",
                "    assert!(mul_pow5_div_pow2(1, DPP_SPLIT_LEN as u32, 34) == 1); // Validate edge case where input m is 1",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = 1; // Arbitrary non-zero value for m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 35; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_pow5_div_pow2(1, d2s::DOUBLE_POW5_SPLIT.len() as u32, 35)).is_err());"
              ],
              "code": [
                "{",
                "    const DPP_SPLIT_LEN: usize = d2s::DOUBLE_POW5_SPLIT.len(); // Assuming this value is known",
                "    let m: u32 = 1; // Arbitrary non-zero value for m",
                "    let i: u32 = DPP_SPLIT_LEN as u32; // i equals the length, which is invalid",
                "    let j: i32 = 35; // j must be greater than 32",
                "    let _result = mul_pow5_div_pow2(m, i, j); // Calling the function",
                "    assert!(std::panic::catch_unwind(|| mul_pow5_div_pow2(1, d2s::DOUBLE_POW5_SPLIT.len() as u32, 35)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}