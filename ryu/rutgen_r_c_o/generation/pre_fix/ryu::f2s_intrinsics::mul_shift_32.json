{
  "name": "ryu::f2s_intrinsics::mul_shift_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": false,
  "loc": "src/f2s_intrinsics.rs:58:1:72:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is true\n",
        "precondition: shifted_sum <= u32::max_value() as u64 at line 70 is true, with bound shifted_sum == u32::max_value() as u64\n",
        "expected return value/type: shifted_sum as u32\n"
      ],
      "input_infer": "m: 0 to 4294967295 (u32), factor: 0 to 18446744073709551615 (u64), shift: 33 to 63 (i32), including edge case shifted_sum = 4294967295 (u64)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 0;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_32(0, 1, 33), 0);",
                "    assert_eq!(mul_shift_32(u32::max_value(), 1, 33), 0);",
                "    assert_eq!(mul_shift_32(1, 1, 33), 0);",
                "    assert_eq!(mul_shift_32(1, 0xFFFFFFFFFFFFFFFF, 33), 0xFFFFFFFF);",
                "    assert_eq!(mul_shift_32(1, 2, 33), 0);",
                "    assert_eq!(mul_shift_32(0, 0xFFFFFFFFFFFFFFFF, 33), 0);"
              ],
              "code": [
                "{",
                "    let m: u32 = 0;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "    assert_eq!(mul_shift_32(0, 1, 33), 0);",
                "    assert_eq!(mul_shift_32(u32::max_value(), 1, 33), 0);",
                "    assert_eq!(mul_shift_32(1, 1, 33), 0);",
                "    assert_eq!(mul_shift_32(1, 0xFFFFFFFFFFFFFFFF, 33), 0xFFFFFFFF);",
                "    assert_eq!(mul_shift_32(1, 2, 33), 0);",
                "    assert_eq!(mul_shift_32(0, 0xFFFFFFFFFFFFFFFF, 33), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(mul_shift_32(4294967295, 1, 33) <= u32::max_value());",
                "    assert_eq!(mul_shift_32(4294967295, 1, 33), 1);"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "    assert!(mul_shift_32(4294967295, 1, 33) <= u32::max_value());",
                "    assert_eq!(mul_shift_32(4294967295, 1, 33), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    let m: u32 = 1;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 33;",
                "    assert_eq!(mul_shift_32(m, factor, shift), 1);",
                "    assert!(shift > 32);",
                "    assert!(mul_shift_32(m, factor, shift) <= u32::max_value());"
              ],
              "code": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 33;",
                "    mul_shift_32(m, factor, shift);",
                "    let m: u32 = 1;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 33;",
                "    assert_eq!(mul_shift_32(m, factor, shift), 1);",
                "    assert!(shift > 32);",
                "    assert!(mul_shift_32(m, factor, shift) <= u32::max_value());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 2147483647;",
                "    let factor: u64 = 18446744073709551615;",
                "    let shift: i32 = 63;",
                "    mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(mul_shift_32(2147483647, 18446744073709551615, 63) == u32::max_value());",
                "    assert!(mul_shift_32(2147483647, 18446744073709551615, 64) == u32::max_value());",
                "    assert!(mul_shift_32(0, 18446744073709551615, 33) == 0);",
                "    assert!(mul_shift_32(1, 1, 65) == 1);",
                "    assert!(mul_shift_32(1, 4294967295, 66) == 1);",
                "    assert!(mul_shift_32(2147483647, 0, 100) == 0);"
              ],
              "code": [
                "{",
                "    let m: u32 = 2147483647;",
                "    let factor: u64 = 18446744073709551615;",
                "    let shift: i32 = 63;",
                "    mul_shift_32(m, factor, shift);",
                "    assert!(mul_shift_32(2147483647, 18446744073709551615, 63) == u32::max_value());",
                "    assert!(mul_shift_32(2147483647, 18446744073709551615, 64) == u32::max_value());",
                "    assert!(mul_shift_32(0, 18446744073709551615, 33) == 0);",
                "    assert!(mul_shift_32(1, 1, 65) == 1);",
                "    assert!(mul_shift_32(1, 4294967295, 66) == 1);",
                "    assert!(mul_shift_32(2147483647, 0, 100) == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 63;",
                "    mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_shift_32(4294967295, 4294967295, 63), 4294967295);"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295;",
                "    let factor: u64 = 4294967295;",
                "    let shift: i32 = 63;",
                "    mul_shift_32(m, factor, shift);",
                "    assert_eq!(mul_shift_32(4294967295, 4294967295, 63), 4294967295);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is true\n",
        "precondition: shifted_sum <= u32::max_value() as u64 at line 70 is false\n"
      ],
      "input_infer": "m: u32 in the range [0, u32::max_value()] inclusive, factor: u64 in the range [0, u64::max_value()] inclusive, shift: i32 > 32 and yielding shifted_sum > u32::max_value() as u64\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = u32::max_value();       // Maximum value for m",
                "    let factor: u64 = 1;                  // Minimal factor to ensure overflow",
                "    let shift: i32 = 33;                  // Minimal shift greater than 32",
                "",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "}"
              ],
              "oracle": [
                "    assert!(shift > 32, \"Precondition failed: shift must be greater than 32.\");",
                "    let expected_result = u32::max_value(); // result must be equal to or less than u32::max_value()",
                "    assert!(_ > expected_result, \"Precondition failed: shifted_sum must be greater than u32::max_value() as u64.\");"
              ],
              "code": [
                "{",
                "    let m: u32 = u32::max_value();       // Maximum value for m",
                "    let factor: u64 = 1;                  // Minimal factor to ensure overflow",
                "    let shift: i32 = 33;                  // Minimal shift greater than 32",
                "",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "    assert!(shift > 32, \"Precondition failed: shift must be greater than 32.\");",
                "    let expected_result = u32::max_value(); // result must be equal to or less than u32::max_value()",
                "    assert!(_ > expected_result, \"Precondition failed: shifted_sum must be greater than u32::max_value() as u64.\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 2;                       // Small m to observe overflow with a large factor",
                "    let factor: u64 = u64::max_value();   // Maximum value for factor",
                "    let shift: i32 = 34;                  // Shift set to ensure condition exceeds max value",
                "",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "}"
              ],
              "oracle": [
                "    assert!(mul_shift_32(2, u64::max_value(), 34) > u32::max_value());"
              ],
              "code": [
                "{",
                "    let m: u32 = 2;                       // Small m to observe overflow with a large factor",
                "    let factor: u64 = u64::max_value();   // Maximum value for factor",
                "    let shift: i32 = 34;                  // Shift set to ensure condition exceeds max value",
                "",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "    assert!(mul_shift_32(2, u64::max_value(), 34) > u32::max_value());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1_000_000;               // Some mid-range value for m",
                "    let factor: u64 = 10_000_000;         // A large factor to ensure shifted_sum exceeds limits",
                "    let shift: i32 = 35;                  // Shift value ensures high overflow",
                "    ",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(1_000_000, 10_000_000, 35)).is_err());",
                "    assert_eq!(mul_shift_32(1_000_000, 10_000_000, 35) as u64, u32::max_value() as u64 + 1);"
              ],
              "code": [
                "{",
                "    let m: u32 = 1_000_000;               // Some mid-range value for m",
                "    let factor: u64 = 10_000_000;         // A large factor to ensure shifted_sum exceeds limits",
                "    let shift: i32 = 35;                  // Shift value ensures high overflow",
                "    ",
                "    let _ = mul_shift_32(m, factor, shift); // Call to the function to trigger the condition",
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(1_000_000, 10_000_000, 35)).is_err());",
                "    assert_eq!(mul_shift_32(1_000_000, 10_000_000, 35) as u64, u32::max_value() as u64 + 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is false, with bound shift == 32\n"
      ],
      "input_infer": "m: 0 to 4294967295, factor: 0 to 18446744073709551615, shift: 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let m: u32 = 0; // test lower bound for m",
                "    let factor: u64 = 0; // test lower bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 0, 32)).is_err());"
              ],
              "code": [
                "{",
                "    let m: u32 = 0; // test lower bound for m",
                "    let factor: u64 = 0; // test lower bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 0, 32)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295; // test upper bound for m",
                "    let factor: u64 = 0; // test lower bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 0, 32)).is_err());"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295; // test upper bound for m",
                "    let factor: u64 = 0; // test lower bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 0, 32)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let m: u32 = 0; // test lower bound for m",
                "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 18446744073709551615, 32)).is_err());"
              ],
              "code": [
                "{",
                "    let m: u32 = 0; // test lower bound for m",
                "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(0, 18446744073709551615, 32)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295; // test upper bound for m",
                "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 18446744073709551615, 32)).is_err());"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295; // test upper bound for m",
                "    let factor: u64 = 18446744073709551615; // test upper bound for factor",
                "    let shift: i32 = 32; // shift == 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "    assert!(std::panic::catch_unwind(|| mul_shift_32(4294967295, 18446744073709551615, 32)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}