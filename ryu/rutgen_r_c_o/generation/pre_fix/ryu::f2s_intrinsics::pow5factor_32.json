{
  "name": "ryu::f2s_intrinsics::pow5factor_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": false,
  "loc": "src/f2s_intrinsics.rs:27:1:40:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is true\n",
        "precondition: r != 0 at line 33 is true\n",
        "expected return value/type: count\n"
      ],
      "input_infer": "value: u32 in the range [1, 2^32-1] where value is a multiple of 5 (e.g., 5, 10, 25, 125, 625, 3125) and where the count of 5 factors is computed, ensuring to include edge cases like 1, 5, and values just under powers of 5 (e.g., 4, 9, 24).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, pow5factor_32(125));",
                "    assert_eq!(result, pow5factor_32(25));",
                "    assert_eq!(result, pow5factor_32(1));",
                "    assert_eq!(result, pow5factor_32(10));"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(5);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, pow5factor_32(125));",
                "    assert_eq!(result, pow5factor_32(25));",
                "    assert_eq!(result, pow5factor_32(1));",
                "    assert_eq!(result, pow5factor_32(10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert!(result.is::<u32>());",
                "    assert!(result >= 0);",
                "    assert!(result <= 32);",
                "    assert_ne!(result, 0);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(100), 2);",
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(15), 1);",
                "    assert!(pow5factor_32(30) < 3);",
                "    assert!(pow5factor_32(0xFFFFFFFF) >= 0);",
                "    assert!(pow5factor_32(3125) == 5);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(10);",
                "    assert_eq!(result, 1);",
                "    assert!(result.is::<u32>());",
                "    assert!(result >= 0);",
                "    assert!(result <= 32);",
                "    assert_ne!(result, 0);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(100), 2);",
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(15), 1);",
                "    assert!(pow5factor_32(30) < 3);",
                "    assert!(pow5factor_32(0xFFFFFFFF) >= 0);",
                "    assert!(pow5factor_32(3125) == 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(25);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(25);",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(125);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 3);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(125);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(625);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(625);",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(3125);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 5);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(3125);",
                "    assert_eq!(result, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(4);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(9);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = pow5factor_32(24);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert!(result <= 32);",
                "    assert!(result >= 0);"
              ],
              "code": [
                "{",
                "    let result = pow5factor_32(24);",
                "    assert_eq!(result, 0);",
                "    assert!(result <= 32);",
                "    assert!(result >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is false\n"
      ],
      "input_infer": "Test input conditions: 0, 1, 2, 3, 4, 5, 10, 25, 50, 125, and 1_000_000\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let value: u32 = 0;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| pow5factor_32(0)).is_err());"
              ],
              "code": [
                "{",
                "    let value: u32 = 0;",
                "    let _result = pow5factor_32(value);",
                "    assert!(std::panic::catch_unwind(|| pow5factor_32(0)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 1;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 1;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 2;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 2;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 3;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 3;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 4;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 5;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0);",
                "    let value: u32 = 10;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 1);",
                "    let value: u32 = 25;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 2);",
                "    let value: u32 = 0;",
                "    let _result = pow5factor_32(value);",
                "    assert!(value != 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 5;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 0);",
                "    let value: u32 = 10;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 1);",
                "    let value: u32 = 25;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 2);",
                "    let value: u32 = 0;",
                "    let _result = pow5factor_32(value);",
                "    assert!(value != 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 10;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 1);",
                "    assert!(value != 0);",
                "    assert!(_result <= 32);"
              ],
              "code": [
                "{",
                "    let value: u32 = 10;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 1);",
                "    assert!(value != 0);",
                "    assert!(_result <= 32);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 25;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 2);",
                "    assert!(value != 0);",
                "    assert!(pow5factor_32(0) == 0);",
                "    assert!(pow5factor_32(1) == 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(625), 4);",
                "    assert_eq!(pow5factor_32(u32::MAX), 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 25;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 2);",
                "    assert!(value != 0);",
                "    assert!(pow5factor_32(0) == 0);",
                "    assert!(pow5factor_32(1) == 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(625), 4);",
                "    assert_eq!(pow5factor_32(u32::MAX), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 50;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(0), panic);",
                "    assert_eq!(pow5factor_32(7), 0);",
                "    assert_eq!(pow5factor_32(10), 1);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(2), 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 50;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(0), panic);",
                "    assert_eq!(pow5factor_32(7), 0);",
                "    assert_eq!(pow5factor_32(10), 1);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(2), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 125;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 3);"
              ],
              "code": [
                "{",
                "    let value: u32 = 125;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(_result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 1_000_000;",
                "    let _result = pow5factor_32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(625), 4);",
                "    assert_eq!(pow5factor_32(1_000_000), 0);",
                "    assert_eq!(pow5factor_32(50), 1);",
                "    assert_eq!(pow5factor_32(0), 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 1_000_000;",
                "    let _result = pow5factor_32(value);",
                "    assert_eq!(pow5factor_32(1), 0);",
                "    assert_eq!(pow5factor_32(5), 1);",
                "    assert_eq!(pow5factor_32(25), 2);",
                "    assert_eq!(pow5factor_32(125), 3);",
                "    assert_eq!(pow5factor_32(625), 4);",
                "    assert_eq!(pow5factor_32(1_000_000), 0);",
                "    assert_eq!(pow5factor_32(50), 1);",
                "    assert_eq!(pow5factor_32(0), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}