{
  "name": "ryu::f2s_intrinsics::mul_pow5_inv_div_pow2",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:75:1:98:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 at line 89 is true\n"
      ],
      "input_infer": "m: 0 to 4294967295, q: 0 to d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1, j: greater than 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 0; ",
                "    let q: u32 = 0; ",
                "    let j: i32 = 33; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_inv_div_pow2(0, 0, 33), expected_value_1);",
                "    assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);",
                "    assert!(j > 32);"
              ],
              "code": [
                "{",
                "    let m: u32 = 0; ",
                "    let q: u32 = 0; ",
                "    let j: i32 = 33; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert_eq!(mul_pow5_inv_div_pow2(0, 0, 33), expected_value_1);",
                "    assert!(q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32);",
                "    assert!(j > 32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1; ",
                "    let q: u32 = 1; ",
                "    let j: i32 = 34; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "}"
              ],
              "oracle": [
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 34) == expected_value_1);",
                "    assert!(mul_pow5_inv_div_pow2(1, 2, 34) == expected_value_2);",
                "    assert!(mul_pow5_inv_div_pow2(1, 0, 34) == expected_value_3);",
                "    assert!(mul_pow5_inv_div_pow2(u32::max_value(), 1, 34) == expected_value_4);",
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 33) == expected_value_5);",
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 35) == expected_value_6);"
              ],
              "code": [
                "{",
                "    let m: u32 = 1; ",
                "    let q: u32 = 1; ",
                "    let j: i32 = 34; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 34) == expected_value_1);",
                "    assert!(mul_pow5_inv_div_pow2(1, 2, 34) == expected_value_2);",
                "    assert!(mul_pow5_inv_div_pow2(1, 0, 34) == expected_value_3);",
                "    assert!(mul_pow5_inv_div_pow2(u32::max_value(), 1, 34) == expected_value_4);",
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 33) == expected_value_5);",
                "    assert!(mul_pow5_inv_div_pow2(1, 1, 35) == expected_value_6);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 4294967295; ",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1; ",
                "    let j: i32 = 35; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_inv_div_pow2(4294967295, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1, 35), expected_value);"
              ],
              "code": [
                "{",
                "    let m: u32 = 4294967295; ",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1; ",
                "    let j: i32 = 35; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert_eq!(mul_pow5_inv_div_pow2(4294967295, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 - 1, 35), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 2147483648; ",
                "    let q: u32 = 100; ",
                "    let j: i32 = 40; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_inv_div_pow2(2147483648, 100, 40), expected_value);"
              ],
              "code": [
                "{",
                "    let m: u32 = 2147483648; ",
                "    let q: u32 = 100; ",
                "    let j: i32 = 40; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert_eq!(mul_pow5_inv_div_pow2(2147483648, 100, 40), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 100; ",
                "    let q: u32 = 2; ",
                "    let j: i32 = 50; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_inv_div_pow2(100, 2, 50), expected_value);"
              ],
              "code": [
                "{",
                "    let m: u32 = 100; ",
                "    let q: u32 = 2; ",
                "    let j: i32 = 50; ",
                "    let _ = mul_pow5_inv_div_pow2(m, q, j);",
                "    assert_eq!(mul_pow5_inv_div_pow2(100, 2, 50), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: q < d2s::DOUBLE_POW5_INV_SPLIT.len() as u32 at line 89 is false, with bound q == d2s::DOUBLE_POW5_INV_SPLIT.len() as u32\n"
      ],
      "input_infer": "m: u32 >= 0, q: u32 == d2s::DOUBLE_POW5_INV_SPLIT.len() as u32, j: i32 > 32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 1; // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 33; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(panic_occurred); // Ensure that an error is raised due to q being out of bounds",
                "    assert!(result.is_none()); // In the case of an unsafe call, check if result handling leads to null or undefined behavior"
              ],
              "code": [
                "{",
                "    let m: u32 = 1; // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 33; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "    assert!(panic_occurred); // Ensure that an error is raised due to q being out of bounds",
                "    assert!(result.is_none()); // In the case of an unsafe call, check if result handling leads to null or undefined behavior",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = 0; // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 34; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(mul_pow5_inv_div_pow2(0, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32, 34), 0);"
              ],
              "code": [
                "{",
                "    let m: u32 = 0; // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 34; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "    assert_eq!(mul_pow5_inv_div_pow2(0, d2s::DOUBLE_POW5_INV_SPLIT.len() as u32, 34), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let m: u32 = u32::max_value(); // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 35; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| mul_pow5_inv_div_pow2(u32::max_value(), d2s::DOUBLE_POW5_INV_SPLIT.len() as u32, 35)).is_err());"
              ],
              "code": [
                "{",
                "    let m: u32 = u32::max_value(); // Valid input, m >= 0",
                "    let q: u32 = d2s::DOUBLE_POW5_INV_SPLIT.len() as u32; // Out of bounds for q",
                "    let j: i32 = 35; // Valid input, j > 32",
                "    unsafe {",
                "        let _result = mul_pow5_inv_div_pow2(m, q, j);",
                "    }",
                "    assert!(std::panic::catch_unwind(|| mul_pow5_inv_div_pow2(u32::max_value(), d2s::DOUBLE_POW5_INV_SPLIT.len() as u32, 35)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}