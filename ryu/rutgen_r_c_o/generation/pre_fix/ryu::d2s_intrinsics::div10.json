{
  "name": "ryu::d2s_intrinsics::div10",
  "mod_info": {
    "name": "d2s_intrinsics",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/d2s_intrinsics.rs:29:1:31:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: x / 10\n"
      ],
      "input_infer": "Test input conditions or ranges: x = 0 (minimum), x = 1 to 10 (inclusive), x = 100 (boundary), x = 1_000_000_000_000 (large value).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 0u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    let input = 0u64; assert_eq!(div10(input), 0u64);",
                "    let input = 10u64; assert_eq!(div10(input), 1u64);",
                "    let input = 20u64; assert_eq!(div10(input), 2u64);",
                "    let input = 100u64; assert_eq!(div10(input), 10u64);",
                "    let input = 1u64; assert_eq!(div10(input), 0u64);",
                "    let input = 99u64; assert_eq!(div10(input), 9u64);",
                "    let input = 1000u64; assert_eq!(div10(input), 100u64);",
                "    let input = u64::MAX; assert_eq!(div10(input), u64::MAX / 10);"
              ],
              "code": [
                "{",
                "    let input = 0u64;",
                "    let _ = div10(input);",
                "    let input = 0u64; assert_eq!(div10(input), 0u64);",
                "    let input = 10u64; assert_eq!(div10(input), 1u64);",
                "    let input = 20u64; assert_eq!(div10(input), 2u64);",
                "    let input = 100u64; assert_eq!(div10(input), 10u64);",
                "    let input = 1u64; assert_eq!(div10(input), 0u64);",
                "    let input = 99u64; assert_eq!(div10(input), 9u64);",
                "    let input = 1000u64; assert_eq!(div10(input), 100u64);",
                "    let input = u64::MAX; assert_eq!(div10(input), u64::MAX / 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 1u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(1u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(250u64), 25u64);",
                "    assert_eq!(div10(999u64), 99u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(10000u64), 1000u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(50u64), 5u64);",
                "    assert_eq!(div10(1234567890u64), 123456789u64);"
              ],
              "code": [
                "{",
                "    let input = 1u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(1u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(250u64), 25u64);",
                "    assert_eq!(div10(999u64), 99u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(10000u64), 1000u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(50u64), 5u64);",
                "    assert_eq!(div10(1234567890u64), 123456789u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 2u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(5), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(20), 2);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(999), 99);",
                "    assert_eq!(div10(1_000_000), 100_000);",
                "    assert_eq!(div10(u64::MAX), 18_446_744_073_709_551);"
              ],
              "code": [
                "{",
                "    let input = 2u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(5), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(20), 2);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(999), 99);",
                "    assert_eq!(div10(1_000_000), 100_000);",
                "    assert_eq!(div10(u64::MAX), 18_446_744_073_709_551);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 3u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(25u64), 2u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(123u64), 12u64);",
                "    assert_eq!(div10(999u64), 99u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161u64);"
              ],
              "code": [
                "{",
                "    let input = 3u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(25u64), 2u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(123u64), 12u64);",
                "    assert_eq!(div10(999u64), 99u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 4u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(25), 2);",
                "    assert_eq!(div10(99), 9);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(std::u64::MAX), std::u64::MAX / 10);"
              ],
              "code": [
                "{",
                "    let input = 4u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(25), 2);",
                "    assert_eq!(div10(99), 9);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(std::u64::MAX), std::u64::MAX / 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 5u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(5u64), 0);",
                "    assert_eq!(div10(10u64), 1);",
                "    assert_eq!(div10(11u64), 1);",
                "    assert_eq!(div10(0u64), 0);",
                "    assert_eq!(div10(19u64), 1);",
                "    assert_eq!(div10(100u64), 10);",
                "    assert_eq!(div10(1_000u64), 100);",
                "    assert_eq!(div10(1_000_000u64), 100_000);",
                "    assert_eq!(div10(18u64), 1);",
                "    assert_eq!(div10(20u64), 2);"
              ],
              "code": [
                "{",
                "    let input = 5u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(5u64), 0);",
                "    assert_eq!(div10(10u64), 1);",
                "    assert_eq!(div10(11u64), 1);",
                "    assert_eq!(div10(0u64), 0);",
                "    assert_eq!(div10(19u64), 1);",
                "    assert_eq!(div10(100u64), 10);",
                "    assert_eq!(div10(1_000u64), 100);",
                "    assert_eq!(div10(1_000_000u64), 100_000);",
                "    assert_eq!(div10(18u64), 1);",
                "    assert_eq!(div10(20u64), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 6u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(6u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(19u64), 1u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(9999u64), 999u64);",
                "    assert_eq!(div10(1u64), 0u64);",
                "    assert_eq!(div10(10u64.pow(18)), 10u64.pow(17));",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161u64);"
              ],
              "code": [
                "{",
                "    let input = 6u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(6u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(19u64), 1u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(1000u64), 100u64);",
                "    assert_eq!(div10(9999u64), 999u64);",
                "    assert_eq!(div10(1u64), 0u64);",
                "    assert_eq!(div10(10u64.pow(18)), 10u64.pow(17));",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 7u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(25), 2);",
                "    assert_eq!(div10(99), 9);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(123456), 12345);",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161);"
              ],
              "code": [
                "{",
                "    let input = 7u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(25), 2);",
                "    assert_eq!(div10(99), 9);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(123456), 12345);",
                "    assert_eq!(div10(u64::MAX), 1844674407370955161);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 8u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(1), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(15), 1);",
                "    assert_eq!(div10(20), 2);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(999), 99);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(u64::MAX), u64::MAX / 10);",
                "    assert_eq!(div10(1234567890), 123456789);"
              ],
              "code": [
                "{",
                "    let input = 8u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(0), 0);",
                "    assert_eq!(div10(1), 0);",
                "    assert_eq!(div10(10), 1);",
                "    assert_eq!(div10(15), 1);",
                "    assert_eq!(div10(20), 2);",
                "    assert_eq!(div10(100), 10);",
                "    assert_eq!(div10(999), 99);",
                "    assert_eq!(div10(1000), 100);",
                "    assert_eq!(div10(u64::MAX), u64::MAX / 10);",
                "    assert_eq!(div10(1234567890), 123456789);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 9u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(9u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(20u64), 2u64);",
                "    assert_eq!(div10(99u64), 9u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(1u64), 0u64);"
              ],
              "code": [
                "{",
                "    let input = 9u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(9u64), 0u64);",
                "    assert_eq!(div10(10u64), 1u64);",
                "    assert_eq!(div10(20u64), 2u64);",
                "    assert_eq!(div10(99u64), 9u64);",
                "    assert_eq!(div10(100u64), 10u64);",
                "    assert_eq!(div10(0u64), 0u64);",
                "    assert_eq!(div10(1u64), 0u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 10u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(10u64), 1);",
                "    assert_eq!(div10(0u64), 0);",
                "    assert_eq!(div10(99u64), 9);",
                "    assert_eq!(div10(100u64), 10);",
                "    assert_eq!(div10(1000u64), 100);",
                "    assert_eq!(div10(10000u64), 1000);",
                "    assert_eq!(div10(1u64), 0);",
                "    assert_eq!(div10(15u64), 1);",
                "    assert_eq!(div10(50u64), 5);",
                "    assert_eq!(div10(123u64), 12);"
              ],
              "code": [
                "{",
                "    let input = 10u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(10u64), 1);",
                "    assert_eq!(div10(0u64), 0);",
                "    assert_eq!(div10(99u64), 9);",
                "    assert_eq!(div10(100u64), 10);",
                "    assert_eq!(div10(1000u64), 100);",
                "    assert_eq!(div10(10000u64), 1000);",
                "    assert_eq!(div10(1u64), 0);",
                "    assert_eq!(div10(15u64), 1);",
                "    assert_eq!(div10(50u64), 5);",
                "    assert_eq!(div10(123u64), 12);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 100u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    let input = 100u64; assert_eq!(div10(input), 10);",
                "    let input = 10u64; assert_eq!(div10(input), 1);",
                "    let input = 0u64; assert_eq!(div10(input), 0);",
                "    let input = 123456789u64; assert_eq!(div10(input), 12345678);",
                "    let input = 999999999u64; assert_eq!(div10(input), 99999999);",
                "    let input = 1u64; assert_eq!(div10(input), 0);"
              ],
              "code": [
                "{",
                "    let input = 100u64;",
                "    let _ = div10(input);",
                "    let input = 100u64; assert_eq!(div10(input), 10);",
                "    let input = 10u64; assert_eq!(div10(input), 1);",
                "    let input = 0u64; assert_eq!(div10(input), 0);",
                "    let input = 123456789u64; assert_eq!(div10(input), 12345678);",
                "    let input = 999999999u64; assert_eq!(div10(input), 99999999);",
                "    let input = 1u64; assert_eq!(div10(input), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = 1_000_000_000_000u64;",
                "    let _ = div10(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(div10(1_000_000_000_000u64), 100_000_000_000);"
              ],
              "code": [
                "{",
                "    let input = 1_000_000_000_000u64;",
                "    let _ = div10(input);",
                "    assert_eq!(div10(1_000_000_000_000u64), 100_000_000_000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}