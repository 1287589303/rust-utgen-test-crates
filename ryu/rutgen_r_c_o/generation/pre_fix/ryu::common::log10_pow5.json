{
  "name": "ryu::common::log10_pow5",
  "mod_info": {
    "name": "common",
    "loc": "src/lib.rs:107:1:107:12"
  },
  "visible": true,
  "loc": "src/common.rs:90:1:95:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: e >= 0 at line 92 is true, with bound e == 0\n",
        "precondition: e <= 2620 at line 93 is true, with bound e == 2620\n",
        "expected return value/type: (e as u32 * 732923) >> 20\n"
      ],
      "input_infer": "e in the range 0 to 2620 inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);  // e = 0, expected return value is 0",
                "    assert_eq!(log10_pow5(2620), 732923 >> 20);  // e = 2620, expected return value is 732923 shifted right by 20"
              ],
              "code": [
                "{",
                "    let e: i32 = 0;",
                "    let result = log10_pow5(e);",
                "    assert_eq!(log10_pow5(0), 0);  // e = 0, expected return value is 0",
                "    assert_eq!(log10_pow5(2620), 732923 >> 20);  // e = 2620, expected return value is 732923 shifted right by 20",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 2620;",
                "    let result = log10_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 172229);"
              ],
              "code": [
                "{",
                "    let e: i32 = 2620;",
                "    let result = log10_pow5(e);",
                "    assert_eq!(result, 172229);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 1310;",
                "    let result = log10_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(1310), 144651);"
              ],
              "code": [
                "{",
                "    let e: i32 = 1310;",
                "    let result = log10_pow5(e);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(1310), 144651);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 1;",
                "    let result = log10_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923 * 2620 >> 20);",
                "    assert!(log10_pow5(1) > 0);",
                "    assert!(log10_pow5(5) > log10_pow5(0));",
                "    assert!(log10_pow5(2620) > log10_pow5(1000));",
                "    assert!(log10_pow5(2620) > log10_pow5(2000));",
                "    assert!(log10_pow5(0) == 0);"
              ],
              "code": [
                "{",
                "    let e: i32 = 1;",
                "    let result = log10_pow5(e);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923 * 2620 >> 20);",
                "    assert!(log10_pow5(1) > 0);",
                "    assert!(log10_pow5(5) > log10_pow5(0));",
                "    assert!(log10_pow5(2620) > log10_pow5(1000));",
                "    assert!(log10_pow5(2620) > log10_pow5(2000));",
                "    assert!(log10_pow5(0) == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let e: i32 = 2619;",
                "    let result = log10_pow5(e);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(2619), 732922);"
              ],
              "code": [
                "{",
                "    let e: i32 = 2619;",
                "    let result = log10_pow5(e);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(2619), 732922);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: e >= 0 at line 92 is true, with bound e == 0\n",
        "precondition: e <= 2620 at line 93 is false\n"
      ],
      "input_infer": "e = 0, e = 1, e = 2620, e = 2621\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(0);",
                "}"
              ],
              "oracle": [
                "    let result = log10_pow5(0); assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(0);",
                "    let result = log10_pow5(0); assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2621)).is_err());",
                "    assert_eq!(log10_pow5(2620), 732923 >> 20);",
                "    assert_eq!(log10_pow5(5), 5 * 732923 >> 20);",
                "    assert_eq!(log10_pow5(1000), 1000 * 732923 >> 20);"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(1);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2621)).is_err());",
                "    assert_eq!(log10_pow5(2620), 732923 >> 20);",
                "    assert_eq!(log10_pow5(5), 5 * 732923 >> 20);",
                "    assert_eq!(log10_pow5(1000), 1000 * 732923 >> 20);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(2620);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 732923);"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(2620);",
                "    assert_eq!(result, 732923);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = log10_pow5(2621);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2621)).is_err());"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(2621);",
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2621)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: e >= 0 at line 92 is false\n"
      ],
      "input_infer": "e: -1; e: 0; e: 1; e: 2620; e: 2621\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(-1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), \"assertion failed: e >= 0\");"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(-1);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), \"assertion failed: e >= 0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(1), 34);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(5), 183);",
                "    assert_eq!(log10_pow5(2621), panic!());"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(0);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(1), 34);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(5), 183);",
                "    assert_eq!(log10_pow5(2621), panic!());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(1);",
                "}"
              ],
              "oracle": [
                "    let result = log10_pow5(-1);",
                "    assert_eq!(result, 0);",
                "    let result = log10_pow5(0);",
                "    assert_eq!(result, 0);",
                "    let result = log10_pow5(2620);",
                "    assert_eq!(result, 732923);",
                "    let result = log10_pow5(2630);",
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2630)).is_err());",
                "    let result = log10_pow5(5);",
                "    assert_eq!(result, 36);",
                "    let result = log10_pow5(10);",
                "    assert_eq!(result, 73);"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(1);",
                "    let result = log10_pow5(-1);",
                "    assert_eq!(result, 0);",
                "    let result = log10_pow5(0);",
                "    assert_eq!(result, 0);",
                "    let result = log10_pow5(2620);",
                "    assert_eq!(result, 732923);",
                "    let result = log10_pow5(2630);",
                "    assert!(std::panic::catch_unwind(|| log10_pow5(2630)).is_err());",
                "    let result = log10_pow5(5);",
                "    assert_eq!(result, 36);",
                "    let result = log10_pow5(10);",
                "    assert_eq!(result, 73);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(2620);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(1), 0);",
                "    assert_eq!(log10_pow5(2), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(5), 0);",
                "    assert_eq!(log10_pow5(1000), 354);",
                "    assert_eq!(log10_pow5(2000), 709);",
                "    assert_eq!(log10_pow5(2621), panic);"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(2620);",
                "    assert_eq!(log10_pow5(0), 0);",
                "    assert_eq!(log10_pow5(1), 0);",
                "    assert_eq!(log10_pow5(2), 0);",
                "    assert_eq!(log10_pow5(2620), 732923);",
                "    assert_eq!(log10_pow5(5), 0);",
                "    assert_eq!(log10_pow5(1000), 354);",
                "    assert_eq!(log10_pow5(2000), 709);",
                "    assert_eq!(log10_pow5(2621), panic);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = log10_pow5(2621);",
                "}"
              ],
              "oracle": [
                "    debug_assert!(2621 >= 0);",
                "    debug_assert!(2621 <= 2620);",
                "    assert_eq!(log10_pow5(2621), expected_value);",
                "    expected_value = (2621 as u32 * 732923) >> 20;"
              ],
              "code": [
                "{",
                "    let result = log10_pow5(2621);",
                "    debug_assert!(2621 >= 0);",
                "    debug_assert!(2621 <= 2620);",
                "    assert_eq!(log10_pow5(2621), expected_value);",
                "    expected_value = (2621 as u32 * 732923) >> 20;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}