{
  "name": "ryu::buffer::{impl#6}::is_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:117:5:121:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: bits & EXP_MASK == EXP_MASK\n"
      ],
      "input_infer": "Test input conditions or ranges: test with f64 values including NaN, positive infinity, negative infinity, finite values close to the edges of float representation (such as 1.0, 0.0, and values just above and below these thresholds).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::NAN;",
                "    assert!(value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!(!0.0.is_nonfinite());",
                "    assert!(!1.0.is_nonfinite());",
                "    assert!(!2.5.is_nonfinite());",
                "    assert!(!f64::MAX.is_nonfinite());",
                "    assert!(!f64::MIN.is_nonfinite());",
                "    assert!(!f64::from_bits(0x7f800001).is_nonfinite());",
                "    assert!(!f64::from_bits(0x7fffffff).is_nonfinite());"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::NAN;",
                "    assert!(value.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!(!0.0.is_nonfinite());",
                "    assert!(!1.0.is_nonfinite());",
                "    assert!(!2.5.is_nonfinite());",
                "    assert!(!f64::MAX.is_nonfinite());",
                "    assert!(!f64::MIN.is_nonfinite());",
                "    assert!(!f64::from_bits(0x7f800001).is_nonfinite());",
                "    assert!(!f64::from_bits(0x7fffffff).is_nonfinite());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::INFINITY;",
                "    assert!(value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::NAN.is_nonfinite() == true);",
                "    assert!(f64::NEG_INFINITY.is_nonfinite() == true);",
                "    assert!(f64::MAX.is_nonfinite() == false);",
                "    assert!(f64::MIN.is_nonfinite() == false);",
                "    assert!(0.0.is_nonfinite() == false);",
                "    assert!(f64::from_bits(0x7f800001).is_nonfinite() == true);"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    assert!(f64::NAN.is_nonfinite() == true);",
                "    assert!(f64::NEG_INFINITY.is_nonfinite() == true);",
                "    assert!(f64::MAX.is_nonfinite() == false);",
                "    assert!(f64::MIN.is_nonfinite() == false);",
                "    assert!(0.0.is_nonfinite() == false);",
                "    assert!(f64::from_bits(0x7f800001).is_nonfinite() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    assert!(value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!(!1.0.is_nonfinite());",
                "    assert!(!0.0.is_nonfinite());",
                "    assert!(!-1.0.is_nonfinite());",
                "    assert!(!f64::from_bits(0x7f800001).is_nonfinite());  // Not a finite value",
                "    assert!(!f64::from_bits(0x80000000).is_nonfinite());  // Not a finite value"
              ],
              "code": [
                "{",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!(!1.0.is_nonfinite());",
                "    assert!(!0.0.is_nonfinite());",
                "    assert!(!-1.0.is_nonfinite());",
                "    assert!(!f64::from_bits(0x7f800001).is_nonfinite());  // Not a finite value",
                "    assert!(!f64::from_bits(0x80000000).is_nonfinite());  // Not a finite value",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0;",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((1.0).is_nonfinite() == false);",
                "    assert!((-1.0).is_nonfinite() == false);",
                "    assert!((0.0).is_nonfinite() == false);",
                "    assert!((-0.0).is_nonfinite() == false);",
                "    assert!((f64::from_bits(0x7F800001)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800000)).is_nonfinite());",
                "    assert!((f64::from_bits(0xFF800000)).is_nonfinite());"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0;",
                "    assert!(!value.is_nonfinite());",
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((1.0).is_nonfinite() == false);",
                "    assert!((-1.0).is_nonfinite() == false);",
                "    assert!((0.0).is_nonfinite() == false);",
                "    assert!((-0.0).is_nonfinite() == false);",
                "    assert!((f64::from_bits(0x7F800001)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800000)).is_nonfinite());",
                "    assert!((f64::from_bits(0xFF800000)).is_nonfinite());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 0.0;",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0.0.is_nonfinite(), false);",
                "    let value: f64 = f64::NAN;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = 1.0;",
                "    assert!(!value.is_nonfinite());",
                "    let value: f64 = f64::from_bits(0x7F800001); // Positive NaN",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::from_bits(0x7FFFFFFF); // Invalid but nonfinite representation",
                "    assert!(value.is_nonfinite());"
              ],
              "code": [
                "{",
                "    let value: f64 = 0.0;",
                "    assert!(!value.is_nonfinite());",
                "    assert_eq!(0.0.is_nonfinite(), false);",
                "    let value: f64 = f64::NAN;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::NEG_INFINITY;",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = 1.0;",
                "    assert!(!value.is_nonfinite());",
                "    let value: f64 = f64::from_bits(0x7F800001); // Positive NaN",
                "    assert!(value.is_nonfinite());",
                "    let value: f64 = f64::from_bits(0x7FFFFFFF); // Invalid but nonfinite representation",
                "    assert!(value.is_nonfinite());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = std::f64::EPSILON; // Small value just above zero",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::f64::NAN.is_nonfinite(), true);",
                "    assert_eq!(std::f64::INFINITY.is_nonfinite(), true);",
                "    assert_eq!(std::f64::NEG_INFINITY.is_nonfinite(), true);",
                "    assert_eq!(0.0_f64.is_nonfinite(), false);",
                "    assert_eq!(1.0_f64.is_nonfinite(), false);",
                "    assert_eq!(std::f64::MAX.is_nonfinite(), false);",
                "    assert_eq!(std::f64::MIN.is_nonfinite(), false);",
                "    assert_eq!(std::f64::EPSILON.is_nonfinite(), false);"
              ],
              "code": [
                "{",
                "    let value: f64 = std::f64::EPSILON; // Small value just above zero",
                "    assert!(!value.is_nonfinite());",
                "    assert_eq!(std::f64::NAN.is_nonfinite(), true);",
                "    assert_eq!(std::f64::INFINITY.is_nonfinite(), true);",
                "    assert_eq!(std::f64::NEG_INFINITY.is_nonfinite(), true);",
                "    assert_eq!(0.0_f64.is_nonfinite(), false);",
                "    assert_eq!(1.0_f64.is_nonfinite(), false);",
                "    assert_eq!(std::f64::MAX.is_nonfinite(), false);",
                "    assert_eq!(std::f64::MIN.is_nonfinite(), false);",
                "    assert_eq!(std::f64::EPSILON.is_nonfinite(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = -std::f64::EPSILON; // Small value just below zero",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((-1.0 / 0.0).is_nonfinite());",
                "    assert!((1.0 / 0.0).is_nonfinite());",
                "    assert!((-std::f64::EPSILON).is_nonfinite());",
                "    assert!((std::f64::EPSILON).is_nonfinite());"
              ],
              "code": [
                "{",
                "    let value: f64 = -std::f64::EPSILON; // Small value just below zero",
                "    assert!(!value.is_nonfinite());",
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((-1.0 / 0.0).is_nonfinite());",
                "    assert!((1.0 / 0.0).is_nonfinite());",
                "    assert!((-std::f64::EPSILON).is_nonfinite());",
                "    assert!((std::f64::EPSILON).is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1e308; // Large finite value",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((0.0_f64).is_nonfinite());",
                "    assert!((-1e-10_f64).is_nonfinite());",
                "    assert!((1e10_f64).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800001)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800002)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7FFFFFFF)).is_nonfinite());",
                "    assert!((f64::from_bits(0xFFFF_FFFF)).is_nonfinite());"
              ],
              "code": [
                "{",
                "    let value: f64 = 1e308; // Large finite value",
                "    assert!(!value.is_nonfinite());",
                "    assert!(f64::NAN.is_nonfinite());",
                "    assert!(f64::INFINITY.is_nonfinite());",
                "    assert!(f64::NEG_INFINITY.is_nonfinite());",
                "    assert!((0.0_f64).is_nonfinite());",
                "    assert!((-1e-10_f64).is_nonfinite());",
                "    assert!((1e10_f64).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800001)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7F800002)).is_nonfinite());",
                "    assert!((f64::from_bits(0x7FFFFFFF)).is_nonfinite());",
                "    assert!((f64::from_bits(0xFFFF_FFFF)).is_nonfinite());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 1.0000001; // Value just above 1.0",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert!(!f64::from_bits(0x7f80000001).is_nonfinite()); // Bits representing NaN",
                "    assert!(f64::from_bits(0x7ff0000000000000).is_nonfinite()); // Bits representing positive infinity",
                "    assert!(f64::from_bits(0xfff0000000000000).is_nonfinite()); // Bits representing negative infinity",
                "    assert!(!f64::from_bits(0x0000000000000001).is_nonfinite()); // Bits representing a normal value",
                "    assert!(!f64::from_bits(0x0000000000000000).is_nonfinite()); // Bits representing zero"
              ],
              "code": [
                "{",
                "    let value: f64 = 1.0000001; // Value just above 1.0",
                "    assert!(!value.is_nonfinite());",
                "    assert!(!f64::from_bits(0x7f80000001).is_nonfinite()); // Bits representing NaN",
                "    assert!(f64::from_bits(0x7ff0000000000000).is_nonfinite()); // Bits representing positive infinity",
                "    assert!(f64::from_bits(0xfff0000000000000).is_nonfinite()); // Bits representing negative infinity",
                "    assert!(!f64::from_bits(0x0000000000000001).is_nonfinite()); // Bits representing a normal value",
                "    assert!(!f64::from_bits(0x0000000000000000).is_nonfinite()); // Bits representing zero",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = 0.9999999; // Value just below 1.0",
                "    assert!(!value.is_nonfinite());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0.9999999.is_nonfinite(), false);",
                "    assert_eq!(f64::INFINITY.is_nonfinite(), true);",
                "    assert_eq!(f64::NEG_INFINITY.is_nonfinite(), true);",
                "    assert_eq!(f64::NAN.is_nonfinite(), true);",
                "    assert_eq!(1.0.is_nonfinite(), false);",
                "    assert_eq!(f64::MAX.is_nonfinite(), false);",
                "    assert_eq!(f64::MIN.is_nonfinite(), false);",
                "    assert_eq!(f64::EPSILON.is_nonfinite(), false);"
              ],
              "code": [
                "{",
                "    let value: f64 = 0.9999999; // Value just below 1.0",
                "    assert!(!value.is_nonfinite());",
                "    assert_eq!(0.9999999.is_nonfinite(), false);",
                "    assert_eq!(f64::INFINITY.is_nonfinite(), true);",
                "    assert_eq!(f64::NEG_INFINITY.is_nonfinite(), true);",
                "    assert_eq!(f64::NAN.is_nonfinite(), true);",
                "    assert_eq!(1.0.is_nonfinite(), false);",
                "    assert_eq!(f64::MAX.is_nonfinite(), false);",
                "    assert_eq!(f64::MIN.is_nonfinite(), false);",
                "    assert_eq!(f64::EPSILON.is_nonfinite(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}