{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/pretty/mod.rs\n// crate name is ryu\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print f64 to the given buffer and return number of bytes written.\n///\n/// At most 24 bytes will be written.\n///\n/// ## Special cases\n///\n/// This function **does not** check for NaN or infinity. If the input\n/// number is not a finite float, the printed representation will be some\n/// correctly formatted but unspecified numerical value.\n///\n/// Please check [`is_finite`] yourself before calling this function, or\n/// check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n///\n/// [`is_finite`]: f64::is_finite\n/// [`is_nan`]: f64::is_nan\n/// [`is_infinite`]: f64::is_infinite\n///\n/// ## Safety\n///\n/// The `result` pointer argument must point to sufficiently many writable bytes\n/// to hold RyÅ«'s representation of `f`.\n///\n/// ## Example\n///\n/// ```\n/// use std::{mem::MaybeUninit, slice, str};\n///\n/// let f = 1.234f64;\n///\n/// unsafe {\n///     let mut buffer = [MaybeUninit::<u8>::uninit(); 24];\n///     let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);\n///     let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);\n///     let print = str::from_utf8_unchecked(slice);\n///     assert_eq!(print, \"1.234\");\n/// }\n/// ```\n 52 pub unsafe fn format64(f: f64, result: *mut u8) -> usize {\n 53     let bits = f.to_bits();\n 54     let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;\n 55     let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);\n 56     let ieee_exponent =\n 57         (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);\n 58 \n 59     let mut index = 0isize;\n 60     if sign {\n 61         *result = b'-';\n 62         index += 1;\n 63     }\n 64 \n 65     if ieee_exponent == 0 && ieee_mantissa == 0 {\n 66         ptr::copy_nonoverlapping(b\"0.0\".as_ptr(), result.offset(index), 3);\n 67         return sign as usize + 3;\n 68     }\n 69 \n 70     let v = d2d(ieee_mantissa, ieee_exponent);\n 71 \n 72     let length = d2s::decimal_length17(v.mantissa) as isize;\n 73     let k = v.exponent as isize;\n 74     let kk = length + k; // 10^(kk-1) <= v < 10^kk\n 75     debug_assert!(k >= -324);\n 76 \n 77     if 0 <= k && kk <= 16 {\n 78         // 1234e7 -> 12340000000.0\n 79         write_mantissa_long(v.mantissa, result.offset(index + length));\n 80         for i in length..kk {\n 81             *result.offset(index + i) = b'0';\n 82         }\n 83         *result.offset(index + kk) = b'.';\n 84         *result.offset(index + kk + 1) = b'0';\n 85         index as usize + kk as usize + 2\n 86     } else if 0 < kk && kk <= 16 {\n 87         // 1234e-2 -> 12.34\n 88         write_mantissa_long(v.mantissa, result.offset(index + length + 1));\n 89         ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);\n 90         *result.offset(index + kk) = b'.';\n 91         index as usize + length as usize + 1\n 92     } else if -5 < kk && kk <= 0 {\n 93         // 1234e-6 -> 0.001234\n 94         *result.offset(index) = b'0';\n 95         *result.offset(index + 1) = b'.';\n 96         let offset = 2 - kk;\n 97         for i in 2..offset {\n 98             *result.offset(index + i) = b'0';\n 99         }\n100         write_mantissa_long(v.mantissa, result.offset(index + length + offset));\n101         index as usize + length as usize + offset as usize\n102     } else if length == 1 {\n103         // 1e30\n104         *result.offset(index) = b'0' + v.mantissa as u8;\n105         *result.offset(index + 1) = b'e';\n106         index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))\n107     } else {\n108         // 1234e30 -> 1.234e33\n109         write_mantissa_long(v.mantissa, result.offset(index + length + 1));\n110         *result.offset(index) = *result.offset(index + 1);\n111         *result.offset(index + 1) = b'.';\n112         *result.offset(index + length + 1) = b'e';\n113         index as usize\n114             + length as usize\n115             + 2\n116             + write_exponent3(kk - 1, result.offset(index + length + 2))\n117     }\n118 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}