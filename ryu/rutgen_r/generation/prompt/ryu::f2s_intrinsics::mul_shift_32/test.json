{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/f2s_intrinsics.rs\n// crate name is ryu\nThe function to be tested is presented with each line formatted as 'line number + code':\n58 fn mul_shift_32(m: u32, factor: u64, shift: i32) -> u32 {\n59     debug_assert!(shift > 32);\n60 \n61     // The casts here help MSVC to avoid calls to the __allmul library\n62     // function.\n63     let factor_lo = factor as u32;\n64     let factor_hi = (factor >> 32) as u32;\n65     let bits0 = m as u64 * factor_lo as u64;\n66     let bits1 = m as u64 * factor_hi as u64;\n67 \n68     let sum = (bits0 >> 32) + bits1;\n69     let shifted_sum = sum >> (shift - 32);\n70     debug_assert!(shifted_sum <= u32::max_value() as u64);\n71     shifted_sum as u32\n72 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}