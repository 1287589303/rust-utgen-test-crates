{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/pretty/mod.rs\n// crate name is ryu\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print f32 to the given buffer and return number of bytes written.\n///\n/// At most 16 bytes will be written.\n///\n/// ## Special cases\n///\n/// This function **does not** check for NaN or infinity. If the input\n/// number is not a finite float, the printed representation will be some\n/// correctly formatted but unspecified numerical value.\n///\n/// Please check [`is_finite`] yourself before calling this function, or\n/// check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n///\n/// [`is_finite`]: f32::is_finite\n/// [`is_nan`]: f32::is_nan\n/// [`is_infinite`]: f32::is_infinite\n///\n/// ## Safety\n///\n/// The `result` pointer argument must point to sufficiently many writable bytes\n/// to hold RyÅ«'s representation of `f`.\n///\n/// ## Example\n///\n/// ```\n/// use std::{mem::MaybeUninit, slice, str};\n///\n/// let f = 1.234f32;\n///\n/// unsafe {\n///     let mut buffer = [MaybeUninit::<u8>::uninit(); 16];\n///     let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);\n///     let slice = slice::from_raw_parts(buffer.as_ptr() as *const u8, len);\n///     let print = str::from_utf8_unchecked(slice);\n///     assert_eq!(print, \"1.234\");\n/// }\n/// ```\n159 pub unsafe fn format32(f: f32, result: *mut u8) -> usize {\n160     let bits = f.to_bits();\n161     let sign = ((bits >> (FLOAT_MANTISSA_BITS + FLOAT_EXPONENT_BITS)) & 1) != 0;\n162     let ieee_mantissa = bits & ((1u32 << FLOAT_MANTISSA_BITS) - 1);\n163     let ieee_exponent = (bits >> FLOAT_MANTISSA_BITS) & ((1u32 << FLOAT_EXPONENT_BITS) - 1);\n164 \n165     let mut index = 0isize;\n166     if sign {\n167         *result = b'-';\n168         index += 1;\n169     }\n170 \n171     if ieee_exponent == 0 && ieee_mantissa == 0 {\n172         ptr::copy_nonoverlapping(b\"0.0\".as_ptr(), result.offset(index), 3);\n173         return sign as usize + 3;\n174     }\n175 \n176     let v = f2d(ieee_mantissa, ieee_exponent);\n177 \n178     let length = common::decimal_length9(v.mantissa) as isize;\n179     let k = v.exponent as isize;\n180     let kk = length + k; // 10^(kk-1) <= v < 10^kk\n181     debug_assert!(k >= -45);\n182 \n183     if 0 <= k && kk <= 13 {\n184         // 1234e7 -> 12340000000.0\n185         write_mantissa(v.mantissa, result.offset(index + length));\n186         for i in length..kk {\n187             *result.offset(index + i) = b'0';\n188         }\n189         *result.offset(index + kk) = b'.';\n190         *result.offset(index + kk + 1) = b'0';\n191         index as usize + kk as usize + 2\n192     } else if 0 < kk && kk <= 13 {\n193         // 1234e-2 -> 12.34\n194         write_mantissa(v.mantissa, result.offset(index + length + 1));\n195         ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);\n196         *result.offset(index + kk) = b'.';\n197         index as usize + length as usize + 1\n198     } else if -6 < kk && kk <= 0 {\n199         // 1234e-6 -> 0.001234\n200         *result.offset(index) = b'0';\n201         *result.offset(index + 1) = b'.';\n202         let offset = 2 - kk;\n203         for i in 2..offset {\n204             *result.offset(index + i) = b'0';\n205         }\n206         write_mantissa(v.mantissa, result.offset(index + length + offset));\n207         index as usize + length as usize + offset as usize\n208     } else if length == 1 {\n209         // 1e30\n210         *result.offset(index) = b'0' + v.mantissa as u8;\n211         *result.offset(index + 1) = b'e';\n212         index as usize + 2 + write_exponent2(kk - 1, result.offset(index + 2))\n213     } else {\n214         // 1234e30 -> 1.234e33\n215         write_mantissa(v.mantissa, result.offset(index + length + 1));\n216         *result.offset(index) = *result.offset(index + 1);\n217         *result.offset(index + 1) = b'.';\n218         *result.offset(index + length + 1) = b'e';\n219         index as usize\n220             + length as usize\n221             + 2\n222             + write_exponent2(kk - 1, result.offset(index + length + 2))\n223     }\n224 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}