{
  "name": "ryu::buffer::{impl#6}::is_nonfinite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:117:5:121:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: bits & EXP_MASK == EXP_MASK\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestFloat {",
                "        value: f32,",
                "    }",
                "",
                "    impl TestFloat {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "    }",
                "",
                "    let positive_infinity = TestFloat { value: std::f32::INFINITY };",
                "    assert!(positive_infinity.is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestFloat {",
                "        value: f32,",
                "    }",
                "",
                "    impl TestFloat {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "    }",
                "",
                "    let negative_infinity = TestFloat { value: std::f32::NEG_INFINITY };",
                "    assert!(negative_infinity.is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestFloat {",
                "        value: f32,",
                "    }",
                "",
                "    impl TestFloat {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "    }",
                "",
                "    let nan_value = TestFloat { value: std::f32::NAN };",
                "    assert!(!nan_value.is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestFloat {",
                "        value: f32,",
                "    }",
                "",
                "    impl TestFloat {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "    }",
                "",
                "    let normal_value = TestFloat { value: 1.0 };",
                "    assert!(!normal_value.is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestFloat {",
                "        value: f32,",
                "    }",
                "",
                "    impl TestFloat {",
                "        fn to_bits(self) -> u32 {",
                "            self.value.to_bits()",
                "        }",
                "    }",
                "",
                "    let zero_value = TestFloat { value: 0.0 };",
                "    assert!(!zero_value.is_nonfinite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}