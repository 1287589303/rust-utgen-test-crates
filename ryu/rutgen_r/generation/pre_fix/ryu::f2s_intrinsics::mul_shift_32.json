{
  "name": "ryu::f2s_intrinsics::mul_shift_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": false,
  "loc": "src/f2s_intrinsics.rs:58:1:72:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is true\n",
        "precondition: shifted_sum <= u32::max_value() as u64 at line 70 is true, with bound shifted_sum == u32::max_value() as u64\n",
        "expected return value/type: shifted_sum as u32\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = u32::max_value() as u64;",
                "    let shift: i32 = 33; // shift > 32",
                "    let result = mul_shift_32(m, factor, shift);",
                "    assert_eq!(result, u32::max_value()); // shifted_sum == u32::max_value()",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = u32::max_value();",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 34; // shift > 32",
                "    let result = mul_shift_32(m, factor, shift);",
                "    assert_eq!(result, 0); // shifted_sum < u32::max_value()",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 10;",
                "    let factor: u64 = 5;",
                "    let shift: i32 = 35; // shift > 32",
                "    let result = mul_shift_32(m, factor, shift);",
                "    assert_eq!(result, 0); // shifted_sum < u32::max_value()",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is true\n",
        "precondition: shifted_sum <= u32::max_value() as u64 at line 70 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = u32::max_value() as u64 + 1; // This will ensure the product exceeds u32::max_value()",
                "    let shift: i32 = 33; // shift is greater than 32",
                "",
                "    let result = mul_shift_32(m, factor, shift);",
                "    assert!(result > u32::max_value()); // Ensure we check for overflow",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = u32::max_value(); // Max value for m",
                "    let factor: u64 = 2; // A small factor that when multiplied will cause sum to exceed u32::max_value()",
                "    let shift: i32 = 36; // shift is greater than 32",
                "",
                "    let result = mul_shift_32(m, factor, shift);",
                "    assert!(result > u32::max_value()); // Ensure we check for overflow",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: shift > 32 at line 59 is false, with bound shift == 32\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 32; // This directly violates the precondition shift > 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let m: u32 = 1;",
                "    let factor: u64 = 1;",
                "    let shift: i32 = 31; // Another violation of the precondition shift > 32",
                "    let _result = mul_shift_32(m, factor, shift);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}