{
  "name": "ryu::f2s_intrinsics::pow5factor_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": false,
  "loc": "src/f2s_intrinsics.rs:27:1:40:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is true\n",
        "precondition: r != 0 at line 33 is true\n",
        "expected return value/type: count\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 25; // 25 can be divided by 5 multiple times",
                "    let expected_count: u32 = 2; // 25 -> 5 (1), 5 -> 0 (2)",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 22; // 22 is not divisible by 5",
                "    let expected_count: u32 = 0; // Loop will break immediately since r != 0",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let value: u32 = 1; // 1 does not have any factors of 5",
                "    let expected_count: u32 = 0; // Loop will break immediately since r != 0",
                "    let result = pow5factor_32(value);",
                "    assert_eq!(result, expected_count);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value != 0 at line 30 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Call the function with a value that causes it to panic due to the debug_assert.",
                "    let _ = pow5factor_32(0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Call the function with a non-zero value.",
                "    let result = pow5factor_32(25); // 25 = 5^2, should return 2",
                "    assert_eq!(result, 2);",
                "",
                "    let result = pow5factor_32(125); // 125 = 5^3, should return 3",
                "    assert_eq!(result, 3);",
                "",
                "    let result = pow5factor_32(60); // 60 = 2^2 * 3 * 5, should return 1",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}