{
  "name": "ryu::buffer::{impl#0}::format",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:47:5:53:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: f.is_nonfinite() at line 48 is true\n",
        "expected return value/type: f.format_nonfinite()\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NaNFloat;",
                "",
                "    impl Float for NaNFloat {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"NaN\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(NaNFloat);",
                "    assert_eq!(result, \"NaN\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct PositiveInfinityFloat;",
                "",
                "    impl Float for PositiveInfinityFloat {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"inf\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(PositiveInfinityFloat);",
                "    assert_eq!(result, \"inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct NegativeInfinityFloat;",
                "",
                "    impl Float for NegativeInfinityFloat {",
                "        fn is_nonfinite(&self) -> bool {",
                "            true",
                "        }",
                "",
                "        fn format_nonfinite(&self) -> &str {",
                "            \"-inf\"",
                "        }",
                "    }",
                "",
                "    let mut buffer = String::new();",
                "    let result = buffer.format(NegativeInfinityFloat);",
                "    assert_eq!(result, \"-inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: f.is_nonfinite() at line 48 is false\n",
        "expected return value/type: self.format_finite(f)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatWrapper(f32);",
                "    ",
                "    impl Float for FloatWrapper {",
                "        fn is_nonfinite(&self) -> bool {",
                "            false",
                "        }",
                "        ",
                "        fn format_nonfinite(&self) -> &str {",
                "            unreachable!()",
                "        }",
                "    }",
                "    ",
                "    let mut buffer = String::new();",
                "    ",
                "    let float_value = FloatWrapper(3.14);",
                "    let result = buffer.format(float_value);",
                "    ",
                "    assert_eq!(result, buffer.format_finite(float_value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct FloatWrapper(f64);",
                "    ",
                "    impl Float for FloatWrapper {",
                "        fn is_nonfinite(&self) -> bool {",
                "            false",
                "        }",
                "        ",
                "        fn format_nonfinite(&self) -> &str {",
                "            unreachable!()",
                "        }",
                "    }",
                "    ",
                "    let mut buffer = String::new();",
                "    ",
                "    let float_value = FloatWrapper(2.718281828);",
                "    let result = buffer.format(float_value);",
                "    ",
                "    assert_eq!(result, buffer.format_finite(float_value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}