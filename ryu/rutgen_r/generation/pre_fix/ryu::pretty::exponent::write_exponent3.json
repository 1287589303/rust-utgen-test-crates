{
  "name": "ryu::pretty::exponent::write_exponent3",
  "mod_info": {
    "name": "pretty::exponent",
    "loc": "src/pretty/mod.rs:1:1:1:14"
  },
  "visible": true,
  "loc": "src/pretty/exponent.rs:5:1:28:2",
  "fn_tests": [
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: sign at line 7 is true\n",
        "precondition: k < 1000 at line 13 is false, with bound k == 1000\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::ptr;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: &[u8] = b\"0123456789\";",
                "    let mut buffer = [0u8; 4]; // buffer to hold the result",
                "    let result_ptr = buffer.as_mut_ptr();",
                "",
                "    unsafe {",
                "        let k = 1000; // k set to 1000 to trigger the panic on line 13",
                "        write_exponent3(k, result_ptr);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: &[u8] = b\"0123456789\";  ",
                "    let mut buffer = [0u8; 4]; // buffer to hold the result",
                "    let result_ptr = buffer.as_mut_ptr();",
                "",
                "    unsafe {",
                "        let k = -999; // k negative to ensure sign is true",
                "        let length = write_exponent3(k, result_ptr);",
                "",
                "        assert_eq!(length, 4); // expect '-' and three digits",
                "        assert_eq!(buffer[0], b'-'); // first character should be '-'",
                "        assert_eq!(buffer[1], b'9'); // verify first digit",
                "        assert_eq!(buffer[2], b'9'); // verify second digit",
                "        assert_eq!(buffer[3], b'9'); // verify third digit",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: sign at line 7 is false\n",
        "precondition: k < 1000 at line 13 is true\n",
        "precondition: k >= 100 at line 14 is true, with bound k == 100\n",
        "expected return value/type: sign as usize + 3\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    const MAX_SIZE: usize = 5;",
                "    let mut output: [u8; MAX_SIZE] = [0; MAX_SIZE];",
                "    let result_ptr = output.as_mut_ptr();",
                "    let k: isize = 100;",
                "",
                "    let len = unsafe { write_exponent3(k, result_ptr) };",
                "",
                "    assert_eq!(len, 3);",
                "    assert_eq!(&output[..len], b\"100\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: sign at line 7 is false\n",
        "precondition: k < 1000 at line 13 is true\n",
        "precondition: k >= 100 at line 14 is false\n",
        "precondition: k >= 10 at line 20 is true, with bound k == 10\n",
        "expected return value/type: sign as usize + 2\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer = [0u8; 4]; // Enough space for the result",
                "    let result_ptr = buffer.as_mut_ptr();",
                "    let k: isize = 10;",
                "    ",
                "    let length = unsafe { write_exponent3(k, result_ptr) };",
                "    ",
                "    assert_eq!(length, 2); // sign (false) + 2 for two digits \"10\"",
                "    assert_eq!(&buffer[0..2], b\"10\"); // Result should be \"10\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: sign at line 7 is false\n",
        "precondition: k < 1000 at line 13 is true\n",
        "precondition: k >= 100 at line 14 is false\n",
        "precondition: k >= 10 at line 20 is false\n",
        "expected return value/type: sign as usize + 1\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::ptr;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    let mut result: [u8; 4] = [0; 4]; // buffer to hold the result",
                "    let result_ptr = result.as_mut_ptr();",
                "",
                "    unsafe {",
                "        let k: isize = 9; // k < 10",
                "        let return_value = write_exponent3(k, result_ptr);",
                "        assert_eq!(return_value, 1); // sign as usize + 1, sign is false",
                "        assert_eq!(result[0], b'0' + k as u8); // expected result is '9'",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    let mut result: [u8; 4] = [0; 4]; // buffer to hold the result",
                "    let result_ptr = result.as_mut_ptr();",
                "",
                "    unsafe {",
                "        let k: isize = 0; // k < 10",
                "        let return_value = write_exponent3(k, result_ptr);",
                "        assert_eq!(return_value, 1); // sign as usize + 1, sign is false",
                "        assert_eq!(result[0], b'0' + k as u8); // expected result is '0'",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}