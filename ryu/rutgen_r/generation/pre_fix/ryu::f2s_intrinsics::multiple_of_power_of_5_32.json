{
  "name": "ryu::f2s_intrinsics::multiple_of_power_of_5_32",
  "mod_info": {
    "name": "f2s_intrinsics",
    "loc": "src/lib.rs:116:1:116:20"
  },
  "visible": true,
  "loc": "src/f2s_intrinsics.rs:44:1:46:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: pow5factor_32(value) >= p\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    fn pow5factor_32(value: u32) -> u32 {",
                "        let mut count = 0;",
                "        let mut v = value;",
                "        while v % 5 == 0 {",
                "            v /= 5;",
                "            count += 1;",
                "        }",
                "        count",
                "    }",
                "",
                "    let value = 25; // 25 = 5^2, pow5factor_32(25) should return 2",
                "    let p = 2;",
                "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    fn pow5factor_32(value: u32) -> u32 {",
                "        let mut count = 0;",
                "        let mut v = value;",
                "        while v % 5 == 0 {",
                "            v /= 5;",
                "            count += 1;",
                "        }",
                "        count",
                "    }",
                "",
                "    let value = 10; // 10 = 5^1, pow5factor_32(10) should return 1",
                "    let p = 2;",
                "    assert_eq!(multiple_of_power_of_5_32(value, p), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    fn pow5factor_32(value: u32) -> u32 {",
                "        let mut count = 0;",
                "        let mut v = value;",
                "        while v % 5 == 0 {",
                "            v /= 5;",
                "            count += 1;",
                "        }",
                "        count",
                "    }",
                "",
                "    let value = 1; // 1 has no factors of 5, pow5factor_32(1) should return 0",
                "    let p = 0;",
                "    assert_eq!(multiple_of_power_of_5_32(value, p), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}