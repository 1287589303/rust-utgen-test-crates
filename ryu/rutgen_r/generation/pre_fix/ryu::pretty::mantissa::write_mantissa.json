{
  "name": "ryu::pretty::mantissa::write_mantissa",
  "mod_info": {
    "name": "pretty::mantissa",
    "loc": "src/pretty/mod.rs:2:1:2:14"
  },
  "visible": true,
  "loc": "src/pretty/mantissa.rs:44:1:82:2",
  "fn_tests": [
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: output >= 10_000 at line 45 is true, with bound output == 10_000\n",
        "precondition: output >= 10_000 at line 45 is false\n",
        "precondition: output >= 100 at line 62 is false\n",
        "precondition: output >= 10 at line 72 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9',",
                "        // ... fill rest with appropriate characters ...",
                "    ];",
                "    let mut buffer = [0u8; 16];",
                "    let result_ptr = buffer.as_mut_ptr().offset(15);",
                "    unsafe { write_mantissa(10_000, result_ptr) };",
                "    assert_eq!(&buffer[14..16], &[b'0', b'0']); // Expected result representation",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9',",
                "        // ... fill rest with appropriate characters ...",
                "    ];",
                "    let mut buffer = [0u8; 16];",
                "    let result_ptr = buffer.as_mut_ptr().offset(15);",
                "    unsafe { write_mantissa(9999, result_ptr) };",
                "    assert_eq!(&buffer[15..16], &[b'9']); // Expected result representation",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9',",
                "        // ... fill rest with appropriate characters ...",
                "    ];",
                "    let mut buffer = [0u8; 16];",
                "    let result_ptr = buffer.as_mut_ptr().offset(15);",
                "    unsafe { write_mantissa(99, result_ptr) };",
                "    assert_eq!(&buffer[15..16], &[b'9']); // Expected result representation",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    const DIGIT_TABLE: [u8; 200] = [",
                "        b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9',",
                "        // ... fill rest with appropriate characters ...",
                "    ];",
                "    let mut buffer = [0u8; 16];",
                "    let result_ptr = buffer.as_mut_ptr().offset(15);",
                "    unsafe { write_mantissa(9, result_ptr) };",
                "    assert_eq!(&buffer[15..16], &[b'9']); // Expected result representation",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: output >= 10_000 at line 45 is false\n",
        "precondition: output >= 100 at line 62 is true, with bound output == 100\n",
        "precondition: output >= 10 at line 72 is true, with bound output == 10\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let output: u32 = 100; // output >= 100 is true",
                "    let mut result = [0u8; 10]; // buffer to hold the result",
                "",
                "    unsafe {",
                "        write_mantissa(output, result.as_mut_ptr().add(9)); // initializing result pointer",
                "    }",
                "",
                "    assert_eq!(&result[8..10], b\"00\"); // DigitTable value for 100 is \"00\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let output: u32 = 10; // output >= 10 is true",
                "    let mut result = [0u8; 10]; // buffer to hold the result",
                "    ",
                "    unsafe {",
                "        write_mantissa(output, result.as_mut_ptr().add(9)); // initializing result pointer",
                "    }",
                "",
                "    assert_eq!(result[9], b'0' + 10); // DigitTable value for 10 is '0' + 10",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: output >= 10_000 at line 45 is false\n",
        "precondition: output >= 100 at line 62 is false\n",
        "precondition: output >= 10 at line 72 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::ptr;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: [u8; 200] = *b\"000102030405060708090a0b0c0d0e0f101112131415161718192021222324252627282930313233343536373839404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecf\";",
                "",
                "    let mut output: u32 = 5; // below 10,000, 100, and 10",
                "    let mut buffer: [u8; 10] = [0; 10];",
                "    let result_ptr = buffer.as_mut_ptr().offset(10); // Point to the end of the buffer",
                "",
                "    unsafe {",
                "        write_mantissa(output, result_ptr);",
                "    }",
                "",
                "    // Check results in buffer, should only be '05' at the end since output was 5",
                "    assert_eq!(&buffer[8..10], b\"05\");",
                "    assert_eq!(&buffer[0..8], &[0; 8]); // Ensure no other values were written",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: [u8; 200] = *b\"000102030405060708090a0b0c0d0e0f101112131415161718192021222324252627282930313233343536373839404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecf\";",
                "",
                "    let mut output: u32 = 99; // below 10,000 and 100, but at boundary of 10",
                "    let mut buffer: [u8; 10] = [0; 10];",
                "    let result_ptr = buffer.as_mut_ptr().offset(10); // Point to the end of the buffer",
                "",
                "    unsafe {",
                "        write_mantissa(output, result_ptr);",
                "    }",
                "",
                "    // Check results in buffer, should only be '99' at the end since output was 99",
                "    assert_eq!(&buffer[8..10], b\"99\");",
                "    assert_eq!(&buffer[0..8], &[0; 8]); // Ensure no other values were written",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::ptr;",
                "",
                "    const DIGIT_TABLE: [u8; 200] = *b\"000102030405060708090a0b0c0d0e0f101112131415161718192021222324252627282930313233343536373839404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecf\";",
                "",
                "    let mut output: u32 = 10; // below 10,000 and 100, but at boundary of 10",
                "    let mut buffer: [u8; 10] = [0; 10];",
                "    let result_ptr = buffer.as_mut_ptr().offset(10); // Point to the end of the buffer",
                "",
                "    unsafe {",
                "        write_mantissa(output, result_ptr);",
                "    }",
                "",
                "    // Check results in buffer, should only be '10' at the end since output was 10",
                "    assert_eq!(&buffer[8..10], b\"10\");",
                "    assert_eq!(&buffer[0..8], &[0; 8]); // Ensure no other values were written",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}