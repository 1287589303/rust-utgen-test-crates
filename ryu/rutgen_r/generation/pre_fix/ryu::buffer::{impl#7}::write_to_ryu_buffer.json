{
  "name": "ryu::buffer::{impl#7}::write_to_ryu_buffer",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:168:5:170:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: f64,",
                "    }",
                "",
                "    impl TestStruct {",
                "        unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            raw::format64(self.value, result)",
                "        }",
                "    }",
                "",
                "    let input = TestStruct { value: 123.456 };",
                "    let mut output: [u8; 32] = [0; 32];",
                "",
                "    let size = unsafe { input.write_to_ryu_buffer(output.as_mut_ptr()) };",
                "",
                "    assert!(size > 0);",
                "    // Additional assertions can be made based on expected format",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: f64,",
                "    }",
                "",
                "    impl TestStruct {",
                "        unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            raw::format64(self.value, result)",
                "        }",
                "    }",
                "",
                "    let input = TestStruct { value: 0.0 };",
                "    let mut output: [u8; 32] = [0; 32];",
                "",
                "    let size = unsafe { input.write_to_ryu_buffer(output.as_mut_ptr()) };",
                "",
                "    assert!(size > 0);",
                "    // Check for specific expected format for zero",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: f64,",
                "    }",
                "",
                "    impl TestStruct {",
                "        unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            raw::format64(self.value, result)",
                "        }",
                "    }",
                "",
                "    let input = TestStruct { value: 123.456 };",
                "    ",
                "    unsafe {",
                "        let _ = input.write_to_ryu_buffer(std::ptr::null_mut());",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}