[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _6 = Eq(move _7, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:41:23: 41:41 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _11 = SubWithOverflow(const 1_i32, const f2s::FLOAT_BIAS),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:44:13: 44:27 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1_i32, const f2s::FLOAT_BIAS) -> [success: bb2, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_11.0: i32),
            StorageLive(_12),
            _12 = const f2s::FLOAT_MANTISSA_BITS as i32 (IntToInt),
            _13 = SubWithOverflow(_10, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:44:13: 44:56 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb3, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_13.0: i32),
            StorageDead(_12),
            StorageDead(_10),
            _14 = SubWithOverflow(_9, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:44:13: 44:60 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 2_i32) -> [success: bb4, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_14.0: i32),
            StorageDead(_9),
            StorageLive(_15),
            _15 = _1,
            _5 = (move _8, move _15),
            StorageDead(_15),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:41:20: 52:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _2,
            _19 = move _20 as i32 (IntToInt),
            StorageDead(_20),
            _21 = SubWithOverflow(_19, const f2s::FLOAT_BIAS),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:49:13: 49:46 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const f2s::FLOAT_BIAS) -> [success: bb6, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_21.0: i32),
            StorageDead(_19),
            StorageLive(_22),
            _22 = const f2s::FLOAT_MANTISSA_BITS as i32 (IntToInt),
            _23 = SubWithOverflow(_18, _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:49:13: 49:75 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, move _22) -> [success: bb7, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = move (_23.0: i32),
            StorageDead(_22),
            StorageDead(_18),
            _24 = SubWithOverflow(_17, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:49:13: 49:79 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, const 2_i32) -> [success: bb8, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = move (_24.0: i32),
            StorageDead(_17),
            StorageLive(_25),
            StorageLive(_26),
            _27 = Lt(const f2s::FLOAT_MANTISSA_BITS, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:50:13: 50:42 (#0),
                    scope: scope[0],
                },
                kind: assert(move _27, "attempt to shift left by `{}`, which would overflow", const f2s::FLOAT_MANTISSA_BITS) -> [success: bb9, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = Shl(const 1_u32, const f2s::FLOAT_MANTISSA_BITS),
            StorageLive(_28),
            _28 = _1,
            _25 = BitOr(move _26, move _28),
            StorageDead(_28),
            StorageDead(_26),
            _5 = (move _16, move _25),
            StorageDead(_25),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:41:20: 52:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: i32),
            StorageLive(_4),
            _4 = (_5.1: u32),
            StorageDead(_5),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _4,
            _30 = BitAnd(move _31, const 1_u32),
            StorageDead(_31),
            _29 = Eq(move _30, const 0_u32),
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageLive(_32),
            _32 = _29,
            FakeRead(ForLet(None), _32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _4,
            _35 = MulWithOverflow(const 4_u32, _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:57:14: 57:20 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _34) -> [success: bb11, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = move (_35.0: u32),
            StorageDead(_34),
            FakeRead(ForLet(None), _33),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _4,
            _39 = MulWithOverflow(const 4_u32, _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:58:14: 58:20 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _38) -> [success: bb12, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = move (_39.0: u32),
            StorageDead(_38),
            _40 = AddWithOverflow(_37, const 2_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:58:14: 58:24 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, const 2_u32) -> [success: bb13, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = move (_40.0: u32),
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _1,
            _43 = Ne(move _44, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:60:21: 60:39 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _43) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _42 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:60:20: 60:62 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_45),
            _45 = _2,
            _42 = Le(move _45, const 1_u32),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:60:20: 60:62 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            _41 = move _42 as u32 (IntToInt),
            StorageDead(_42),
            FakeRead(ForLet(None), _41),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _4,
            _50 = MulWithOverflow(const 4_u32, _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:61:14: 61:20 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_50.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u32, move _49) -> [success: bb17, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move (_50.0: u32),
            StorageDead(_49),
            _51 = SubWithOverflow(_48, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:61:14: 61:24 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_51.1: bool), "attempt to compute `{} - {}`, which would overflow", move _48, const 1_u32) -> [success: bb18, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = move (_51.0: u32),
            StorageDead(_48),
            StorageLive(_52),
            _52 = _41,
            _53 = SubWithOverflow(_47, _52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:61:14: 61:35 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_53.1: bool), "attempt to compute `{} - {}`, which would overflow", move _47, move _52) -> [success: bb19, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_53.0: u32),
            StorageDead(_52),
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = const false,
            FakeRead(ForLet(None), _58),
            StorageLive(_59),
            _59 = const false,
            FakeRead(ForLet(None), _59),
            StorageLive(_60),
            _60 = const 0_u8,
            FakeRead(ForLet(None), _60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _3,
            _62 = Ge(move _63, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:71:8: 71:15 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _62) -> [0: bb65, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:72:17: 72:31 (#0),
                    scope: scope[14],
                },
                kind: _64 = common::log10_pow2(move _65) -> [return: bb21, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            FakeRead(ForLet(None), _64),
            StorageLive(_66),
            _66 = _64,
            _57 = move _66 as i32 (IntToInt),
            StorageDead(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = _64,
            _70 = move _71 as i32 (IntToInt),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:74:43: 74:61 (#0),
                    scope: scope[15],
                },
                kind: _69 = common::pow5bits(move _70) -> [return: bb22, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            _72 = AddWithOverflow(const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, _69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:74:17: 74:61 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, move _69) -> [success: bb23, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = move (_72.0: i32),
            StorageDead(_69),
            _73 = SubWithOverflow(_68, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:74:17: 74:65 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_73.1: bool), "attempt to compute `{} - {}`, which would overflow", move _68, const 1_i32) -> [success: bb24, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _67 = move (_73.0: i32),
            StorageDead(_68),
            FakeRead(ForLet(None), _67),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = _3,
            _78 = Eq(_77, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:75:17: 75:20 (#0),
                    scope: scope[16],
                },
                kind: assert(!move _78, "attempt to negate `{}`, which would overflow", _77) -> [success: bb25, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = Neg(move _77),
            StorageDead(_77),
            StorageLive(_79),
            StorageLive(_80),
            _80 = _64,
            _79 = move _80 as i32 (IntToInt),
            StorageDead(_80),
            _81 = AddWithOverflow(_76, _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:75:17: 75:31 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _76, move _79) -> [success: bb26, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _75 = move (_81.0: i32),
            StorageDead(_79),
            StorageDead(_76),
            StorageLive(_82),
            _82 = _67,
            _83 = AddWithOverflow(_75, _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:75:17: 75:35 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_83.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, move _82) -> [success: bb27, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = move (_83.0: i32),
            StorageDead(_82),
            StorageDead(_75),
            FakeRead(ForLet(None), _74),
            StorageLive(_84),
            StorageLive(_85),
            _85 = _33,
            StorageLive(_86),
            _86 = _64,
            StorageLive(_87),
            _87 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:76:14: 76:45 (#0),
                    scope: scope[17],
                },
                kind: _84 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _85, move _86, move _87) -> [return: bb28, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            StorageDead(_85),
            _54 = move _84,
            StorageDead(_84),
            StorageLive(_88),
            StorageLive(_89),
            _89 = _36,
            StorageLive(_90),
            _90 = _64,
            StorageLive(_91),
            _91 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:77:14: 77:45 (#0),
                    scope: scope[17],
                },
                kind: _88 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _89, move _90, move _91) -> [return: bb29, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_89),
            _55 = move _88,
            StorageDead(_88),
            StorageLive(_92),
            StorageLive(_93),
            _93 = _46,
            StorageLive(_94),
            _94 = _64,
            StorageLive(_95),
            _95 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:78:14: 78:45 (#0),
                    scope: scope[17],
                },
                kind: _92 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _93, move _94, move _95) -> [return: bb30, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_93),
            _56 = move _92,
            StorageDead(_92),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _64,
            _97 = Ne(move _98, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:12: 79:18 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _97) -> [0: bb48, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
            StorageLive(_102),
            _102 = _55,
            _103 = SubWithOverflow(_102, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:22: 79:30 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} - {}`, which would overflow", move _102, const 1_u32) -> [success: bb32, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _101 = move (_103.0: u32),
            StorageDead(_102),
            _104 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:22: 79:35 (#0),
                    scope: scope[17],
                },
                kind: assert(!move _104, "attempt to divide `{}` by zero", _101) -> [success: bb33, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _100 = Div(move _101, const 10_u32),
            StorageDead(_101),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _56,
            _107 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:39: 79:46 (#0),
                    scope: scope[17],
                },
                kind: assert(!move _107, "attempt to divide `{}` by zero", _106) -> [success: bb34, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = Div(move _106, const 10_u32),
            StorageDead(_106),
            _99 = Le(move _100, move _105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:22: 79:46 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _99) -> [0: bb47, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_100),
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = _64,
            _112 = move _113 as i32 (IntToInt),
            StorageDead(_113),
            _114 = SubWithOverflow(_112, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:83:56: 83:68 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_114.1: bool), "attempt to compute `{} - {}`, which would overflow", move _112, const 1_i32) -> [success: bb36, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _111 = move (_114.0: i32),
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:83:47: 83:69 (#0),
                    scope: scope[17],
                },
                kind: _110 = common::pow5bits(move _111) -> [return: bb37, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            _115 = AddWithOverflow(const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, _110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:83:21: 83:69 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_115.1: bool), "attempt to compute `{} + {}`, which would overflow", const f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT, move _110) -> [success: bb38, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _109 = move (_115.0: i32),
            StorageDead(_110),
            _116 = SubWithOverflow(_109, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:83:21: 83:73 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_116.1: bool), "attempt to compute `{} - {}`, which would overflow", move _109, const 1_i32) -> [success: bb39, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _108 = move (_116.0: i32),
            StorageDead(_109),
            FakeRead(ForLet(None), _108),
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            _119 = _33,
            StorageLive(_120),
            StorageLive(_121),
            _121 = _64,
            _122 = SubWithOverflow(_121, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:44: 85:49 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_122.1: bool), "attempt to compute `{} - {}`, which would overflow", move _121, const 1_u32) -> [success: bb40, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = move (_122.0: u32),
            StorageDead(_121),
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            StorageLive(_127),
            _127 = _3,
            _128 = Eq(_127, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:51: 85:54 (#0),
                    scope: scope[18],
                },
                kind: assert(!move _128, "attempt to negate `{}`, which would overflow", _127) -> [success: bb41, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _126 = Neg(move _127),
            StorageDead(_127),
            StorageLive(_129),
            StorageLive(_130),
            _130 = _64,
            _129 = move _130 as i32 (IntToInt),
            StorageDead(_130),
            _131 = AddWithOverflow(_126, _129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:51: 85:65 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_131.1: bool), "attempt to compute `{} + {}`, which would overflow", move _126, move _129) -> [success: bb42, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _125 = move (_131.0: i32),
            StorageDead(_129),
            StorageDead(_126),
            _132 = SubWithOverflow(_125, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:51: 85:69 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_132.1: bool), "attempt to compute `{} - {}`, which would overflow", move _125, const 1_i32) -> [success: bb43, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _124 = move (_132.0: i32),
            StorageDead(_125),
            StorageLive(_133),
            _133 = _108,
            _134 = AddWithOverflow(_124, _133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:51: 85:73 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_134.1: bool), "attempt to compute `{} + {}`, which would overflow", move _124, move _133) -> [success: bb44, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _123 = move (_134.0: i32),
            StorageDead(_133),
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:18: 85:74 (#0),
                    scope: scope[18],
                },
                kind: _118 = f2s_intrinsics::mul_pow5_inv_div_pow2(move _119, move _120, move _123) -> [return: bb45, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_120),
            StorageDead(_119),
            _135 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:85:17: 85:80 (#0),
                    scope: scope[18],
                },
                kind: assert(!move _135, "attempt to calculate the remainder of `{}` with a divisor of zero", _118) -> [success: bb46, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _117 = Rem(move _118, const 10_u32),
            StorageDead(_118),
            _60 = move _117 as u8 (IntToInt),
            StorageDead(_117),
            _96 = const (),
            StorageDead(_108),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:9: 86:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:79:9: 86:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_136),
            StorageLive(_137),
            _137 = _64,
            _136 = Le(move _137, const 9_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:87:12: 87:18 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _136) -> [0: bb63, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = _33,
            _141 = Eq(const 5_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:90:16: 90:22 (#0),
                    scope: scope[17],
                },
                kind: assert(!move _141, "attempt to calculate the remainder of `{}` with a divisor of zero", _140) -> [success: bb52, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _139 = Rem(move _140, const 5_u32),
            StorageDead(_140),
            _138 = Eq(move _139, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:90:16: 90:27 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _138) -> [0: bb55, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            StorageLive(_142),
            StorageLive(_143),
            _143 = _33,
            StorageLive(_144),
            _144 = _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:91:40: 91:72 (#0),
                    scope: scope[17],
                },
                kind: _142 = f2s_intrinsics::multiple_of_power_of_5_32(move _143, move _144) -> [return: bb54, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_143),
            _59 = move _142,
            StorageDead(_142),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:90:13: 96:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            StorageLive(_145),
            _145 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:92:23: 92:36 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _145) -> [0: bb58, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_146),
            StorageLive(_147),
            _147 = _46,
            StorageLive(_148),
            _148 = _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:93:40: 93:72 (#0),
                    scope: scope[17],
                },
                kind: _146 = f2s_intrinsics::multiple_of_power_of_5_32(move _147, move _148) -> [return: bb57, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
            StorageDead(_147),
            _58 = move _146,
            StorageDead(_146),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:92:20: 96:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = _36,
            StorageLive(_152),
            _152 = _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:95:23: 95:55 (#0),
                    scope: scope[17],
                },
                kind: _150 = f2s_intrinsics::multiple_of_power_of_5_32(move _151, move _152) -> [return: bb59, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            StorageDead(_151),
            _149 = move _150 as u32 (IntToInt),
            StorageDead(_150),
            _153 = SubWithOverflow(_55, _149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:95:17: 95:62 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_153.1: bool), "attempt to compute `{} - {}`, which would overflow", _55, move _149) -> [success: bb60, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = move (_153.0: u32),
            StorageDead(_149),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:92:20: 96:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:90:13: 96:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:87:9: 97:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:87:9: 97:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_74),
            StorageDead(_67),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:71:5: 126:6 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageLive(_154),
            StorageLive(_155),
            StorageLive(_156),
            _156 = _3,
            _157 = Eq(_156, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:99:28: 99:31 (#0),
                    scope: scope[14],
                },
                kind: assert(!move _157, "attempt to negate `{}`, which would overflow", _156) -> [success: bb66, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _155 = Neg(move _156),
            StorageDead(_156),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:99:17: 99:32 (#0),
                    scope: scope[14],
                },
                kind: _154 = common::log10_pow5(move _155) -> [return: bb67, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            FakeRead(ForLet(None), _154),
            StorageLive(_158),
            StorageLive(_159),
            _159 = _154,
            _158 = move _159 as i32 (IntToInt),
            StorageDead(_159),
            StorageLive(_160),
            _160 = _3,
            _161 = AddWithOverflow(_158, _160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:100:15: 100:28 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_161.1: bool), "attempt to compute `{} + {}`, which would overflow", move _158, move _160) -> [success: bb68, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = move (_161.0: i32),
            StorageDead(_160),
            StorageDead(_158),
            StorageLive(_162),
            StorageLive(_163),
            StorageLive(_164),
            _164 = _3,
            _165 = Eq(_164, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:101:17: 101:20 (#0),
                    scope: scope[19],
                },
                kind: assert(!move _165, "attempt to negate `{}`, which would overflow", _164) -> [success: bb69, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _163 = Neg(move _164),
            StorageDead(_164),
            StorageLive(_166),
            StorageLive(_167),
            _167 = _154,
            _166 = move _167 as i32 (IntToInt),
            StorageDead(_167),
            _168 = SubWithOverflow(_163, _166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:101:17: 101:31 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_168.1: bool), "attempt to compute `{} - {}`, which would overflow", move _163, move _166) -> [success: bb70, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _162 = move (_168.0: i32),
            StorageDead(_166),
            StorageDead(_163),
            FakeRead(ForLet(None), _162),
            StorageLive(_169),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _162,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:102:17: 102:28 (#0),
                    scope: scope[20],
                },
                kind: _170 = common::pow5bits(move _171) -> [return: bb71, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_171),
            _172 = SubWithOverflow(_170, const f2s_intrinsics::FLOAT_POW5_BITCOUNT),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:102:17: 102:50 (#0),
                    scope: scope[20],
                },
                kind: assert(!move (_172.1: bool), "attempt to compute `{} - {}`, which would overflow", move _170, const f2s_intrinsics::FLOAT_POW5_BITCOUNT) -> [success: bb72, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = move (_172.0: i32),
            StorageDead(_170),
            FakeRead(ForLet(None), _169),
            StorageLive(_173),
            StorageLive(_174),
            StorageLive(_175),
            _175 = _154,
            _174 = move _175 as i32 (IntToInt),
            StorageDead(_175),
            StorageLive(_176),
            _176 = _169,
            _177 = SubWithOverflow(_174, _176),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:103:21: 103:33 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_177.1: bool), "attempt to compute `{} - {}`, which would overflow", move _174, move _176) -> [success: bb73, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _173 = move (_177.0: i32),
            StorageDead(_176),
            StorageDead(_174),
            FakeRead(ForLet(None), _173),
            StorageLive(_178),
            StorageLive(_179),
            _179 = _33,
            StorageLive(_180),
            StorageLive(_181),
            _181 = _162,
            _180 = move _181 as u32 (IntToInt),
            StorageDead(_181),
            StorageLive(_182),
            _182 = _173,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:104:14: 104:48 (#0),
                    scope: scope[22],
                },
                kind: _178 = f2s_intrinsics::mul_pow5_div_pow2(move _179, move _180, move _182) -> [return: bb74, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
            StorageDead(_180),
            StorageDead(_179),
            _54 = move _178,
            StorageDead(_178),
            StorageLive(_183),
            StorageLive(_184),
            _184 = _36,
            StorageLive(_185),
            StorageLive(_186),
            _186 = _162,
            _185 = move _186 as u32 (IntToInt),
            StorageDead(_186),
            StorageLive(_187),
            _187 = _173,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:105:14: 105:48 (#0),
                    scope: scope[22],
                },
                kind: _183 = f2s_intrinsics::mul_pow5_div_pow2(move _184, move _185, move _187) -> [return: bb75, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_187),
            StorageDead(_185),
            StorageDead(_184),
            _55 = move _183,
            StorageDead(_183),
            StorageLive(_188),
            StorageLive(_189),
            _189 = _46,
            StorageLive(_190),
            StorageLive(_191),
            _191 = _162,
            _190 = move _191 as u32 (IntToInt),
            StorageDead(_191),
            StorageLive(_192),
            _192 = _173,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:106:14: 106:48 (#0),
                    scope: scope[22],
                },
                kind: _188 = f2s_intrinsics::mul_pow5_div_pow2(move _189, move _190, move _192) -> [return: bb76, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_190),
            StorageDead(_189),
            _56 = move _188,
            StorageDead(_188),
            StorageLive(_193),
            StorageLive(_194),
            StorageLive(_195),
            _195 = _154,
            _194 = Ne(move _195, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:12: 107:18 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _194) -> [0: bb91, otherwise: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            StorageLive(_196),
            StorageLive(_197),
            StorageLive(_198),
            StorageLive(_199),
            _199 = _55,
            _200 = SubWithOverflow(_199, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:22: 107:30 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_200.1: bool), "attempt to compute `{} - {}`, which would overflow", move _199, const 1_u32) -> [success: bb78, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _198 = move (_200.0: u32),
            StorageDead(_199),
            _201 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:22: 107:35 (#0),
                    scope: scope[22],
                },
                kind: assert(!move _201, "attempt to divide `{}` by zero", _198) -> [success: bb79, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _197 = Div(move _198, const 10_u32),
            StorageDead(_198),
            StorageLive(_202),
            StorageLive(_203),
            _203 = _56,
            _204 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:39: 107:46 (#0),
                    scope: scope[22],
                },
                kind: assert(!move _204, "attempt to divide `{}` by zero", _203) -> [success: bb80, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _202 = Div(move _203, const 10_u32),
            StorageDead(_203),
            _196 = Le(move _197, move _202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:22: 107:46 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _196) -> [0: bb90, otherwise: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_197),
            StorageLive(_205),
            StorageLive(_206),
            StorageLive(_207),
            _207 = _154,
            _206 = move _207 as i32 (IntToInt),
            StorageDead(_207),
            _208 = SubWithOverflow(_206, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:108:17: 108:29 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_208.1: bool), "attempt to compute `{} - {}`, which would overflow", move _206, const 1_i32) -> [success: bb82, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _205 = move (_208.0: i32),
            StorageDead(_206),
            StorageLive(_209),
            StorageLive(_210),
            StorageLive(_211),
            StorageLive(_212),
            _212 = _162,
            _213 = AddWithOverflow(_212, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:108:42: 108:47 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_213.1: bool), "attempt to compute `{} + {}`, which would overflow", move _212, const 1_i32) -> [success: bb83, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = move (_213.0: i32),
            StorageDead(_212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:108:33: 108:48 (#0),
                    scope: scope[22],
                },
                kind: _210 = common::pow5bits(move _211) -> [return: bb84, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            _214 = SubWithOverflow(_210, const f2s_intrinsics::FLOAT_POW5_BITCOUNT),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:108:32: 108:71 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_214.1: bool), "attempt to compute `{} - {}`, which would overflow", move _210, const f2s_intrinsics::FLOAT_POW5_BITCOUNT) -> [success: bb85, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _209 = move (_214.0: i32),
            StorageDead(_210),
            _215 = SubWithOverflow(_205, _209),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:108:17: 108:71 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_215.1: bool), "attempt to compute `{} - {}`, which would overflow", move _205, move _209) -> [success: bb86, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _173 = move (_215.0: i32),
            StorageDead(_209),
            StorageDead(_205),
            StorageLive(_216),
            StorageLive(_217),
            StorageLive(_218),
            _218 = _33,
            StorageLive(_219),
            StorageLive(_220),
            StorageLive(_221),
            _221 = _162,
            _222 = AddWithOverflow(_221, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:109:57: 109:64 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_222.1: bool), "attempt to compute `{} + {}`, which would overflow", move _221, const 1_i32) -> [success: bb87, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _220 = move (_222.0: i32),
            StorageDead(_221),
            _219 = move _220 as u32 (IntToInt),
            StorageDead(_220),
            StorageLive(_223),
            _223 = _173,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:109:35: 109:75 (#0),
                    scope: scope[22],
                },
                kind: _217 = f2s_intrinsics::mul_pow5_div_pow2(move _218, move _219, move _223) -> [return: bb88, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_223),
            StorageDead(_219),
            StorageDead(_218),
            _224 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:109:34: 109:81 (#0),
                    scope: scope[22],
                },
                kind: assert(!move _224, "attempt to calculate the remainder of `{}` with a divisor of zero", _217) -> [success: bb89, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _216 = Rem(move _217, const 10_u32),
            StorageDead(_217),
            _60 = move _216 as u8 (IntToInt),
            StorageDead(_216),
            _193 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:9: 110:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_197),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[22],
                },
                kind: goto -> bb92,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[22],
                },
                kind: goto -> bb92,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _193 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:107:9: 110:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_196),
            StorageDead(_194),
            StorageDead(_193),
            StorageLive(_225),
            StorageLive(_226),
            _226 = _154,
            _225 = Le(move _226, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:111:12: 111:18 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _225) -> [0: bb99, otherwise: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_226),
            _59 = const true,
            StorageLive(_227),
            _227 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:115:16: 115:29 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _227) -> [0: bb96, otherwise: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_228),
            _228 = _41,
            _58 = Eq(move _228, const 1_u32),
            StorageDead(_228),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:115:13: 121:14 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _229 = SubWithOverflow(_55, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:120:17: 120:24 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_229.1: bool), "attempt to compute `{} - {}`, which would overflow", _55, const 1_u32) -> [success: bb97, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = move (_229.0: u32),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:115:13: 121:14 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_227),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:111:9: 125:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_226),
            StorageLive(_230),
            StorageLive(_231),
            _231 = _154,
            _230 = Lt(move _231, const 31_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:122:19: 122:25 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _230) -> [0: bb103, otherwise: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
            StorageLive(_232),
            StorageLive(_233),
            _233 = _33,
            StorageLive(_234),
            StorageLive(_235),
            _235 = _154,
            _236 = SubWithOverflow(_235, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:124:66: 124:71 (#0),
                    scope: scope[22],
                },
                kind: assert(!move (_236.1: bool), "attempt to compute `{} - {}`, which would overflow", move _235, const 1_u32) -> [success: bb101, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _234 = move (_236.0: u32),
            StorageDead(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:124:36: 124:72 (#0),
                    scope: scope[22],
                },
                kind: _232 = f2s_intrinsics::multiple_of_power_of_2_32(move _233, move _234) -> [return: bb102, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            StorageDead(_233),
            _59 = move _232,
            StorageDead(_232),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:122:16: 125:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
            _61 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:122:16: 125:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:111:9: 125:10 (#0),
                    scope: scope[22],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_173),
            StorageDead(_169),
            StorageDead(_162),
            StorageDead(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:71:5: 126:6 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
            StorageLive(_237),
            _237 = const 0_i32,
            FakeRead(ForLet(None), _237),
            StorageLive(_238),
            StorageLive(_239),
            _239 = _58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:130:21: 130:41 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _239) -> [0: bb107, otherwise: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_240),
            _240 = _59,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:130:45: 130:65 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _240) -> [0: bb150, otherwise: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_241),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:9: 140:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:9: 140:10 (#0),
                    scope: scope[23],
                },
                kind: falseUnwind -> [real: bb110, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_243),
            StorageLive(_244),
            StorageLive(_245),
            _245 = _55,
            _246 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:15: 132:22 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _246, "attempt to divide `{}` by zero", _245) -> [success: bb111, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _244 = Div(move _245, const 10_u32),
            StorageDead(_245),
            StorageLive(_247),
            StorageLive(_248),
            _248 = _56,
            _249 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:25: 132:32 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _249, "attempt to divide `{}` by zero", _248) -> [success: bb112, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _247 = Div(move _248, const 10_u32),
            StorageDead(_248),
            _243 = Gt(move _244, move _247),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:15: 132:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _243) -> [0: bb122, otherwise: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_247),
            StorageDead(_244),
            StorageLive(_250),
            StorageLive(_251),
            StorageLive(_252),
            _252 = _56,
            StorageLive(_253),
            StorageLive(_254),
            StorageLive(_255),
            _255 = _56,
            _256 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:133:42: 133:51 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _256, "attempt to divide `{}` by zero", _255) -> [success: bb114, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _254 = Div(move _255, const 10_u32),
            StorageDead(_255),
            _257 = MulWithOverflow(_254, const 10_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:133:42: 133:56 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_257.1: bool), "attempt to compute `{} * {}`, which would overflow", move _254, const 10_u32) -> [success: bb115, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _253 = move (_257.0: u32),
            StorageDead(_254),
            _258 = SubWithOverflow(_252, _253),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:133:37: 133:56 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_258.1: bool), "attempt to compute `{} - {}`, which would overflow", move _252, move _253) -> [success: bb116, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _251 = move (_258.0: u32),
            StorageDead(_253),
            StorageDead(_252),
            _250 = Eq(move _251, const 0_u32),
            StorageDead(_251),
            _58 = BitAnd(_58, move _250),
            StorageDead(_250),
            StorageLive(_259),
            StorageLive(_260),
            _260 = _60,
            _259 = Eq(move _260, const 0_u8),
            StorageDead(_260),
            _59 = BitAnd(_59, move _259),
            StorageDead(_259),
            StorageLive(_261),
            StorageLive(_262),
            _262 = _54,
            _263 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:135:34: 135:43 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _263, "attempt to calculate the remainder of `{}` with a divisor of zero", _262) -> [success: bb117, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _261 = Rem(move _262, const 10_u32),
            StorageDead(_262),
            _60 = move _261 as u8 (IntToInt),
            StorageDead(_261),
            _264 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:136:13: 136:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _264, "attempt to divide `{}` by zero", _54) -> [success: bb118, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = Div(_54, const 10_u32),
            _265 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:137:13: 137:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _265, "attempt to divide `{}` by zero", _55) -> [success: bb119, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = Div(_55, const 10_u32),
            _266 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:138:13: 138:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _266, "attempt to divide `{}` by zero", _56) -> [success: bb120, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = Div(_56, const 10_u32),
            _267 = AddWithOverflow(_237, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:139:13: 139:25 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_267.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb121, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _237 = move (_267.0: i32),
            _242 = const (),
            StorageDead(_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:132:9: 140:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_247),
            StorageDead(_244),
            StorageLive(_269),
            _241 = const (),
            StorageDead(_269),
            StorageDead(_243),
            StorageDead(_241),
            StorageLive(_271),
            StorageLive(_272),
            _272 = _58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:141:12: 141:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _272) -> [0: bb123, otherwise: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _271 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:141:9: 150:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:142:13: 149:14 (#0),
                    scope: scope[23],
                },
                kind: falseUnwind -> [real: bb125, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_273),
            StorageLive(_274),
            StorageLive(_275),
            _275 = _56,
            _276 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:142:19: 142:26 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _276, "attempt to calculate the remainder of `{}` with a divisor of zero", _275) -> [success: bb126, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _274 = Rem(move _275, const 10_u32),
            StorageDead(_275),
            _273 = Eq(move _274, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:142:19: 142:31 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _273) -> [0: bb133, otherwise: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
            StorageLive(_277),
            StorageLive(_278),
            _278 = _60,
            _277 = Eq(move _278, const 0_u8),
            StorageDead(_278),
            _59 = BitAnd(_59, move _277),
            StorageDead(_277),
            StorageLive(_279),
            StorageLive(_280),
            _280 = _54,
            _281 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:144:38: 144:47 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _281, "attempt to calculate the remainder of `{}` with a divisor of zero", _280) -> [success: bb128, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _279 = Rem(move _280, const 10_u32),
            StorageDead(_280),
            _60 = move _279 as u8 (IntToInt),
            StorageDead(_279),
            _282 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:145:17: 145:25 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _282, "attempt to divide `{}` by zero", _54) -> [success: bb129, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = Div(_54, const 10_u32),
            _283 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:146:17: 146:25 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _283, "attempt to divide `{}` by zero", _55) -> [success: bb130, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = Div(_55, const 10_u32),
            _284 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:147:17: 147:25 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _284, "attempt to divide `{}` by zero", _56) -> [success: bb131, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = Div(_56, const 10_u32),
            _285 = AddWithOverflow(_237, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:148:17: 148:29 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_285.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb132, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _237 = move (_285.0: i32),
            _242 = const (),
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:142:13: 149:14 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
            StorageLive(_287),
            _271 = const (),
            StorageDead(_287),
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:141:9: 150:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
            StorageDead(_271),
            StorageLive(_289),
            StorageLive(_290),
            _290 = _59,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:12: 151:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _290) -> [0: bb141, otherwise: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_291),
            StorageLive(_292),
            _292 = _60,
            _291 = Eq(move _292, const 5_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:36: 151:59 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _291) -> [0: bb140, otherwise: bb136],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_292),
            StorageLive(_293),
            StorageLive(_294),
            StorageLive(_295),
            _295 = _54,
            _296 = Eq(const 2_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:63: 151:69 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _296, "attempt to calculate the remainder of `{}` with a divisor of zero", _295) -> [success: bb137, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _294 = Rem(move _295, const 2_u32),
            StorageDead(_295),
            _293 = Eq(move _294, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:63: 151:74 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _293) -> [0: bb139, otherwise: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            _60 = const 4_u8,
            _289 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:9: 154:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb142,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_292),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _289 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:151:9: 154:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb142,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_293),
            StorageDead(_291),
            StorageDead(_290),
            StorageDead(_289),
            StorageLive(_297),
            _297 = _54,
            StorageLive(_298),
            StorageLive(_299),
            StorageLive(_300),
            StorageLive(_301),
            _301 = _54,
            StorageLive(_302),
            _302 = _56,
            _300 = Eq(move _301, move _302),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:16: 156:24 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _300) -> [0: bb146, otherwise: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_302),
            StorageDead(_301),
            StorageLive(_303),
            _303 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:30: 156:43 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _303) -> [0: bb145, otherwise: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_304),
            _304 = _58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:48: 156:68 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _304) -> [0: bb145, otherwise: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _299 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:14: 156:98 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_302),
            StorageDead(_301),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb147,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_305),
            _305 = _60,
            _299 = Ge(move _305, const 5_u8),
            StorageDead(_305),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:14: 156:98 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_304),
            StorageDead(_303),
            StorageDead(_300),
            _298 = move _299 as u32 (IntToInt),
            StorageDead(_299),
            _306 = AddWithOverflow(_297, _298),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:156:9: 157:19 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_306.1: bool), "attempt to compute `{} + {}`, which would overflow", move _297, move _298) -> [success: bb149, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _238 = move (_306.0: u32),
            StorageDead(_298),
            StorageDead(_297),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:130:18: 171:6 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb166,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_307),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:9: 168:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb151,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:9: 168:10 (#0),
                    scope: scope[23],
                },
                kind: falseUnwind -> [real: bb152, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_308),
            StorageLive(_309),
            StorageLive(_310),
            _310 = _55,
            _311 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:15: 162:22 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _311, "attempt to divide `{}` by zero", _310) -> [success: bb153, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _309 = Div(move _310, const 10_u32),
            StorageDead(_310),
            StorageLive(_312),
            StorageLive(_313),
            _313 = _56,
            _314 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:25: 162:32 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _314, "attempt to divide `{}` by zero", _313) -> [success: bb154, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _312 = Div(move _313, const 10_u32),
            StorageDead(_313),
            _308 = Gt(move _309, move _312),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:15: 162:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _308) -> [0: bb161, otherwise: bb155],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_312),
            StorageDead(_309),
            StorageLive(_315),
            StorageLive(_316),
            _316 = _54,
            _317 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:163:34: 163:43 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _317, "attempt to calculate the remainder of `{}` with a divisor of zero", _316) -> [success: bb156, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _315 = Rem(move _316, const 10_u32),
            StorageDead(_316),
            _60 = move _315 as u8 (IntToInt),
            StorageDead(_315),
            _318 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:164:13: 164:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _318, "attempt to divide `{}` by zero", _54) -> [success: bb157, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = Div(_54, const 10_u32),
            _319 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:165:13: 165:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _319, "attempt to divide `{}` by zero", _55) -> [success: bb158, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = Div(_55, const 10_u32),
            _320 = Eq(const 10_u32, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:166:13: 166:21 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _320, "attempt to divide `{}` by zero", _56) -> [success: bb159, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = Div(_56, const 10_u32),
            _321 = AddWithOverflow(_237, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:167:13: 167:25 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_321.1: bool), "attempt to compute `{} + {}`, which would overflow", _237, const 1_i32) -> [success: bb160, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _237 = move (_321.0: i32),
            _242 = const (),
            StorageDead(_308),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:162:9: 168:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb151,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_312),
            StorageDead(_309),
            StorageLive(_323),
            _307 = const (),
            StorageDead(_323),
            StorageDead(_308),
            StorageDead(_307),
            StorageLive(_325),
            _325 = _54,
            StorageLive(_326),
            StorageLive(_327),
            StorageLive(_328),
            StorageLive(_329),
            _329 = _54,
            StorageLive(_330),
            _330 = _56,
            _328 = Eq(move _329, move _330),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:170:15: 170:23 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _328) -> [0: bb163, otherwise: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_330),
            StorageDead(_329),
            _327 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:170:14: 170:51 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb164,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_330),
            StorageDead(_329),
            StorageLive(_331),
            _331 = _60,
            _327 = Ge(move _331, const 5_u8),
            StorageDead(_331),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:170:14: 170:51 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb164,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_328),
            _326 = move _327 as u32 (IntToInt),
            StorageDead(_327),
            _332 = AddWithOverflow(_325, _326),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:170:9: 170:58 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_332.1: bool), "attempt to compute `{} + {}`, which would overflow", move _325, move _326) -> [success: bb165, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _238 = move (_332.0: u32),
            StorageDead(_326),
            StorageDead(_325),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:130:18: 171:6 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb166,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageDead(_239),
            FakeRead(ForLet(None), _238),
            StorageLive(_333),
            StorageLive(_334),
            _334 = _57,
            StorageLive(_335),
            _335 = _237,
            _336 = AddWithOverflow(_334, _335),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:172:15: 172:28 (#0),
                    scope: scope[24],
                },
                kind: assert(!move (_336.1: bool), "attempt to compute `{} + {}`, which would overflow", move _334, move _335) -> [success: bb167, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _333 = move (_336.0: i32),
            StorageDead(_335),
            StorageDead(_334),
            FakeRead(ForLet(None), _333),
            StorageLive(_337),
            _337 = _333,
            StorageLive(_338),
            _338 = _238,
            _0 = f2s::FloatingDecimal32 { mantissa: move _338, exponent: move _337 },
            StorageDead(_338),
            StorageDead(_337),
            StorageDead(_333),
            StorageDead(_238),
            StorageDead(_237),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_46),
            StorageDead(_41),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:178:2: 178:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s.rs:40:1: 178:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f2s::FloatingDecimal32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:40:55: 40:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/f2s.rs:40:27: 40:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:40:12: 40:25 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:40:12: 40:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:40:12: 40:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/f2s.rs:40:47: 40:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:40:32: 40:45 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:40:32: 40:45 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:40:32: 40:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/f2s.rs:41:20: 52:6 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:41:9: 41:17 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:41:10: 41:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/f2s.rs:41:20: 52:6 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:41:9: 41:17 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:41:14: 41:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, u32),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:41:20: 52:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:41:23: 41:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:41:23: 41:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:42:9: 46:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:42:9: 46:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:42:9: 46:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:42:9: 46:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:30: 44:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:44:13: 44:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:42:9: 46:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:45:13: 45:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:49: 49:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:49:13: 49:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:50:13: 50:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:50:13: 50:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:50:13: 50:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:48:9: 51:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:50:45: 50:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:53:16: 53:29 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:53:9: 53:13 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:53:9: 53:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:53:16: 53:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:53:17: 53:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:54:25: 54:29 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:54:9: 54:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:54:9: 54:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:57:14: 57:20 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:57:9: 57:11 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:57:9: 57:11 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:57:18: 57:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:57:14: 57:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:58:14: 58:24 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:58:9: 58:11 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:58:9: 58:11 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:58:14: 58:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:58:18: 58:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:58:14: 58:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:58:14: 58:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:60:20: 60:69 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:60:9: 60:17 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:60:9: 60:17 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:60:20: 60:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:60:21: 60:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:60:21: 60:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:60:43: 60:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:61:14: 61:35 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:61:9: 61:11 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:9: 61:11 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:14: 61:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:14: 61:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:18: 61:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:14: 61:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:14: 61:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:27: 61:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:61:14: 61:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/f2s.rs:64:9: 64:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/f2s.rs:64:17: 64:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/f2s.rs:64:9: 64:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/f2s.rs:65:9: 65:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        src/f2s.rs:65:17: 65:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/f2s.rs:65:9: 65:15 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/f2s.rs:66:9: 66:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(4),
                            projs: [],
                        },
                        src/f2s.rs:66:17: 66:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/f2s.rs:66:9: 66:15 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/f2s.rs:67:9: 67:12 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(6),
                            projs: [],
                        },
                        src/f2s.rs:67:14: 67:17 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/f2s.rs:67:9: 67:12 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:68:36: 68:41 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:68:9: 68:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:68:9: 68:33 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:69:36: 69:41 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:69:9: 69:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:69:9: 69:33 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:70:34: 70:37 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:70:9: 70:31 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:70:9: 70:31 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:71:5: 126:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:71:8: 71:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:71:8: 71:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:72:17: 72:31 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:72:13: 72:14 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:72:13: 72:14 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:72:28: 72:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:73:15: 73:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:74:17: 74:65 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:74:13: 74:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:13: 74:14 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:17: 74:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:43: 74:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:52: 74:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:52: 74:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:17: 74:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:74:17: 74:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:75:17: 75:35 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:75:13: 75:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:13: 75:14 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:17: 75:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:17: 75:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:18: 75:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:17: 75:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:23: 75:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:23: 75:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:17: 75:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:34: 75:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:75:17: 75:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:76:14: 76:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:76:36: 76:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:76:40: 76:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:76:43: 76:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:77:14: 77:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:77:36: 77:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:77:40: 77:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:77:43: 77:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:78:14: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:78:36: 78:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:78:40: 78:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:78:43: 78:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:9: 86:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:12: 79:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:12: 79:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:22: 79:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:22: 79:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:22: 79:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:23: 79:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:22: 79:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:22: 79:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:39: 79:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:39: 79:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:79:39: 79:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:83:21: 83:73 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:83:17: 83:18 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:17: 83:18 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:21: 83:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:47: 83:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:56: 83:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:56: 83:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:56: 83:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:56: 83:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:21: 83:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:83:21: 83:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:17: 85:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:18: 85:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:40: 85:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:44: 85:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:44: 85:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:44: 85:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:52: 85:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:57: 85:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:57: 85:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:72: 85:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:51: 85:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:85:17: 85:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:87:9: 97:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:87:12: 87:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:87:9: 97:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:87:12: 87:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:90:13: 96:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:90:16: 90:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:90:13: 96:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:90:16: 90:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:90:13: 96:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:90:16: 90:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:90:16: 90:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:91:40: 91:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:91:66: 91:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:91:70: 91:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:90:13: 96:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:92:23: 92:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:93:40: 93:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:93:66: 93:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:93:70: 93:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:95:23: 95:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:95:23: 95:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:95:49: 95:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:95:53: 95:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:95:17: 95:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:99:17: 99:32 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:99:13: 99:14 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:99:13: 99:14 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:99:28: 99:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:99:29: 99:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:99:28: 99:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:100:15: 100:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:100:15: 100:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:100:26: 100:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:100:15: 100:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:101:17: 101:31 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:101:13: 101:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:13: 101:14 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:17: 101:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:18: 101:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:17: 101:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:23: 101:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:23: 101:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:101:17: 101:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:102:17: 102:50 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:102:13: 102:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:102:13: 102:14 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:102:17: 102:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:102:26: 102:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:102:17: 102:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:103:21: 103:33 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:103:13: 103:18 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:103:13: 103:18 (#0),
            scope: scope[21],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:103:21: 103:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:103:21: 103:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:103:32: 103:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:103:21: 103:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:104:14: 104:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:104:32: 104:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:104:36: 104:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:104:36: 104:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:104:46: 104:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:105:14: 105:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:105:32: 105:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:105:36: 105:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:105:36: 105:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:105:46: 105:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:106:14: 106:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:106:32: 106:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:106:36: 106:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:106:36: 106:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:106:46: 106:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:9: 110:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:12: 107:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:12: 107:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:22: 107:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:22: 107:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:22: 107:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:23: 107:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:22: 107:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:22: 107:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:39: 107:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:39: 107:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:107:39: 107:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:17: 108:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:17: 108:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:17: 108:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:17: 108:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:32: 108:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:33: 108:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:42: 108:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:42: 108:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:42: 108:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:32: 108:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:108:17: 108:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:34: 109:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:35: 109:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:53: 109:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:57: 109:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:57: 109:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:58: 109:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:57: 109:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:73: 109:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:109:34: 109:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:111:9: 125:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:111:12: 111:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:111:9: 125:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:111:12: 111:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:115:13: 121:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:115:16: 115:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:117:40: 117:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:120:17: 120:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:111:9: 125:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:122:19: 122:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:111:9: 125:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:122:19: 122:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:124:36: 124:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:124:62: 124:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:124:66: 124:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:124:66: 124:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:124:66: 124:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:129:23: 129:27 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:129:9: 129:20 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:129:9: 129:20 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:130:18: 171:6 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:130:9: 130:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:130:9: 130:15 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:130:21: 130:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:130:45: 130:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:9: 140:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:40:1: 178:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:15: 132:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:15: 132:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:15: 132:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:15: 132:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:25: 132:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:25: 132:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:25: 132:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:37: 133:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:37: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:37: 133:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:42: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:42: 133:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:43: 133:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:42: 133:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:42: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:133:37: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:134:37: 134:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:134:37: 134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:135:34: 135:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:135:35: 135:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:135:34: 135:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:136:13: 136:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:137:13: 137:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:138:13: 138:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:139:13: 139:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:132:9: 140:10 (#241),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:9: 140:10 (#241),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:9: 140:10 (#241),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:132:9: 140:10 (#241),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:141:9: 150:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:141:12: 141:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:142:13: 149:14 (#244),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:19: 142:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:142:13: 149:14 (#244),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:19: 142:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:142:13: 149:14 (#244),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:19: 142:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:19: 142:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:143:41: 143:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:143:41: 143:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:144:38: 144:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:144:39: 144:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:144:38: 144:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:145:17: 145:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:146:17: 146:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:147:17: 147:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:148:17: 148:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:142:13: 149:14 (#244),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:13: 149:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:13: 149:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:142:13: 149:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:9: 154:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:12: 151:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:36: 151:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:36: 151:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:63: 151:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:63: 151:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:63: 151:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:151:63: 151:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:9: 156:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:14: 157:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:14: 156:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:16: 156:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:16: 156:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:22: 156:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:30: 156:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:48: 156:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:156:9: 157:19 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:74: 156:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:156:9: 157:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:9: 168:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:15: 162:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:15: 162:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:15: 162:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:15: 162:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:25: 162:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:25: 162:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:25: 162:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:163:34: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:163:35: 163:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:163:34: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:164:13: 164:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:165:13: 165:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:166:13: 166:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:167:13: 167:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/f2s.rs:162:9: 168:10 (#247),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:9: 168:10 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:9: 168:10 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:162:9: 168:10 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:9: 170:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:14: 170:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:14: 170:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:15: 170:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:15: 170:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:21: 170:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s.rs:170:9: 170:58 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:27: 170:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:170:9: 170:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s.rs:172:15: 172:28 (#0),
                            ),
                        ),
                        pat_span: src/f2s.rs:172:9: 172:12 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:172:9: 172:12 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:172:15: 172:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:172:21: 172:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:172:15: 172:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:175:19: 175:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s.rs:176:19: 176:25 (#0),
            scope: scope[0],
        },
    },
]