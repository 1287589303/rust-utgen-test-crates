[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _6 = Eq(move _7, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:92:23: 92:41 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _11 = SubWithOverflow(const 1_i32, const d2s::DOUBLE_BIAS),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:95:13: 95:28 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", const 1_i32, const d2s::DOUBLE_BIAS) -> [success: bb2, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_11.0: i32),
            StorageLive(_12),
            _12 = const d2s::DOUBLE_MANTISSA_BITS as i32 (IntToInt),
            _13 = SubWithOverflow(_10, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:95:13: 95:58 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb3, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_13.0: i32),
            StorageDead(_12),
            StorageDead(_10),
            _14 = SubWithOverflow(_9, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:95:13: 95:62 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 2_i32) -> [success: bb4, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_14.0: i32),
            StorageDead(_9),
            StorageLive(_15),
            _15 = _1,
            _5 = (move _8, move _15),
            StorageDead(_15),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:92:20: 103:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _2,
            _19 = move _20 as i32 (IntToInt),
            StorageDead(_20),
            _21 = SubWithOverflow(_19, const d2s::DOUBLE_BIAS),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:100:13: 100:47 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const d2s::DOUBLE_BIAS) -> [success: bb6, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_21.0: i32),
            StorageDead(_19),
            StorageLive(_22),
            _22 = const d2s::DOUBLE_MANTISSA_BITS as i32 (IntToInt),
            _23 = SubWithOverflow(_18, _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:100:13: 100:77 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, move _22) -> [success: bb7, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = move (_23.0: i32),
            StorageDead(_22),
            StorageDead(_18),
            _24 = SubWithOverflow(_17, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:100:13: 100:81 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, const 2_i32) -> [success: bb8, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = move (_24.0: i32),
            StorageDead(_17),
            StorageLive(_25),
            StorageLive(_26),
            _27 = Lt(const d2s::DOUBLE_MANTISSA_BITS, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:101:13: 101:43 (#0),
                    scope: scope[0],
                },
                kind: assert(move _27, "attempt to shift left by `{}`, which would overflow", const d2s::DOUBLE_MANTISSA_BITS) -> [success: bb9, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = Shl(const 1_u64, const d2s::DOUBLE_MANTISSA_BITS),
            StorageLive(_28),
            _28 = _1,
            _25 = BitOr(move _26, move _28),
            StorageDead(_28),
            StorageDead(_26),
            _5 = (move _16, move _25),
            StorageDead(_25),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:92:20: 103:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: i32),
            StorageLive(_4),
            _4 = (_5.1: u64),
            StorageDead(_5),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _4,
            _30 = BitAnd(move _31, const 1_u64),
            StorageDead(_31),
            _29 = Eq(move _30, const 0_u64),
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageLive(_32),
            _32 = _29,
            FakeRead(ForLet(None), _32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _4,
            _35 = MulWithOverflow(const 4_u64, _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:108:14: 108:20 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_u64, move _34) -> [success: bb11, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = move (_35.0: u64),
            StorageDead(_34),
            FakeRead(ForLet(None), _33),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = _1,
            _38 = Ne(move _39, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:110:21: 110:39 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _38) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            _37 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:110:20: 110:62 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageLive(_40),
            _40 = _2,
            _37 = Le(move _40, const 1_u32),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:110:20: 110:62 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _36 = move _37 as u32 (IntToInt),
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:119:43: 119:64 (#0),
                    scope: scope[8],
                },
                kind: _44 = core::mem::MaybeUninit::<u64>::uninit() -> [return: bb15, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _44),
            AscribeUserType(_44, o, UserTypeProjection { base: UserType(8), projs: [] }),
            StorageLive(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:120:43: 120:64 (#0),
                    scope: scope[9],
                },
                kind: _45 = core::mem::MaybeUninit::<u64>::uninit() -> [return: bb16, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _45),
            AscribeUserType(_45, o, UserTypeProjection { base: UserType(11), projs: [] }),
            StorageLive(_46),
            StorageLive(_47),
            _47 = const false,
            FakeRead(ForLet(None), _47),
            StorageLive(_48),
            _48 = const false,
            FakeRead(ForLet(None), _48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = _3,
            _50 = Ge(move _51, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:124:8: 124:15 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _50) -> [0: bb57, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:127:17: 127:31 (#0),
                    scope: scope[13],
                },
                kind: _53 = common::log10_pow2(move _54) -> [return: bb18, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _3,
            _56 = Gt(move _57, const 3_i32),
            StorageDead(_57),
            _55 = move _56 as u32 (IntToInt),
            StorageDead(_56),
            _58 = SubWithOverflow(_53, _55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:127:17: 127:49 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} - {}`, which would overflow", move _53, move _55) -> [success: bb19, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = move (_58.0: u32),
            StorageDead(_55),
            StorageDead(_53),
            FakeRead(ForLet(None), _52),
            StorageLive(_59),
            _59 = _52,
            _46 = move _59 as i32 (IntToInt),
            StorageDead(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = _52,
            _63 = move _64 as i32 (IntToInt),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:129:44: 129:62 (#0),
                    scope: scope[14],
                },
                kind: _62 = common::pow5bits(move _63) -> [return: bb20, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _65 = AddWithOverflow(const d2s::DOUBLE_POW5_INV_BITCOUNT, _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:129:17: 129:62 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", const d2s::DOUBLE_POW5_INV_BITCOUNT, move _62) -> [success: bb21, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_65.0: i32),
            StorageDead(_62),
            _66 = SubWithOverflow(_61, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:129:17: 129:66 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_66.1: bool), "attempt to compute `{} - {}`, which would overflow", move _61, const 1_i32) -> [success: bb22, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = move (_66.0: i32),
            StorageDead(_61),
            FakeRead(ForLet(None), _60),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = _3,
            _71 = Eq(_70, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:130:17: 130:20 (#0),
                    scope: scope[15],
                },
                kind: assert(!move _71, "attempt to negate `{}`, which would overflow", _70) -> [success: bb23, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = Neg(move _70),
            StorageDead(_70),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _52,
            _72 = move _73 as i32 (IntToInt),
            StorageDead(_73),
            _74 = AddWithOverflow(_69, _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:130:17: 130:31 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_74.1: bool), "attempt to compute `{} + {}`, which would overflow", move _69, move _72) -> [success: bb24, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = move (_74.0: i32),
            StorageDead(_72),
            StorageDead(_69),
            StorageLive(_75),
            _75 = _60,
            _76 = AddWithOverflow(_68, _75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:130:17: 130:35 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _68, move _75) -> [success: bb25, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _67 = move (_76.0: i32),
            StorageDead(_75),
            StorageDead(_68),
            FakeRead(ForLet(None), _67),
            StorageLive(_77),
            StorageLive(_78),
            _78 = _4,
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#48),
                    scope: scope[16],
                },
                kind: switchInt(move _81) -> [0: bb30, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _52,
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = const {alloc5: &[(u64, u64); 342]},
            _88 = &(*_89),
            _87 = move _88 as &[(u64, u64)] (PointerCoercion(Unsize)),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:138:39: 138:66 (#0),
                    scope: scope[16],
                },
                kind: _86 = core::slice::<impl [(u64, u64)]>::len(move _87) -> [return: bb27, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            _85 = move _86 as u32 (IntToInt),
            StorageDead(_86),
            _83 = Lt(move _84, move _85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:138:35: 138:73 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _83) -> [0: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_89),
            _82 = const (),
            StorageDead(_83),
            StorageDead(_82),
            _80 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#47),
                    scope: scope[16],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_89),
            StorageLive(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#49),
                    scope: scope[16],
                },
                kind: _90 = core::panicking::panic(const "assertion failed: q < DOUBLE_POW5_INV_SPLIT.len() as u32") -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#47),
                    scope: scope[16],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            _94 = const {alloc5: &[(u64, u64); 342]},
            _93 = &(*_94),
            _92 = move _93 as &[(u64, u64)] (PointerCoercion(Unsize)),
            StorageDead(_93),
            StorageLive(_95),
            StorageLive(_96),
            _96 = _52,
            _95 = move _96 as usize (IntToInt),
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:139:21: 139:68 (#0),
                    scope: scope[16],
                },
                kind: _91 = core::slice::<impl [(u64, u64)]>::get_unchecked::<usize>(move _92, move _95) -> [return: bb32, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = &(*_91),
            StorageDead(_95),
            StorageDead(_92),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _67,
            _97 = move _98 as u32 (IntToInt),
            StorageDead(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:142:17: 142:39 (#0),
                    scope: scope[16],
                },
                kind: _99 = core::mem::MaybeUninit::<u64>::as_mut_ptr(move _100) -> [return: bb33, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageLive(_101),
            StorageLive(_102),
            _102 = &mut _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:143:17: 143:39 (#0),
                    scope: scope[16],
                },
                kind: _101 = core::mem::MaybeUninit::<u64>::as_mut_ptr(move _102) -> [return: bb34, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageLive(_103),
            _103 = _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:132:13: 145:14 (#0),
                    scope: scope[16],
                },
                kind: _77 = d2s_intrinsics::mul_shift_all_64(move _78, move _79, move _97, move _99, move _101, move _103) -> [return: bb35, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_97),
            StorageDead(_79),
            StorageDead(_78),
            _41 = move _77,
            StorageDead(_77),
            StorageDead(_94),
            StorageDead(_91),
            StorageLive(_104),
            StorageLive(_105),
            _105 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:147:23: 147:46 (#0),
                    scope: scope[16],
                },
                kind: _104 = core::mem::MaybeUninit::<u64>::assume_init(move _105) -> [return: bb36, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            _42 = move _104,
            StorageDead(_104),
            StorageLive(_106),
            StorageLive(_107),
            _107 = _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:148:23: 148:46 (#0),
                    scope: scope[16],
                },
                kind: _106 = core::mem::MaybeUninit::<u64>::assume_init(move _107) -> [return: bb37, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            _43 = move _106,
            StorageDead(_106),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _52,
            _108 = Le(move _109, const 21_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:149:12: 149:19 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _108) -> [0: bb55, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            _112 = _33,
            _111 = move _112 as u32 (IntToInt),
            StorageDead(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:153:70: 153:78 (#0),
                    scope: scope[16],
                },
                kind: _115 = d2s_intrinsics::div5(move _116) -> [return: bb39, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            _114 = move _115 as u32 (IntToInt),
            StorageDead(_115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:153:52: 153:86 (#0),
                    scope: scope[16],
                },
                kind: _113 = core::num::<impl u32>::wrapping_mul(const 5_u32, move _114) -> [return: bb40, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:153:27: 153:87 (#0),
                    scope: scope[16],
                },
                kind: _110 = core::num::<impl u32>::wrapping_sub(move _111, move _113) -> [return: bb41, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_111),
            FakeRead(ForLet(None), _110),
            StorageLive(_117),
            StorageLive(_118),
            _118 = _110,
            _117 = Eq(move _118, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:154:16: 154:28 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _117) -> [0: bb44, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = _33,
            StorageLive(_121),
            _121 = _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:155:40: 155:69 (#0),
                    scope: scope[17],
                },
                kind: _119 = d2s_intrinsics::multiple_of_power_of_5(move _120, move _121) -> [return: bb43, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageDead(_120),
            _48 = move _119,
            StorageDead(_119),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:154:13: 164:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageLive(_122),
            _122 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:156:23: 156:36 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _122) -> [0: bb49, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            _126 = _33,
            _127 = SubWithOverflow(_126, const 1_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:160:63: 160:69 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_127.1: bool), "attempt to compute `{} - {}`, which would overflow", move _126, const 1_u64) -> [success: bb46, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _125 = move (_127.0: u64),
            StorageDead(_126),
            StorageLive(_128),
            StorageLive(_129),
            _129 = _36,
            _128 = move _129 as u64 (IntToInt),
            StorageDead(_129),
            _130 = SubWithOverflow(_125, _128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:160:63: 160:87 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_130.1: bool), "attempt to compute `{} - {}`, which would overflow", move _125, move _128) -> [success: bb47, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _124 = move (_130.0: u64),
            StorageDead(_128),
            StorageDead(_125),
            StorageLive(_131),
            _131 = _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:160:40: 160:91 (#0),
                    scope: scope[17],
                },
                kind: _123 = d2s_intrinsics::multiple_of_power_of_5(move _124, move _131) -> [return: bb48, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            StorageDead(_124),
            _47 = move _123,
            StorageDead(_123),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:156:20: 164:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_132),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            _135 = _33,
            _136 = AddWithOverflow(_135, const 2_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:163:46: 163:52 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_136.1: bool), "attempt to compute `{} + {}`, which would overflow", move _135, const 2_u64) -> [success: bb50, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _134 = move (_136.0: u64),
            StorageDead(_135),
            StorageLive(_137),
            _137 = _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:163:23: 163:56 (#0),
                    scope: scope[17],
                },
                kind: _133 = d2s_intrinsics::multiple_of_power_of_5(move _134, move _137) -> [return: bb51, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_134),
            _132 = move _133 as u64 (IntToInt),
            StorageDead(_133),
            _138 = SubWithOverflow(_42, _132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:163:17: 163:63 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_138.1: bool), "attempt to compute `{} - {}`, which would overflow", _42, move _132) -> [success: bb52, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = move (_138.0: u64),
            StorageDead(_132),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:156:20: 164:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:154:13: 164:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:149:9: 165:10 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:149:9: 165:10 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_67),
            StorageDead(_60),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:124:5: 210:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageLive(_139),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            _142 = _3,
            _143 = Eq(_142, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:168:28: 168:31 (#0),
                    scope: scope[13],
                },
                kind: assert(!move _143, "attempt to negate `{}`, which would overflow", _142) -> [success: bb58, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _141 = Neg(move _142),
            StorageDead(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:168:17: 168:32 (#0),
                    scope: scope[13],
                },
                kind: _140 = common::log10_pow5(move _141) -> [return: bb59, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageLive(_144),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            _147 = _3,
            _148 = Eq(_147, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:168:36: 168:39 (#0),
                    scope: scope[13],
                },
                kind: assert(!move _148, "attempt to negate `{}`, which would overflow", _147) -> [success: bb60, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _146 = Neg(move _147),
            StorageDead(_147),
            _145 = Gt(move _146, const 1_i32),
            StorageDead(_146),
            _144 = move _145 as u32 (IntToInt),
            StorageDead(_145),
            _149 = SubWithOverflow(_140, _144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:168:17: 168:51 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_149.1: bool), "attempt to compute `{} - {}`, which would overflow", move _140, move _144) -> [success: bb61, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _139 = move (_149.0: u32),
            StorageDead(_144),
            StorageDead(_140),
            FakeRead(ForLet(None), _139),
            StorageLive(_150),
            StorageLive(_151),
            _151 = _139,
            _150 = move _151 as i32 (IntToInt),
            StorageDead(_151),
            StorageLive(_152),
            _152 = _3,
            _153 = AddWithOverflow(_150, _152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:169:15: 169:28 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_153.1: bool), "attempt to compute `{} + {}`, which would overflow", move _150, move _152) -> [success: bb62, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_153.0: i32),
            StorageDead(_152),
            StorageDead(_150),
            StorageLive(_154),
            StorageLive(_155),
            StorageLive(_156),
            _156 = _3,
            _157 = Eq(_156, const i32::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:170:17: 170:20 (#0),
                    scope: scope[18],
                },
                kind: assert(!move _157, "attempt to negate `{}`, which would overflow", _156) -> [success: bb63, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _155 = Neg(move _156),
            StorageDead(_156),
            StorageLive(_158),
            StorageLive(_159),
            _159 = _139,
            _158 = move _159 as i32 (IntToInt),
            StorageDead(_159),
            _160 = SubWithOverflow(_155, _158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:170:17: 170:31 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_160.1: bool), "attempt to compute `{} - {}`, which would overflow", move _155, move _158) -> [success: bb64, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _154 = move (_160.0: i32),
            StorageDead(_158),
            StorageDead(_155),
            FakeRead(ForLet(None), _154),
            StorageLive(_161),
            StorageLive(_162),
            StorageLive(_163),
            _163 = _154,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:171:17: 171:28 (#0),
                    scope: scope[19],
                },
                kind: _162 = common::pow5bits(move _163) -> [return: bb65, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            _164 = SubWithOverflow(_162, const d2s::DOUBLE_POW5_BITCOUNT),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:171:17: 171:51 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_164.1: bool), "attempt to compute `{} - {}`, which would overflow", move _162, const d2s::DOUBLE_POW5_BITCOUNT) -> [success: bb66, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _161 = move (_164.0: i32),
            StorageDead(_162),
            FakeRead(ForLet(None), _161),
            StorageLive(_165),
            StorageLive(_166),
            StorageLive(_167),
            _167 = _139,
            _166 = move _167 as i32 (IntToInt),
            StorageDead(_167),
            StorageLive(_168),
            _168 = _161,
            _169 = SubWithOverflow(_166, _168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:172:17: 172:29 (#0),
                    scope: scope[20],
                },
                kind: assert(!move (_169.1: bool), "attempt to compute `{} - {}`, which would overflow", move _166, move _168) -> [success: bb67, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _165 = move (_169.0: i32),
            StorageDead(_168),
            StorageDead(_166),
            FakeRead(ForLet(None), _165),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _4,
            StorageLive(_172),
            StorageLive(_173),
            StorageLive(_174),
            _174 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#52),
                    scope: scope[21],
                },
                kind: switchInt(move _174) -> [0: bb72, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            _177 = _154,
            StorageLive(_178),
            StorageLive(_179),
            StorageLive(_180),
            StorageLive(_181),
            StorageLive(_182),
            _182 = const {alloc6: &[(u64, u64); 326]},
            _181 = &(*_182),
            _180 = move _181 as &[(u64, u64)] (PointerCoercion(Unsize)),
            StorageDead(_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:180:39: 180:62 (#0),
                    scope: scope[21],
                },
                kind: _179 = core::slice::<impl [(u64, u64)]>::len(move _180) -> [return: bb69, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            _178 = move _179 as i32 (IntToInt),
            StorageDead(_179),
            _176 = Lt(move _177, move _178),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:180:35: 180:69 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _176) -> [0: bb71, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            StorageDead(_177),
            StorageDead(_182),
            _175 = const (),
            StorageDead(_176),
            StorageDead(_175),
            _173 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#51),
                    scope: scope[21],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            StorageDead(_177),
            StorageDead(_182),
            StorageLive(_183),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#53),
                    scope: scope[21],
                },
                kind: _183 = core::panicking::panic(const "assertion failed: i < DOUBLE_POW5_SPLIT.len() as i32") -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _173 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#51),
                    scope: scope[21],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            StorageDead(_173),
            StorageLive(_184),
            StorageLive(_185),
            StorageLive(_186),
            StorageLive(_187),
            _187 = const {alloc6: &[(u64, u64); 326]},
            _186 = &(*_187),
            _185 = move _186 as &[(u64, u64)] (PointerCoercion(Unsize)),
            StorageDead(_186),
            StorageLive(_188),
            StorageLive(_189),
            _189 = _154,
            _188 = move _189 as usize (IntToInt),
            StorageDead(_189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:181:21: 181:64 (#0),
                    scope: scope[21],
                },
                kind: _184 = core::slice::<impl [(u64, u64)]>::get_unchecked::<usize>(move _185, move _188) -> [return: bb74, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _172 = &(*_184),
            StorageDead(_188),
            StorageDead(_185),
            StorageLive(_190),
            StorageLive(_191),
            _191 = _165,
            _190 = move _191 as u32 (IntToInt),
            StorageDead(_191),
            StorageLive(_192),
            StorageLive(_193),
            _193 = &mut _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:184:17: 184:39 (#0),
                    scope: scope[21],
                },
                kind: _192 = core::mem::MaybeUninit::<u64>::as_mut_ptr(move _193) -> [return: bb75, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            StorageLive(_194),
            StorageLive(_195),
            _195 = &mut _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:185:17: 185:39 (#0),
                    scope: scope[21],
                },
                kind: _194 = core::mem::MaybeUninit::<u64>::as_mut_ptr(move _195) -> [return: bb76, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            StorageLive(_196),
            _196 = _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:174:13: 187:14 (#0),
                    scope: scope[21],
                },
                kind: _170 = d2s_intrinsics::mul_shift_all_64(move _171, move _172, move _190, move _192, move _194, move _196) -> [return: bb77, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_196),
            StorageDead(_194),
            StorageDead(_192),
            StorageDead(_190),
            StorageDead(_172),
            StorageDead(_171),
            _41 = move _170,
            StorageDead(_170),
            StorageDead(_187),
            StorageDead(_184),
            StorageLive(_197),
            StorageLive(_198),
            _198 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:189:23: 189:46 (#0),
                    scope: scope[21],
                },
                kind: _197 = core::mem::MaybeUninit::<u64>::assume_init(move _198) -> [return: bb78, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            _42 = move _197,
            StorageDead(_197),
            StorageLive(_199),
            StorageLive(_200),
            _200 = _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:190:23: 190:46 (#0),
                    scope: scope[21],
                },
                kind: _199 = core::mem::MaybeUninit::<u64>::assume_init(move _200) -> [return: bb79, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            _43 = move _199,
            StorageDead(_199),
            StorageLive(_201),
            StorageLive(_202),
            _202 = _139,
            _201 = Le(move _202, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:191:12: 191:18 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _201) -> [0: bb85, otherwise: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            _48 = const true,
            StorageLive(_203),
            _203 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:195:16: 195:29 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _203) -> [0: bb82, otherwise: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_204),
            _204 = _36,
            _47 = Eq(move _204, const 1_u32),
            StorageDead(_204),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:195:13: 201:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _205 = SubWithOverflow(_42, const 1_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:200:17: 200:24 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_205.1: bool), "attempt to compute `{} - {}`, which would overflow", _42, const 1_u64) -> [success: bb83, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = move (_205.0: u64),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:195:13: 201:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:191:9: 209:10 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageLive(_206),
            StorageLive(_207),
            _207 = _139,
            _206 = Lt(move _207, const 63_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:202:19: 202:25 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _206) -> [0: bb88, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            StorageLive(_208),
            StorageLive(_209),
            _209 = _33,
            StorageLive(_210),
            _210 = _139,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:208:36: 208:65 (#0),
                    scope: scope[21],
                },
                kind: _208 = d2s_intrinsics::multiple_of_power_of_2(move _209, move _210) -> [return: bb87, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_210),
            StorageDead(_209),
            _48 = move _208,
            StorageDead(_208),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:202:16: 209:10 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:202:16: 209:10 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_206),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:191:9: 209:10 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_201),
            StorageDead(_165),
            StorageDead(_161),
            StorageDead(_154),
            StorageDead(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:124:5: 210:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_211),
            _211 = const 0_i32,
            FakeRead(ForLet(None), _211),
            StorageLive(_212),
            _212 = const 0_u8,
            FakeRead(ForLet(None), _212),
            StorageLive(_213),
            StorageLive(_214),
            _214 = _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:216:21: 216:41 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _214) -> [0: bb92, otherwise: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_215),
            _215 = _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:216:45: 216:65 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _215) -> [0: bb135, otherwise: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_216),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:218:9: 234:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:218:9: 234:10 (#0),
                    scope: scope[23],
                },
                kind: falseUnwind -> [real: bb95, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_218),
            StorageLive(_219),
            _219 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:219:28: 219:37 (#0),
                    scope: scope[23],
                },
                kind: _218 = d2s_intrinsics::div10(move _219) -> [return: bb96, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_219),
            FakeRead(ForLet(None), _218),
            StorageLive(_220),
            StorageLive(_221),
            _221 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:220:28: 220:37 (#0),
                    scope: scope[25],
                },
                kind: _220 = d2s_intrinsics::div10(move _221) -> [return: bb97, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
            FakeRead(ForLet(None), _220),
            StorageLive(_222),
            StorageLive(_223),
            StorageLive(_224),
            _224 = _218,
            StorageLive(_225),
            _225 = _220,
            _223 = Le(move _224, move _225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:221:16: 221:36 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _223) -> [0: bb99, otherwise: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_224),
            _216 = const (),
            StorageDead(_223),
            StorageDead(_222),
            StorageDead(_220),
            StorageDead(_218),
            StorageDead(_216),
            StorageLive(_250),
            StorageLive(_251),
            _251 = _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:235:12: 235:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _251) -> [0: bb106, otherwise: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_224),
            _222 = const (),
            StorageDead(_223),
            StorageDead(_222),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            _229 = _43,
            _228 = move _229 as u32 (IntToInt),
            StorageDead(_229),
            StorageLive(_230),
            StorageLive(_231),
            StorageLive(_232),
            _232 = _220,
            _231 = move _232 as u32 (IntToInt),
            StorageDead(_232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:224:53: 224:88 (#0),
                    scope: scope[26],
                },
                kind: _230 = core::num::<impl u32>::wrapping_mul(const 10_u32, move _231) -> [return: bb100, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:224:28: 224:89 (#0),
                    scope: scope[26],
                },
                kind: _227 = core::num::<impl u32>::wrapping_sub(move _228, move _230) -> [return: bb101, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
            StorageDead(_228),
            FakeRead(ForLet(None), _227),
            StorageLive(_233),
            StorageLive(_234),
            _234 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:225:28: 225:37 (#0),
                    scope: scope[27],
                },
                kind: _233 = d2s_intrinsics::div10(move _234) -> [return: bb102, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            FakeRead(ForLet(None), _233),
            StorageLive(_235),
            StorageLive(_236),
            StorageLive(_237),
            _237 = _41,
            _236 = move _237 as u32 (IntToInt),
            StorageDead(_237),
            StorageLive(_238),
            StorageLive(_239),
            StorageLive(_240),
            _240 = _233,
            _239 = move _240 as u32 (IntToInt),
            StorageDead(_240),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:226:53: 226:88 (#0),
                    scope: scope[28],
                },
                kind: _238 = core::num::<impl u32>::wrapping_mul(const 10_u32, move _239) -> [return: bb103, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_239),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:226:28: 226:89 (#0),
                    scope: scope[28],
                },
                kind: _235 = core::num::<impl u32>::wrapping_sub(move _236, move _238) -> [return: bb104, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_238),
            StorageDead(_236),
            FakeRead(ForLet(None), _235),
            StorageLive(_241),
            StorageLive(_242),
            _242 = _227,
            _241 = Eq(move _242, const 0_u32),
            StorageDead(_242),
            _47 = BitAnd(_47, move _241),
            StorageDead(_241),
            StorageLive(_243),
            StorageLive(_244),
            _244 = _212,
            _243 = Eq(move _244, const 0_u8),
            StorageDead(_244),
            _48 = BitAnd(_48, move _243),
            StorageDead(_243),
            StorageLive(_245),
            _245 = _235,
            _212 = move _245 as u8 (IntToInt),
            StorageDead(_245),
            StorageLive(_246),
            _246 = _233,
            _41 = move _246,
            StorageDead(_246),
            StorageLive(_247),
            _247 = _218,
            _42 = move _247,
            StorageDead(_247),
            StorageLive(_248),
            _248 = _220,
            _43 = move _248,
            StorageDead(_248),
            _249 = AddWithOverflow(_211, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:233:13: 233:25 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_249.1: bool), "attempt to compute `{} + {}`, which would overflow", _211, const 1_i32) -> [success: bb105, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = move (_249.0: i32),
            _217 = const (),
            StorageDead(_235),
            StorageDead(_233),
            StorageDead(_227),
            StorageDead(_220),
            StorageDead(_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:218:9: 234:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _250 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:235:9: 252:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:236:13: 251:14 (#0),
                    scope: scope[23],
                },
                kind: falseUnwind -> [real: bb108, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_252),
            StorageLive(_253),
            _253 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:237:32: 237:41 (#0),
                    scope: scope[23],
                },
                kind: _252 = d2s_intrinsics::div10(move _253) -> [return: bb109, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_253),
            FakeRead(ForLet(None), _252),
            StorageLive(_254),
            StorageLive(_255),
            StorageLive(_256),
            _256 = _43,
            _255 = move _256 as u32 (IntToInt),
            StorageDead(_256),
            StorageLive(_257),
            StorageLive(_258),
            StorageLive(_259),
            _259 = _252,
            _258 = move _259 as u32 (IntToInt),
            StorageDead(_259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:238:57: 238:92 (#0),
                    scope: scope[30],
                },
                kind: _257 = core::num::<impl u32>::wrapping_mul(const 10_u32, move _258) -> [return: bb110, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_258),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:238:32: 238:93 (#0),
                    scope: scope[30],
                },
                kind: _254 = core::num::<impl u32>::wrapping_sub(move _255, move _257) -> [return: bb111, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_255),
            FakeRead(ForLet(None), _254),
            StorageLive(_260),
            StorageLive(_261),
            StorageLive(_262),
            _262 = _254,
            _261 = Ne(move _262, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:239:20: 239:33 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _261) -> [0: bb113, otherwise: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_262),
            _250 = const (),
            StorageDead(_261),
            StorageDead(_260),
            StorageDead(_254),
            StorageDead(_252),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:235:9: 252:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_262),
            _260 = const (),
            StorageDead(_261),
            StorageDead(_260),
            StorageLive(_264),
            StorageLive(_265),
            _265 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:242:32: 242:41 (#0),
                    scope: scope[31],
                },
                kind: _264 = d2s_intrinsics::div10(move _265) -> [return: bb114, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_265),
            FakeRead(ForLet(None), _264),
            StorageLive(_266),
            StorageLive(_267),
            _267 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:243:32: 243:41 (#0),
                    scope: scope[32],
                },
                kind: _266 = d2s_intrinsics::div10(move _267) -> [return: bb115, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_267),
            FakeRead(ForLet(None), _266),
            StorageLive(_268),
            StorageLive(_269),
            StorageLive(_270),
            _270 = _41,
            _269 = move _270 as u32 (IntToInt),
            StorageDead(_270),
            StorageLive(_271),
            StorageLive(_272),
            StorageLive(_273),
            _273 = _266,
            _272 = move _273 as u32 (IntToInt),
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:244:57: 244:92 (#0),
                    scope: scope[33],
                },
                kind: _271 = core::num::<impl u32>::wrapping_mul(const 10_u32, move _272) -> [return: bb116, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:244:32: 244:93 (#0),
                    scope: scope[33],
                },
                kind: _268 = core::num::<impl u32>::wrapping_sub(move _269, move _271) -> [return: bb117, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_271),
            StorageDead(_269),
            FakeRead(ForLet(None), _268),
            StorageLive(_274),
            StorageLive(_275),
            _275 = _212,
            _274 = Eq(move _275, const 0_u8),
            StorageDead(_275),
            _48 = BitAnd(_48, move _274),
            StorageDead(_274),
            StorageLive(_276),
            _276 = _268,
            _212 = move _276 as u8 (IntToInt),
            StorageDead(_276),
            StorageLive(_277),
            _277 = _266,
            _41 = move _277,
            StorageDead(_277),
            StorageLive(_278),
            _278 = _264,
            _42 = move _278,
            StorageDead(_278),
            StorageLive(_279),
            _279 = _252,
            _43 = move _279,
            StorageDead(_279),
            _280 = AddWithOverflow(_211, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:250:17: 250:29 (#0),
                    scope: scope[34],
                },
                kind: assert(!move (_280.1: bool), "attempt to compute `{} + {}`, which would overflow", _211, const 1_i32) -> [success: bb118, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = move (_280.0: i32),
            _217 = const (),
            StorageDead(_268),
            StorageDead(_266),
            StorageDead(_264),
            StorageDead(_254),
            StorageDead(_252),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:236:13: 251:14 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_250),
            StorageLive(_281),
            StorageLive(_282),
            _282 = _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:12: 253:32 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _282) -> [0: bb126, otherwise: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_283),
            StorageLive(_284),
            _284 = _212,
            _283 = Eq(move _284, const 5_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:36: 253:59 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _283) -> [0: bb125, otherwise: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
            StorageLive(_285),
            StorageLive(_286),
            StorageLive(_287),
            _287 = _41,
            _288 = Eq(const 2_u64, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:63: 253:69 (#0),
                    scope: scope[23],
                },
                kind: assert(!move _288, "attempt to calculate the remainder of `{}` with a divisor of zero", _287) -> [success: bb122, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _286 = Rem(move _287, const 2_u64),
            StorageDead(_287),
            _285 = Eq(move _286, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:63: 253:74 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _285) -> [0: bb124, otherwise: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_286),
            _212 = const 4_u8,
            _281 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:9: 256:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_286),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _281 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:253:9: 256:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_285),
            StorageDead(_283),
            StorageDead(_282),
            StorageDead(_281),
            StorageLive(_289),
            _289 = _41,
            StorageLive(_290),
            StorageLive(_291),
            StorageLive(_292),
            StorageLive(_293),
            _293 = _41,
            StorageLive(_294),
            _294 = _43,
            _292 = Eq(move _293, move _294),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:16: 258:24 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _292) -> [0: bb131, otherwise: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            StorageDead(_293),
            StorageLive(_295),
            _295 = _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:30: 258:43 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _295) -> [0: bb130, otherwise: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_296),
            _296 = _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:48: 258:68 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _296) -> [0: bb130, otherwise: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _291 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:14: 258:98 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            StorageDead(_293),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_297),
            _297 = _212,
            _291 = Ge(move _297, const 5_u8),
            StorageDead(_297),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:14: 258:98 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_296),
            StorageDead(_295),
            StorageDead(_292),
            _290 = move _291 as u64 (IntToInt),
            StorageDead(_291),
            _298 = AddWithOverflow(_289, _290),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:258:9: 259:19 (#0),
                    scope: scope[23],
                },
                kind: assert(!move (_298.1: bool), "attempt to compute `{} + {}`, which would overflow", move _289, move _290) -> [success: bb134, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _213 = move (_298.0: u64),
            StorageDead(_290),
            StorageDead(_289),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:216:18: 295:6 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_299),
            _299 = const false,
            FakeRead(ForLet(None), _299),
            StorageLive(_300),
            StorageLive(_301),
            _301 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:263:25: 263:35 (#0),
                    scope: scope[35],
                },
                kind: _300 = d2s_intrinsics::div100(move _301) -> [return: bb136, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_301),
            FakeRead(ForLet(None), _300),
            StorageLive(_302),
            StorageLive(_303),
            _303 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:264:25: 264:35 (#0),
                    scope: scope[36],
                },
                kind: _302 = d2s_intrinsics::div100(move _303) -> [return: bb137, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_303),
            FakeRead(ForLet(None), _302),
            StorageLive(_304),
            StorageLive(_305),
            StorageLive(_306),
            _306 = _300,
            StorageLive(_307),
            _307 = _302,
            _305 = Gt(move _306, move _307),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:266:12: 266:33 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _305) -> [0: bb143, otherwise: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_307),
            StorageDead(_306),
            StorageLive(_308),
            StorageLive(_309),
            _309 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:267:29: 267:39 (#0),
                    scope: scope[37],
                },
                kind: _308 = d2s_intrinsics::div100(move _309) -> [return: bb139, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_309),
            FakeRead(ForLet(None), _308),
            StorageLive(_310),
            StorageLive(_311),
            StorageLive(_312),
            _312 = _41,
            _311 = move _312 as u32 (IntToInt),
            StorageDead(_312),
            StorageLive(_313),
            StorageLive(_314),
            StorageLive(_315),
            _315 = _308,
            _314 = move _315 as u32 (IntToInt),
            StorageDead(_315),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:268:54: 268:91 (#0),
                    scope: scope[38],
                },
                kind: _313 = core::num::<impl u32>::wrapping_mul(const 100_u32, move _314) -> [return: bb140, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_314),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:268:29: 268:92 (#0),
                    scope: scope[38],
                },
                kind: _310 = core::num::<impl u32>::wrapping_sub(move _311, move _313) -> [return: bb141, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_313),
            StorageDead(_311),
            FakeRead(ForLet(None), _310),
            StorageLive(_316),
            _316 = _310,
            _299 = Ge(move _316, const 50_u32),
            StorageDead(_316),
            StorageLive(_317),
            _317 = _308,
            _41 = move _317,
            StorageDead(_317),
            StorageLive(_318),
            _318 = _300,
            _42 = move _318,
            StorageDead(_318),
            StorageLive(_319),
            _319 = _302,
            _43 = move _319,
            StorageDead(_319),
            _320 = AddWithOverflow(_211, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:273:13: 273:25 (#0),
                    scope: scope[39],
                },
                kind: assert(!move (_320.1: bool), "attempt to compute `{} + {}`, which would overflow", _211, const 2_i32) -> [success: bb142, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = move (_320.0: i32),
            _304 = const (),
            StorageDead(_310),
            StorageDead(_308),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:266:9: 274:10 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_307),
            StorageDead(_306),
            _304 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:266:9: 274:10 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_305),
            StorageDead(_304),
            StorageLive(_321),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:279:9: 292:10 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:279:9: 292:10 (#0),
                    scope: scope[37],
                },
                kind: falseUnwind -> [real: bb146, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_322),
            StorageLive(_323),
            _323 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:280:28: 280:37 (#0),
                    scope: scope[37],
                },
                kind: _322 = d2s_intrinsics::div10(move _323) -> [return: bb147, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_323),
            FakeRead(ForLet(None), _322),
            StorageLive(_324),
            StorageLive(_325),
            _325 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:281:28: 281:37 (#0),
                    scope: scope[40],
                },
                kind: _324 = d2s_intrinsics::div10(move _325) -> [return: bb148, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_325),
            FakeRead(ForLet(None), _324),
            StorageLive(_326),
            StorageLive(_327),
            StorageLive(_328),
            _328 = _322,
            StorageLive(_329),
            _329 = _324,
            _327 = Le(move _328, move _329),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:282:16: 282:36 (#0),
                    scope: scope[41],
                },
                kind: switchInt(move _327) -> [0: bb150, otherwise: bb149],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_329),
            StorageDead(_328),
            _321 = const (),
            StorageDead(_327),
            StorageDead(_326),
            StorageDead(_324),
            StorageDead(_322),
            StorageDead(_321),
            StorageLive(_344),
            _344 = _41,
            StorageLive(_345),
            StorageLive(_346),
            StorageLive(_347),
            StorageLive(_348),
            _348 = _41,
            StorageLive(_349),
            _349 = _43,
            _347 = Eq(move _348, move _349),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:294:15: 294:23 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _347) -> [0: bb156, otherwise: bb155],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_329),
            StorageDead(_328),
            _326 = const (),
            StorageDead(_327),
            StorageDead(_326),
            StorageLive(_331),
            StorageLive(_332),
            _332 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:285:28: 285:37 (#0),
                    scope: scope[41],
                },
                kind: _331 = d2s_intrinsics::div10(move _332) -> [return: bb151, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_332),
            FakeRead(ForLet(None), _331),
            StorageLive(_333),
            StorageLive(_334),
            StorageLive(_335),
            _335 = _41,
            _334 = move _335 as u32 (IntToInt),
            StorageDead(_335),
            StorageLive(_336),
            StorageLive(_337),
            StorageLive(_338),
            _338 = _331,
            _337 = move _338 as u32 (IntToInt),
            StorageDead(_338),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:286:53: 286:88 (#0),
                    scope: scope[42],
                },
                kind: _336 = core::num::<impl u32>::wrapping_mul(const 10_u32, move _337) -> [return: bb152, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_337),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:286:28: 286:89 (#0),
                    scope: scope[42],
                },
                kind: _333 = core::num::<impl u32>::wrapping_sub(move _334, move _336) -> [return: bb153, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_336),
            StorageDead(_334),
            FakeRead(ForLet(None), _333),
            StorageLive(_339),
            _339 = _333,
            _299 = Ge(move _339, const 5_u32),
            StorageDead(_339),
            StorageLive(_340),
            _340 = _331,
            _41 = move _340,
            StorageDead(_340),
            StorageLive(_341),
            _341 = _322,
            _42 = move _341,
            StorageDead(_341),
            StorageLive(_342),
            _342 = _324,
            _43 = move _342,
            StorageDead(_342),
            _343 = AddWithOverflow(_211, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:291:13: 291:25 (#0),
                    scope: scope[43],
                },
                kind: assert(!move (_343.1: bool), "attempt to compute `{} + {}`, which would overflow", _211, const 1_i32) -> [success: bb154, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = move (_343.0: i32),
            _217 = const (),
            StorageDead(_333),
            StorageDead(_331),
            StorageDead(_324),
            StorageDead(_322),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:279:9: 292:10 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_349),
            StorageDead(_348),
            _346 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:294:14: 294:36 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb157,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_349),
            StorageDead(_348),
            _346 = _299,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:294:14: 294:36 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb157,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_347),
            _345 = move _346 as u64 (IntToInt),
            StorageDead(_346),
            _350 = AddWithOverflow(_344, _345),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:294:9: 294:43 (#0),
                    scope: scope[37],
                },
                kind: assert(!move (_350.1: bool), "attempt to compute `{} + {}`, which would overflow", move _344, move _345) -> [success: bb158, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _213 = move (_350.0: u64),
            StorageDead(_345),
            StorageDead(_344),
            StorageDead(_302),
            StorageDead(_300),
            StorageDead(_299),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:216:18: 295:6 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_215),
            StorageDead(_214),
            FakeRead(ForLet(None), _213),
            StorageLive(_351),
            StorageLive(_352),
            _352 = _46,
            StorageLive(_353),
            _353 = _211,
            _354 = AddWithOverflow(_352, _353),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:296:15: 296:28 (#0),
                    scope: scope[24],
                },
                kind: assert(!move (_354.1: bool), "attempt to compute `{} + {}`, which would overflow", move _352, move _353) -> [success: bb160, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _351 = move (_354.0: i32),
            StorageDead(_353),
            StorageDead(_352),
            FakeRead(ForLet(None), _351),
            StorageLive(_355),
            _355 = _351,
            StorageLive(_356),
            _356 = _213,
            _0 = d2s::FloatingDecimal64 { mantissa: move _356, exponent: move _355 },
            StorageDead(_356),
            StorageDead(_355),
            StorageDead(_351),
            StorageDead(_213),
            StorageDead(_212),
            StorageDead(_211),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:302:2: 302:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/d2s.rs:91:1: 302:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: d2s::FloatingDecimal64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:91:55: 91:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/d2s.rs:91:27: 91:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:91:12: 91:25 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:91:12: 91:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:91:12: 91:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/d2s.rs:91:47: 91:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:91:32: 91:45 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:91:32: 91:45 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:91:32: 91:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/d2s.rs:92:20: 103:6 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:92:9: 92:17 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:92:10: 92:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/d2s.rs:92:20: 103:6 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:92:9: 92:17 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:92:14: 92:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, u64),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:92:20: 103:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:92:23: 92:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:92:23: 92:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:93:9: 97:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:93:9: 97:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:93:9: 97:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:93:9: 97:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:31: 95:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:95:13: 95:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:93:9: 97:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:96:13: 96:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:50: 100:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:100:13: 100:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:101:13: 101:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:101:13: 101:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:101:13: 101:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:99:9: 102:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:101:46: 101:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:104:16: 104:29 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:104:9: 104:13 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:104:9: 104:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:104:16: 104:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:104:17: 104:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:105:25: 105:29 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:105:9: 105:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:105:9: 105:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:108:14: 108:20 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:108:9: 108:11 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:108:9: 108:11 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:108:18: 108:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:108:14: 108:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:110:20: 110:69 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:110:9: 110:17 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:110:9: 110:17 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:110:20: 110:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:110:21: 110:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:110:21: 110:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:110:43: 110:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/d2s.rs:116:9: 116:15 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/d2s.rs:116:17: 116:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:116:9: 116:15 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/d2s.rs:117:9: 117:15 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        src/d2s.rs:117:17: 117:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:117:9: 117:15 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/d2s.rs:118:9: 118:15 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(4),
                            projs: [],
                        },
                        src/d2s.rs:118:17: 118:20 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:118:9: 118:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:119:43: 119:64 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:119:9: 119:22 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(6),
                            projs: [],
                        },
                        src/d2s.rs:119:24: 119:40 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:119:9: 119:22 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:120:43: 120:64 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:120:9: 120:22 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(9),
                            projs: [],
                        },
                        src/d2s.rs:120:24: 120:40 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:120:9: 120:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: src/d2s.rs:121:9: 121:12 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(12),
                            projs: [],
                        },
                        src/d2s.rs:121:14: 121:17 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/d2s.rs:121:9: 121:12 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:122:36: 122:41 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:122:9: 122:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:122:9: 122:33 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:123:36: 123:41 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:123:9: 123:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:123:9: 123:33 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:124:5: 210:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:124:8: 124:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:124:8: 124:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:127:17: 127:49 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:127:13: 127:14 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:13: 127:14 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:17: 127:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:28: 127:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:34: 127:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:34: 127:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:35: 127:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:127:17: 127:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:128:15: 128:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:129:17: 129:66 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:129:13: 129:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:13: 129:14 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:17: 129:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:44: 129:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:53: 129:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:53: 129:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:17: 129:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:129:17: 129:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:130:17: 130:35 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:130:13: 130:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:13: 130:14 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:17: 130:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:17: 130:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:18: 130:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:17: 130:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:23: 130:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:23: 130:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:17: 130:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:34: 130:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:130:17: 130:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:131:14: 146:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:133:17: 133:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: &'{erased} (u64, u64),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:137:17: 140:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#48),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:35: 138:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:35: 138:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:39: 138:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:39: 138:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u64, u64)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:39: 138:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u64, u64); 342_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:39: 138:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:85 ~ ryu[e2d4]::d2s_full_table::DOUBLE_POW5_INV_SPLIT),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [(u64, u64); 342_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:138:39: 138:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#49),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:139:21: 139:68 (#0),
                },
            ),
        ),
        ty: &'{erased} (u64, u64),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:21: 139:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:139:21: 139:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u64, u64)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:21: 139:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:139:21: 139:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u64, u64); 342_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:21: 139:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:85 ~ ryu[e2d4]::d2s_full_table::DOUBLE_POW5_INV_SPLIT),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [(u64, u64); 342_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:21: 139:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:139:21: 139:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:57: 139:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:139:21: 139:68 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:139:57: 139:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:141:17: 141:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:141:17: 141:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: *mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:142:17: 142:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:142:17: 142:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: *mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:143:17: 143:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:143:17: 143:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:132:13: 145:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:144:17: 144:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:147:14: 147:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:147:23: 147:46 (#0),
                },
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:147:23: 147:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:148:14: 148:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:148:23: 148:46 (#0),
                },
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:148:23: 148:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:149:9: 165:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:149:12: 149:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:149:9: 165:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:149:12: 149:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:153:27: 153:87 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:153:17: 153:24 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:17: 153:24 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:27: 153:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:28: 153:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:52: 153:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:70: 153:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:70: 153:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:153:75: 153:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:154:13: 164:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:154:16: 154:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:154:13: 164:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:154:16: 154:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:155:40: 155:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:155:63: 155:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:155:67: 155:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:154:13: 164:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:156:23: 156:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:40: 160:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:63: 160:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:63: 160:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:63: 160:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:63: 160:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:72: 160:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:72: 160:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:63: 160:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:160:89: 160:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:23: 163:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:23: 163:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:46: 163:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:46: 163:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:46: 163:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:54: 163:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:163:17: 163:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:168:17: 168:51 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:168:13: 168:14 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:13: 168:14 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:17: 168:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:28: 168:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:29: 168:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:28: 168:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:35: 168:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:35: 168:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:36: 168:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:37: 168:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:36: 168:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:168:17: 168:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:169:15: 169:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:169:15: 169:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:169:26: 169:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:169:15: 169:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:170:17: 170:31 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:170:13: 170:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:13: 170:14 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:17: 170:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:18: 170:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:17: 170:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:23: 170:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:23: 170:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:170:17: 170:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:171:17: 171:51 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:171:13: 171:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:171:13: 171:14 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:171:17: 171:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:171:26: 171:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:171:17: 171:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:172:17: 172:29 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:172:13: 172:14 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:172:13: 172:14 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:172:17: 172:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:172:17: 172:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:172:28: 172:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:172:17: 172:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:173:14: 188:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:175:17: 175:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: &'{erased} (u64, u64),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:179:17: 182:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#53),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:35: 180:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:35: 180:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:39: 180:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:39: 180:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u64, u64)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:39: 180:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u64, u64); 326_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:39: 180:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:86 ~ ryu[e2d4]::d2s_full_table::DOUBLE_POW5_SPLIT),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [(u64, u64); 326_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:180:39: 180:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#53),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#53),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:181:21: 181:64 (#0),
                },
            ),
        ),
        ty: &'{erased} (u64, u64),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:21: 181:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:181:21: 181:64 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u64, u64)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:21: 181:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:181:21: 181:64 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u64, u64); 326_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:21: 181:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:86 ~ ryu[e2d4]::d2s_full_table::DOUBLE_POW5_SPLIT),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [(u64, u64); 326_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:21: 181:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:181:21: 181:64 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:53: 181:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:181:21: 181:64 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:181:53: 181:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:183:17: 183:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:183:17: 183:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: *mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:184:17: 184:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:184:17: 184:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: *mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:185:17: 185:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:185:17: 185:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:174:13: 187:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:186:17: 186:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:189:14: 189:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:189:23: 189:46 (#0),
                },
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:189:23: 189:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:190:14: 190:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:190:23: 190:46 (#0),
                },
            ),
        ),
        ty: core::mem::MaybeUninit<u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:190:23: 190:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:191:9: 209:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:191:12: 191:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:191:9: 209:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:191:12: 191:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:195:13: 201:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:195:16: 195:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:197:40: 197:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:200:17: 200:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:191:9: 209:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:202:19: 202:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/d2s.rs:191:9: 209:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:202:19: 202:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:208:36: 208:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:208:59: 208:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:208:63: 208:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:213:23: 213:27 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:213:9: 213:20 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:213:9: 213:20 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:214:34: 214:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:214:9: 214:31 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:214:9: 214:31 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:216:18: 295:6 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:216:9: 216:15 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:216:9: 216:15 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:216:21: 216:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:216:45: 216:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:218:9: 234:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:91:1: 302:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:219:28: 219:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:219:17: 219:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:219:17: 219:25 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:219:34: 219:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:220:28: 220:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:220:17: 220:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:220:17: 220:25 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:220:34: 220:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:221:13: 223:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:221:16: 221:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:221:16: 221:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:221:28: 221:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:221:37: 223:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:224:28: 224:89 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:224:17: 224:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:17: 224:25 (#0),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:28: 224:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:29: 224:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:53: 224:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:72: 224:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:224:72: 224:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:225:28: 225:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:225:17: 225:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:225:17: 225:25 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:225:34: 225:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:226:28: 226:89 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:226:17: 226:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:17: 226:25 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:28: 226:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:29: 226:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:53: 226:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:72: 226:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:226:72: 226:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:227:37: 227:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:227:37: 227:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:228:37: 228:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:228:37: 228:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:229:34: 229:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:230:18: 230:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:231:18: 231:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:232:18: 232:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:233:13: 233:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:235:9: 252:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:235:12: 235:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:237:32: 237:41 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:237:21: 237:29 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:237:21: 237:29 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:237:38: 237:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:238:32: 238:93 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:238:21: 238:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:21: 238:29 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:32: 238:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:33: 238:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:57: 238:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:76: 238:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:238:76: 238:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:239:17: 241:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:239:20: 239:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:239:20: 239:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:239:34: 241:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:242:32: 242:41 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:242:21: 242:29 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:242:21: 242:29 (#0),
            scope: scope[31],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:242:38: 242:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:243:32: 243:41 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:243:21: 243:29 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:243:21: 243:29 (#0),
            scope: scope[32],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:243:38: 243:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:244:32: 244:93 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:244:21: 244:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:21: 244:29 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:32: 244:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:33: 244:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:57: 244:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:76: 244:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:244:76: 244:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:245:41: 245:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:245:41: 245:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:246:38: 246:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:247:22: 247:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:248:22: 248:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:249:22: 249:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:250:17: 250:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:9: 256:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:12: 253:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:36: 253:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:36: 253:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:63: 253:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:63: 253:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:63: 253:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:253:63: 253:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:9: 258:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:14: 259:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:14: 258:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:16: 258:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:16: 258:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:22: 258:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:30: 258:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:48: 258:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:258:9: 259:19 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:74: 258:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:258:9: 259:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:262:28: 262:33 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:262:13: 262:25 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:262:13: 262:25 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:263:25: 263:35 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:263:13: 263:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:263:13: 263:22 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:263:32: 263:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:264:25: 264:35 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:264:13: 264:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:264:13: 264:22 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:264:32: 264:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:266:9: 274:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:266:12: 266:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:266:12: 266:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:266:24: 266:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:267:29: 267:39 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:267:17: 267:26 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:267:17: 267:26 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:267:36: 267:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:268:29: 268:92 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:268:17: 268:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:17: 268:26 (#0),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:29: 268:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:30: 268:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:54: 268:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:74: 268:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:268:74: 268:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:269:24: 269:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:270:18: 270:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:271:18: 271:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:272:18: 272:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:273:13: 273:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:279:9: 292:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:280:28: 280:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:280:17: 280:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:280:17: 280:25 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:280:34: 280:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:281:28: 281:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:281:17: 281:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:281:17: 281:25 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:281:34: 281:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:282:13: 284:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:282:16: 282:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:282:16: 282:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:282:28: 282:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:282:37: 284:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:285:28: 285:37 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:285:17: 285:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:285:17: 285:25 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:285:34: 285:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:286:28: 286:89 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:286:17: 286:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:17: 286:25 (#0),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:28: 286:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:29: 286:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:53: 286:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:72: 286:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:286:72: 286:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:287:24: 287:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:288:18: 288:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:289:18: 289:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:290:18: 290:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:291:13: 291:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:9: 294:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:14: 294:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:14: 294:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:15: 294:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:15: 294:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/d2s.rs:294:9: 294:43 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:21: 294:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:294:9: 294:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/d2s.rs:296:15: 296:28 (#0),
                            ),
                        ),
                        pat_span: src/d2s.rs:296:9: 296:12 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:296:9: 296:12 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:296:15: 296:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:296:21: 296:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:296:15: 296:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:299:19: 299:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/d2s.rs:300:19: 300:25 (#0),
            scope: scope[0],
        },
    },
]