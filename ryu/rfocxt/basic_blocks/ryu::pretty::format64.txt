[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:53:16: 53:27 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::f64::<impl f64>::to_bits(move _4) -> [return: bb1, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            _10 = AddWithOverflow(const d2s::DOUBLE_MANTISSA_BITS, const d2s::DOUBLE_EXPONENT_BITS),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:54:26: 54:71 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const d2s::DOUBLE_MANTISSA_BITS, const d2s::DOUBLE_EXPONENT_BITS) -> [success: bb2, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_10.0: u32),
            _11 = Lt(_9, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:54:17: 54:72 (#0),
                    scope: scope[1],
                },
                kind: assert(move _11, "attempt to shift right by `{}`, which would overflow", _9) -> [success: bb3, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Shr(move _8, move _9),
            StorageDead(_9),
            StorageDead(_8),
            _6 = BitAnd(move _7, const 1_u64),
            StorageDead(_7),
            _5 = Ne(move _6, const 0_u64),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
            StorageLive(_14),
            StorageLive(_15),
            _16 = Lt(const d2s::DOUBLE_MANTISSA_BITS, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:55:33: 55:63 (#0),
                    scope: scope[2],
                },
                kind: assert(move _16, "attempt to shift left by `{}`, which would overflow", const d2s::DOUBLE_MANTISSA_BITS) -> [success: bb4, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = Shl(const 1_u64, const d2s::DOUBLE_MANTISSA_BITS),
            _17 = SubWithOverflow(_15, const 1_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:55:32: 55:68 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, const 1_u64) -> [success: bb5, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = move (_17.0: u64),
            StorageDead(_15),
            _12 = BitAnd(move _13, move _14),
            StorageDead(_14),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _3,
            _22 = Lt(const d2s::DOUBLE_MANTISSA_BITS, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:57:9: 57:39 (#0),
                    scope: scope[3],
                },
                kind: assert(move _22, "attempt to shift right by `{}`, which would overflow", const d2s::DOUBLE_MANTISSA_BITS) -> [success: bb6, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Shr(move _21, const d2s::DOUBLE_MANTISSA_BITS),
            StorageDead(_21),
            _19 = move _20 as u32 (IntToInt),
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            _25 = Lt(const d2s::DOUBLE_EXPONENT_BITS, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:57:50: 57:80 (#0),
                    scope: scope[3],
                },
                kind: assert(move _25, "attempt to shift left by `{}`, which would overflow", const d2s::DOUBLE_EXPONENT_BITS) -> [success: bb7, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = Shl(const 1_u32, const d2s::DOUBLE_EXPONENT_BITS),
            _26 = SubWithOverflow(_24, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:57:49: 57:85 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", move _24, const 1_u32) -> [success: bb8, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_26.0: u32),
            StorageDead(_24),
            _18 = BitAnd(move _19, move _23),
            StorageDead(_23),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_27),
            _27 = const 0_isize,
            FakeRead(ForLet(None), _27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:60:8: 60:12 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _29) -> [0: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 45_u8,
            _30 = AddWithOverflow(_27, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:62:9: 62:19 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", _27, const 1_isize) -> [success: bb10, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_30.0: isize),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:60:5: 63:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:60:5: 63:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _18,
            _32 = Eq(move _33, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:65:8: 65:26 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _32) -> [0: bb20, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _12,
            _34 = Eq(move _35, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:65:30: 65:48 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _34) -> [0: bb19, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = const b"0.0",
            _40 = &(*_41),
            _39 = move _40 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:66:34: 66:49 (#0),
                    scope: scope[5],
                },
                kind: _38 = core::slice::<impl [u8]>::as_ptr(move _39) -> [return: bb15, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageLive(_42),
            StorageLive(_43),
            _43 = _2,
            StorageLive(_44),
            _44 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:66:51: 66:71 (#0),
                    scope: scope[5],
                },
                kind: _42 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _43, move _44) -> [return: bb16, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:66:9: 66:75 (#0),
                    scope: scope[5],
                },
                kind: _37 = core::intrinsics::copy_nonoverlapping::<u8>(move _38, move _42, const 3_usize) -> [return: bb17, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_38),
            StorageDead(_41),
            StorageDead(_37),
            StorageLive(_45),
            StorageLive(_46),
            _46 = _5,
            _45 = move _46 as usize (IntToInt),
            StorageDead(_46),
            _47 = AddWithOverflow(_45, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:67:16: 67:33 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 3_usize) -> [success: bb18, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_47.0: usize),
            StorageDead(_45),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_27),
            StorageDead(_18),
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:118:2: 118:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = const (),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _12,
            StorageLive(_50),
            _50 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:70:13: 70:46 (#0),
                    scope: scope[5],
                },
                kind: _48 = d2s::d2d(move _49, move _50) -> [return: bb22, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            FakeRead(ForLet(None), _48),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = (_48.0: u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:72:18: 72:51 (#0),
                    scope: scope[6],
                },
                kind: _52 = d2s::decimal_length17(move _53) -> [return: bb23, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            _51 = move _52 as isize (IntToInt),
            StorageDead(_52),
            FakeRead(ForLet(None), _51),
            StorageLive(_54),
            StorageLive(_55),
            _55 = (_48.1: i32),
            _54 = move _55 as isize (IntToInt),
            StorageDead(_55),
            FakeRead(ForLet(None), _54),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _51,
            StorageLive(_58),
            _58 = _54,
            _59 = AddWithOverflow(_57, _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:74:14: 74:24 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_59.1: bool), "attempt to compute `{} + {}`, which would overflow", move _57, move _58) -> [success: bb24, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_59.0: isize),
            StorageDead(_58),
            StorageDead(_57),
            FakeRead(ForLet(None), _56),
            StorageLive(_60),
            StorageLive(_61),
            _61 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#96),
                    scope: scope[9],
                },
                kind: switchInt(move _61) -> [0: bb28, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = _54,
            _63 = Ge(move _64, const -324_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:75:19: 75:28 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _63) -> [0: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            _62 = const (),
            StorageDead(_63),
            StorageDead(_62),
            _60 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#95),
                    scope: scope[9],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageLive(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#97),
                    scope: scope[9],
                },
                kind: _65 = core::panicking::panic(const "assertion failed: k >= -324") -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#95),
                    scope: scope[9],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageLive(_66),
            StorageLive(_67),
            _67 = _54,
            _66 = Le(const 0_isize, move _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:77:8: 77:14 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _66) -> [0: bb53, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = _56,
            _68 = Le(move _69, const 16_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:77:18: 77:26 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _68) -> [0: bb52, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = (_48.0: u64),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _2,
            StorageLive(_74),
            StorageLive(_75),
            _75 = _27,
            StorageLive(_76),
            _76 = _51,
            _77 = AddWithOverflow(_75, _76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:79:55: 79:69 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_77.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, move _76) -> [success: bb32, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = move (_77.0: isize),
            StorageDead(_76),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:79:41: 79:70 (#0),
                    scope: scope[9],
                },
                kind: _72 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _73, move _74) -> [return: bb33, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:79:9: 79:71 (#0),
                    scope: scope[9],
                },
                kind: _70 = pretty::mantissa::write_mantissa_long(move _71, move _72) -> [return: bb34, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_70),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = _51,
            StorageLive(_82),
            _82 = _56,
            _80 = core::ops::Range::<isize> { start: move _81, end: move _82 },
            StorageDead(_82),
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:18: 80:28 (#304),
                    scope: scope[9],
                },
                kind: _79 = <core::ops::Range<isize> as core::iter::IntoIterator>::into_iter(move _80) -> [return: bb35, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            PlaceMention(_79),
            StorageLive(_83),
            _83 = move _79,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:9: 82:10 (#303),
                    scope: scope[10],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:9: 82:10 (#303),
                    scope: scope[10],
                },
                kind: falseUnwind -> [real: bb37, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut _83,
            _87 = &mut (*_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:18: 80:28 (#304),
                    scope: scope[10],
                },
                kind: _86 = <core::ops::Range<isize> as core::iter::Iterator>::next(move _87) -> [return: bb38, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            PlaceMention(_86),
            _89 = discriminant(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:18: 80:28 (#304),
                    scope: scope[10],
                },
                kind: switchInt(move _89) -> [0: bb40, 1: bb41, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:18: 80:28 (#304),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:9: 82:10 (#303),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = ((_86 as Some).0: isize),
            StorageLive(_92),
            StorageLive(_93),
            _93 = _2,
            StorageLive(_94),
            StorageLive(_95),
            _95 = _27,
            StorageLive(_96),
            _96 = _91,
            _97 = AddWithOverflow(_95, _96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:81:28: 81:37 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_97.1: bool), "attempt to compute `{} + {}`, which would overflow", move _95, move _96) -> [success: bb43, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _78 = const (),
            StorageDead(_88),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_83),
            StorageDead(_79),
            StorageDead(_78),
            StorageLive(_98),
            StorageLive(_99),
            _99 = _2,
            StorageLive(_100),
            StorageLive(_101),
            _101 = _27,
            StorageLive(_102),
            _102 = _56,
            _103 = AddWithOverflow(_101, _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:83:24: 83:34 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} + {}`, which would overflow", move _101, move _102) -> [success: bb45, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _94 = move (_97.0: isize),
            StorageDead(_96),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:81:14: 81:38 (#0),
                    scope: scope[11],
                },
                kind: _92 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _93, move _94) -> [return: bb44, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_93),
            (*_92) = const 48_u8,
            StorageDead(_92),
            _85 = const (),
            StorageDead(_91),
            StorageDead(_88),
            StorageDead(_86),
            StorageDead(_85),
            _84 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:80:9: 82:10 (#303),
                    scope: scope[10],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _100 = move (_103.0: isize),
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:83:10: 83:35 (#0),
                    scope: scope[9],
                },
                kind: _98 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _99, move _100) -> [return: bb46, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageDead(_99),
            (*_98) = const 46_u8,
            StorageDead(_98),
            StorageLive(_104),
            StorageLive(_105),
            _105 = _2,
            StorageLive(_106),
            StorageLive(_107),
            StorageLive(_108),
            _108 = _27,
            StorageLive(_109),
            _109 = _56,
            _110 = AddWithOverflow(_108, _109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:84:24: 84:34 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_110.1: bool), "attempt to compute `{} + {}`, which would overflow", move _108, move _109) -> [success: bb47, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _107 = move (_110.0: isize),
            StorageDead(_109),
            StorageDead(_108),
            _111 = AddWithOverflow(_107, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:84:24: 84:38 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_111.1: bool), "attempt to compute `{} + {}`, which would overflow", move _107, const 1_isize) -> [success: bb48, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _106 = move (_111.0: isize),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:84:10: 84:39 (#0),
                    scope: scope[9],
                },
                kind: _104 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _105, move _106) -> [return: bb49, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
            (*_104) = const 48_u8,
            StorageDead(_104),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = _27,
            _113 = move _114 as usize (IntToInt),
            StorageDead(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = _56,
            _115 = move _116 as usize (IntToInt),
            StorageDead(_116),
            _117 = AddWithOverflow(_113, _115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:85:9: 85:37 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_117.1: bool), "attempt to compute `{} + {}`, which would overflow", move _113, move _115) -> [success: bb50, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _112 = move (_117.0: usize),
            StorageDead(_115),
            StorageDead(_113),
            _118 = AddWithOverflow(_112, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_118.1: bool), "attempt to compute `{} + {}`, which would overflow", move _112, const 2_usize) -> [success: bb51, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_118.0: usize),
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_119),
            StorageLive(_120),
            _120 = _56,
            _119 = Lt(const 0_isize, move _120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:86:15: 86:21 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _119) -> [0: bb70, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageLive(_121),
            StorageLive(_122),
            _122 = _56,
            _121 = Le(move _122, const 16_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:86:25: 86:33 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _121) -> [0: bb69, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = (_48.0: u64),
            StorageLive(_125),
            StorageLive(_126),
            _126 = _2,
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = _27,
            StorageLive(_130),
            _130 = _51,
            _131 = AddWithOverflow(_129, _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:88:55: 88:69 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_131.1: bool), "attempt to compute `{} + {}`, which would overflow", move _129, move _130) -> [success: bb57, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _128 = move (_131.0: isize),
            StorageDead(_130),
            StorageDead(_129),
            _132 = AddWithOverflow(_128, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:88:55: 88:73 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_132.1: bool), "attempt to compute `{} + {}`, which would overflow", move _128, const 1_isize) -> [success: bb58, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _127 = move (_132.0: isize),
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:88:41: 88:74 (#0),
                    scope: scope[9],
                },
                kind: _125 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _126, move _127) -> [return: bb59, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:88:9: 88:75 (#0),
                    scope: scope[9],
                },
                kind: _123 = pretty::mantissa::write_mantissa_long(move _124, move _125) -> [return: bb60, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_124),
            StorageDead(_123),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = _2,
            StorageLive(_137),
            StorageLive(_138),
            _138 = _27,
            _139 = AddWithOverflow(_138, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:89:33: 89:42 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_139.1: bool), "attempt to compute `{} + {}`, which would overflow", move _138, const 1_isize) -> [success: bb61, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _137 = move (_139.0: isize),
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:89:19: 89:43 (#0),
                    scope: scope[9],
                },
                kind: _135 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _136, move _137) -> [return: bb62, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _134 = move _135 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_137),
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_140),
            StorageLive(_141),
            _141 = _2,
            StorageLive(_142),
            _142 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:89:45: 89:65 (#0),
                    scope: scope[9],
                },
                kind: _140 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _141, move _142) -> [return: bb63, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            StorageLive(_143),
            StorageLive(_144),
            _144 = _56,
            _143 = move _144 as usize (IntToInt),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:89:9: 89:79 (#0),
                    scope: scope[9],
                },
                kind: _133 = core::intrinsics::copy::<u8>(move _134, move _140, move _143) -> [return: bb64, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_140),
            StorageDead(_134),
            StorageDead(_133),
            StorageLive(_145),
            StorageLive(_146),
            _146 = _2,
            StorageLive(_147),
            StorageLive(_148),
            _148 = _27,
            StorageLive(_149),
            _149 = _56,
            _150 = AddWithOverflow(_148, _149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:90:24: 90:34 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_150.1: bool), "attempt to compute `{} + {}`, which would overflow", move _148, move _149) -> [success: bb65, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _147 = move (_150.0: isize),
            StorageDead(_149),
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:90:10: 90:35 (#0),
                    scope: scope[9],
                },
                kind: _145 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _146, move _147) -> [return: bb66, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_146),
            (*_145) = const 46_u8,
            StorageDead(_145),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            _153 = _27,
            _152 = move _153 as usize (IntToInt),
            StorageDead(_153),
            StorageLive(_154),
            StorageLive(_155),
            _155 = _51,
            _154 = move _155 as usize (IntToInt),
            StorageDead(_155),
            _156 = AddWithOverflow(_152, _154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:91:9: 91:41 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_156.1: bool), "attempt to compute `{} + {}`, which would overflow", move _152, move _154) -> [success: bb67, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _151 = move (_156.0: usize),
            StorageDead(_154),
            StorageDead(_152),
            _157 = AddWithOverflow(_151, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_157.1: bool), "attempt to compute `{} + {}`, which would overflow", move _151, const 1_usize) -> [success: bb68, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_157.0: usize),
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:86:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_158),
            StorageLive(_159),
            _159 = _56,
            _158 = Lt(const -5_isize, move _159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:92:15: 92:22 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _158) -> [0: bb95, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_159),
            StorageLive(_160),
            StorageLive(_161),
            _161 = _56,
            _160 = Le(move _161, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:92:26: 92:33 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _160) -> [0: bb94, otherwise: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageLive(_162),
            StorageLive(_163),
            _163 = _2,
            StorageLive(_164),
            _164 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:94:10: 94:30 (#0),
                    scope: scope[9],
                },
                kind: _162 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _163, move _164) -> [return: bb74, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_164),
            StorageDead(_163),
            (*_162) = const 48_u8,
            StorageDead(_162),
            StorageLive(_165),
            StorageLive(_166),
            _166 = _2,
            StorageLive(_167),
            StorageLive(_168),
            _168 = _27,
            _169 = AddWithOverflow(_168, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:95:24: 95:33 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_169.1: bool), "attempt to compute `{} + {}`, which would overflow", move _168, const 1_isize) -> [success: bb75, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _167 = move (_169.0: isize),
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:95:10: 95:34 (#0),
                    scope: scope[9],
                },
                kind: _165 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _166, move _167) -> [return: bb76, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            StorageDead(_166),
            (*_165) = const 46_u8,
            StorageDead(_165),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _56,
            _172 = SubWithOverflow(const 2_isize, _171),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:96:22: 96:28 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_172.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_isize, move _171) -> [success: bb77, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _170 = move (_172.0: isize),
            StorageDead(_171),
            FakeRead(ForLet(None), _170),
            StorageLive(_173),
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            _176 = _170,
            _175 = core::ops::Range::<isize> { start: const 2_isize, end: move _176 },
            StorageDead(_176),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:18: 97:27 (#309),
                    scope: scope[12],
                },
                kind: _174 = <core::ops::Range<isize> as core::iter::IntoIterator>::into_iter(move _175) -> [return: bb78, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            PlaceMention(_174),
            StorageLive(_177),
            _177 = move _174,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:9: 99:10 (#308),
                    scope: scope[13],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:9: 99:10 (#308),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb80, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_178),
            StorageLive(_179),
            StorageLive(_180),
            StorageLive(_181),
            _181 = &mut _177,
            _180 = &mut (*_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:18: 97:27 (#309),
                    scope: scope[13],
                },
                kind: _179 = <core::ops::Range<isize> as core::iter::Iterator>::next(move _180) -> [return: bb81, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            PlaceMention(_179),
            _182 = discriminant(_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:18: 97:27 (#309),
                    scope: scope[13],
                },
                kind: switchInt(move _182) -> [0: bb83, 1: bb84, otherwise: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:18: 97:27 (#309),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:9: 99:10 (#308),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb85, imaginary: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_184),
            _184 = ((_179 as Some).0: isize),
            StorageLive(_185),
            StorageLive(_186),
            _186 = _2,
            StorageLive(_187),
            StorageLive(_188),
            _188 = _27,
            StorageLive(_189),
            _189 = _184,
            _190 = AddWithOverflow(_188, _189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:98:28: 98:37 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_190.1: bool), "attempt to compute `{} + {}`, which would overflow", move _188, move _189) -> [success: bb86, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _173 = const (),
            StorageDead(_181),
            StorageDead(_179),
            StorageDead(_178),
            StorageDead(_177),
            StorageDead(_174),
            StorageDead(_173),
            StorageLive(_191),
            StorageLive(_192),
            _192 = (_48.0: u64),
            StorageLive(_193),
            StorageLive(_194),
            _194 = _2,
            StorageLive(_195),
            StorageLive(_196),
            StorageLive(_197),
            _197 = _27,
            StorageLive(_198),
            _198 = _51,
            _199 = AddWithOverflow(_197, _198),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:100:55: 100:69 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_199.1: bool), "attempt to compute `{} + {}`, which would overflow", move _197, move _198) -> [success: bb88, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _187 = move (_190.0: isize),
            StorageDead(_189),
            StorageDead(_188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:98:14: 98:38 (#0),
                    scope: scope[14],
                },
                kind: _185 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _186, move _187) -> [return: bb87, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_187),
            StorageDead(_186),
            (*_185) = const 48_u8,
            StorageDead(_185),
            _178 = const (),
            StorageDead(_184),
            StorageDead(_181),
            StorageDead(_179),
            StorageDead(_178),
            _84 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:97:9: 99:10 (#308),
                    scope: scope[13],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _196 = move (_199.0: isize),
            StorageDead(_198),
            StorageDead(_197),
            StorageLive(_200),
            _200 = _170,
            _201 = AddWithOverflow(_196, _200),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:100:55: 100:78 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_201.1: bool), "attempt to compute `{} + {}`, which would overflow", move _196, move _200) -> [success: bb89, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _195 = move (_201.0: isize),
            StorageDead(_200),
            StorageDead(_196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:100:41: 100:79 (#0),
                    scope: scope[12],
                },
                kind: _193 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _194, move _195) -> [return: bb90, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            StorageDead(_194),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:100:9: 100:80 (#0),
                    scope: scope[12],
                },
                kind: _191 = pretty::mantissa::write_mantissa_long(move _192, move _193) -> [return: bb91, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            StorageDead(_192),
            StorageDead(_191),
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            _204 = _27,
            _203 = move _204 as usize (IntToInt),
            StorageDead(_204),
            StorageLive(_205),
            StorageLive(_206),
            _206 = _51,
            _205 = move _206 as usize (IntToInt),
            StorageDead(_206),
            _207 = AddWithOverflow(_203, _205),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:101:9: 101:41 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_207.1: bool), "attempt to compute `{} + {}`, which would overflow", move _203, move _205) -> [success: bb92, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _202 = move (_207.0: usize),
            StorageDead(_205),
            StorageDead(_203),
            StorageLive(_208),
            StorageLive(_209),
            _209 = _170,
            _208 = move _209 as usize (IntToInt),
            StorageDead(_209),
            _210 = AddWithOverflow(_202, _208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_210.1: bool), "attempt to compute `{} + {}`, which would overflow", move _202, move _208) -> [success: bb93, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_210.0: usize),
            StorageDead(_208),
            StorageDead(_202),
            StorageDead(_170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:92:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_211),
            StorageLive(_212),
            _212 = _51,
            _211 = Eq(move _212, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:102:15: 102:26 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _211) -> [0: bb108, otherwise: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
            StorageLive(_213),
            StorageLive(_214),
            _214 = (_48.0: u64),
            _213 = move _214 as u8 (IntToInt),
            StorageDead(_214),
            _215 = AddWithOverflow(const 48_u8, _213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:104:33: 104:56 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_215.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _213) -> [success: bb98, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_216),
            StorageLive(_217),
            _217 = _2,
            StorageLive(_218),
            _218 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:104:10: 104:30 (#0),
                    scope: scope[9],
                },
                kind: _216 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _217, move _218) -> [return: bb99, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_218),
            StorageDead(_217),
            (*_216) = move (_215.0: u8),
            StorageDead(_213),
            StorageDead(_216),
            StorageLive(_219),
            StorageLive(_220),
            _220 = _2,
            StorageLive(_221),
            StorageLive(_222),
            _222 = _27,
            _223 = AddWithOverflow(_222, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:105:24: 105:33 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_223.1: bool), "attempt to compute `{} + {}`, which would overflow", move _222, const 1_isize) -> [success: bb100, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _221 = move (_223.0: isize),
            StorageDead(_222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:105:10: 105:34 (#0),
                    scope: scope[9],
                },
                kind: _219 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _220, move _221) -> [return: bb101, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
            StorageDead(_220),
            (*_219) = const 101_u8,
            StorageDead(_219),
            StorageLive(_224),
            StorageLive(_225),
            StorageLive(_226),
            _226 = _27,
            _225 = move _226 as usize (IntToInt),
            StorageDead(_226),
            _227 = AddWithOverflow(_225, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:9: 106:27 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_227.1: bool), "attempt to compute `{} + {}`, which would overflow", move _225, const 2_usize) -> [success: bb102, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _224 = move (_227.0: usize),
            StorageDead(_225),
            StorageLive(_228),
            StorageLive(_229),
            StorageLive(_230),
            _230 = _56,
            _231 = SubWithOverflow(_230, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:46: 106:52 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_231.1: bool), "attempt to compute `{} - {}`, which would overflow", move _230, const 1_isize) -> [success: bb103, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _229 = move (_231.0: isize),
            StorageDead(_230),
            StorageLive(_232),
            StorageLive(_233),
            _233 = _2,
            StorageLive(_234),
            StorageLive(_235),
            _235 = _27,
            _236 = AddWithOverflow(_235, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:68: 106:77 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_236.1: bool), "attempt to compute `{} + {}`, which would overflow", move _235, const 2_isize) -> [success: bb104, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _234 = move (_236.0: isize),
            StorageDead(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:54: 106:78 (#0),
                    scope: scope[9],
                },
                kind: _232 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _233, move _234) -> [return: bb105, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            StorageDead(_233),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:30: 106:79 (#0),
                    scope: scope[9],
                },
                kind: _228 = pretty::exponent::write_exponent3(move _229, move _232) -> [return: bb106, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
            StorageDead(_229),
            _237 = AddWithOverflow(_224, _228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_237.1: bool), "attempt to compute `{} + {}`, which would overflow", move _224, move _228) -> [success: bb107, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_237.0: usize),
            StorageDead(_228),
            StorageDead(_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:102:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
            StorageLive(_238),
            StorageLive(_239),
            _239 = (_48.0: u64),
            StorageLive(_240),
            StorageLive(_241),
            _241 = _2,
            StorageLive(_242),
            StorageLive(_243),
            StorageLive(_244),
            _244 = _27,
            StorageLive(_245),
            _245 = _51,
            _246 = AddWithOverflow(_244, _245),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:109:55: 109:69 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_246.1: bool), "attempt to compute `{} + {}`, which would overflow", move _244, move _245) -> [success: bb109, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _243 = move (_246.0: isize),
            StorageDead(_245),
            StorageDead(_244),
            _247 = AddWithOverflow(_243, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:109:55: 109:73 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_247.1: bool), "attempt to compute `{} + {}`, which would overflow", move _243, const 1_isize) -> [success: bb110, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _242 = move (_247.0: isize),
            StorageDead(_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:109:41: 109:74 (#0),
                    scope: scope[9],
                },
                kind: _240 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _241, move _242) -> [return: bb111, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_242),
            StorageDead(_241),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:109:9: 109:75 (#0),
                    scope: scope[9],
                },
                kind: _238 = pretty::mantissa::write_mantissa_long(move _239, move _240) -> [return: bb112, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageDead(_239),
            StorageDead(_238),
            StorageLive(_248),
            StorageLive(_249),
            StorageLive(_250),
            _250 = _2,
            StorageLive(_251),
            StorageLive(_252),
            _252 = _27,
            _253 = AddWithOverflow(_252, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:110:48: 110:57 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_253.1: bool), "attempt to compute `{} + {}`, which would overflow", move _252, const 1_isize) -> [success: bb113, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _251 = move (_253.0: isize),
            StorageDead(_252),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:110:34: 110:58 (#0),
                    scope: scope[9],
                },
                kind: _249 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _250, move _251) -> [return: bb114, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_250),
            _248 = (*_249),
            StorageLive(_254),
            StorageLive(_255),
            _255 = _2,
            StorageLive(_256),
            _256 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:110:10: 110:30 (#0),
                    scope: scope[9],
                },
                kind: _254 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _255, move _256) -> [return: bb115, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_256),
            StorageDead(_255),
            (*_254) = move _248,
            StorageDead(_248),
            StorageDead(_254),
            StorageDead(_249),
            StorageLive(_257),
            StorageLive(_258),
            _258 = _2,
            StorageLive(_259),
            StorageLive(_260),
            _260 = _27,
            _261 = AddWithOverflow(_260, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:111:24: 111:33 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_261.1: bool), "attempt to compute `{} + {}`, which would overflow", move _260, const 1_isize) -> [success: bb116, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _259 = move (_261.0: isize),
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:111:10: 111:34 (#0),
                    scope: scope[9],
                },
                kind: _257 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _258, move _259) -> [return: bb117, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_259),
            StorageDead(_258),
            (*_257) = const 46_u8,
            StorageDead(_257),
            StorageLive(_262),
            StorageLive(_263),
            _263 = _2,
            StorageLive(_264),
            StorageLive(_265),
            StorageLive(_266),
            _266 = _27,
            StorageLive(_267),
            _267 = _51,
            _268 = AddWithOverflow(_266, _267),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:112:24: 112:38 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_268.1: bool), "attempt to compute `{} + {}`, which would overflow", move _266, move _267) -> [success: bb118, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _265 = move (_268.0: isize),
            StorageDead(_267),
            StorageDead(_266),
            _269 = AddWithOverflow(_265, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:112:24: 112:42 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_269.1: bool), "attempt to compute `{} + {}`, which would overflow", move _265, const 1_isize) -> [success: bb119, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _264 = move (_269.0: isize),
            StorageDead(_265),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:112:10: 112:43 (#0),
                    scope: scope[9],
                },
                kind: _262 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _263, move _264) -> [return: bb120, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
            StorageDead(_263),
            (*_262) = const 101_u8,
            StorageDead(_262),
            StorageLive(_270),
            StorageLive(_271),
            StorageLive(_272),
            StorageLive(_273),
            _273 = _27,
            _272 = move _273 as usize (IntToInt),
            StorageDead(_273),
            StorageLive(_274),
            StorageLive(_275),
            _275 = _51,
            _274 = move _275 as usize (IntToInt),
            StorageDead(_275),
            _276 = AddWithOverflow(_272, _274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:113:9: 114:30 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_276.1: bool), "attempt to compute `{} + {}`, which would overflow", move _272, move _274) -> [success: bb121, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _271 = move (_276.0: usize),
            StorageDead(_274),
            StorageDead(_272),
            _277 = AddWithOverflow(_271, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:113:9: 115:16 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_277.1: bool), "attempt to compute `{} + {}`, which would overflow", move _271, const 2_usize) -> [success: bb122, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _270 = move (_277.0: usize),
            StorageDead(_271),
            StorageLive(_278),
            StorageLive(_279),
            StorageLive(_280),
            _280 = _56,
            _281 = SubWithOverflow(_280, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:116:31: 116:37 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_281.1: bool), "attempt to compute `{} - {}`, which would overflow", move _280, const 1_isize) -> [success: bb123, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _279 = move (_281.0: isize),
            StorageDead(_280),
            StorageLive(_282),
            StorageLive(_283),
            _283 = _2,
            StorageLive(_284),
            StorageLive(_285),
            StorageLive(_286),
            _286 = _27,
            StorageLive(_287),
            _287 = _51,
            _288 = AddWithOverflow(_286, _287),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:116:53: 116:67 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_288.1: bool), "attempt to compute `{} + {}`, which would overflow", move _286, move _287) -> [success: bb124, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _285 = move (_288.0: isize),
            StorageDead(_287),
            StorageDead(_286),
            _289 = AddWithOverflow(_285, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:116:53: 116:71 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_289.1: bool), "attempt to compute `{} + {}`, which would overflow", move _285, const 2_isize) -> [success: bb125, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _284 = move (_289.0: isize),
            StorageDead(_285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:116:39: 116:72 (#0),
                    scope: scope[9],
                },
                kind: _282 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _283, move _284) -> [return: bb126, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
            StorageDead(_283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:116:15: 116:73 (#0),
                    scope: scope[9],
                },
                kind: _278 = pretty::exponent::write_exponent3(move _279, move _282) -> [return: bb127, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_282),
            StorageDead(_279),
            _290 = AddWithOverflow(_270, _278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_290.1: bool), "attempt to compute `{} + {}`, which would overflow", move _270, move _278) -> [success: bb128, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_290.0: usize),
            StorageDead(_278),
            StorageDead(_270),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:102:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:92:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
            StorageDead(_158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:86:12: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_66),
            StorageDead(_56),
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_48),
            StorageDead(_27),
            StorageDead(_18),
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:118:2: 118:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:118:2: 118:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/mod.rs:52:1: 118:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:52:52: 52:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/pretty/mod.rs:52:27: 52:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:52:24: 52:25 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:52:24: 52:25 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:52:24: 52:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/pretty/mod.rs:52:40: 52:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:52:32: 52:38 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:52:32: 52:38 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:52:32: 52:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:53:16: 53:27 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:53:9: 53:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:53:9: 53:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:53:16: 53:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:54:16: 54:82 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:54:9: 54:13 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:9: 54:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:16: 54:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:17: 54:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:18: 54:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:26: 54:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:26: 54:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:54:17: 54:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:55:25: 55:68 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:55:9: 55:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:9: 55:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:25: 55:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:32: 55:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:33: 55:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:33: 55:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:55:32: 55:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:57:9: 57:85 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:56:9: 56:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:56:9: 56:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:9: 57:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:9: 57:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:10: 57:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:9: 57:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:49: 57:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:50: 57:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:50: 57:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:57:49: 57:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:59:21: 59:27 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:59:9: 59:18 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:59:9: 59:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:60:5: 63:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:60:8: 60:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:62:9: 62:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:5: 68:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:8: 65:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:8: 65:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:30: 65:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:30: 65:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:65:49: 68:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:9: 66:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:34: 66:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:34: 66:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:34: 66:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:34: 66:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:51: 66:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:51: 66:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:66:65: 66:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:67:16: 67:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:67:16: 67:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:67:16: 67:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:70:13: 70:46 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:70:9: 70:10 (#0),
                    },
                ),
            ),
        ),
        ty: d2s::FloatingDecimal64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:70:9: 70:10 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:70:17: 70:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:70:32: 70:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:72:18: 72:60 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:72:9: 72:15 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:72:9: 72:15 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:72:18: 72:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:72:40: 72:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:73:13: 73:32 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:73:9: 73:10 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:73:9: 73:10 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:73:13: 73:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:74:14: 74:24 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:74:9: 74:11 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:74:9: 74:11 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:74:14: 74:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:74:23: 74:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:74:14: 74:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:75:19: 75:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:75:19: 75:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#97),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:77:8: 77:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:77:13: 77:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:77:18: 77:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:77:18: 77:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:9: 79:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:29: 79:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:41: 79:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:41: 79:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:55: 79:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:55: 79:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:63: 79:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:79:55: 79:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:9: 82:10 (#303),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:26: 80:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _79,
                                ),
                                src/pretty/mod.rs:80:18: 80:28 (#304),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:80:18: 80:28 (#304),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:52:1: 118:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:18: 80:28 (#304),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:9: 82:10 (#303),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:9: 82:10 (#303),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _86,
                                ),
                                src/pretty/mod.rs:80:18: 80:28 (#304),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:80:13: 80:14 (#305),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:80:13: 80:14 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:14: 81:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:14: 81:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:28: 81:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:28: 81:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:36: 81:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:81:28: 81:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:10: 83:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:10: 83:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:24: 83:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:24: 83:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:32: 83:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:83:24: 83:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:10: 84:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:10: 84:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:24: 84:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:24: 84:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:24: 84:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:32: 84:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:24: 84:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:84:24: 84:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:9: 85:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:9: 85:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:9: 85:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:26: 85:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:85:9: 85:41 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:26: 85:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:9: 85:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:85:9: 85:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:86:15: 86:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:86:19: 86:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:86:25: 86:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:86:25: 86:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:9: 88:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:29: 88:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:41: 88:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:41: 88:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:55: 88:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:55: 88:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:55: 88:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:63: 88:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:55: 88:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:88:55: 88:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:9: 89:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:19: 89:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:19: 89:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:19: 89:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:33: 89:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:33: 89:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:33: 89:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:45: 89:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:45: 89:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:59: 89:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:67: 89:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:89:67: 89:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:10: 90:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:10: 90:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:24: 90:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:24: 90:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:32: 90:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:90:24: 90:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:9: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:9: 91:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:9: 91:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:26: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:91:9: 91:45 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:26: 91:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:9: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:91:9: 91:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:92:15: 92:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:92:20: 92:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:92:26: 92:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:92:26: 92:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:94:10: 94:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:94:10: 94:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:94:24: 94:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:95:10: 95:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:95:10: 95:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:95:24: 95:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:95:24: 95:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:95:24: 95:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/mod.rs:96:22: 96:28 (#0),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:96:13: 96:19 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:96:13: 96:19 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:96:26: 96:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:96:22: 96:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:9: 99:10 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:21: 97:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _174,
                                ),
                                src/pretty/mod.rs:97:18: 97:27 (#309),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:97:18: 97:27 (#309),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:18: 97:27 (#309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:9: 99:10 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:9: 99:10 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _179,
                                ),
                                src/pretty/mod.rs:97:18: 97:27 (#309),
                            ),
                        ),
                        pat_span: src/pretty/mod.rs:97:13: 97:14 (#310),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:97:13: 97:14 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:14: 98:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:14: 98:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:28: 98:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:28: 98:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:36: 98:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:98:28: 98:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:9: 100:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:29: 100:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:41: 100:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:41: 100:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:55: 100:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:55: 100:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:55: 100:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:63: 100:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:55: 100:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:72: 100:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:100:55: 100:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:9: 101:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:9: 101:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:9: 101:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:26: 101:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:26: 101:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:9: 101:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:44: 101:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:101:9: 101:59 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:44: 101:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:101:9: 101:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:102:15: 102:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:77:5: 117:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:102:15: 102:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:40: 104:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:40: 104:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:33: 104:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:10: 104:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:10: 104:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:104:24: 104:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:105:10: 105:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:105:10: 105:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:105:24: 105:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:105:24: 105:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:105:24: 105:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:9: 106:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:9: 106:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:9: 106:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:9: 106:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:30: 106:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:46: 106:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:46: 106:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:46: 106:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:54: 106:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:54: 106:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:68: 106:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:106:9: 106:79 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:68: 106:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:68: 106:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:106:9: 106:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:9: 109:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:29: 109:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:41: 109:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:41: 109:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:55: 109:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:55: 109:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:55: 109:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:63: 109:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:55: 109:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:109:55: 109:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:33: 110:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:34: 110:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:34: 110:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:48: 110:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:48: 110:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:48: 110:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:10: 110:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:10: 110:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:110:24: 110:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:111:10: 111:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:111:10: 111:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:111:24: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:111:24: 111:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:111:24: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:10: 112:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:10: 112:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:24: 112:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:24: 112:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:24: 112:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:32: 112:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:24: 112:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:112:24: 112:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 115:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 114:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 113:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 113:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:114:15: 114:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:114:15: 114:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 114:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 115:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:15: 116:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:31: 116:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:31: 116:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:31: 116:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:39: 116:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:39: 116:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:53: 116:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:53: 116:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:53: 116:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/mod.rs:113:9: 116:73 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:61: 116:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:53: 116:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:116:53: 116:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/mod.rs:113:9: 116:73 (#0),
            scope: scope[0],
        },
    },
]