[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:48:12: 48:28 (#0),
                    scope: scope[0],
                },
                kind: _3 = <F as buffer::Sealed>::is_nonfinite(move _4) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:48:12: 48:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:49:13: 49:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = <F as buffer::Sealed>::format_nonfinite(move _6) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_5),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:48:9: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_1),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:51:13: 51:34 (#0),
                    scope: scope[0],
                },
                kind: _7 = buffer::Buffer::format_finite::<F>(move _8, move _9) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_7),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:48:9: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:53:6: 53:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buffer/mod.rs:47:5: 53:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:47:49: 47:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut buffer::Buffer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:47:29: 47:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buffer/mod.rs:47:43: 47:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buffer/mod.rs:47:40: 47:41 (#0),
                            ),
                        ),
                        pat_span: src/buffer/mod.rs:47:40: 47:41 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:47:40: 47:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:48:9: 52:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:48:12: 48:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:48:9: 52:10 (#0),
                },
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:48:12: 48:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:49:13: 49:33 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:49:13: 49:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:49:13: 49:33 (#0),
                },
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:49:13: 49:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:51:13: 51:34 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:51:13: 51:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:51:13: 51:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buffer::Buffer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:51:13: 51:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buffer/mod.rs:51:13: 51:34 (#0),
                },
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buffer/mod.rs:51:32: 51:33 (#0),
            scope: scope[0],
        },
    },
]