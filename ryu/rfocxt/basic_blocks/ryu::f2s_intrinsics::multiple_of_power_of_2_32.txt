[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _8 = Lt(_7, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s_intrinsics.rs:52:15: 52:26 (#0),
                    scope: scope[0],
                },
                kind: assert(move _8, "attempt to shift left by `{}`, which would overflow", _7) -> [success: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Shl(const 1_u32, move _7),
            StorageDead(_7),
            _9 = SubWithOverflow(_6, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s_intrinsics.rs:52:14: 52:31 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_u32) -> [success: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_9.0: u32),
            StorageDead(_6),
            _3 = BitAnd(move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            _0 = Eq(move _3, const 0_u32),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s_intrinsics.rs:53:2: 53:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/f2s_intrinsics.rs:50:1: 53:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:50:57: 50:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/f2s_intrinsics.rs:50:41: 50:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s_intrinsics.rs:50:34: 50:39 (#0),
                            ),
                        ),
                        pat_span: src/f2s_intrinsics.rs:50:34: 50:39 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:50:34: 50:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/f2s_intrinsics.rs:50:49: 50:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/f2s_intrinsics.rs:50:46: 50:47 (#0),
                            ),
                        ),
                        pat_span: src/f2s_intrinsics.rs:50:46: 50:47 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:50:46: 50:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s_intrinsics.rs:52:5: 52:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:5: 52:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s_intrinsics.rs:52:5: 52:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:6: 52:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s_intrinsics.rs:52:5: 52:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:14: 52:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s_intrinsics.rs:52:5: 52:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:15: 52:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/f2s_intrinsics.rs:52:5: 52:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:24: 52:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:15: 52:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/f2s_intrinsics.rs:52:14: 52:31 (#0),
            scope: scope[0],
        },
    },
]