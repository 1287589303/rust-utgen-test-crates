[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            _3 = Lt(move _4, const 0_isize),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:33:8: 33:12 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 45_u8,
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:35:18: 35:34 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _8, const 1_isize) -> [return: bb2, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _2 = move _7,
            StorageDead(_7),
            StorageLive(_9),
            _9 = _1,
            _10 = Eq(_9, const isize::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:36:13: 36:15 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _10, "attempt to negate `{}`, which would overflow", _9) -> [success: bb3, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _1 = Neg(move _9),
            StorageDead(_9),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:33:5: 37:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:33:5: 37:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#92),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb9, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _1,
            _14 = Lt(move _15, const 100_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:39:19: 39:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
            StorageDead(_14),
            StorageDead(_13),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#91),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#93),
                    scope: scope[1],
                },
                kind: _16 = core::panicking::panic(const "assertion failed: k < 100") -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#91),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _1,
            _17 = Ge(move _18, const 10_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:40:8: 40:15 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb17, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = const <static(DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE))>,
            _22 = &(*_23),
            _21 = move _22 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:41:17: 41:37 (#0),
                    scope: scope[1],
                },
                kind: _20 = core::slice::<impl [u8]>::as_ptr(move _21) -> [return: bb12, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _1,
            _26 = MulWithOverflow(_25, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:41:45: 41:50 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _25, const 2_isize) -> [success: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = move (_26.0: isize),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:41:17: 41:51 (#0),
                    scope: scope[1],
                },
                kind: _19 = core::ptr::const_ptr::<impl *const u8>::offset(move _20, move _24) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageDead(_23),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _19,
            StorageLive(_29),
            _29 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:42:9: 42:47 (#0),
                    scope: scope[2],
                },
                kind: _27 = core::intrinsics::copy_nonoverlapping::<u8>(move _28, move _29, const 2_usize) -> [return: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _3,
            _30 = move _31 as usize (IntToInt),
            StorageDead(_31),
            _32 = AddWithOverflow(_30, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:43:9: 43:26 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 2_usize) -> [success: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_32.0: usize),
            StorageDead(_30),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:40:5: 47:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _1,
            _33 = move _34 as u8 (IntToInt),
            StorageDead(_34),
            _35 = AddWithOverflow(const 48_u8, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:45:19: 45:33 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _33) -> [success: bb18, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = move (_35.0: u8),
            StorageDead(_33),
            StorageLive(_36),
            StorageLive(_37),
            _37 = _3,
            _36 = move _37 as usize (IntToInt),
            StorageDead(_37),
            _38 = AddWithOverflow(_36, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:46:9: 46:26 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", move _36, const 1_usize) -> [success: bb19, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_38.0: usize),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:40:5: 47:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:48:2: 48:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:31:1: 48:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:31:69: 31:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/pretty/exponent.rs:31:38: 31:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:31:31: 31:36 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:31:31: 31:36 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:31:31: 31:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/pretty/exponent.rs:31:57: 31:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:31:45: 31:55 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:31:45: 31:55 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:31:45: 31:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:32:16: 32:21 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:32:9: 32:13 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:32:9: 32:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:32:16: 32:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:33:5: 37:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:33:8: 33:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:35:18: 35:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:35:18: 35:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:36:14: 36:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:36:13: 36:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:39:19: 39:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:39:19: 39:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#93),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:40:5: 47:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:40:8: 40:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:40:5: 47:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:40:8: 40:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:41:17: 41:51 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:41:13: 41:14 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:13: 41:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:17: 41:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:17: 41:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:17: 41:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:17: 41:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:45: 41:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:45: 41:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:41:45: 41:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:42:9: 42:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:42:34: 42:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:42:37: 42:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:43:9: 43:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:43:9: 43:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:43:9: 43:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:43:9: 43:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:43:9: 43:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:45:26: 45:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:45:26: 45:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:45:19: 45:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:46:9: 46:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:46:9: 46:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:46:9: 46:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:46:9: 46:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:46:9: 46:26 (#0),
            scope: scope[0],
        },
    },
]