[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            _3 = Lt(move _4, const 0_isize),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:7:8: 7:12 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 45_u8,
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:9:18: 9:34 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _8, const 1_isize) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _2 = move _7,
            StorageDead(_7),
            StorageLive(_9),
            _9 = _1,
            _10 = Eq(_9, const isize::MIN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:10:13: 10:15 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _10, "attempt to negate `{}`, which would overflow", _9) -> [success: bb3, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _1 = Neg(move _9),
            StorageDead(_9),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:7:5: 11:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:7:5: 11:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#88),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb9, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _1,
            _14 = Lt(move _15, const 1000_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:13:19: 13:27 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
            StorageDead(_14),
            StorageDead(_13),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#87),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#89),
                    scope: scope[1],
                },
                kind: _16 = core::panicking::panic(const "assertion failed: k < 1000") -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#87),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _1,
            _17 = Ge(move _18, const 100_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:14:8: 14:16 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb23, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _1,
            _22 = Eq(const 100_isize, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:15:26: 15:35 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _22, "attempt to divide `{}` by zero", _21) -> [success: bb12, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Eq(const 100_isize, const -1_isize),
            _24 = Eq(_21, const isize::MIN),
            _25 = BitAnd(move _23, move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:15:26: 15:35 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _25, "attempt to compute `{} / {}`, which would overflow", _21, const 100_isize) -> [success: bb13, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Div(move _21, const 100_isize),
            StorageDead(_21),
            _19 = move _20 as u8 (IntToInt),
            StorageDead(_20),
            _26 = AddWithOverflow(const 48_u8, _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:15:19: 15:41 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _19) -> [success: bb14, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = move (_26.0: u8),
            StorageDead(_19),
            _27 = Eq(const 100_isize, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:16:9: 16:17 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _27, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> [success: bb15, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = Eq(const 100_isize, const -1_isize),
            _29 = Eq(_1, const isize::MIN),
            _30 = BitAnd(move _28, move _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:16:9: 16:17 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _30, "attempt to compute the remainder of `{} % {}`, which would overflow", _1, const 100_isize) -> [success: bb16, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _1 = Rem(_1, const 100_isize),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = const <static(DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE))>,
            _34 = &(*_35),
            _33 = move _34 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:17:17: 17:37 (#0),
                    scope: scope[1],
                },
                kind: _32 = core::slice::<impl [u8]>::as_ptr(move _33) -> [return: bb17, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageLive(_36),
            StorageLive(_37),
            _37 = _1,
            _38 = MulWithOverflow(_37, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:17:45: 17:50 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _37, const 2_isize) -> [success: bb18, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = move (_38.0: isize),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:17:17: 17:51 (#0),
                    scope: scope[1],
                },
                kind: _31 = core::ptr::const_ptr::<impl *const u8>::offset(move _32, move _36) -> [return: bb19, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageDead(_35),
            StorageLive(_39),
            StorageLive(_40),
            _40 = _31,
            StorageLive(_41),
            StorageLive(_42),
            _42 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:18:37: 18:53 (#0),
                    scope: scope[2],
                },
                kind: _41 = core::ptr::mut_ptr::<impl *mut u8>::offset(move _42, const 1_isize) -> [return: bb20, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:18:9: 18:57 (#0),
                    scope: scope[2],
                },
                kind: _39 = core::intrinsics::copy_nonoverlapping::<u8>(move _40, move _41, const 2_usize) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _3,
            _43 = move _44 as usize (IntToInt),
            StorageDead(_44),
            _45 = AddWithOverflow(_43, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:19:9: 19:26 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 3_usize) -> [success: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_45.0: usize),
            StorageDead(_43),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _1,
            _46 = Ge(move _47, const 10_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:20:15: 20:22 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _46) -> [0: bb30, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = const <static(DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE))>,
            _51 = &(*_52),
            _50 = move _51 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:21:17: 21:37 (#0),
                    scope: scope[1],
                },
                kind: _49 = core::slice::<impl [u8]>::as_ptr(move _50) -> [return: bb25, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _1,
            _55 = MulWithOverflow(_54, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:21:45: 21:50 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_55.1: bool), "attempt to compute `{} * {}`, which would overflow", move _54, const 2_isize) -> [success: bb26, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = move (_55.0: isize),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:21:17: 21:51 (#0),
                    scope: scope[1],
                },
                kind: _48 = core::ptr::const_ptr::<impl *const u8>::offset(move _49, move _53) -> [return: bb27, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_49),
            FakeRead(ForLet(None), _48),
            StorageDead(_52),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _48,
            StorageLive(_58),
            _58 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:22:9: 22:47 (#0),
                    scope: scope[3],
                },
                kind: _56 = core::intrinsics::copy_nonoverlapping::<u8>(move _57, move _58, const 2_usize) -> [return: bb28, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_59),
            StorageLive(_60),
            _60 = _3,
            _59 = move _60 as usize (IntToInt),
            StorageDead(_60),
            _61 = AddWithOverflow(_59, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:23:9: 23:26 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_61.1: bool), "attempt to compute `{} + {}`, which would overflow", move _59, const 2_usize) -> [success: bb29, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_61.0: usize),
            StorageDead(_59),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:20:12: 27:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _1,
            _62 = move _63 as u8 (IntToInt),
            StorageDead(_63),
            _64 = AddWithOverflow(const 48_u8, _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:25:19: 25:33 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _62) -> [success: bb31, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = move (_64.0: u8),
            StorageDead(_62),
            StorageLive(_65),
            StorageLive(_66),
            _66 = _3,
            _65 = move _66 as usize (IntToInt),
            StorageDead(_66),
            _67 = AddWithOverflow(_65, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:26:9: 26:26 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _65, const 1_usize) -> [success: bb32, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_67.0: usize),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:20:12: 27:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:28:2: 28:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/pretty/exponent.rs:5:1: 28:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:5:69: 5:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/pretty/exponent.rs:5:38: 5:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:5:31: 5:36 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:5:31: 5:36 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:5:31: 5:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/pretty/exponent.rs:5:57: 5:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:5:45: 5:55 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:5:45: 5:55 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:5:45: 5:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:6:16: 6:21 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:6:9: 6:13 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:6:9: 6:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:6:16: 6:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:7:5: 11:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:7:8: 7:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:9:18: 9:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:9:18: 9:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:10:14: 10:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:10:13: 10:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:13:19: 13:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:13:19: 13:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#89),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:14:8: 14:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:14:8: 14:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:27: 15:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:26: 15:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:15:19: 15:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:16:9: 16:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:16:9: 16:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:16:9: 16:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:16:9: 16:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:17:17: 17:51 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:17:13: 17:14 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:13: 17:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:17: 17:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:17: 17:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:17: 17:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:17: 17:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:45: 17:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:45: 17:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:17:45: 17:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:18:9: 18:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:18:34: 18:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:18:37: 18:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:18:37: 18:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:19:9: 19:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:19:9: 19:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:19:9: 19:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:19:9: 19:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:19:9: 19:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:20:15: 20:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:14:5: 27:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:20:15: 20:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/pretty/exponent.rs:21:17: 21:51 (#0),
                            ),
                        ),
                        pat_span: src/pretty/exponent.rs:21:13: 21:14 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:13: 21:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:17: 21:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:17: 21:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:17: 21:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:100 ~ ryu[e2d4]::digit_table::DIGIT_TABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} [u8; 200_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:17: 21:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:45: 21:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:45: 21:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:21:45: 21:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:22:9: 22:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:22:34: 22:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:22:37: 22:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:23:9: 23:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:23:9: 23:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:23:9: 23:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:23:9: 23:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:23:9: 23:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:25:26: 25:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:25:26: 25:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:25:19: 25:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:26:9: 26:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:26:9: 26:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/pretty/exponent.rs:26:9: 26:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:26:9: 26:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/pretty/exponent.rs:26:9: 26:26 (#0),
            scope: scope[0],
        },
    },
]