{
  "name": "ryu::buffer::{impl#0}::format_finite",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:72:5:79:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct F32Wrapper(f32);",
                "    unsafe impl raw::Float for F32Wrapper {",
                "        fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            // Example dummy implementation just for the sake of testing",
                "            let value = format!(\"{}\", self.0);",
                "            let bytes = value.as_bytes();",
                "            let len = bytes.len();",
                "            ptr::copy_nonoverlapping(bytes.as_ptr(), result, len);",
                "            len",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format_finite(F32Wrapper(3.14));",
                "    assert_eq!(result, \"3.14\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct F64Wrapper(f64);",
                "    unsafe impl raw::Float for F64Wrapper {",
                "        fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            // Example dummy implementation just for the sake of testing",
                "            let value = format!(\"{}\", self.0);",
                "            let bytes = value.as_bytes();",
                "            let len = bytes.len();",
                "            ptr::copy_nonoverlapping(bytes.as_ptr(), result, len);",
                "            len",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format_finite(F64Wrapper(2.718));",
                "    assert_eq!(result, \"2.718\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct F32Wrapper(f32);",
                "    unsafe impl raw::Float for F32Wrapper {",
                "        fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            let value = format!(\"{}\", self.0);",
                "            let bytes = value.as_bytes();",
                "            let len = bytes.len();",
                "            ptr::copy_nonoverlapping(bytes.as_ptr(), result, len);",
                "            len",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format_finite(F32Wrapper(0.0));",
                "    assert_eq!(result, \"0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct F32Wrapper(f32);",
                "    unsafe impl raw::Float for F32Wrapper {",
                "        fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            let value = format!(\"{}\", self.0);",
                "            let bytes = value.as_bytes();",
                "            let len = bytes.len();",
                "            ptr::copy_nonoverlapping(bytes.as_ptr(), result, len);",
                "            len",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format_finite(F32Wrapper(-4.2));",
                "    assert_eq!(result, \"-4.2\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct F64Wrapper(f64);",
                "    unsafe impl raw::Float for F64Wrapper {",
                "        fn write_to_ryu_buffer(self, result: *mut u8) -> usize {",
                "            let value = format!(\"{}\", self.0);",
                "            let bytes = value.as_bytes();",
                "            let len = bytes.len();",
                "            ptr::copy_nonoverlapping(bytes.as_ptr(), result, len);",
                "            len",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format_finite(F64Wrapper(1e30));",
                "    assert_eq!(result, \"1000000000000000000000000000000\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}