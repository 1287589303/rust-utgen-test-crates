{
  "name": "ryu::pretty::format32",
  "mod_info": {
    "name": "pretty",
    "loc": "src/lib.rs:117:1:117:12"
  },
  "visible": true,
  "loc": "src/pretty/mod.rs:159:1:224:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f: f32 = 1.234;",
                "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "    let len = unsafe { format32(f, buffer.as_mut_ptr() as *mut u8) };",
                "    let slice = unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) };",
                "    let print = std::str::from_utf8(slice).unwrap();",
                "    assert_eq!(print, \"1.234\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f: f32 = -4.567;",
                "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "    let len = unsafe { format32(f, buffer.as_mut_ptr() as *mut u8) };",
                "    let slice = unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) };",
                "    let print = std::str::from_utf8(slice).unwrap();",
                "    assert_eq!(print, \"-4.567\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f: f32 = 0.0;",
                "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "    let len = unsafe { format32(f, buffer.as_mut_ptr() as *mut u8) };",
                "    let slice = unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) };",
                "    let print = std::str::from_utf8(slice).unwrap();",
                "    assert_eq!(print, \"0.0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f: f32 = 12.34e-4;",
                "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "    let len = unsafe { format32(f, buffer.as_mut_ptr() as *mut u8) };",
                "    let slice = unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) };",
                "    let print = std::str::from_utf8(slice).unwrap();",
                "    assert_eq!(print, \"0.001234\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let f: f32 = 1234e30;",
                "    let mut buffer = [std::mem::MaybeUninit::<u8>::uninit(); 16];",
                "    let len = unsafe { format32(f, buffer.as_mut_ptr() as *mut u8) };",
                "    let slice = unsafe { std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len) };",
                "    let print = std::str::from_utf8(slice).unwrap();",
                "    assert_eq!(print, \"1.234e33\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}