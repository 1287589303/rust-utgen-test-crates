{
  "name": "ryu::buffer::{impl#7}::write_to_ryu_buffer",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:168:5:170:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [MaybeUninit<u8>; 32] = unsafe { MaybeUninit::uninit().assume_init() };",
                "    let result = unsafe { buffer.as_mut_ptr() };",
                "    let f: f64 = 0.0;",
                "    let len = unsafe { f.write_to_ryu_buffer(result) };",
                "    ",
                "    let output: &[u8] = unsafe { slice::from_raw_parts(result, len) };",
                "    assert_eq!(str::from_utf8(output).unwrap(), \"0.0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [MaybeUninit<u8>; 32] = unsafe { MaybeUninit::uninit().assume_init() };",
                "    let result = unsafe { buffer.as_mut_ptr() };",
                "    let f: f64 = f64::NAN;",
                "    let len = unsafe { f.write_to_ryu_buffer(result) };",
                "    ",
                "    let output: &[u8] = unsafe { slice::from_raw_parts(result, len) };",
                "    assert_eq!(str::from_utf8(output).unwrap(), \"NaN\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [MaybeUninit<u8>; 32] = unsafe { MaybeUninit::uninit().assume_init() };",
                "    let result = unsafe { buffer.as_mut_ptr() };",
                "    let f: f64 = f64::INFINITY;",
                "    let len = unsafe { f.write_to_ryu_buffer(result) };",
                "    ",
                "    let output: &[u8] = unsafe { slice::from_raw_parts(result, len) };",
                "    assert_eq!(str::from_utf8(output).unwrap(), \"inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [MaybeUninit<u8>; 32] = unsafe { MaybeUninit::uninit().assume_init() };",
                "    let result = unsafe { buffer.as_mut_ptr() };",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    let len = unsafe { f.write_to_ryu_buffer(result) };",
                "    ",
                "    let output: &[u8] = unsafe { slice::from_raw_parts(result, len) };",
                "    assert_eq!(str::from_utf8(output).unwrap(), \"-inf\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}