{
  "name": "ryu::buffer::{impl#6}::write_to_ryu_buffer",
  "mod_info": {
    "name": "buffer",
    "loc": "src/lib.rs:106:1:106:12"
  },
  "visible": true,
  "loc": "src/buffer/mod.rs:139:5:141:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 16] = [0; 16];",
                "    let result = unsafe { (0.0f32).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    let expected = b\"0.0\\0\";",
                "    assert_eq!(&buffer[..result], expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 16] = [0; 16];",
                "    let result = unsafe { (f32::INFINITY).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    let expected = b\"inf\\0\";",
                "    assert_eq!(&buffer[..result], expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 16] = [0; 16];",
                "    let result = unsafe { (-f32::INFINITY).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    let expected = b\"-inf\\0\";",
                "    assert_eq!(&buffer[..result], expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 16] = [0; 16];",
                "    let result = unsafe { f32::NAN.write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    let expected = b\"NaN\\0\";",
                "    assert_eq!(&buffer[..result], expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut buffer: [u8; 16] = [0; 16];",
                "    let result = unsafe { (-0.0f32).write_to_ryu_buffer(buffer.as_mut_ptr()) };",
                "    let expected = b\"0.0\\0\";",
                "    assert_eq!(&buffer[..result], expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}