{
  "name": "ryu::d2s::d2d",
  "mod_info": {
    "name": "d2s",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/d2s.rs:91:1:302:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 0u64;",
                "    let ieee_exponent = 0u32;",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 0);",
                "    assert_eq!(result.exponent, 1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 1u64;",
                "    let ieee_exponent = 1023u32; // represents 1.0 in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 1);",
                "    assert_eq!(result.exponent, 1); // 1.0 represents 1 * 10^0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 1u64;",
                "    let ieee_exponent = 1022u32; // represents 0.5 in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 5);",
                "    assert_eq!(result.exponent, -1); // 0.5 represents 5 * 10^{-1}",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 0xFFFFFFFFFFFFFu64; // largest mantissa",
                "    let ieee_exponent = 2047u32; // represents infinity in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 0); // General case, as it's not a valid finite number",
                "    assert_eq!(result.exponent, 0); // Exponent default if not handled",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 2u64;",
                "    let ieee_exponent = 1024u32; // represents 2.0 in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 2);",
                "    assert_eq!(result.exponent, 1); // Exponent represents 2 * 10^0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 3u64;",
                "    let ieee_exponent = 1025u32; // represents 3.0 in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 3);",
                "    assert_eq!(result.exponent, 1); // Exponent represents 3 * 10^0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ieee_mantissa = 5u64;",
                "    let ieee_exponent = 1021u32; // represents 0.25 in IEEE 754",
                "    let result = d2d(ieee_mantissa, ieee_exponent);",
                "    assert_eq!(result.mantissa, 25);",
                "    assert_eq!(result.exponent, -2); // 0.25 represents 25 * 10^{-2}",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}