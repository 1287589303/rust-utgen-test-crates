{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/d2s_intrinsics.rs\n// crate name is ryu\nuse core::ptr;\n#[cfg_attr(feature = \"no-panic\", inline)]\npub unsafe fn mul_shift_all_64(\n    m: u64,\n    mul: &(u64, u64),\n    j: u32,\n    vp: *mut u64,\n    vm: *mut u64,\n    mm_shift: u32,\n) -> u64 {\n    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));\n    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));\n    mul_shift_64(4 * m, mul, j)\n}\n#[cfg_attr(feature = \"no-panic\", inline)]\npub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {\n    let b0 = m as u128 * mul.0 as u128;\n    let b2 = m as u128 * mul.1 as u128;\n    (((b0 >> 64) + b2) >> (j - 64)) as u64\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n78 pub unsafe fn mul_shift_all_64(\n79     m: u64,\n80     mul: &(u64, u64),\n81     j: u32,\n82     vp: *mut u64,\n83     vm: *mut u64,\n84     mm_shift: u32,\n85 ) -> u64 {\n86     ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));\n87     ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));\n88     mul_shift_64(4 * m, mul, j)\n89 }\n\n",
  "depend_pt": ""
}