{
  "name": "serde_derive_internals::internals::attr::get_ser_and_de",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1348:1:1391:2",
  "doc": "",
  "code": [
    "fn get_ser_and_de<'c, T, F, R>(",
    "    cx: &'c Ctxt,",
    "    attr_name: Symbol,",
    "    meta: &ParseNestedMeta,",
    "    f: F,",
    ") -> syn::Result<(VecAttr<'c, T>, VecAttr<'c, T>)>",
    "where",
    "    T: Clone,",
    "    F: Fn(&Ctxt, Symbol, Symbol, &ParseNestedMeta) -> syn::Result<R>,",
    "    R: Into<Option<T>>,",
    "{",
    "    let mut ser_meta = VecAttr::none(cx, attr_name);",
    "    let mut de_meta = VecAttr::none(cx, attr_name);",
    "",
    "    let lookahead = meta.input.lookahead1();",
    "    if lookahead.peek(Token![=]) {",
    "        if let Some(both) = f(cx, attr_name, attr_name, meta)?.into() {",
    "            ser_meta.insert(&meta.path, both.clone());",
    "            de_meta.insert(&meta.path, both);",
    "        }",
    "    } else if lookahead.peek(token::Paren) {",
    "        meta.parse_nested_meta(|meta| {",
    "            if meta.path == SERIALIZE {",
    "                if let Some(v) = f(cx, attr_name, SERIALIZE, &meta)?.into() {",
    "                    ser_meta.insert(&meta.path, v);",
    "                }",
    "            } else if meta.path == DESERIALIZE {",
    "                if let Some(v) = f(cx, attr_name, DESERIALIZE, &meta)?.into() {",
    "                    de_meta.insert(&meta.path, v);",
    "                }",
    "            } else {",
    "                return Err(meta.error(format_args!(",
    "                    \"malformed {0} attribute, expected `{0}(serialize = ..., deserialize = ...)`\",",
    "                    attr_name,",
    "                )));",
    "            }",
    "            Ok(())",
    "        })?;",
    "    } else {",
    "        return Err(lookahead.error());",
    "    }",
    "",
    "    Ok((ser_meta, de_meta))",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "f(cx, attr_name, attr_name, meta)?",
          "norm": null,
          "value": "Err/None",
          "line": 1364,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        49,
        50,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "f(cx, attr_name, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1364,
          "bound": null
        },
        {
          "cond": "let Some(both) = f(cx, attr_name, attr_name, meta)?.into()",
          "norm": null,
          "value": "true",
          "line": 1364,
          "bound": null
        }
      ],
      "ret": "Ok((ser_meta, de_meta))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        20,
        22,
        23,
        24,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "f(cx, attr_name, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1364,
          "bound": null
        },
        {
          "cond": "let Some(both) = f(cx, attr_name, attr_name, meta)?.into()",
          "norm": null,
          "value": "true",
          "line": 1364,
          "bound": null
        }
      ],
      "ret": "Ok((ser_meta, de_meta))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "lookahead.peek(token::Paren)",
          "norm": null,
          "value": "true",
          "line": 1368,
          "bound": null
        },
        {
          "cond": "meta.parse_nested_meta(|meta| {\n            if meta.path == SERIALIZE {\n                if let Some(v) = f(cx, attr_name, SERIALIZE, &meta)?.into() {\n                    ser_meta.insert(&meta.path, v);\n                }\n            } else if meta.path == DESERIALIZE {\n                if let Some(v) = f(cx, attr_name, DESERIALIZE, &meta)?.into() {\n                    de_meta.insert(&meta.path, v);\n                }\n            } else {\n                return Err(meta.error(format_args!(\n                    \"malformed {0} attribute, expected `{0}(serialize = ..., deserialize = ...)`\",\n                    attr_name,\n                )));\n            }\n            Ok(())\n        })?",
          "norm": null,
          "value": "Err/None",
          "line": 1369,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        46,
        47,
        48,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "lookahead.peek(token::Paren)",
          "norm": null,
          "value": "true",
          "line": 1368,
          "bound": null
        },
        {
          "cond": "meta.parse_nested_meta(|meta| {\n            if meta.path == SERIALIZE {\n                if let Some(v) = f(cx, attr_name, SERIALIZE, &meta)?.into() {\n                    ser_meta.insert(&meta.path, v);\n                }\n            } else if meta.path == DESERIALIZE {\n                if let Some(v) = f(cx, attr_name, DESERIALIZE, &meta)?.into() {\n                    de_meta.insert(&meta.path, v);\n                }\n            } else {\n                return Err(meta.error(format_args!(\n                    \"malformed {0} attribute, expected `{0}(serialize = ..., deserialize = ...)`\",\n                    attr_name,\n                )));\n            }\n            Ok(())\n        })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1369,
          "bound": null
        }
      ],
      "ret": "Ok((ser_meta, de_meta))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "lookahead.peek(Token![=])",
          "norm": null,
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "lookahead.peek(token::Paren)",
          "norm": null,
          "value": "false",
          "line": 1368,
          "bound": null
        }
      ],
      "ret": "Err(lookahead.error())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        25,
        26,
        36,
        37,
        38,
        48,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}