{
  "name": "serde_derive_internals::internals::attr::parse_lit_into_ty",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1528:1:1548:2",
  "doc": "",
  "code": [
    "fn parse_lit_into_ty(",
    "    cx: &Ctxt,",
    "    attr_name: Symbol,",
    "    meta: &ParseNestedMeta,",
    ") -> syn::Result<Option<syn::Type>> {",
    "    let string = match get_lit_str(cx, attr_name, meta)? {",
    "        Some(string) => string,",
    "        None => return Ok(None),",
    "    };",
    "",
    "    Ok(match string.parse() {",
    "        Ok(ty) => Some(ty),",
    "        Err(_) => {",
    "            cx.error_spanned_by(",
    "                &string,",
    "                format!(\"failed to parse type: {} = {:?}\", attr_name, string.value()),",
    "            );",
    "            None",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Err/None",
          "line": 1533,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        37,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Err/None",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, attr_name, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "string.parse() matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 1538,
          "bound": null
        }
      ],
      "ret": "Ok(match string.parse() {\n        Ok(ty) => Some(ty),\n        Err(_) => {\n            cx.error_spanned_by(\n                &string,\n                format!(\"failed to parse type: {} = {:?}\", attr_name, string.value()),\n            );\n            None\n        }\n    })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        12,
        13,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Err/None",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, attr_name, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "string.parse() matches Ok(ty)",
          "norm": null,
          "value": "true",
          "line": 1538,
          "bound": null
        },
        {
          "cond": "string.parse() matches Ok(ty)",
          "norm": null,
          "value": "true",
          "line": 1538,
          "bound": null
        }
      ],
      "ret": "Ok(match string.parse() {\n        Ok(ty) => Some(ty),\n        Err(_) => {\n            cx.error_spanned_by(\n                &string,\n                format!(\"failed to parse type: {} = {:?}\", attr_name, string.value()),\n            );\n            None\n        }\n    })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        12,
        13,
        15,
        16,
        17,
        19,
        21,
        22,
        23,
        33,
        34,
        35,
        36,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1533,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, attr_name, meta)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1533,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        11,
        14,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}