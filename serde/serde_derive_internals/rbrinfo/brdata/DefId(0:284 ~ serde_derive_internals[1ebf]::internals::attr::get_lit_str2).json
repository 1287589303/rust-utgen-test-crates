{
  "name": "serde_derive_internals::internals::attr::get_lit_str2",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1426:1:1460:2",
  "doc": "",
  "code": [
    "fn get_lit_str2(",
    "    cx: &Ctxt,",
    "    attr_name: Symbol,",
    "    meta_item_name: Symbol,",
    "    meta: &ParseNestedMeta,",
    ") -> syn::Result<Option<syn::LitStr>> {",
    "    let expr: syn::Expr = meta.value()?.parse()?;",
    "    let mut value = &expr;",
    "    while let syn::Expr::Group(e) = value {",
    "        value = &e.expr;",
    "    }",
    "    if let syn::Expr::Lit(syn::ExprLit {",
    "        lit: syn::Lit::Str(lit),",
    "        ..",
    "    }) = value",
    "    {",
    "        let suffix = lit.suffix();",
    "        if !suffix.is_empty() {",
    "            cx.error_spanned_by(",
    "                lit,",
    "                format!(\"unexpected suffix `{}` on string literal\", suffix),",
    "            );",
    "        }",
    "        Ok(Some(lit.clone()))",
    "    } else {",
    "        cx.error_spanned_by(",
    "            expr,",
    "            format!(",
    "                \"expected serde {} attribute to be a string: `{} = \\\"...\\\"`\",",
    "                attr_name, meta_item_name",
    "            ),",
    "        );",
    "        Ok(None)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 4,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Err/None",
          "line": 1432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        52,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Err/None",
          "line": 1432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        13,
        14,
        51,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        22,
        23,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        23,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "false",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "suffix.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1443,
          "bound": null
        }
      ],
      "ret": "Ok(Some(lit.clone()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        37,
        38,
        39,
        40,
        49,
        50,
        55
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "false",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "suffix.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1443,
          "bound": null
        }
      ],
      "ret": "Ok(Some(lit.clone()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        49,
        50,
        55
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        18,
        19,
        22,
        23,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        18,
        19,
        22,
        24,
        23,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "false",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "suffix.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1443,
          "bound": null
        }
      ],
      "ret": "Ok(Some(lit.clone()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        37,
        38,
        39,
        40,
        49,
        50,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "meta.value()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "meta.value()?.parse()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Group(e) = value",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "true",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "let syn::Expr::Lit(syn::ExprLit {\n        lit: syn::Lit::Str(lit),\n        ..\n    }) = value",
          "norm": null,
          "value": "false",
          "line": 1437,
          "bound": null
        },
        {
          "cond": "suffix.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1443,
          "bound": null
        }
      ],
      "ret": "Ok(Some(lit.clone()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        49,
        50,
        55
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}