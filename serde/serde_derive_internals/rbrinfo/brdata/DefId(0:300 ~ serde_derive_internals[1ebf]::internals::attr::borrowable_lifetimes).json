{
  "name": "serde_derive_internals::internals::attr::borrowable_lifetimes",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1734:1:1748:2",
  "doc": "",
  "code": [
    "fn borrowable_lifetimes(",
    "    cx: &Ctxt,",
    "    name: &Name,",
    "    field: &syn::Field,",
    ") -> Result<BTreeSet<syn::Lifetime>, ()> {",
    "    let mut lifetimes = BTreeSet::new();",
    "    collect_lifetimes(&field.ty, &mut lifetimes);",
    "    if lifetimes.is_empty() {",
    "        let msg = format!(\"field `{}` has no lifetimes to borrow\", name);",
    "        cx.error_spanned_by(field, msg);",
    "        Err(())",
    "    } else {",
    "        Ok(lifetimes)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lifetimes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1741,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lifetimes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1741,
          "bound": null
        }
      ],
      "ret": "Ok(lifetimes)",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}