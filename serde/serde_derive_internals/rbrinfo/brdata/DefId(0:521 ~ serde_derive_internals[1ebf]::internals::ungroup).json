{
  "name": "serde_derive_internals::internals::ungroup",
  "mod_info": {
    "name": "internals",
    "loc": "serde_derive_internals/lib.rs:51:1:51:15"
  },
  "visible": true,
  "loc": "serde_derive_internals/src/mod.rs:23:1:28:2",
  "doc": "",
  "code": [
    "pub fn ungroup(mut ty: &Type) -> &Type {",
    "    while let Type::Group(group) = ty {",
    "        ty = &group.elem;",
    "    }",
    "    ty",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Type::Group(group) = ty",
          "norm": null,
          "value": "true",
          "line": 24,
          "bound": null
        }
      ],
      "ret": "ty",
      "path": [
        0,
        1,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Type::Group(group) = ty",
          "norm": null,
          "value": "true",
          "line": 24,
          "bound": null
        },
        {
          "cond": "let Type::Group(group) = ty",
          "norm": null,
          "value": "true",
          "line": 24,
          "bound": null
        }
      ],
      "ret": "ty",
      "path": [
        0,
        1,
        2,
        3,
        4,
        1,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}