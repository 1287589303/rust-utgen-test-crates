{
  "name": "serde_derive_internals::internals::respan::respan_token",
  "mod_info": {
    "name": "internals::respan",
    "loc": "serde_derive_internals/src/mod.rs:9:1:9:12"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/respan.rs:10:1:16:2",
  "doc": "",
  "code": [
    "fn respan_token(mut token: TokenTree, span: Span) -> TokenTree {",
    "    if let TokenTree::Group(g) = &mut token {",
    "        *g = Group::new(g.delimiter(), respan(g.stream(), span));",
    "    }",
    "    token.set_span(span);",
    "    token",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let TokenTree::Group(g) = &mut token",
          "norm": null,
          "value": "true",
          "line": 11,
          "bound": null
        }
      ],
      "ret": "token",
      "path": [
        0,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let TokenTree::Group(g) = &mut token",
          "norm": null,
          "value": "false",
          "line": 11,
          "bound": null
        }
      ],
      "ret": "token",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}