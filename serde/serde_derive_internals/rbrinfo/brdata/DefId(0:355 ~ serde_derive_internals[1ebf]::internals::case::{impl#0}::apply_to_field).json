{
  "name": "serde_derive_internals::internals::case::{impl#0}::apply_to_field",
  "mod_info": {
    "name": "internals::case",
    "loc": "serde_derive_internals/src/mod.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "serde_derive_internals/src/case.rs:82:5:109:6",
  "doc": "/// Apply a renaming rule to a struct field, returning the version expected in the source.\n",
  "code": [
    "pub fn apply_to_field(self, field: &str) -> String {",
    "    match self {",
    "        None | LowerCase | SnakeCase => field.to_owned(),",
    "        UpperCase => field.to_ascii_uppercase(),",
    "        PascalCase => {",
    "            let mut pascal = String::new();",
    "            let mut capitalize = true;",
    "            for ch in field.chars() {",
    "                if ch == '_' {",
    "                    capitalize = true;",
    "                } else if capitalize {",
    "                    pascal.push(ch.to_ascii_uppercase());",
    "                    capitalize = false;",
    "                } else {",
    "                    pascal.push(ch);",
    "                }",
    "            }",
    "            pascal",
    "        }",
    "        CamelCase => {",
    "            let pascal = PascalCase.apply_to_field(field);",
    "            pascal[..1].to_ascii_lowercase() + &pascal[1..]",
    "        }",
    "        ScreamingSnakeCase => field.to_ascii_uppercase(),",
    "        KebabCase => field.replace('_', \"-\"),",
    "        ScreamingKebabCase => ScreamingSnakeCase.apply_to_field(field).replace('_', \"-\"),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 3,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches ScreamingKebabCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches KebabCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches KebabCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        43,
        44,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches ScreamingSnakeCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches ScreamingSnakeCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        41,
        42,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase or LowerCase or None",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        9,
        10,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches CamelCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches CamelCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        },
        {
          "cond": "ch == '_'",
          "norm": "'_' == ch",
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": "pascal",
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        32,
        17,
        18,
        19,
        21,
        23,
        33,
        49
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        },
        {
          "cond": "ch == '_'",
          "norm": "'_' == ch",
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "capitalize",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": "pascal",
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        32,
        17,
        18,
        19,
        21,
        23,
        33,
        49
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        },
        {
          "cond": "ch == '_'",
          "norm": "'_' == ch",
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "capitalize",
          "norm": null,
          "value": "false",
          "line": 92,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": "pascal",
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        29,
        30,
        31,
        32,
        17,
        18,
        19,
        21,
        23,
        33,
        49
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "ch in field.chars()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": "pascal",
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        33,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self matches UpperCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches UpperCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        11,
        12,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self matches LowerCase",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase or LowerCase or None",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        9,
        10,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self matches None",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase or LowerCase or None",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        9,
        10,
        49
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}