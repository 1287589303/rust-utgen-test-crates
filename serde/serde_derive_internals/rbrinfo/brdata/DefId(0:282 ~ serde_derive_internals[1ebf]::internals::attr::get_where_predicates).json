{
  "name": "serde_derive_internals::internals::attr::get_where_predicates",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1410:1:1416:2",
  "doc": "",
  "code": [
    "fn get_where_predicates(",
    "    cx: &Ctxt,",
    "    meta: &ParseNestedMeta,",
    ") -> syn::Result<SerAndDe<Vec<syn::WherePredicate>>> {",
    "    let (ser, de) = get_ser_and_de(cx, BOUND, meta, parse_lit_into_where)?;",
    "    Ok((ser.at_most_one(), de.at_most_one()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "get_ser_and_de(cx, BOUND, meta, parse_lit_into_where)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "get_ser_and_de(cx, BOUND, meta, parse_lit_into_where)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": "Ok((ser.at_most_one(), de.at_most_one()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}