{
  "name": "serde_derive_internals::internals::check::check_getter",
  "mod_info": {
    "name": "internals::check",
    "loc": "serde_derive_internals/src/mod.rs:6:1:6:11"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/check.rs:78:1:97:2",
  "doc": "",
  "code": [
    "fn check_getter(cx: &Ctxt, cont: &Container) {",
    "    match cont.data {",
    "        Data::Enum(_) => {",
    "            if cont.data.has_getter() {",
    "                cx.error_spanned_by(",
    "                    cont.original,",
    "                    \"#[serde(getter = \\\"...\\\")] is not allowed in an enum\",",
    "                );",
    "            }",
    "        }",
    "        Data::Struct(_, _) => {",
    "            if cont.data.has_getter() && cont.attrs.remote().is_none() {",
    "                cx.error_spanned_by(",
    "                    cont.original,",
    "                    \"#[serde(getter = \\\"...\\\")] can only be used in structs that have #[serde(remote = \\\"...\\\")]\",",
    "                );",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "cont.data matches Data::Struct(_, _)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data.has_getter()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        },
        {
          "cond": "cont.attrs.remote().is_none()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        14,
        15,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "cont.data matches Data::Struct(_, _)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data.has_getter()",
          "norm": null,
          "value": "true",
          "line": 89,
          "bound": null
        },
        {
          "cond": "cont.attrs.remote().is_none()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        16,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "cont.data matches Data::Struct(_, _)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data.has_getter()",
          "norm": null,
          "value": "false",
          "line": 89,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "cont.data matches Data::Enum(_)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data matches Data::Enum(_)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data.has_getter()",
          "norm": null,
          "value": "true",
          "line": 81,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "cont.data matches Data::Enum(_)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data matches Data::Enum(_)",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "cont.data.has_getter()",
          "norm": null,
          "value": "false",
          "line": 81,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        8,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}