{
  "name": "serde_derive_internals::internals::attr::parse_lit_into_lifetimes",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:1552:1:1589:2",
  "doc": "",
  "code": [
    "fn parse_lit_into_lifetimes(",
    "    cx: &Ctxt,",
    "    meta: &ParseNestedMeta,",
    ") -> syn::Result<BTreeSet<syn::Lifetime>> {",
    "    let string = match get_lit_str(cx, BORROW, meta)? {",
    "        Some(string) => string,",
    "        None => return Ok(BTreeSet::new()),",
    "    };",
    "",
    "    if let Ok(lifetimes) = string.parse_with(|input: ParseStream| {",
    "        let mut set = BTreeSet::new();",
    "        while !input.is_empty() {",
    "            let lifetime: Lifetime = input.parse()?;",
    "            if !set.insert(lifetime.clone()) {",
    "                cx.error_spanned_by(",
    "                    &string,",
    "                    format!(\"duplicate borrowed lifetime `{}`\", lifetime),",
    "                );",
    "            }",
    "            if input.is_empty() {",
    "                break;",
    "            }",
    "            input.parse::<Token![+]>()?;",
    "        }",
    "        Ok(set)",
    "    }) {",
    "        if lifetimes.is_empty() {",
    "            cx.error_spanned_by(string, \"at least one lifetime must be borrowed\");",
    "        }",
    "        return Ok(lifetimes);",
    "    }",
    "",
    "    cx.error_spanned_by(",
    "        &string,",
    "        format!(\"failed to parse borrowed lifetimes: {:?}\", string.value()),",
    "    );",
    "    Ok(BTreeSet::new())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        42,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches None",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "let Ok(lifetimes) = string.parse_with(|input: ParseStream| {\n        let mut set = BTreeSet::new();\n        while !input.is_empty() {\n            let lifetime: Lifetime = input.parse()?;\n            if !set.insert(lifetime.clone()) {\n                cx.error_spanned_by(\n                    &string,\n                    format!(\"duplicate borrowed lifetime `{}`\", lifetime),\n                );\n            }\n            if input.is_empty() {\n                break;\n            }\n            input.parse::<Token![+]>()?;\n        }\n        Ok(set)\n    })",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        }
      ],
      "ret": "Ok(BTreeSet::new())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        12,
        13,
        16,
        17,
        18,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches None",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "let Ok(lifetimes) = string.parse_with(|input: ParseStream| {\n        let mut set = BTreeSet::new();\n        while !input.is_empty() {\n            let lifetime: Lifetime = input.parse()?;\n            if !set.insert(lifetime.clone()) {\n                cx.error_spanned_by(\n                    &string,\n                    format!(\"duplicate borrowed lifetime `{}`\", lifetime),\n                );\n            }\n            if input.is_empty() {\n                break;\n            }\n            input.parse::<Token![+]>()?;\n        }\n        Ok(set)\n    })",
          "norm": null,
          "value": "false",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "lifetimes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1578,
          "bound": null
        }
      ],
      "ret": "Ok(lifetimes)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        40,
        41,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches None",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches Some(string)",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "let Ok(lifetimes) = string.parse_with(|input: ParseStream| {\n        let mut set = BTreeSet::new();\n        while !input.is_empty() {\n            let lifetime: Lifetime = input.parse()?;\n            if !set.insert(lifetime.clone()) {\n                cx.error_spanned_by(\n                    &string,\n                    format!(\"duplicate borrowed lifetime `{}`\", lifetime),\n                );\n            }\n            if input.is_empty() {\n                break;\n            }\n            input.parse::<Token![+]>()?;\n        }\n        Ok(set)\n    })",
          "norm": null,
          "value": "false",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "lifetimes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1578,
          "bound": null
        }
      ],
      "ret": "Ok(lifetimes)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        40,
        41,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches None",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        },
        {
          "cond": "get_lit_str(cx, BORROW, meta)? matches None",
          "norm": null,
          "value": "true",
          "line": 1556,
          "bound": null
        }
      ],
      "ret": "Ok(BTreeSet::new())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        11,
        14,
        15,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}