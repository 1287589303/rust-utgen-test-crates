{
  "name": "serde_derive_internals::internals::case::{impl#0}::apply_to_variant",
  "mod_info": {
    "name": "internals::case",
    "loc": "serde_derive_internals/src/mod.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "serde_derive_internals/src/case.rs:57:5:79:6",
  "doc": "/// Apply a renaming rule to an enum variant, returning the version expected in the source.\n",
  "code": [
    "pub fn apply_to_variant(self, variant: &str) -> String {",
    "    match self {",
    "        None | PascalCase => variant.to_owned(),",
    "        LowerCase => variant.to_ascii_lowercase(),",
    "        UpperCase => variant.to_ascii_uppercase(),",
    "        CamelCase => variant[..1].to_ascii_lowercase() + &variant[1..],",
    "        SnakeCase => {",
    "            let mut snake = String::new();",
    "            for (i, ch) in variant.char_indices() {",
    "                if i > 0 && ch.is_uppercase() {",
    "                    snake.push('_');",
    "                }",
    "                snake.push(ch.to_ascii_lowercase());",
    "            }",
    "            snake",
    "        }",
    "        ScreamingSnakeCase => SnakeCase.apply_to_variant(variant).to_ascii_uppercase(),",
    "        KebabCase => SnakeCase.apply_to_variant(variant).replace('_', \"-\"),",
    "        ScreamingKebabCase => ScreamingSnakeCase",
    "            .apply_to_variant(variant)",
    "            .replace('_', \"-\"),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 3,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches ScreamingKebabCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        53,
        54,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches KebabCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches KebabCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        48,
        49,
        50,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches ScreamingSnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches ScreamingSnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        43,
        44,
        45,
        46,
        47,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "true",
          "line": 65,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "ch.is_uppercase()",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "false",
          "line": 65,
          "bound": null
        }
      ],
      "ret": "snake",
      "path": [
        0,
        5,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        32,
        33,
        34,
        35,
        39,
        40,
        41,
        25,
        26,
        27,
        29,
        31,
        42,
        57
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "true",
          "line": 65,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "ch.is_uppercase()",
          "norm": null,
          "value": "false",
          "line": 66,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "false",
          "line": 65,
          "bound": null
        }
      ],
      "ret": "snake",
      "path": [
        0,
        5,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        32,
        33,
        36,
        38,
        39,
        40,
        41,
        25,
        26,
        27,
        29,
        31,
        42,
        57
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "true",
          "line": 65,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 66,
          "bound": "i == 0"
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "false",
          "line": 65,
          "bound": null
        }
      ],
      "ret": "snake",
      "path": [
        0,
        5,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        37,
        38,
        39,
        40,
        41,
        25,
        26,
        27,
        29,
        31,
        42,
        57
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches SnakeCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "(i, ch) in variant.char_indices()",
          "norm": null,
          "value": "false",
          "line": 65,
          "bound": null
        }
      ],
      "ret": "snake",
      "path": [
        0,
        5,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        42,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self matches CamelCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches CamelCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        18,
        19,
        20,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self matches PascalCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches PascalCase or None",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        10,
        11,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self matches UpperCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches UpperCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        14,
        15,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self matches LowerCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches LowerCase",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        12,
        13,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self matches None",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "self matches PascalCase or None",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        10,
        11,
        57
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}