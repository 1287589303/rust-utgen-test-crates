{
  "name": "serde_derive_internals::internals::attr::decide_identifier",
  "mod_info": {
    "name": "internals::attr",
    "loc": "serde_derive_internals/src/mod.rs:2:1:2:14"
  },
  "visible": false,
  "loc": "serde_derive_internals/src/attr.rs:689:1:731:2",
  "doc": "",
  "code": [
    "fn decide_identifier(",
    "    cx: &Ctxt,",
    "    item: &syn::DeriveInput,",
    "    field_identifier: BoolAttr,",
    "    variant_identifier: BoolAttr,",
    ") -> Identifier {",
    "    match (",
    "        &item.data,",
    "        field_identifier.0.get_with_tokens(),",
    "        variant_identifier.0.get_with_tokens(),",
    "    ) {",
    "        (_, None, None) => Identifier::No,",
    "        (_, Some((field_identifier_tokens, ())), Some((variant_identifier_tokens, ()))) => {",
    "            let msg =",
    "                \"#[serde(field_identifier)] and #[serde(variant_identifier)] cannot both be set\";",
    "            cx.error_spanned_by(field_identifier_tokens, msg);",
    "            cx.error_spanned_by(variant_identifier_tokens, msg);",
    "            Identifier::No",
    "        }",
    "        (syn::Data::Enum(_), Some(_), None) => Identifier::Field,",
    "        (syn::Data::Enum(_), None, Some(_)) => Identifier::Variant,",
    "        (syn::Data::Struct(syn::DataStruct { struct_token, .. }), Some(_), None) => {",
    "            let msg = \"#[serde(field_identifier)] can only be used on an enum\";",
    "            cx.error_spanned_by(struct_token, msg);",
    "            Identifier::No",
    "        }",
    "        (syn::Data::Union(syn::DataUnion { union_token, .. }), Some(_), None) => {",
    "            let msg = \"#[serde(field_identifier)] can only be used on an enum\";",
    "            cx.error_spanned_by(union_token, msg);",
    "            Identifier::No",
    "        }",
    "        (syn::Data::Struct(syn::DataStruct { struct_token, .. }), None, Some(_)) => {",
    "            let msg = \"#[serde(variant_identifier)] can only be used on an enum\";",
    "            cx.error_spanned_by(struct_token, msg);",
    "            Identifier::No",
    "        }",
    "        (syn::Data::Union(syn::DataUnion { union_token, .. }), None, Some(_)) => {",
    "            let msg = \"#[serde(variant_identifier)] can only be used on an enum\";",
    "            cx.error_spanned_by(union_token, msg);",
    "            Identifier::No",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (_, Some((field_identifier_tokens, ())), Some((variant_identifier_tokens, ())))",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        12,
        13,
        19,
        20,
        21,
        22,
        23,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Union(syn::DataUnion { union_token, .. }), Some(_), None)",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        12,
        14,
        17,
        28,
        29,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Enum(_), Some(_), None)",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::Field",
      "path": [
        0,
        1,
        2,
        3,
        4,
        12,
        14,
        15,
        24,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Struct(syn::DataStruct { struct_token, .. }), Some(_), None)",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        12,
        14,
        16,
        26,
        27,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Union(syn::DataUnion { union_token, .. }), None, Some(_))",
          "norm": null,
          "value": "true",
          "line": 725,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        11,
        32,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Enum(_), None, Some(_))",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::Variant",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        25,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (syn::Data::Struct(syn::DataStruct { struct_token, .. }), None, Some(_))",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        30,
        31,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(\n        &item.data,\n        field_identifier.0.get_with_tokens(),\n        variant_identifier.0.get_with_tokens(),\n    ) matches (_, None, None)",
          "norm": null,
          "value": "true",
          "line": 695,
          "bound": null
        }
      ],
      "ret": "Identifier::No",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        18,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}