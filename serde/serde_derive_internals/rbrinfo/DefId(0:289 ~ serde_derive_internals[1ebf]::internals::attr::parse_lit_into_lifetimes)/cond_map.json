{
  "serde_derive_internals/src/attr.rs:1578:12:1578:32": [
    {
      "Bool": {
        "Other": "lifetimes.is_empty()"
      }
    }
  ],
  "serde_derive_internals/src/attr.rs:1556:24:1556:54": [
    {
      "Match": {
        "match_source": "serde_derive_internals/src/attr.rs:1556:24:1556:54",
        "match_str": "get_lit_str(cx, BORROW, meta)?",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "serde_derive_internals/src/attr.rs:1557:9:1557:21": {
            "pat": {
              "pat_str": "Some(string)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "serde_derive_internals/src/attr.rs:1557:25:1557:31"
          },
          "serde_derive_internals/src/attr.rs:1558:9:1558:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "serde_derive_internals/src/attr.rs:1558:17:1558:43"
          }
        }
      }
    },
    {
      "Try": "get_lit_str(cx, BORROW, meta)?"
    }
  ],
  "serde_derive_internals/src/attr.rs:1561:8:1577:7": [
    {
      "Bool": {
        "Other": "let Ok(lifetimes) = string.parse_with(|input: ParseStream| {\n        let mut set = BTreeSet::new();\n        while !input.is_empty() {\n            let lifetime: Lifetime = input.parse()?;\n            if !set.insert(lifetime.clone()) {\n                cx.error_spanned_by(\n                    &string,\n                    format!(\"duplicate borrowed lifetime `{}`\", lifetime),\n                );\n            }\n            if input.is_empty() {\n                break;\n            }\n            input.parse::<Token![+]>()?;\n        }\n        Ok(set)\n    })"
      }
    }
  ]
}