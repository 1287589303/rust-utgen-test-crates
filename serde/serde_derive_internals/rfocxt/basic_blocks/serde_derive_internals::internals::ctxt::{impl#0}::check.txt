[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(_1.0: std::cell::RefCell<std::option::Option<std::vec::Vec<syn::Error>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:26: 47:50 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::cell::RefCell::<std::option::Option<std::vec::Vec<syn::Error>>>::borrow_mut(move _9) -> [return: bb1, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:26: 47:57 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::cell::RefMut<'_, std::option::Option<std::vec::Vec<syn::Error>>> as std::ops::DerefMut>::deref_mut(move _7) -> [return: bb2, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:26: 47:57 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::option::Option::<std::vec::Vec<syn::Error>>::take(move _5) -> [return: bb3, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:26: 47:66 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::option::Option::<std::vec::Vec<syn::Error>>::unwrap(move _4) -> [return: bb4, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:26: 47:78 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::vec::Vec<syn::Error> as std::iter::IntoIterator>::into_iter(move _3) -> [return: bb5, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:78: 47:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb6, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:49:34: 49:47 (#0),
                    scope: scope[1],
                },
                kind: _11 = <std::vec::IntoIter<syn::Error> as std::iter::Iterator>::next(move _12) -> [return: bb7, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _13 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:49:28: 49:47 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:49:34: 49:47 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:50:13: 50:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = (),
            _0 = std::result::Result::<(), syn::Error>::Ok(move _16),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:52:10: 52:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb31, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_11 as Some).0: syn::Error),
            _10 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:50:32: 50:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb12, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:52:10: 52:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb13, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                    scope: scope[2],
                },
                kind: _18 = <std::vec::IntoIter<syn::Error> as std::iter::IntoIterator>::into_iter(move _19) -> [return: bb14, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            StorageLive(_20),
            _20 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _20,
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                    scope: scope[4],
                },
                kind: _23 = <std::vec::IntoIter<syn::Error> as std::iter::Iterator>::next(move _24) -> [return: bb17, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            _26 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                    scope: scope[4],
                },
                kind: switchInt(move _26) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = move ((_23 as Some).0: syn::Error),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut _10,
            StorageLive(_31),
            _31 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:55:13: 55:35 (#0),
                    scope: scope[5],
                },
                kind: _29 = syn::Error::combine(move _30, move _31) -> [return: bb22, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: drop(_23) -> [return: bb25, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb23, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: drop(_23) -> [return: bb24, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb26, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb27, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_32),
            _32 = move _10,
            _0 = std::result::Result::<(), syn::Error>::Err(move _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:58:21: 58:22 (#0),
                    scope: scope[2],
                },
                kind: drop(_32) -> [return: bb28, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb29, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb30, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb32, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:6: 59:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:55:34: 55:35 (#0),
                    scope: scope[5],
                },
                kind: drop(_31) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[4],
                },
                kind: drop(_23) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:56:9: 56:10 (#558),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:54:26: 54:27 (#559),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:52:10: 52:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:77: 47:78 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:65: 47:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:47:78: 47:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:59:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:46:5: 59:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), syn::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:46:27: 46:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:46:18: 46:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ctxt.rs:47:26: 47:78 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:47:13: 47:23 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:13: 47:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::cell::RefMut<'{erased}, std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::cell::RefMut<'{erased}, std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::cell::RefCell<std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:47:26: 47:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ctxt.rs:49:28: 52:10 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:49:13: 49:25 (#0),
                    },
                ),
            ),
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:49:13: 49:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<syn::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:49:34: 49:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:49:34: 49:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:50:13: 50:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                serde_derive_internals/src/ctxt.rs:49:34: 49:47 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:50:13: 50:24 (#0),
                    },
                ),
            ),
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:50:18: 50:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:51:21: 51:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:51:31: 51:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:46:5: 59:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<syn::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:9: 56:10 (#558),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                serde_derive_internals/src/ctxt.rs:54:21: 54:27 (#559),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:54:13: 54:17 (#560),
                    },
                ),
            ),
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:54:13: 54:17 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:55:13: 55:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:55:13: 55:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:55:30: 55:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:58:13: 58:21 (#0),
            scope: scope[0],
        },
    },
]