[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            PlaceMention(_1),
            _4 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:115:9: 115:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:115:15: 115:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:116:13: 116:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &(((*_1) as Struct).1: std::vec::Vec<internals::ast::Field<'_>>),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:119:49: 119:62 (#0),
                    scope: scope[2],
                },
                kind: _18 = <std::vec::Vec<internals::ast::Field<'_>> as std::ops::Deref>::deref(move _19) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_1) as Enum).0: std::vec::Vec<internals::ast::Variant<'_>>),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:117:26: 117:41 (#0),
                    scope: scope[1],
                },
                kind: _11 = <std::vec::Vec<internals::ast::Variant<'_>> as std::ops::Deref>::deref(move _12) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:117:26: 117:41 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::slice::<impl [internals::ast::Variant<'_>]>::iter(move _10) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_13),
            _13 = {closure@serde_derive_internals/src/ast.rs:117:51: 117:60},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:117:26: 117:83 (#0),
                    scope: scope[1],
                },
                kind: _8 = <std::slice::Iter<'_, internals::ast::Variant<'_>> as std::iter::Iterator>::flat_map::<std::slice::Iter<'_, internals::ast::Field<'_>>, {closure@serde_derive_internals/src/ast.rs:117:51: 117:60}>(move _9, move _13) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::boxed::Box::<std::iter::FlatMap<std::slice::Iter<'_, internals::ast::Variant<'_>>, std::slice::Iter<'_, internals::ast::Field<'_>>, {closure@serde_derive_internals/src/ast.rs:117:51: 117:60}>>::new(move _8) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move _7 as std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:117:83: 117:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _3 = move _6 as std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:118:13: 118:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_11),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:118:13: 118:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:119:49: 119:62 (#0),
                    scope: scope[2],
                },
                kind: _16 = core::slice::<impl [internals::ast::Field<'_>]>::iter(move _17) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:119:40: 119:63 (#0),
                    scope: scope[2],
                },
                kind: _15 = std::boxed::Box::<std::slice::Iter<'_, internals::ast::Field<'_>>>::new(move _16) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _15 as std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:119:62: 119:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_18),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:119:62: 119:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _3 as std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:120:9: 120:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = move _2 as std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:121:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:121:6: 121:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:114:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:114:36: 114:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:114:23: 114:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:116:13: 116:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                serde_derive_internals/src/ast.rs:115:15: 115:19 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:116:13: 116:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:116:24: 116:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<std::iter::FlatMap<std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>, std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, Closure(DefId(0:50 ~ serde_derive_internals[1ebf]::internals::ast::{impl#1}::all_fields::{closure#0}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'{erased} internals::ast::Variant<'{erased}>,)) -> std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, bound_vars: [] }, ()])>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: std::iter::FlatMap<std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>, std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, Closure(DefId(0:50 ~ serde_derive_internals[1ebf]::internals::ast::{impl#1}::all_fields::{closure#0}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'{erased} internals::ast::Variant<'{erased}>,)) -> std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:26: 117:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:26: 117:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:26: 117:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:26: 117:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:26: 117:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:117:17: 117:84 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:50 ~ serde_derive_internals[1ebf]::internals::ast::{impl#1}::all_fields::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} internals::ast::Variant<'{erased}>,)) -> std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:117:51: 117:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                serde_derive_internals/src/ast.rs:115:15: 115:19 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:119:13: 119:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:29: 119:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:40: 119:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:49: 119:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Field<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:49: 119:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Field<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:49: 119:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:115:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:119:49: 119:55 (#0),
            scope: scope[0],
        },
    },
]