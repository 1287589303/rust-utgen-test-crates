[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:67:27: 67:46 (#0),
                    scope: scope[1],
                },
                kind: _3 = internals::attr::Container::remote(move _4) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:67:12: 67:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [1: bb2, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:67:12: 67:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = ((_3 as Some).0: &syn::Path),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*((*_2).3: &syn::Generics)).1: syn::punctuated::Punctuated<syn::GenericParam, syn::token::Comma>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:68:34: 68:65 (#0),
                    scope: scope[1],
                },
                kind: _8 = syn::punctuated::Punctuated::<syn::GenericParam, syn::token::Comma>::is_empty(move _9) -> [return: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = Not(move _8),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_6).1: syn::punctuated::Punctuated<syn::PathSegment, syn::token::PathSep>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:69:35: 69:57 (#0),
                    scope: scope[2],
                },
                kind: _14 = syn::punctuated::Punctuated::<syn::PathSegment, syn::token::PathSep>::last(move _15) -> [return: bb5, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:69:35: 69:66 (#0),
                    scope: scope[2],
                },
                kind: _13 = std::option::Option::<&syn::PathSegment>::unwrap(move _14) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = &((*_13).1: syn::PathArguments),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:69:35: 69:86 (#0),
                    scope: scope[2],
                },
                kind: _11 = syn::PathArguments::is_none(move _12) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = Not(move _11),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_13),
            StorageLive(_16),
            _16 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:70:12: 70:29 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [0: bb11, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:70:33: 70:51 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _17) -> [0: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
            StorageLive(_20),
            _20 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:71:13: 71:84 (#0),
                    scope: scope[3],
                },
                kind: _18 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Path, &str>(move _19, move _20, const "remove generic parameters from this path") -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:70:9: 72:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:70:9: 72:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:67:5: 73:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:67:5: 73:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:74:2: 74:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:66:1: 74:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:66:53: 66:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:66:29: 66:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:66:25: 66:27 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:66:25: 66:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:66:25: 66:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:66:42: 66:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:66:36: 66:40 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:66:36: 66:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:66:36: 66:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:67:5: 73:6 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::Path>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:67:27: 67:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:67:5: 73:6 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:67:27: 67:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:67:12: 67:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde_derive_internals/src/check.rs:67:27: 67:46 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:67:12: 67:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::Path,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:67:17: 67:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:68:33: 68:65 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:68:13: 68:30 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:68:13: 68:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:68:34: 68:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::GenericParam, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:68:34: 68:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:69:34: 69:86 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:69:13: 69:31 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:13: 69:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:35: 69:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::PathArguments,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:35: 69:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::PathSegment,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:35: 69:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} syn::PathSegment>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:35: 69:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::PathSegment, syn::token::PathSep>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:69:35: 69:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:70:9: 72:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:70:12: 70:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:70:9: 72:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:70:33: 70:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:71:13: 71:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:71:13: 71:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Path,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:71:33: 71:39 (#0),
            scope: scope[0],
        },
    },
]