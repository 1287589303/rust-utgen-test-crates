[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _4 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:24:15: 24:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _4) -> [2: bb3, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:24:15: 24:33 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_1) as Group).0: syn::TypeGroup),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_5).1: std::boxed::Box<syn::Type>),
            _6 = &(*(*_7)),
            _1 = move _6,
            StorageDead(_6),
            StorageDead(_7),
            _3 = const (),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#617),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _2 = const (),
            StorageDead(_9),
            StorageDead(_2),
            _0 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:28:2: 28:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/mod.rs:23:1: 28:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Type,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:23:34: 23:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/mod.rs:23:24: 23:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/mod.rs:23:16: 23:22 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/mod.rs:23:16: 23:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::Type,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:23:16: 23:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:23:1: 28:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:15: 24:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                serde_derive_internals/src/mod.rs:24:36: 24:38 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/mod.rs:24:15: 24:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::TypeGroup,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:27: 24:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Type,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:25:14: 25:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::boxed::Box<syn::Type, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:25:14: 25:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#617),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#617),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#617),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/mod.rs:24:5: 26:6 (#617),
            scope: scope[0],
        },
    },
]