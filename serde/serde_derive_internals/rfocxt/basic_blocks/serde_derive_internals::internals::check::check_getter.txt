[
    BasicBlockData {
        statements: [
            PlaceMention(((*_2).2: internals::ast::Data<'_>)),
            _3 = discriminant(((*_2).2: internals::ast::Data<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:79:5: 79:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), ((*_2).2: internals::ast::Data<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:79:11: 79:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:80:9: 80:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_2).2: internals::ast::Data<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:16: 89:38 (#0),
                    scope: scope[0],
                },
                kind: _9 = internals::ast::Data::<'_>::has_getter(move _10) -> [return: bb10, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_2).2: internals::ast::Data<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:81:16: 81:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = internals::ast::Data::<'_>::has_getter(move _5) -> [return: bb5, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:81:16: 81:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:82:17: 85:18 (#0),
                    scope: scope[0],
                },
                kind: _6 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _7, move _8, const "#[serde(getter = \"...\")] is not allowed in an enum") -> [return: bb7, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:81:13: 86:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:81:13: 86:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:86:13: 86:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:16: 89:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb17, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:42: 89:61 (#0),
                    scope: scope[0],
                },
                kind: _13 = internals::attr::Container::remote(move _14) -> [return: bb12, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &_13,
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:42: 89:71 (#0),
                    scope: scope[0],
                },
                kind: _11 = std::option::Option::<&syn::Path>::is_none(move _12) -> [return: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:42: 89:71 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            _17 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:90:17: 93:18 (#0),
                    scope: scope[0],
                },
                kind: _15 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _16, move _17, const "#[serde(getter = \"...\")] can only be used in structs that have #[serde(remote = \"...\")]") -> [return: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:94:13: 94:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:97:2: 97:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:78:1: 97:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:78:45: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:78:21: 78:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:78:17: 78:19 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:78:17: 78:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:78:17: 78:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:78:34: 78:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:78:28: 78:32 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:78:28: 78:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:78:28: 78:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:80:9: 80:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:81:13: 86:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:81:16: 81:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:81:13: 86:14 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:81:16: 81:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:82:17: 85:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:82:17: 82:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:83:21: 83:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:16: 89:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:16: 89:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:42: 89:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Path>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:42: 89:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::Path>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:42: 89:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:89:13: 94:14 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:89:42: 89:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:90:17: 93:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:90:17: 90:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:91:21: 91:34 (#0),
            scope: scope[0],
        },
    },
]