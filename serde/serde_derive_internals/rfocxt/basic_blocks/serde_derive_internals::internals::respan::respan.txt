[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:4:5: 5:21 (#0),
                    scope: scope[0],
                },
                kind: _4 = <proc_macro2::TokenStream as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = {closure@serde_derive_internals/src/respan.rs:6:14: 6:21} { span: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:4:5: 6:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = <proc_macro2::token_stream::IntoIter as std::iter::Iterator>::map::<proc_macro2::TokenTree, {closure@serde_derive_internals/src/respan.rs:6:14: 6:21}>(move _4, move _6) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                    scope: scope[0],
                },
                kind: _0 = <std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@serde_derive_internals/src/respan.rs:6:14: 6:21}> as std::iter::Iterator>::collect::<proc_macro2::TokenStream>(move _3) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:8:1: 8:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:8:2: 8:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:7:18: 7:19 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:6:47: 6:48 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:5:20: 5:21 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:8:1: 8:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/respan.rs:3:1: 8:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:3:58: 3:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/respan.rs:3:30: 3:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/respan.rs:3:22: 3:28 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/respan.rs:3:22: 3:28 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:3:22: 3:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/respan.rs:3:49: 3:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/respan.rs:3:43: 3:47 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/respan.rs:3:43: 3:47 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:3:43: 3:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                },
            ),
        ),
        ty: std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:464 ~ serde_derive_internals[1ebf]::internals::respan::respan::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] }, (&'{erased} proc_macro2::Span,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:4:5: 6:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                },
            ),
        ),
        ty: proc_macro2::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:4:5: 5:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                },
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:4:5: 4:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:464 ~ serde_derive_internals[1ebf]::internals::respan::respan::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] },
                (&'{erased} proc_macro2::Span,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:6:14: 6:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/respan.rs:4:5: 7:19 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/respan.rs:6:14: 6:47 (#0),
            scope: scope[0],
        },
    },
]