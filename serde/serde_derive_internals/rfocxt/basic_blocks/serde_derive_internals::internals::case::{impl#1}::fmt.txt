[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const "unknown rename rule `rename_all = ",
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:9: 126:58 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::fmt::Formatter::<'_>::write_str(move _6, move _7) -> [return: bb1, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                    scope: scope[0],
                },
                kind: _4 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_4 as Continue).0: ()),
            _3 = _13,
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*((*_1).0: &str)),
            StorageLive(_18),
            _18 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:9: 127:36 (#0),
                    scope: scope[0],
                },
                kind: _16 = <str as std::fmt::Debug>::fmt(move _17, move _18) -> [return: bb8, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                    scope: scope[2],
                },
                kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _12) -> [return: bb7, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                    scope: scope[0],
                },
                kind: _15 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _16) -> [return: bb9, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _19 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                    scope: scope[0],
                },
                kind: switchInt(move _19) -> [0: bb12, 1: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = ((_15 as Continue).0: ()),
            _14 = _23,
            StorageDead(_23),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut (*_2),
            StorageLive(_28),
            StorageLive(_29),
            _29 = const "`, expected one of ",
            _28 = &(*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:9: 128:43 (#0),
                    scope: scope[0],
                },
                kind: _26 = std::fmt::Formatter::<'_>::write_str(move _27, move _28) -> [return: bb15, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>),
            StorageLive(_22),
            _22 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                    scope: scope[6],
                },
                kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _22) -> [return: bb14, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                    scope: scope[0],
                },
                kind: _25 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _26) -> [return: bb16, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _30 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                    scope: scope[0],
                },
                kind: switchInt(move _30) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = ((_25 as Continue).0: ()),
            _24 = _34,
            StorageDead(_34),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = const {alloc1: &&[(&str, internals::case::RenameRule)]},
            _39 = &(*(*_40)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:54 (#0),
                    scope: scope[0],
                },
                kind: _38 = core::slice::<impl [(&str, internals::case::RenameRule)]>::iter(move _39) -> [return: bb22, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>),
            StorageLive(_33),
            _33 = _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                    scope: scope[10],
                },
                kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _33) -> [return: bb21, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:66 (#0),
                    scope: scope[0],
                },
                kind: _37 = <std::slice::Iter<'_, (&str, internals::case::RenameRule)> as std::iter::Iterator>::enumerate(move _38) -> [return: bb23, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                    scope: scope[0],
                },
                kind: _36 = <std::iter::Enumerate<std::slice::Iter<'_, (&str, internals::case::RenameRule)>> as std::iter::IntoIterator>::into_iter(move _37) -> [return: bb24, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            StorageLive(_41),
            _41 = move _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
                    scope: scope[13],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb26, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &mut _41,
            _45 = &mut (*_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                    scope: scope[13],
                },
                kind: _44 = <std::iter::Enumerate<std::slice::Iter<'_, (&str, internals::case::RenameRule)>> as std::iter::Iterator>::next(move _45) -> [return: bb27, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            PlaceMention(_44),
            _47 = discriminant(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                    scope: scope[13],
                },
                kind: switchInt(move _47) -> [0: bb29, 1: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = (((_44 as Some).0: (usize, &(&str, internals::case::RenameRule))).0: usize),
            StorageLive(_50),
            _50 = &((*(((_44 as Some).0: (usize, &(&str, internals::case::RenameRule))).1: &(&str, internals::case::RenameRule))).0: &str),
            StorageLive(_51),
            _51 = &((*(((_44 as Some).0: (usize, &(&str, internals::case::RenameRule))).1: &(&str, internals::case::RenameRule))).1: internals::case::RenameRule),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _49,
            _53 = Gt(move _54, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:130:16: 130:21 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _53) -> [0: bb40, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_76),
            _76 = (),
            _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _76),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:136:6: 136:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &mut (*_2),
            StorageLive(_59),
            StorageLive(_60),
            _60 = const ", ",
            _59 = &(*_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:17: 131:34 (#0),
                    scope: scope[14],
                },
                kind: _57 = std::fmt::Formatter::<'_>::write_str(move _58, move _59) -> [return: bb33, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                    scope: scope[14],
                },
                kind: _56 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _57) -> [return: bb34, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            PlaceMention(_56),
            _61 = discriminant(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                    scope: scope[14],
                },
                kind: switchInt(move _61) -> [0: bb37, 1: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = ((_56 as Continue).0: ()),
            _55 = _65,
            StorageDead(_65),
            StorageDead(_60),
            StorageDead(_56),
            StorageDead(_55),
            _52 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:130:13: 132:14 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>),
            StorageLive(_64),
            _64 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                    scope: scope[16],
                },
                kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _64) -> [return: bb39, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            _52 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:130:13: 132:14 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &(*_50),
            StorageLive(_70),
            _70 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:13: 133:32 (#0),
                    scope: scope[14],
                },
                kind: _68 = <&str as std::fmt::Debug>::fmt(move _69, move _70) -> [return: bb42, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                    scope: scope[14],
                },
                kind: _67 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _68) -> [return: bb43, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            PlaceMention(_67),
            _71 = discriminant(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                    scope: scope[14],
                },
                kind: switchInt(move _71) -> [0: bb46, 1: bb45, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _75 = ((_67 as Continue).0: ()),
            _66 = _75,
            StorageDead(_75),
            StorageDead(_67),
            StorageDead(_66),
            _43 = const (),
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
                    scope: scope[13],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>),
            StorageLive(_74),
            _74 = _72,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                    scope: scope[20],
                },
                kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _74) -> [return: bb48, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:136:6: 136:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:125:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:125:46: 125:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} internals::case::ParseError<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:125:12: 125:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/case.rs:125:22: 125:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/case.rs:125:19: 125:20 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:125:19: 125:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:125:19: 125:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:9: 126:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:9: 126:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:9: 126:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:21: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:21: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:58: 126:59 (#482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:126:9: 126:59 (#481),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:126:9: 126:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:9: 127:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:9: 127:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:20: 127:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:34: 127:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:36: 127:37 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:127:9: 127:37 (#483),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:127:9: 127:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:9: 128:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:9: 128:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:9: 128:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:21: 128:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:21: 128:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:43: 128:44 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:128:9: 128:44 (#485),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:128:9: 128:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(&'{erased} str, internals::case::RenameRule)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:351 ~ serde_derive_internals[1ebf]::internals::case::RENAME_RULES),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} &'{erased} [(&'{erased} str, internals::case::RenameRule)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:125:5: 136:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, &'{erased} (&'{erased} str, internals::case::RenameRule))>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:9: 134:10 (#487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _44,
                                ),
                                serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:129:13: 129:31 (#489),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:14: 129:15 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _44,
                                ),
                                serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:129:13: 129:31 (#489),
                    },
                ),
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:18: 129:22 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _44,
                                ),
                                serde_derive_internals/src/case.rs:129:35: 129:66 (#488),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:129:13: 129:31 (#489),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::case::RenameRule,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:129:24: 129:29 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:130:13: 132:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:130:16: 130:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:130:16: 130:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:17: 131:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:17: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:17: 131:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:29: 131:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:29: 131:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:34: 131:35 (#492),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:131:17: 131:35 (#491),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:131:17: 131:35 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:13: 133:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:13: 133:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:24: 133:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:30: 133:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:32: 133:33 (#494),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:133:13: 133:33 (#493),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:133:13: 133:33 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:135:12: 135:14 (#0),
            scope: scope[0],
        },
    },
]