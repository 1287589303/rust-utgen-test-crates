[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:66:21: 66:56 (#0),
                    scope: scope[0],
                },
                kind: _4 = internals::attr::Container::from_ast(move _5, move _6) -> [return: bb1, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_2).4: syn::Data),
            PlaceMention(_8),
            _9 = discriminant((*_8)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:68:24: 68:40 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb4, 1: bb3, 2: bb5, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:68:30: 68:40 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:69:13: 69:34 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:70:13: 70:36 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_1),
            StorageLive(_34),
            _34 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:75:17: 75:86 (#0),
                    scope: scope[1],
                },
                kind: _32 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _33, move _34, const "Serde does not support derive for unions") -> [return: bb16, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &(((*_8) as Enum).0: syn::DataEnum),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_10).2: syn::punctuated::Punctuated<syn::Variant, syn::token::Comma>),
            _13 = &(*_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:69:83: 69:98 (#0),
                    scope: scope[3],
                },
                kind: _16 = internals::attr::Container::default(move _17) -> [return: bb7, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:69:49: 69:99 (#0),
                    scope: scope[3],
                },
                kind: _11 = internals::ast::enum_from_ast(move _12, move _13, move _15) -> [return: bb8, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _7 = internals::ast::Data::<'_>::Enum(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:69:99: 69:100 (#0),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb9, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:69:99: 69:100 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = &(((*_8) as Struct).0: syn::DataStruct),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &((*_18).1: syn::Fields),
            _23 = &(*_24),
            StorageLive(_25),
            _25 = std::option::Option::<&internals::attr::Variant>::None,
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:71:79: 71:94 (#0),
                    scope: scope[4],
                },
                kind: _27 = internals::attr::Container::default(move _28) -> [return: bb11, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &(*_27),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:71:39: 71:95 (#0),
                    scope: scope[4],
                },
                kind: _21 = internals::ast::struct_from_ast(move _22, move _23, move _25, move _26) -> [return: bb12, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_21),
            StorageLive(_19),
            _19 = (_21.0: internals::ast::Style),
            StorageLive(_20),
            _20 = move (_21.1: std::vec::Vec<internals::ast::Field<'_>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:71:95: 71:96 (#0),
                    scope: scope[4],
                },
                kind: drop(_21) -> [return: bb13, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_21),
            StorageLive(_29),
            _29 = _19,
            StorageLive(_30),
            _30 = move _20,
            _7 = internals::ast::Data::<'_>::Struct(move _29, move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:72:43: 72:44 (#0),
                    scope: scope[5],
                },
                kind: drop(_30) -> [return: bb14, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:73:13: 73:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb15, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:73:13: 73:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            _0 = std::option::Option::<internals::ast::Container<'_>>::None,
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb64, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _7),
            StorageDead(_8),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut _7,
            PlaceMention(_36),
            _37 = discriminant((*_36)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:80:9: 80:24 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _37) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:80:15: 80:24 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:81:13: 81:33 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = &mut (((*_36) as Struct).1: std::vec::Vec<internals::ast::Field<'_>>),
            StorageLive(_72),
            StorageLive(_73),
            _73 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                    scope: scope[11],
                },
                kind: _72 = <&mut std::vec::Vec<internals::ast::Field<'_>> as std::iter::IntoIterator>::into_iter(move _73) -> [return: bb44, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = &mut (((*_36) as Enum).0: std::vec::Vec<internals::ast::Variant<'_>>),
            StorageLive(_39),
            StorageLive(_40),
            _40 = move _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                    scope: scope[6],
                },
                kind: _39 = <&mut std::vec::Vec<internals::ast::Variant<'_>> as std::iter::IntoIterator>::into_iter(move _40) -> [return: bb22, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            StorageLive(_41),
            _41 = move _39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                    scope: scope[7],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb24, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &mut _41,
            _45 = &mut (*_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                    scope: scope[7],
                },
                kind: _44 = <std::slice::IterMut<'_, internals::ast::Variant<'_>> as std::iter::Iterator>::next(move _45) -> [return: bb25, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            PlaceMention(_44),
            _47 = discriminant(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                    scope: scope[7],
                },
                kind: switchInt(move _47) -> [0: bb27, 1: bb28, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = move ((_44 as Some).0: &mut internals::ast::Variant<'_>),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut ((*_49).1: internals::attr::Variant),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:83:51: 83:75 (#0),
                    scope: scope[8],
                },
                kind: _52 = internals::attr::Container::rename_all_rules(move _53) -> [return: bb30, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:93:13: 93:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:83:21: 83:76 (#0),
                    scope: scope[8],
                },
                kind: _50 = internals::attr::Variant::rename_by_rules(move _51, move _52) -> [return: bb31, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &mut ((*_49).3: std::vec::Vec<internals::ast::Field<'_>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                    scope: scope[8],
                },
                kind: _54 = <&mut std::vec::Vec<internals::ast::Field<'_>> as std::iter::IntoIterator>::into_iter(move _55) -> [return: bb32, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            PlaceMention(_54),
            StorageLive(_56),
            _56 = move _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                    scope: scope[9],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                    scope: scope[9],
                },
                kind: falseUnwind -> [real: bb34, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _56,
            _59 = &mut (*_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                    scope: scope[9],
                },
                kind: _58 = <std::slice::IterMut<'_, internals::ast::Field<'_>> as std::iter::Iterator>::next(move _59) -> [return: bb35, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            PlaceMention(_58),
            _61 = discriminant(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                    scope: scope[9],
                },
                kind: switchInt(move _61) -> [0: bb37, 1: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = move ((_58 as Some).0: &mut internals::ast::Field<'_>),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut ((*_63).1: internals::attr::Field),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &((*_49).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:86:29: 88:52 (#0),
                    scope: scope[10],
                },
                kind: _67 = internals::attr::Variant::rename_all_rules(move _68) -> [return: bb40, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = const (),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_54),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                    scope: scope[7],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:89:37: 89:68 (#0),
                    scope: scope[10],
                },
                kind: _69 = internals::attr::Container::rename_all_fields_rules(move _70) -> [return: bb41, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:86:29: 89:69 (#0),
                    scope: scope[10],
                },
                kind: _66 = internals::attr::RenameAllRules::or(move _67, move _69) -> [return: bb42, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:85:25: 90:26 (#0),
                    scope: scope[10],
                },
                kind: _64 = internals::attr::Field::rename_by_rules(move _65, move _66) -> [return: bb43, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_64),
            _57 = const (),
            StorageDead(_63),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_57),
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                    scope: scope[9],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            PlaceMention(_72),
            StorageLive(_74),
            _74 = move _72,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                    scope: scope[12],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                    scope: scope[12],
                },
                kind: falseUnwind -> [real: bb46, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &mut _74,
            _77 = &mut (*_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                    scope: scope[12],
                },
                kind: _76 = <std::slice::IterMut<'_, internals::ast::Field<'_>> as std::iter::Iterator>::next(move _77) -> [return: bb47, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            PlaceMention(_76),
            _79 = discriminant(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                    scope: scope[12],
                },
                kind: switchInt(move _79) -> [0: bb49, 1: bb50, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb51, imaginary: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = move ((_76 as Some).0: &mut internals::ast::Field<'_>),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &mut ((*_81).1: internals::attr::Field),
            StorageLive(_84),
            StorageLive(_85),
            _85 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:96:49: 96:73 (#0),
                    scope: scope[13],
                },
                kind: _84 = internals::attr::Container::rename_all_rules(move _85) -> [return: bb52, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
            StorageDead(_78),
            StorageDead(_76),
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:98:13: 98:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:96:21: 96:74 (#0),
                    scope: scope[13],
                },
                kind: _82 = internals::attr::Field::rename_by_rules(move _83, move _84) -> [return: bb53, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            _75 = const (),
            StorageDead(_81),
            StorageDead(_78),
            StorageDead(_76),
            StorageDead(_75),
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                    scope: scope[12],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &((*_2).2: proc_macro2::Ident),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:102:20: 102:38 (#0),
                    scope: scope[2],
                },
                kind: _87 = <proc_macro2::Ident as std::clone::Clone>::clone(move _88) -> [return: bb55, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_89),
            _89 = move _4,
            StorageLive(_90),
            _90 = move _7,
            StorageLive(_91),
            StorageLive(_92),
            _92 = &((*_2).3: syn::Generics),
            _91 = &(*_92),
            StorageLive(_93),
            _93 = &(*_2),
            _86 = internals::ast::Container::<'_> { ident: move _87, attrs: move _89, data: move _90, generics: move _91, original: move _93 },
            StorageDead(_93),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:107:9: 107:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_90) -> [return: bb56, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:107:9: 107:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_89) -> [return: bb57, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:107:9: 107:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_87) -> [return: bb58, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            FakeRead(ForLet(None), _86),
            StorageDead(_92),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &(*_1),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &mut _86,
            _96 = &mut (*_97),
            StorageLive(_98),
            _98 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:108:9: 108:44 (#0),
                    scope: scope[14],
                },
                kind: _94 = internals::check::check(move _95, move _96, move _98) -> [return: bb59, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_97),
            StorageDead(_94),
            StorageLive(_99),
            _99 = move _86,
            _0 = std::option::Option::<internals::ast::Container<'_>>::Some(move _99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:109:18: 109:19 (#0),
                    scope: scope[14],
                },
                kind: drop(_99) -> [return: bb60, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_86) -> [return: bb61, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb62, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb63, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:6: 110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:6: 110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:6: 110:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_86) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:107:9: 107:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_89) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:107:9: 107:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_87) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:73:13: 73:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:110:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb72, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:61:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<internals::ast::Container<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:65:10: 65:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:62:13: 62:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:62:9: 62:11 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:62:9: 62:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:62:9: 62:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:63:15: 63:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:63:9: 63:13 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:63:9: 63:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:63:9: 63:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:64:17: 64:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:64:9: 64:15 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:64:9: 64:15 (#0),
                    },
                ),
            ),
        ),
        ty: internals::Derive,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:64:9: 64:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:66:21: 66:56 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:66:13: 66:18 (#0),
                    },
                ),
            ),
        ),
        ty: internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:66:13: 66:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:66:47: 66:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:66:51: 66:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:68:24: 78:10 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:68:13: 68:21 (#0),
                    },
                ),
            ),
        ),
        ty: internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:68:13: 68:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Data,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:68:30: 68:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:13: 69:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                serde_derive_internals/src/ast.rs:68:30: 68:40 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:69:13: 69:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::DataEnum,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:29: 69:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:49: 69:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:63: 69:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Variant, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:67: 69:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Variant, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:67: 69:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:83: 69:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:83: 69:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:69:83: 69:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                serde_derive_internals/src/ast.rs:68:30: 68:40 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:70:13: 70:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::DataStruct,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:70:31: 70:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                serde_derive_internals/src/ast.rs:71:39: 71:95 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:71:21: 71:36 (#0),
                    },
                ),
            ),
        ),
        ty: internals::ast::Style,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:22: 71:27 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                serde_derive_internals/src/ast.rs:71:39: 71:95 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:71:21: 71:36 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:29: 71:35 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (internals::ast::Style, std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:39: 71:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:55: 71:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Fields,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:59: 71:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Fields,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:59: 71:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} internals::attr::Variant>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:73: 71:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:79: 71:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:79: 71:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:71:79: 71:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::ast::Style,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:72:30: 72:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:72:37: 72:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:74:36: 77:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:75:17: 75:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:75:17: 75:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:75:37: 75:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:80:9: 99:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:80:15: 80:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:81:13: 81:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                serde_derive_internals/src/ast.rs:80:15: 80:24 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:81:13: 81:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:81:24: 81:32 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                },
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                    },
                ),
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:61:5: 110:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:17: 92:18 (#230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _44,
                                ),
                                serde_derive_internals/src/ast.rs:82:32: 82:40 (#231),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:82:21: 82:28 (#232),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Variant<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:82:21: 82:28 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:83:21: 83:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:83:21: 83:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:83:51: 83:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:83:51: 83:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                },
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _54,
                                ),
                                serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                    },
                ),
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:21: 91:22 (#233),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                serde_derive_internals/src/ast.rs:84:34: 84:53 (#234),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:84:25: 84:30 (#235),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:84:25: 84:30 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:85:25: 90:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:85:25: 85:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:86:29: 89:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:86:29: 88:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:86:29: 87:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:89:37: 89:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:89:37: 89:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                serde_derive_internals/src/ast.rs:80:15: 80:24 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:94:13: 94:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:94:29: 94:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                },
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _72,
                                ),
                                serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                    },
                ),
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:17: 97:18 (#236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _76,
                                ),
                                serde_derive_internals/src/ast.rs:95:30: 95:36 (#237),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:95:21: 95:26 (#238),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:95:21: 95:26 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:96:21: 96:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:96:21: 96:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:96:49: 96:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:96:49: 96:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:101:24: 107:10 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:101:13: 101:21 (#0),
                    },
                ),
            ),
        ),
        ty: internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:101:13: 101:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:102:20: 102:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:102:20: 102:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:103:13: 103:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:104:13: 104:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} syn::Generics,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:105:23: 105:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Generics,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:105:23: 105:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:106:23: 106:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:108:9: 108:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:108:22: 108:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:108:26: 108:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:108:26: 108:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::Derive,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:108:37: 108:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:109:14: 109:18 (#0),
            scope: scope[0],
        },
    },
]