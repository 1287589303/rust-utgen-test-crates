[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:8: 471:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = internals::attr::Container::type_from(move _6) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &_5,
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:8: 471:40 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::option::Option::<&syn::Type>::is_some(move _4) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:8: 471:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb9, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:44: 471:70 (#0),
                    scope: scope[0],
                },
                kind: _9 = internals::attr::Container::type_try_from(move _10) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &_9,
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:44: 471:80 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::option::Option::<&syn::Type>::is_some(move _8) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:44: 471:80 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
            StorageLive(_13),
            _13 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:472:9: 475:10 (#0),
                    scope: scope[0],
                },
                kind: _11 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _12, move _13, const "#[serde(from = \"...\")] and #[serde(try_from = \"...\")] conflict with each other") -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:477:2: 477:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:470:1: 477:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:470:60: 470:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:470:32: 470:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:470:28: 470:30 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:470:28: 470:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:470:28: 470:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:470:45: 470:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:470:39: 470:43 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:470:39: 470:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:470:39: 470:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:8: 471:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:8: 471:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:8: 471:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:8: 471:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:44: 471:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:44: 471:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:44: 471:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:471:5: 476:6 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:471:44: 471:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:472:9: 475:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:472:9: 472:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:473:13: 473:26 (#0),
            scope: scope[0],
        },
    },
]