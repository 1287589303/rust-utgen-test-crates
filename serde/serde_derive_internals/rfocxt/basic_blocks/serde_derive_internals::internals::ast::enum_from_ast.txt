[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:133:34: 134:16 (#0),
                    scope: scope[0],
                },
                kind: _6 = syn::punctuated::Punctuated::<syn::Variant, syn::token::Comma>::iter(move _7) -> [return: bb1, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
            StorageLive(_10),
            _10 = &(*_3),
            _8 = {closure@serde_derive_internals/src/ast.rs:135:14: 135:23} { cx: move _9, container_default: move _10 },
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:133:34: 146:11 (#0),
                    scope: scope[0],
                },
                kind: _5 = <syn::punctuated::Iter<'_, syn::Variant> as std::iter::Iterator>::map::<internals::ast::Variant<'_>, {closure@serde_derive_internals/src/ast.rs:135:14: 135:23}>(move _6, move _8) -> [return: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:133:34: 147:19 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::iter::Map<syn::punctuated::Iter<'_, syn::Variant>, {closure@serde_derive_internals/src/ast.rs:135:14: 135:23}> as std::iter::Iterator>::collect::<std::vec::Vec<internals::ast::Variant<'_>>>(move _5) -> [return: bb3, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:149:40: 150:16 (#0),
                    scope: scope[1],
                },
                kind: _15 = <std::vec::Vec<internals::ast::Variant<'_>> as std::ops::Deref>::deref(move _16) -> [return: bb4, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &(*_15),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:149:40: 150:16 (#0),
                    scope: scope[1],
                },
                kind: _13 = core::slice::<impl [internals::ast::Variant<'_>]>::iter(move _14) -> [return: bb5, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &mut _13,
            StorageDead(_14),
            StorageLive(_17),
            _17 = {closure@serde_derive_internals/src/ast.rs:151:20: 151:29},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:149:40: 151:56 (#0),
                    scope: scope[1],
                },
                kind: _11 = <std::slice::Iter<'_, internals::ast::Variant<'_>> as std::iter::Iterator>::rposition::<{closure@serde_derive_internals/src/ast.rs:151:20: 151:29}>(move _12, move _17) -> [return: bb6, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageDead(_15),
            StorageDead(_13),
            StorageLive(_18),
            PlaceMention(_11),
            _19 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:152:12: 152:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [1: bb7, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:152:12: 152:46 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_11 as Some).0: usize),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_4,
            StorageLive(_25),
            StorageLive(_26),
            _26 = _20,
            _25 = std::ops::RangeTo::<usize> { end: move _26 },
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:33: 153:65 (#0),
                    scope: scope[3],
                },
                kind: _23 = <std::vec::Vec<internals::ast::Variant<'_>> as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _24, move _25) -> [return: bb9, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                    scope: scope[3],
                },
                kind: _21 = <&[internals::ast::Variant<'_>] as std::iter::IntoIterator>::into_iter(move _22) -> [return: bb10, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            StorageLive(_27),
            _27 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                    scope: scope[4],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb12, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _27,
            _31 = &mut (*_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                    scope: scope[4],
                },
                kind: _30 = <std::slice::Iter<'_, internals::ast::Variant<'_>> as std::iter::Iterator>::next(move _31) -> [return: bb13, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            PlaceMention(_30),
            _33 = discriminant(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                    scope: scope[4],
                },
                kind: switchInt(move _33) -> [0: bb15, 1: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = ((_30 as Some).0: &internals::ast::Variant<'_>),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &((*_35).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:154:16: 154:40 (#0),
                    scope: scope[5],
                },
                kind: _36 = internals::attr::Variant::untagged(move _37) -> [return: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = const (),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:152:5: 158:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:154:16: 154:40 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _36) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &(*_1),
            StorageLive(_40),
            _40 = &((*_35).0: proc_macro2::Ident),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:155:17: 155:144 (#0),
                    scope: scope[5],
                },
                kind: _38 = internals::ctxt::Ctxt::error_spanned_by::<&proc_macro2::Ident, &str>(move _39, move _40, const "all variants with the #[serde(untagged)] attribute must be placed at the end of the enum") -> [return: bb20, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:154:13: 156:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:154:13: 156:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                    scope: scope[4],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:152:5: 158:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            _0 = move _4,
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:161:1: 161:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb25, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:161:2: 161:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:161:1: 161:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:147:18: 147:19 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:146:10: 146:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:128:1: 161:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:132:6: 132:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:129:9: 129:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:129:5: 129:7 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:129:5: 129:7 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:129:5: 129:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:130:15: 130:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:130:5: 130:13 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:130:5: 130:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Variant, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:130:5: 130:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:131:24: 131:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:131:5: 131:22 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:131:5: 131:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:131:5: 131:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:133:34: 147:19 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:133:9: 133:17 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        serde_derive_internals/src/ast.rs:133:19: 133:31 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:133:9: 133:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<syn::punctuated::Iter<'{erased}, syn::Variant>, Closure(DefId(0:55 ~ serde_derive_internals[1ebf]::internals::ast::enum_from_ast::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} syn::Variant,)) -> internals::ast::Variant<'{erased}>, bound_vars: [] }, (&'{erased} internals::ctxt::Ctxt, &'{erased} internals::attr::Default)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:133:34: 146:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: syn::punctuated::Iter<'{erased}, syn::Variant>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:133:34: 134:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Variant, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:133:34: 133:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:55 ~ serde_derive_internals[1ebf]::internals::ast::enum_from_ast::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} syn::Variant,)) -> internals::ast::Variant<'{erased}>, bound_vars: [] },
                (&'{erased} internals::ctxt::Ctxt, &'{erased} internals::attr::Default),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:135:14: 146:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:135:14: 146:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:135:14: 146:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:149:40: 151:56 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:149:9: 149:37 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:9: 149:37 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:40: 150:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:40: 150:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:40: 149:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:40: 150:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:149:40: 149:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:56 ~ serde_derive_internals[1ebf]::internals::ast::enum_from_ast::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} internals::ast::Variant<'{erased}>,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:151:20: 151:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:152:5: 158:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:152:12: 152:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                serde_derive_internals/src/ast.rs:152:49: 152:77 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:152:12: 152:46 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:152:17: 152:45 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                },
            ),
        ),
        ty: &'{erased} [internals::ast::Variant<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:33: 153:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:25: 153:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
                },
            ),
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:34: 153:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:36: 153:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:128:1: 161:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:9: 157:10 (#239),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                serde_derive_internals/src/ast.rs:153:24: 153:65 (#240),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:153:13: 153:20 (#241),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Variant<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:153:13: 153:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:154:13: 156:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:154:16: 154:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/ast.rs:154:13: 156:14 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:154:16: 154:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:155:17: 155:144 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:155:17: 155:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:155:37: 155:51 (#0),
            scope: scope[0],
        },
    },
]