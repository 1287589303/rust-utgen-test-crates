[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:124:9: 124:26 (#0),
                    scope: scope[0],
                },
                kind: _3 = internals::ast::Data::<'_>::all_fields(move _4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut _3,
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@serde_derive_internals/src/ast.rs:124:31: 124:34},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:124:9: 124:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = <std::boxed::Box<dyn std::iter::Iterator<Item = &internals::ast::Field<'_>>> as std::iter::Iterator>::any::<{closure@serde_derive_internals/src/ast.rs:124:31: 124:34}>(move _2, move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:125:5: 125:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:125:6: 125:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:125:5: 125:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:123:5: 125:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:123:33: 123:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:123:23: 123:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:124:9: 124:62 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:124:9: 124:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:124:9: 124:62 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::iter::Iterator), bound_vars: [] }, Binder { value: Projection(Item = &internals::ast::Field<'_>), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:124:9: 124:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:124:9: 124:62 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:124:9: 124:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:124:9: 124:62 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:52 ~ serde_derive_internals[1ebf]::internals::ast::{impl#1}::has_getter::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} internals::ast::Field<'{erased}>,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:124:31: 124:61 (#0),
            scope: scope[0],
        },
    },
]