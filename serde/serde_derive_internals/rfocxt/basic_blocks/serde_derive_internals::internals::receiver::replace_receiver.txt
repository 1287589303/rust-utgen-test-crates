[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).2: proc_macro2::Ident),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).3: syn::Generics),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:13:27: 13:58 (#0),
                    scope: scope[2],
                },
                kind: _5 = syn::Generics::split_for_impl(move _6) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = move (_5.1: syn::TypeGenerics<'_>),
            FakeRead(ForLet(None), _4),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:519:26: 519:63 (#113),
                    scope: scope[3],
                },
                kind: _8 = proc_macro2::TokenStream::new() -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_3,
            _10 = &(*_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:9: 941:57 (#116),
                    scope: scope[4],
                },
                kind: _9 = <&proc_macro2::Ident as quote::ToTokens>::to_tokens(move _10, move _12) -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_9),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_4,
            _15 = &(*_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _8,
            _17 = &mut (*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:9: 941:57 (#117),
                    scope: scope[4],
                },
                kind: _14 = <syn::TypeGenerics<'_> as quote::ToTokens>::to_tokens(move _15, move _17) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
            _7 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:522:9: 522:10 (#113),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/parse_quote.rs:82:9: 82:82 (#112),
                    scope: scope[3],
                },
                kind: _2 = syn::__private::parse::<syn::TypePath>(move _7) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &_2,
            _20 = &(*_21),
            _19 = internals::receiver::ReplaceReceiver::<'_>(move _20),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageDead(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _19,
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut ((*_1).3: syn::Generics),
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:17:5: 17:52 (#0),
                    scope: scope[5],
                },
                kind: _22 = internals::receiver::ReplaceReceiver::<'_>::visit_generics_mut(move _23, move _24) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_25),
            StorageDead(_22),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut _19,
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut ((*_1).4: syn::Data),
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:18:5: 18:44 (#0),
                    scope: scope[5],
                },
                kind: _26 = internals::receiver::ReplaceReceiver::<'_>::visit_data_mut(move _27, move _28) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_29),
            StorageDead(_26),
            _0 = const (),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:19:1: 19:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:19:2: 19:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:19:1: 19:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/parse_quote.rs:82:81: 82:82 (#112),
                    scope: scope[3],
                },
                kind: drop(_7) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:522:9: 522:10 (#113),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/receiver.rs:10:1: 19:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:10:49: 10:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/receiver.rs:10:32: 10:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/receiver.rs:10:25: 10:30 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/receiver.rs:10:25: 10:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:10:25: 10:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/receiver.rs:11:19: 15:6 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/receiver.rs:11:9: 11:16 (#0),
                    },
                ),
            ),
        ),
        ty: syn::TypePath,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:11:9: 11:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/receiver.rs:12:21: 12:33 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/receiver.rs:12:13: 12:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:12:13: 12:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/receiver.rs:13:27: 13:60 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/receiver.rs:13:13: 13:24 (#0),
                    },
                ),
            ),
        ),
        ty: syn::TypeGenerics<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:13:13: 13:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (syn::ImplGenerics<'{erased}>, syn::TypeGenerics<'{erased}>, std::option::Option<&'{erased} syn::WhereClause>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:13:27: 13:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Generics,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:13:27: 13:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/parse_quote.rs:82:9: 82:82 (#112),
                },
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:518:26: 522:10 (#113),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:519:26: 519:63 (#113),
                            ),
                        ),
                        pat_span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:519:17: 519:23 (#113),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:519:17: 519:23 (#113),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:9: 941:57 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:37: 941:42 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:37: 941:42 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:44: 941:56 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:44: 941:56 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:9: 941:57 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::TypeGenerics<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:37: 941:42 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::TypeGenerics<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:37: 941:42 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:44: 941:56 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs:941:44: 941:56 (#117),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/receiver.rs:16:23: 16:48 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/receiver.rs:16:9: 16:20 (#0),
                    },
                ),
            ),
        ),
        ty: internals::receiver::ReplaceReceiver<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:16:9: 16:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} syn::TypePath,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:16:39: 16:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::TypePath,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:16:39: 16:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:17:5: 17:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::receiver::ReplaceReceiver<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:17:5: 17:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut syn::Generics,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:17:32: 17:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut syn::Generics,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:17:32: 17:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:18:5: 18:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::receiver::ReplaceReceiver<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:18:5: 18:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut syn::Data,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:18:28: 18:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut syn::Data,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/receiver.rs:18:28: 18:43 (#0),
            scope: scope[0],
        },
    },
]