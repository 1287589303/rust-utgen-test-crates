[
    BasicBlockData {
        statements: [
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:24:29: 24:44 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::collections::BTreeSet::<internals::name::Name>::new() -> [return: bb1, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _5),
            StorageLive(_6),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:25:16: 25:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _7) -> [1: bb2, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:25:16: 25:32 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Some).0: internals::attr::VecAttr<'_, internals::name::Name>),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:31: 26:47 (#0),
                    scope: scope[2],
                },
                kind: _10 = internals::attr::VecAttr::<'_, internals::name::Name>::get(move _11) -> [return: bb4, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                    scope: scope[2],
                },
                kind: _9 = <std::vec::Vec<internals::name::Name> as std::iter::IntoIterator>::into_iter(move _10) -> [return: bb5, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_12),
            _12 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _12,
            _16 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                    scope: scope[3],
                },
                kind: _15 = <std::vec::IntoIter<internals::name::Name> as std::iter::Iterator>::next(move _16) -> [return: bb8, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _18 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                    scope: scope[3],
                },
                kind: switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_15 as Some).0: internals::name::Name),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut _5,
            StorageLive(_23),
            _23 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:27:17: 27:45 (#0),
                    scope: scope[4],
                },
                kind: _21 = std::collections::BTreeSet::<internals::name::Name>::insert(move _22, move _23) -> [return: bb13, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb16, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            _14 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb14, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb15, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb17, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb18, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:29:9: 29:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb20, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:25:9: 29:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:25:9: 29:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_24),
            StorageLive(_25),
            _25 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:31:24: 31:38 (#0),
                    scope: scope[1],
                },
                kind: _24 = internals::attr::Attr::<'_, internals::name::Name>::get(move _25) -> [return: bb22, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            FakeRead(ForLet(None), _24),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:32:27: 32:45 (#0),
                    scope: scope[5],
                },
                kind: _26 = std::option::Option::<internals::name::Name>::is_some(move _27) -> [return: bb23, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            FakeRead(ForLet(None), _26),
            StorageLive(_28),
            StorageLive(_29),
            _29 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:33:23: 33:36 (#0),
                    scope: scope[6],
                },
                kind: _28 = internals::attr::Attr::<'_, internals::name::Name>::get(move _29) -> [return: bb24, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:34:26: 34:43 (#0),
                    scope: scope[7],
                },
                kind: _30 = std::option::Option::<internals::name::Name>::is_some(move _31) -> [return: bb25, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            FakeRead(ForLet(None), _30),
            StorageLive(_32),
            StorageLive(_33),
            _33 = move _24,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_1,
            _34 = {closure@serde_derive_internals/src/name.rs:36:48: 36:50} { source_name: move _35 },
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:36:24: 36:71 (#0),
                    scope: scope[8],
                },
                kind: _32 = std::option::Option::<internals::name::Name>::unwrap_or_else::<{closure@serde_derive_internals/src/name.rs:36:48: 36:50}>(move _33, move _34) -> [return: bb26, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_36),
            _36 = _26,
            StorageLive(_37),
            StorageLive(_38),
            _38 = move _28,
            StorageLive(_39),
            _39 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:38:26: 38:56 (#0),
                    scope: scope[8],
                },
                kind: _37 = std::option::Option::<internals::name::Name>::unwrap_or(move _38, move _39) -> [return: bb27, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_40),
            _40 = _30,
            StorageLive(_41),
            _41 = move _5,
            _0 = internals::name::MultiName { serialize: move _32, serialize_renamed: move _36, deserialize: move _37, deserialize_renamed: move _40, deserialize_aliases: move _41 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:41:9: 41:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_41) -> [return: bb28, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:41:9: 41:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_37) -> [return: bb29, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:41:9: 41:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_32) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_28) -> [return: bb31, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb32, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb33, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb34, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb35, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb36, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb37, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:6: 42:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:41:9: 41:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_37) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:38:55: 38:56 (#0),
                    scope: scope[8],
                },
                kind: drop(_39) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:38:55: 38:56 (#0),
                    scope: scope[8],
                },
                kind: drop(_38) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:41:9: 41:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_32) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:36:70: 36:71 (#0),
                    scope: scope[8],
                },
                kind: drop(_33) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_28) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:33:35: 33:36 (#0),
                    scope: scope[6],
                },
                kind: drop(_29) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:31:37: 31:38 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:27:44: 27:45 (#0),
                    scope: scope[4],
                },
                kind: drop(_23) -> [return: bb48, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb50, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:28:13: 28:14 (#465),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:46: 26:47 (#466),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:26:46: 26:47 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:29:9: 29:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb57, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:42:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:18:5: 42:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::name::MultiName,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:23:10: 23:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/name.rs:19:22: 19:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:19:9: 19:20 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:19:9: 19:20 (#0),
                    },
                ),
            ),
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:19:9: 19:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/name.rs:20:19: 20:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:20:9: 20:17 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:20:9: 20:17 (#0),
                    },
                ),
            ),
        ),
        ty: internals::attr::Attr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:20:9: 20:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/name.rs:21:18: 21:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:21:9: 21:16 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:21:9: 21:16 (#0),
                    },
                ),
            ),
        ),
        ty: internals::attr::Attr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:21:9: 21:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/name.rs:22:21: 22:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:22:9: 22:19 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:22:9: 22:19 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<internals::attr::VecAttr<'{erased}, internals::name::Name>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:22:9: 22:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:24:29: 24:44 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:24:13: 24:26 (#0),
                    },
                ),
            ),
        ),
        ty: std::collections::BTreeSet<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:24:13: 24:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:25:9: 29:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:25:16: 25:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde_derive_internals/src/name.rs:25:35: 25:45 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:25:16: 25:32 (#0),
                    },
                ),
            ),
        ),
        ty: internals::attr::VecAttr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:25:21: 25:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                },
            ),
        ),
        ty: std::vec::IntoIter<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                },
            ),
        ),
        ty: std::vec::Vec<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
                },
            ),
        ),
        ty: internals::attr::VecAttr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:18:5: 42:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:13: 28:14 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde_derive_internals/src/name.rs:26:31: 26:47 (#466),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:26:17: 26:27 (#467),
                    },
                ),
            ),
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:26:17: 26:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:27:17: 27:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::BTreeSet<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:27:17: 27:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:27:34: 27:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:31:24: 31:38 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:31:13: 31:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:31:13: 31:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::Attr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:31:24: 31:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:32:27: 32:45 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:32:13: 32:24 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:32:13: 32:24 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:32:27: 32:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:33:23: 33:36 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:33:13: 33:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:33:13: 33:20 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::attr::Attr<'{erased}, internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:33:23: 33:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:34:26: 34:43 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:34:13: 34:23 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:34:13: 34:23 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:34:26: 34:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:36:24: 36:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/name.rs:35:9: 41:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:36:24: 36:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/name.rs:35:9: 41:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:326 ~ serde_derive_internals[1ebf]::internals::name::{impl#0}::from_attrs::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn(()) -> internals::name::Name, bound_vars: [] },
                (&'{erased} internals::name::Name,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:36:48: 36:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/name.rs:35:9: 41:10 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:36:48: 36:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:37:32: 37:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:38:26: 38:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/name.rs:35:9: 41:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<internals::name::Name>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:38:26: 38:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/name.rs:35:9: 41:10 (#0),
                },
            ),
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:38:44: 38:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:39:34: 39:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::collections::BTreeSet<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:40:34: 40:43 (#0),
            scope: scope[0],
        },
    },
]