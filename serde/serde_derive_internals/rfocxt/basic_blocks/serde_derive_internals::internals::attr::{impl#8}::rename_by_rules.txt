[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = (((*_1).0: internals::name::MultiName).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1280:13: 1280:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb1, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = (_2.0: internals::case::RenameRule),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((((*_1).0: internals::name::MultiName).0: internals::name::Name).0: std::string::String),
            _9 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1281:72: 1281:98 (#0),
                    scope: scope[0],
                },
                kind: _8 = <std::string::String as std::ops::Deref>::deref(move _9) -> [return: bb2, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1281:41: 1281:99 (#0),
                    scope: scope[0],
                },
                kind: _5 = internals::case::RenameRule::apply_to_field(move _6, move _7) -> [return: bb3, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1281:13: 1281:38 (#0),
                    scope: scope[0],
                },
                kind: drop(((((*_1).0: internals::name::MultiName).0: internals::name::Name).0: std::string::String)) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((((*_1).0: internals::name::MultiName).0: internals::name::Name).0: std::string::String) = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1281:98: 1281:99 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((((*_1).0: internals::name::MultiName).0: internals::name::Name).0: std::string::String) = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1281:98: 1281:99 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_10),
            StorageDead(_8),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1280:9: 1282:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1280:9: 1282:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_11),
            StorageLive(_12),
            _12 = (((*_1).0: internals::name::MultiName).3: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1283:13: 1283:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb9, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = (_2.1: internals::case::RenameRule),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &((((*_1).0: internals::name::MultiName).2: internals::name::Name).0: std::string::String),
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1286:33: 1286:61 (#0),
                    scope: scope[0],
                },
                kind: _16 = <std::string::String as std::ops::Deref>::deref(move _17) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1284:43: 1286:62 (#0),
                    scope: scope[0],
                },
                kind: _13 = internals::case::RenameRule::apply_to_field(move _14, move _15) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1284:13: 1284:40 (#0),
                    scope: scope[0],
                },
                kind: drop(((((*_1).0: internals::name::MultiName).2: internals::name::Name).0: std::string::String)) -> [return: bb12, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((((*_1).0: internals::name::MultiName).2: internals::name::Name).0: std::string::String) = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1286:61: 1286:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((((*_1).0: internals::name::MultiName).2: internals::name::Name).0: std::string::String) = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1286:61: 1286:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_18),
            StorageDead(_16),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1283:9: 1287:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1283:9: 1287:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut (((*_1).0: internals::name::MultiName).4: std::collections::BTreeSet<internals::name::Name>),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(((*_1).0: internals::name::MultiName).2: internals::name::Name),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1290:21: 1290:50 (#0),
                    scope: scope[0],
                },
                kind: _21 = <internals::name::Name as std::clone::Clone>::clone(move _22) -> [return: bb17, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1288:9: 1290:51 (#0),
                    scope: scope[0],
                },
                kind: _19 = std::collections::BTreeSet::<internals::name::Name>::insert(move _20, move _21) -> [return: bb18, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1291:6: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1290:50: 1290:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_21) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/attr.rs:1279:5: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1279:61: 1279:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1279:28: 1279:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/attr.rs:1279:46: 1279:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/attr.rs:1279:39: 1279:44 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/attr.rs:1279:39: 1279:44 (#0),
                    },
                ),
            ),
        ),
        ty: internals::attr::RenameAllRules,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1279:39: 1279:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1280:9: 1282:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1280:13: 1280:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:41: 1281:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::case::RenameRule,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:41: 1281:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:72: 1281:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:72: 1281:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:72: 1281:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1281:72: 1281:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1283:9: 1287:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1283:13: 1283:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1284:43: 1286:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::case::RenameRule,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1284:43: 1285:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1286:33: 1286:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1286:33: 1286:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1286:33: 1286:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1286:33: 1286:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1288:9: 1290:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::BTreeSet<internals::name::Name, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1288:9: 1289:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1290:21: 1290:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/attr.rs:1290:21: 1290:42 (#0),
            scope: scope[0],
        },
    },
]