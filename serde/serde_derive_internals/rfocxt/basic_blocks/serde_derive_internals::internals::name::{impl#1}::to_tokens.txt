[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).0: std::string::String),
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:67:21: 67:32 (#0),
                    scope: scope[0],
                },
                kind: _7 = <std::string::String as std::ops::Deref>::deref(move _8) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
            StorageLive(_10),
            _10 = ((*_1).1: proc_macro2::Span),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:67:9: 67:44 (#0),
                    scope: scope[0],
                },
                kind: _5 = syn::LitStr::new(move _6, move _10) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &_5,
            StorageDead(_10),
            StorageDead(_6),
            StorageLive(_11),
            _11 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:67:9: 67:62 (#0),
                    scope: scope[0],
                },
                kind: _3 = <syn::LitStr as quote::ToTokens>::to_tokens(move _4, move _11) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:67:62: 67:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:68:6: 68:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:67:62: 67:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/name.rs:66:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:66:50: 66:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} internals::name::Name,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:66:18: 66:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/name.rs:66:33: 66:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/name.rs:66:25: 66:31 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/name.rs:66:25: 66:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:66:25: 66:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:9: 67:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::LitStr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:9: 67:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: syn::LitStr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:9: 67:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:21: 67:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:21: 67:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:21: 67:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:21: 67:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:34: 67:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/name.rs:67:55: 67:61 (#0),
            scope: scope[0],
        },
    },
]