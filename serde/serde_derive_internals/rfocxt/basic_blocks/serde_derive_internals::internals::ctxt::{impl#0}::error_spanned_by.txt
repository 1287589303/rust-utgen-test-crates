[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: std::cell::RefCell<std::option::Option<std::vec::Vec<syn::Error>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:32:9: 33:26 (#0),
                    scope: scope[0],
                },
                kind: _11 = std::cell::RefCell::<std::option::Option<std::vec::Vec<syn::Error>>>::borrow_mut(move _12) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:32:9: 34:22 (#0),
                    scope: scope[0],
                },
                kind: _9 = <std::cell::RefMut<'_, std::option::Option<std::vec::Vec<syn::Error>>> as std::ops::DerefMut>::deref_mut(move _10) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_12),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:32:9: 34:22 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::option::Option::<std::vec::Vec<syn::Error>>::as_mut(move _8) -> [return: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:32:9: 35:22 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::option::Option::<&mut std::vec::Vec<syn::Error>>::unwrap(move _7) -> [return: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_7),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:43: 37:66 (#0),
                    scope: scope[0],
                },
                kind: _14 = <A as quote::ToTokens>::into_token_stream(move _15) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            _16 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:19: 37:72 (#0),
                    scope: scope[0],
                },
                kind: _13 = syn::Error::new_spanned::<proc_macro2::TokenStream, T>(move _14, move _16) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:32:9: 37:73 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<syn::Error>::push(move _5, move _13) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:73: 37:74 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:38:5: 38:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:38:5: 38:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:38:6: 38:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:72: 37:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:71: 37:72 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:71: 37:72 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:65: 37:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:37:73: 37:74 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:38:5: 38:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:38:5: 38:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ctxt.rs:31:5: 38:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:31:76: 31:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:31:54: 31:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ctxt.rs:31:66: 31:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ctxt.rs:31:61: 31:64 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:31:61: 31:64 (#0),
                    },
                ),
            ),
        ),
        ty: A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:31:61: 31:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ctxt.rs:31:74: 31:75 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ctxt.rs:31:69: 31:72 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ctxt.rs:31:69: 31:72 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:31:69: 31:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 37:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 35:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<syn::Error, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 35:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 34:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 33:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 34:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::cell::RefMut<'{erased}, std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 33:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::cell::RefMut<'{erased}, std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 33:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::cell::RefCell<std::option::Option<std::vec::Vec<syn::Error, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:32:9: 32:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: syn::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:37:19: 37:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:37:43: 37:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:37:43: 37:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ctxt.rs:37:68: 37:71 (#0),
            scope: scope[0],
        },
    },
]