[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const {alloc1: &&[(&str, internals::case::RenameRule)]},
            _4 = (*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                    scope: scope[0],
                },
                kind: _3 = <&[(&str, internals::case::RenameRule)] as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_6),
            _6 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                    scope: scope[1],
                },
                kind: _9 = <std::slice::Iter<'_, (&str, internals::case::RenameRule)> as std::iter::Iterator>::next(move _10) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &((*((_9 as Some).0: &(&str, internals::case::RenameRule))).0: &str),
            StorageLive(_15),
            _15 = &((*((_9 as Some).0: &(&str, internals::case::RenameRule))).1: internals::case::RenameRule),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_1,
            StorageLive(_18),
            _18 = &(*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:47:16: 47:39 (#0),
                    scope: scope[2],
                },
                kind: _16 = <&str as std::cmp::PartialEq>::eq(move _17, move _18) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = const (),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
            _21 = internals::case::ParseError::<'_> { unknown: move _22 },
            StorageDead(_22),
            _0 = std::result::Result::<internals::case::RenameRule, internals::case::ParseError<'_>>::Err(move _21),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:54:6: 54:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:47:16: 47:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_20),
            _20 = (*_15),
            _0 = std::result::Result::<internals::case::RenameRule, internals::case::ParseError<'_>>::Ok(move _20),
            StorageDead(_20),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:54:6: 54:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _8 = const (),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:54:6: 54:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/case.rs:45:5: 54:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<internals::case::RenameRule, internals::case::ParseError<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:45:46: 45:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/case.rs:45:37: 45:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/case.rs:45:21: 45:35 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:45:21: 45:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:45:21: 45:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(&'{erased} str, internals::case::RenameRule)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:351 ~ serde_derive_internals[1ebf]::internals::case::RENAME_RULES),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} &'{erased} [(&'{erased} str, internals::case::RenameRule)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:45:5: 54:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, internals::case::RenameRule)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:9: 50:10 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:46:13: 46:25 (#470),
                    },
                ),
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:14: 46:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde_derive_internals/src/case.rs:46:29: 46:41 (#469),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/case.rs:46:13: 46:25 (#470),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::case::RenameRule,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:46:20: 46:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/case.rs:47:13: 49:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:47:16: 47:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/case.rs:47:13: 49:14 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:47:16: 47:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/case.rs:47:13: 49:14 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:47:34: 47:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/case.rs:47:13: 49:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:47:40: 49:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::case::RenameRule,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:48:27: 48:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: internals::case::ParseError<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:51:13: 53:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/case.rs:52:22: 52:36 (#0),
            scope: scope[0],
        },
    },
]