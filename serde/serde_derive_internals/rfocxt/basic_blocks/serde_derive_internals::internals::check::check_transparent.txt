[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:371:9: 371:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = internals::attr::Container::transparent(move _6) -> [return: bb1, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:371:9: 371:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:375:8: 375:30 (#0),
                    scope: scope[0],
                },
                kind: _11 = internals::attr::Container::type_from(move _12) -> [return: bb4, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _0 = const (),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &_11,
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:375:8: 375:40 (#0),
                    scope: scope[0],
                },
                kind: _9 = std::option::Option::<&syn::Type>::is_some(move _10) -> [return: bb5, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:375:8: 375:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
            StorageLive(_15),
            _15 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:376:9: 379:10 (#0),
                    scope: scope[0],
                },
                kind: _13 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _14, move _15, const "#[serde(transparent)] is not allowed with #[serde(from = \"...\")]") -> [return: bb7, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:375:5: 380:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:375:5: 380:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:382:8: 382:34 (#0),
                    scope: scope[0],
                },
                kind: _19 = internals::attr::Container::type_try_from(move _20) -> [return: bb10, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &_19,
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:382:8: 382:44 (#0),
                    scope: scope[0],
                },
                kind: _17 = std::option::Option::<&syn::Type>::is_some(move _18) -> [return: bb11, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:382:8: 382:44 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
            StorageLive(_23),
            _23 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:383:9: 386:10 (#0),
                    scope: scope[0],
                },
                kind: _21 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _22, move _23, const "#[serde(transparent)] is not allowed with #[serde(try_from = \"...\")]") -> [return: bb13, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:382:5: 387:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:382:5: 387:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &((*_2).1: internals::attr::Container),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:389:8: 389:30 (#0),
                    scope: scope[0],
                },
                kind: _27 = internals::attr::Container::type_into(move _28) -> [return: bb16, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &_27,
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:389:8: 389:40 (#0),
                    scope: scope[0],
                },
                kind: _25 = std::option::Option::<&syn::Type>::is_some(move _26) -> [return: bb17, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:389:8: 389:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _25) -> [0: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_1),
            StorageLive(_31),
            _31 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:390:9: 393:10 (#0),
                    scope: scope[0],
                },
                kind: _29 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _30, move _31, const "#[serde(transparent)] is not allowed with #[serde(into = \"...\")]") -> [return: bb19, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:389:5: 394:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:389:5: 394:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut ((*_2).2: internals::ast::Data<'_>),
            PlaceMention(_33),
            _35 = discriminant((*_33)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:396:18: 396:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:396:24: 396:38 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:397:9: 397:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = discriminant((((*_33) as Struct).0: internals::ast::Style)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:396:18: 396:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _34) -> [3: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = &mut (((*_33) as Struct).1: std::vec::Vec<internals::ast::Field<'_>>),
            _32 = move _44,
            StorageDead(_44),
            FakeRead(ForLet(None), _32),
            StorageDead(_33),
            StorageLive(_45),
            _45 = std::option::Option::<&mut internals::ast::Field<'_>>::None,
            FakeRead(ForLet(None), _45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = move _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                    scope: scope[3],
                },
                kind: _47 = <&mut std::vec::Vec<internals::ast::Field<'_>> as std::iter::IntoIterator>::into_iter(move _48) -> [return: bb31, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:404:9: 404:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
            StorageLive(_39),
            _39 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:398:13: 401:14 (#0),
                    scope: scope[0],
                },
                kind: _37 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _38, move _39, const "#[serde(transparent)] is not allowed on an enum") -> [return: bb28, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:402:13: 402:19 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_1),
            StorageLive(_43),
            _43 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:405:13: 408:14 (#0),
                    scope: scope[0],
                },
                kind: _41 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _42, move _43, const "#[serde(transparent)] is not allowed on a unit struct") -> [return: bb30, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:409:13: 409:19 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            PlaceMention(_47),
            StorageLive(_49),
            _49 = move _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
                    scope: scope[4],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb33, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &mut _49,
            _53 = &mut (*_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                    scope: scope[4],
                },
                kind: _52 = <std::slice::IterMut<'_, internals::ast::Field<'_>> as std::iter::Iterator>::next(move _53) -> [return: bb34, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            PlaceMention(_52),
            _55 = discriminant(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                    scope: scope[4],
                },
                kind: switchInt(move _55) -> [0: bb36, 1: bb37, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = move ((_52 as Some).0: &mut internals::ast::Field<'_>),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &(*_57),
            StorageLive(_60),
            _60 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:417:12: 417:44 (#0),
                    scope: scope[5],
                },
                kind: _58 = internals::check::allow_transparent(move _59, move _60) -> [return: bb39, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = const (),
            StorageDead(_54),
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            PlaceMention(_45),
            _70 = discriminant(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:429:5: 429:28 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _70) -> [0: bb49, 1: bb48, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:417:12: 417:44 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _58) -> [0: bb45, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &_45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:418:16: 418:43 (#0),
                    scope: scope[5],
                },
                kind: _62 = std::option::Option::<&mut internals::ast::Field<'_>>::is_some(move _63) -> [return: bb41, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:418:16: 418:43 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _62) -> [0: bb44, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &(*_1),
            StorageLive(_67),
            _67 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:419:17: 422:18 (#0),
                    scope: scope[5],
                },
                kind: _65 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _66, move _67, const "#[serde(transparent)] requires struct to have at most one transparent field") -> [return: bb43, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_65),
            _0 = const (),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_54),
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _61 = const (),
            StorageDead(_62),
            StorageDead(_61),
            StorageLive(_68),
            StorageLive(_69),
            _69 = move _57,
            _68 = std::option::Option::<&mut internals::ast::Field<'_>>::Some(move _69),
            StorageDead(_69),
            _45 = move _68,
            StorageDead(_68),
            _51 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:417:9: 426:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            _51 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:417:9: 426:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_54),
            StorageDead(_52),
            StorageDead(_51),
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
                    scope: scope[4],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:429:11: 429:28 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:430:9: 430:32 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_3),
            _73 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:431:17: 431:29 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _73) -> [0: bb53, 1: bb54, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = move ((_45 as Some).0: &mut internals::ast::Field<'_>),
            StorageLive(_72),
            _72 = &mut ((*_71).1: internals::attr::Field),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:430:36: 430:78 (#0),
                    scope: scope[6],
                },
                kind: _0 = internals::attr::Field::mark_transparent(move _72) -> [return: bb51, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:430:77: 430:78 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:431:23: 431:29 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:432:13: 432:30 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            StorageLive(_78),
            _78 = &(*_1),
            StorageLive(_79),
            _79 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:439:17: 442:18 (#0),
                    scope: scope[3],
                },
                kind: _77 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _78, move _79, const "#[serde(transparent)] requires at least one field that is neither skipped nor has a default") -> [return: bb57, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            StorageLive(_75),
            _75 = &(*_1),
            StorageLive(_76),
            _76 = ((*_2).4: &syn::DeriveInput),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:433:17: 436:18 (#0),
                    scope: scope[3],
                },
                kind: _74 = internals::ctxt::Ctxt::error_spanned_by::<&syn::DeriveInput, &str>(move _75, move _76, const "#[serde(transparent)] requires at least one field that is not skipped") -> [return: bb56, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
            StorageDead(_74),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:432:34: 437:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:438:36: 443:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:446:2: 446:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:446:2: 446:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:370:1: 446:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:370:70: 370:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:370:26: 370:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:370:22: 370:24 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:370:22: 370:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:370:22: 370:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:370:39: 370:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:370:33: 370:37 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:370:33: 370:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:370:33: 370:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:370:63: 370:69 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:370:55: 370:61 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:370:55: 370:61 (#0),
                    },
                ),
            ),
        ),
        ty: internals::Derive,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:370:55: 370:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:371:5: 373:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:371:9: 371:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:371:9: 371:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:371:34: 373:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:375:5: 380:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:375:8: 375:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:375:8: 375:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:375:8: 375:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:375:8: 375:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:376:9: 379:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:376:9: 376:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:377:13: 377:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:382:5: 387:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:382:8: 382:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:382:8: 382:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:382:8: 382:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:382:8: 382:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:383:9: 386:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:383:9: 383:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:384:13: 384:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:389:5: 394:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:389:8: 389:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:389:8: 389:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} syn::Type>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:389:8: 389:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Container,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:389:8: 389:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:390:9: 393:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:390:9: 390:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:391:13: 391:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:396:18: 412:6 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:396:9: 396:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:396:9: 396:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:396:24: 396:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:404:22: 404:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:397:9: 397:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:397:26: 403:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:398:13: 401:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:398:13: 398:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:399:17: 399:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:404:41: 410:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:405:13: 408:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:405:13: 405:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:406:17: 406:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                serde_derive_internals/src/check.rs:396:24: 396:38 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:411:9: 411:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:411:25: 411:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:414:33: 414:37 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:414:9: 414:30 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:414:9: 414:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                    },
                ),
            ),
        ),
        ty: std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:370:1: 446:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:5: 427:6 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _52,
                                ),
                                serde_derive_internals/src/check.rs:416:18: 416:24 (#552),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:416:9: 416:14 (#553),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:416:9: 416:14 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:417:9: 426:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:417:12: 417:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:417:9: 426:10 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:417:30: 417:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:417:9: 426:10 (#0),
                },
            ),
        ),
        ty: internals::Derive,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:417:37: 417:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:418:13: 424:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:418:16: 418:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:418:16: 418:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:418:44: 424:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:419:17: 422:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:419:17: 419:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:420:21: 420:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:425:33: 425:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:425:38: 425:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:430:9: 430:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                serde_derive_internals/src/check.rs:429:11: 429:28 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:430:9: 430:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:430:14: 430:31 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:429:5: 445:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:430:36: 430:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:432:13: 432:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:433:17: 436:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:433:17: 433:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:434:21: 434:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:439:17: 442:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:439:17: 439:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::DeriveInput,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:440:21: 440:34 (#0),
            scope: scope[0],
        },
    },
]