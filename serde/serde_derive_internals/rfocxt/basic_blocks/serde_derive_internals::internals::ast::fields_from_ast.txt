[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:192:5: 193:16 (#0),
                    scope: scope[0],
                },
                kind: _7 = syn::punctuated::Punctuated::<syn::Field, syn::token::Comma>::iter(move _8) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:192:5: 194:21 (#0),
                    scope: scope[0],
                },
                kind: _6 = <syn::punctuated::Iter<'_, syn::Field> as std::iter::Iterator>::enumerate(move _7) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            StorageLive(_11),
            _11 = &_3,
            StorageLive(_12),
            _12 = &(*_4),
            _9 = {closure@serde_derive_internals/src/ast.rs:195:14: 195:26} { cx: move _10, attrs: move _11, container_default: move _12 },
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:192:5: 203:11 (#0),
                    scope: scope[0],
                },
                kind: _5 = <std::iter::Enumerate<syn::punctuated::Iter<'_, syn::Field>> as std::iter::Iterator>::map::<internals::ast::Field<'_>, {closure@serde_derive_internals/src/ast.rs:195:14: 195:26}>(move _6, move _9) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                    scope: scope[0],
                },
                kind: _0 = <std::iter::Map<std::iter::Enumerate<syn::punctuated::Iter<'_, syn::Field>>, {closure@serde_derive_internals/src/ast.rs:195:14: 195:26}> as std::iter::Iterator>::collect::<std::vec::Vec<internals::ast::Field<'_>>>(move _5) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:205:2: 205:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:204:18: 204:19 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:203:10: 203:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:194:20: 194:21 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/ast.rs:186:1: 205:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:191:6: 191:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:187:9: 187:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:187:5: 187:7 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:187:5: 187:7 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:187:5: 187:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:188:13: 188:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:188:5: 188:11 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:188:5: 188:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Field, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:188:5: 188:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:189:12: 189:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:189:5: 189:10 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:189:5: 189:10 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<&'{erased} internals::attr::Variant>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:189:5: 189:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/ast.rs:190:24: 190:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/ast.rs:190:5: 190:22 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/ast.rs:190:5: 190:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:190:5: 190:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: std::iter::Map<std::iter::Enumerate<syn::punctuated::Iter<'{erased}, syn::Field>>, Closure(DefId(0:61 ~ serde_derive_internals[1ebf]::internals::ast::fields_from_ast::{closure#0}), [i16, Binder { value: extern "RustCall" fn(((usize, &'{erased} syn::Field),)) -> internals::ast::Field<'{erased}>, bound_vars: [] }, (&'{erased} internals::ctxt::Ctxt, &'{erased} std::option::Option<&'{erased} internals::attr::Variant>, &'{erased} internals::attr::Default)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:192:5: 203:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: std::iter::Enumerate<syn::punctuated::Iter<'{erased}, syn::Field>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:192:5: 194:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: syn::punctuated::Iter<'{erased}, syn::Field>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:192:5: 193:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: &'{erased} syn::punctuated::Punctuated<syn::Field, syn::token::Comma>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:192:5: 192:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:61 ~ serde_derive_internals[1ebf]::internals::ast::fields_from_ast::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn(((usize, &'{erased} syn::Field),)) -> internals::ast::Field<'{erased}>, bound_vars: [] },
                (&'{erased} internals::ctxt::Ctxt, &'{erased} std::option::Option<&'{erased} internals::attr::Variant>, &'{erased} internals::attr::Default),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:195:14: 203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:195:14: 203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} internals::attr::Variant>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:195:14: 203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde_derive_internals/src/ast.rs:192:5: 204:19 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Default,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/ast.rs:195:14: 203:10 (#0),
            scope: scope[0],
        },
    },
]