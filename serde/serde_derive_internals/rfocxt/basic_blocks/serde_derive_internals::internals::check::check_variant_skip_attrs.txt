[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_2).2: internals::ast::Data<'_>),
            PlaceMention(_4),
            _5 = discriminant((*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:227:20: 227:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:227:26: 227:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:228:9: 228:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:295:2: 295:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(((*_4) as Enum).0: std::vec::Vec<internals::ast::Variant<'_>>),
            _3 = _6,
            StorageDead(_6),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                    scope: scope[1],
                },
                kind: _8 = <&std::vec::Vec<internals::ast::Variant<'_>> as std::iter::IntoIterator>::into_iter(move _9) -> [return: bb5, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                    scope: scope[3],
                },
                kind: _13 = <std::slice::Iter<'_, internals::ast::Variant<'_>> as std::iter::Iterator>::next(move _14) -> [return: bb8, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_13 as Some).0: &internals::ast::Variant<'_>),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &((*_18).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:233:12: 233:42 (#0),
                    scope: scope[4],
                },
                kind: _22 = internals::attr::Variant::serialize_with(move _23) -> [return: bb13, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:295:2: 295:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = &_22,
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:233:12: 233:52 (#0),
                    scope: scope[4],
                },
                kind: _20 = std::option::Option::<&syn::ExprPath>::is_some(move _21) -> [return: bb14, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:233:12: 233:52 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _20) -> [0: bb59, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_18).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:234:16: 234:48 (#0),
                    scope: scope[4],
                },
                kind: _25 = internals::attr::Variant::skip_serializing(move _26) -> [return: bb16, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:234:16: 234:48 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _25) -> [0: bb24, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_1),
            StorageLive(_29),
            _29 = ((*_18).4: &syn::Variant),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = [const "variant `", const "` cannot have both #[serde(serialize_with)] and #[serde(skip_serializing)]"],
            _35 = &_36,
            _34 = &(*_35),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &((*_18).0: proc_macro2::Ident),
            _41 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:238:35: 238:37 (#89),
                    scope: scope[4],
                },
                kind: _40 = core::fmt::rt::Argument::<'_>::new_display::<proc_macro2::Ident>(move _41) -> [return: bb18, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _39 = [move _40],
            StorageDead(_40),
            _38 = &_39,
            _37 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#89),
                    scope: scope[4],
                },
                kind: _33 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(move _34, move _37) -> [return: bb19, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#88),
                    scope: scope[4],
                },
                kind: _32 = std::fmt::format(move _33) -> [return: bb20, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            FakeRead(ForLet(None), _32),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_35),
            _31 = move _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:9: 130:10 (#88),
                    scope: scope[4],
                },
                kind: drop(_32) -> [return: bb21, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#88),
                    scope: scope[4],
                },
                kind: _30 = std::hint::must_use::<std::string::String>(move _31) -> [return: bb22, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:235:17: 241:18 (#0),
                    scope: scope[4],
                },
                kind: _27 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Variant, std::string::String>(move _28, move _29, move _30) -> [return: bb23, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:234:13: 242:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:234:13: 242:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &((*_18).3: std::vec::Vec<internals::ast::Field<'_>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                    scope: scope[4],
                },
                kind: _43 = <&std::vec::Vec<internals::ast::Field<'_>> as std::iter::IntoIterator>::into_iter(move _44) -> [return: bb26, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            StorageLive(_45),
            _45 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                    scope: scope[6],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb28, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _45,
            _48 = &mut (*_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                    scope: scope[6],
                },
                kind: _47 = <std::slice::Iter<'_, internals::ast::Field<'_>> as std::iter::Iterator>::next(move _48) -> [return: bb29, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            PlaceMention(_47),
            _50 = discriminant(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                    scope: scope[6],
                },
                kind: switchInt(move _50) -> [0: bb31, 1: bb32, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = ((_47 as Some).0: &internals::ast::Field<'_>),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &((*_52).0: syn::Member),
            _54 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:245:30: 245:59 (#0),
                    scope: scope[7],
                },
                kind: _53 = internals::check::member_message(move _54) -> [return: bb34, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const (),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:233:9: 267:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            FakeRead(ForLet(None), _53),
            StorageDead(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &((*_52).1: internals::attr::Field),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:247:20: 247:50 (#0),
                    scope: scope[8],
                },
                kind: _57 = internals::attr::Field::skip_serializing(move _58) -> [return: bb35, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:247:20: 247:50 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _57) -> [0: bb44, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &(*_1),
            StorageLive(_61),
            _61 = ((*_18).4: &syn::Variant),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = [const "variant `", const "` cannot have both #[serde(serialize_with)] and a field ", const " marked with #[serde(skip_serializing)]"],
            _67 = &_68,
            _66 = &(*_67),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &((*_18).0: proc_macro2::Ident),
            _73 = &(*_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:251:39: 251:41 (#91),
                    scope: scope[8],
                },
                kind: _72 = core::fmt::rt::Argument::<'_>::new_display::<proc_macro2::Ident>(move _73) -> [return: bb37, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = &_53,
            _76 = &(*_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:251:97: 251:99 (#91),
                    scope: scope[8],
                },
                kind: _75 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _76) -> [return: bb38, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            _71 = [move _72, move _75],
            StorageDead(_75),
            StorageDead(_72),
            _70 = &_71,
            _69 = &(*_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#91),
                    scope: scope[8],
                },
                kind: _65 = std::fmt::Arguments::<'_>::new_v1::<3, 2>(move _66, move _69) -> [return: bb39, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#90),
                    scope: scope[8],
                },
                kind: _64 = std::fmt::format(move _65) -> [return: bb40, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            FakeRead(ForLet(None), _64),
            StorageDead(_77),
            StorageDead(_74),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_68),
            StorageDead(_67),
            _63 = move _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:9: 130:10 (#90),
                    scope: scope[8],
                },
                kind: drop(_64) -> [return: bb41, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#90),
                    scope: scope[8],
                },
                kind: _62 = std::hint::must_use::<std::string::String>(move _63) -> [return: bb42, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:248:21: 254:22 (#0),
                    scope: scope[8],
                },
                kind: _59 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Variant, std::string::String>(move _60, move _61, move _62) -> [return: bb43, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
            _56 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:247:17: 255:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            _56 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:247:17: 255:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &((*_52).1: internals::attr::Field),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:257:20: 257:53 (#0),
                    scope: scope[8],
                },
                kind: _80 = internals::attr::Field::skip_serializing_if(move _81) -> [return: bb46, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = &_80,
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:257:20: 257:63 (#0),
                    scope: scope[8],
                },
                kind: _78 = std::option::Option::<&syn::ExprPath>::is_some(move _79) -> [return: bb47, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:257:20: 257:63 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _78) -> [0: bb56, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &(*_1),
            StorageLive(_84),
            _84 = ((*_18).4: &syn::Variant),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = [const "variant `", const "` cannot have both #[serde(serialize_with)] and a field ", const " marked with #[serde(skip_serializing_if)]"],
            _90 = &_91,
            _89 = &(*_90),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &((*_18).0: proc_macro2::Ident),
            _96 = &(*_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:261:39: 261:41 (#93),
                    scope: scope[8],
                },
                kind: _95 = core::fmt::rt::Argument::<'_>::new_display::<proc_macro2::Ident>(move _96) -> [return: bb49, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &_53,
            _99 = &(*_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:261:97: 261:99 (#93),
                    scope: scope[8],
                },
                kind: _98 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _99) -> [return: bb50, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            _94 = [move _95, move _98],
            StorageDead(_98),
            StorageDead(_95),
            _93 = &_94,
            _92 = &(*_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#93),
                    scope: scope[8],
                },
                kind: _88 = std::fmt::Arguments::<'_>::new_v1::<3, 2>(move _89, move _92) -> [return: bb51, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#92),
                    scope: scope[8],
                },
                kind: _87 = std::fmt::format(move _88) -> [return: bb52, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            FakeRead(ForLet(None), _87),
            StorageDead(_100),
            StorageDead(_97),
            StorageDead(_94),
            StorageDead(_93),
            StorageDead(_91),
            StorageDead(_90),
            _86 = move _87,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:9: 130:10 (#92),
                    scope: scope[8],
                },
                kind: drop(_87) -> [return: bb53, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#92),
                    scope: scope[8],
                },
                kind: _85 = std::hint::must_use::<std::string::String>(move _86) -> [return: bb54, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:258:21: 264:22 (#0),
                    scope: scope[8],
                },
                kind: _82 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Variant, std::string::String>(move _83, move _84, move _85) -> [return: bb55, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:266:13: 266:14 (#0),
                    scope: scope[7],
                },
                kind: drop(_53) -> [return: bb58, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                    scope: scope[6],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:233:9: 267:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &((*_18).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:269:12: 269:44 (#0),
                    scope: scope[4],
                },
                kind: _103 = internals::attr::Variant::deserialize_with(move _104) -> [return: bb61, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _102 = &_103,
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:269:12: 269:54 (#0),
                    scope: scope[4],
                },
                kind: _101 = std::option::Option::<&syn::ExprPath>::is_some(move _102) -> [return: bb62, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:269:12: 269:54 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _101) -> [0: bb95, otherwise: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &((*_18).1: internals::attr::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:270:16: 270:50 (#0),
                    scope: scope[4],
                },
                kind: _106 = internals::attr::Variant::skip_deserializing(move _107) -> [return: bb64, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:270:16: 270:50 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _106) -> [0: bb72, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &(*_1),
            StorageLive(_110),
            _110 = ((*_18).4: &syn::Variant),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            _117 = [const "variant `", const "` cannot have both #[serde(deserialize_with)] and #[serde(skip_deserializing)]"],
            _116 = &_117,
            _115 = &(*_116),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            _123 = &((*_18).0: proc_macro2::Ident),
            _122 = &(*_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:274:35: 274:37 (#95),
                    scope: scope[4],
                },
                kind: _121 = core::fmt::rt::Argument::<'_>::new_display::<proc_macro2::Ident>(move _122) -> [return: bb66, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            _120 = [move _121],
            StorageDead(_121),
            _119 = &_120,
            _118 = &(*_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#95),
                    scope: scope[4],
                },
                kind: _114 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(move _115, move _118) -> [return: bb67, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageDead(_115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#94),
                    scope: scope[4],
                },
                kind: _113 = std::fmt::format(move _114) -> [return: bb68, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            FakeRead(ForLet(None), _113),
            StorageDead(_123),
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_117),
            StorageDead(_116),
            _112 = move _113,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:9: 130:10 (#94),
                    scope: scope[4],
                },
                kind: drop(_113) -> [return: bb69, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#94),
                    scope: scope[4],
                },
                kind: _111 = std::hint::must_use::<std::string::String>(move _112) -> [return: bb70, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:271:17: 277:18 (#0),
                    scope: scope[4],
                },
                kind: _108 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Variant, std::string::String>(move _109, move _110, move _111) -> [return: bb71, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_109),
            StorageDead(_108),
            _105 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:270:13: 278:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            _105 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:270:13: 278:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
            StorageLive(_124),
            StorageLive(_125),
            _125 = &((*_18).3: std::vec::Vec<internals::ast::Field<'_>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                    scope: scope[4],
                },
                kind: _124 = <&std::vec::Vec<internals::ast::Field<'_>> as std::iter::IntoIterator>::into_iter(move _125) -> [return: bb74, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            PlaceMention(_124),
            StorageLive(_126),
            _126 = move _124,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                    scope: scope[12],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                    scope: scope[12],
                },
                kind: falseUnwind -> [real: bb76, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            _130 = &mut _126,
            _129 = &mut (*_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                    scope: scope[12],
                },
                kind: _128 = <std::slice::Iter<'_, internals::ast::Field<'_>> as std::iter::Iterator>::next(move _129) -> [return: bb77, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            PlaceMention(_128),
            _131 = discriminant(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                    scope: scope[12],
                },
                kind: switchInt(move _131) -> [0: bb79, 1: bb80, otherwise: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb81, imaginary: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_133),
            _133 = ((_128 as Some).0: &internals::ast::Field<'_>),
            StorageLive(_134),
            StorageLive(_135),
            _135 = &((*_133).1: internals::attr::Field),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:281:20: 281:52 (#0),
                    scope: scope[13],
                },
                kind: _134 = internals::attr::Field::skip_deserializing(move _135) -> [return: bb82, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
            StorageDead(_130),
            StorageDead(_128),
            StorageDead(_127),
            StorageDead(_126),
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:281:20: 281:52 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _134) -> [0: bb93, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            StorageLive(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &((*_133).0: syn::Member),
            _137 = &(*_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:282:34: 282:63 (#0),
                    scope: scope[13],
                },
                kind: _136 = internals::check::member_message(move _137) -> [return: bb84, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            FakeRead(ForLet(None), _136),
            StorageDead(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = &(*_1),
            StorageLive(_141),
            _141 = ((*_18).4: &syn::Variant),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            _148 = [const "variant `", const "` cannot have both #[serde(deserialize_with)] and a field ", const " marked with #[serde(skip_deserializing)]"],
            _147 = &_148,
            _146 = &(*_147),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = &((*_18).0: proc_macro2::Ident),
            _153 = &(*_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:287:39: 287:41 (#97),
                    scope: scope[14],
                },
                kind: _152 = core::fmt::rt::Argument::<'_>::new_display::<proc_macro2::Ident>(move _153) -> [return: bb85, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageLive(_155),
            StorageLive(_156),
            StorageLive(_157),
            _157 = &_136,
            _156 = &(*_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:287:99: 287:101 (#97),
                    scope: scope[14],
                },
                kind: _155 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _156) -> [return: bb86, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            _151 = [move _152, move _155],
            StorageDead(_155),
            StorageDead(_152),
            _150 = &_151,
            _149 = &(*_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#97),
                    scope: scope[14],
                },
                kind: _145 = std::fmt::Arguments::<'_>::new_v1::<3, 2>(move _146, move _149) -> [return: bb87, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#96),
                    scope: scope[14],
                },
                kind: _144 = std::fmt::format(move _145) -> [return: bb88, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            FakeRead(ForLet(None), _144),
            StorageDead(_157),
            StorageDead(_154),
            StorageDead(_151),
            StorageDead(_150),
            StorageDead(_148),
            StorageDead(_147),
            _143 = move _144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:9: 130:10 (#96),
                    scope: scope[14],
                },
                kind: drop(_144) -> [return: bb89, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#96),
                    scope: scope[14],
                },
                kind: _142 = std::hint::must_use::<std::string::String>(move _143) -> [return: bb90, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:284:21: 290:22 (#0),
                    scope: scope[14],
                },
                kind: _139 = internals::ctxt::Ctxt::error_spanned_by::<&syn::Variant, std::string::String>(move _140, move _141, move _142) -> [return: bb91, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            StorageDead(_140),
            StorageDead(_139),
            _127 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:291:17: 291:18 (#0),
                    scope: scope[13],
                },
                kind: drop(_136) -> [return: bb92, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:281:17: 291:18 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            _127 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:281:17: 291:18 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageDead(_133),
            StorageDead(_130),
            StorageDead(_128),
            StorageDead(_127),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                    scope: scope[12],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:295:2: 295:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:290:21: 290:22 (#0),
                    scope: scope[14],
                },
                kind: drop(_142) -> [return: bb100, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:10: 130:11 (#96),
                    scope: scope[14],
                },
                kind: drop(_143) -> [return: bb100, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:291:17: 291:18 (#0),
                    scope: scope[13],
                },
                kind: drop(_136) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:277:17: 277:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_111) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:10: 130:11 (#94),
                    scope: scope[4],
                },
                kind: drop(_112) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:264:21: 264:22 (#0),
                    scope: scope[8],
                },
                kind: drop(_85) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:10: 130:11 (#92),
                    scope: scope[8],
                },
                kind: drop(_86) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:254:21: 254:22 (#0),
                    scope: scope[8],
                },
                kind: drop(_62) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:10: 130:11 (#90),
                    scope: scope[8],
                },
                kind: drop(_63) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:266:13: 266:14 (#0),
                    scope: scope[7],
                },
                kind: drop(_53) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:241:17: 241:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_30) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:130:10: 130:11 (#88),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde_derive_internals/src/check.rs:226:1: 295:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:226:57: 226:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:226:33: 226:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:226:29: 226:31 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:226:29: 226:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:226:29: 226:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde_derive_internals/src/check.rs:226:46: 226:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:226:40: 226:44 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:226:40: 226:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Container<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:226:40: 226:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:227:20: 230:6 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:227:9: 227:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:227:9: 227:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ast::Data<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:227:26: 227:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:228:9: 228:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde_derive_internals/src/check.rs:227:26: 227:36 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:228:9: 228:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:228:20: 228:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:229:31: 229:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Variant<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:226:1: 295:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Variant<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:5: 294:6 (#518),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                serde_derive_internals/src/check.rs:232:20: 232:28 (#519),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:232:9: 232:16 (#520),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Variant<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:232:9: 232:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:233:9: 267:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:233:12: 233:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:233:12: 233:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:233:12: 233:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:233:12: 233:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:234:13: 242:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:234:16: 234:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:234:16: 234:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:235:17: 241:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:235:17: 235:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:236:21: 236:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:36: 130:10 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#88),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#88),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#88),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:238:25: 238:112 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:238:25: 238:112 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:238:25: 238:112 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:238:35: 238:37 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:239:25: 239:38 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:239:25: 239:38 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:13: 266:14 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                serde_derive_internals/src/check.rs:244:26: 244:41 (#524),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:244:17: 244:22 (#525),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:244:17: 244:22 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:245:30: 245:59 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:245:21: 245:27 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:245:21: 245:27 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Member,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:245:45: 245:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Member,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:245:45: 245:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:247:17: 255:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:247:20: 247:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:247:20: 247:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:248:21: 254:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:248:21: 248:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:249:25: 249:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:36: 130:10 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#90),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#90),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#90),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:251:29: 251:139 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:251:29: 251:139 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:251:29: 251:139 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:251:39: 251:41 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:252:29: 252:42 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:252:29: 252:42 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:251:97: 251:99 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:252:44: 252:50 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:252:44: 252:50 (#91),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:257:20: 257:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:257:20: 257:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:257:20: 257:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:257:17: 265:18 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:257:20: 257:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:258:21: 264:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:258:21: 258:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:259:25: 259:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:36: 130:10 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#92),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#92),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#92),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:261:29: 261:142 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:261:29: 261:142 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:261:29: 261:142 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:261:39: 261:41 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:262:29: 262:42 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:262:29: 262:42 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:261:97: 261:99 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:262:44: 262:50 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:262:44: 262:50 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:269:12: 269:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:269:12: 269:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} syn::ExprPath>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:269:12: 269:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:269:9: 293:10 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:269:12: 269:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:270:13: 278:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:270:16: 270:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::attr::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:270:16: 270:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:271:17: 277:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:271:17: 271:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:272:21: 272:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:36: 130:10 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#94),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#94),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#94),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:274:25: 274:116 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:274:25: 274:116 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:274:25: 274:116 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:274:35: 274:37 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:275:25: 275:38 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:275:25: 275:38 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<internals::ast::Field<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _124,
                                ),
                                serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, internals::ast::Field<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:13: 292:14 (#530),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _128,
                                ),
                                serde_derive_internals/src/check.rs:280:26: 280:41 (#531),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:280:17: 280:22 (#532),
                    },
                ),
            ),
        ),
        ty: &'{erased} internals::ast::Field<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:280:17: 280:22 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:281:17: 291:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:281:20: 281:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde_derive_internals/src/check.rs:281:17: 291:18 (#0),
                },
            ),
        ),
        ty: &'{erased} internals::attr::Field,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:281:20: 281:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde_derive_internals/src/check.rs:282:34: 282:63 (#0),
                            ),
                        ),
                        pat_span: serde_derive_internals/src/check.rs:282:25: 282:31 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:282:25: 282:31 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Member,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:282:49: 282:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Member,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:282:49: 282:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:284:21: 290:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} internals::ctxt::Ctxt,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:284:21: 284:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} syn::Variant,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:285:25: 285:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:9: 130:11 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:127:36: 130:10 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:23: 128:84 (#96),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#96),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:17: 128:20 (#96),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:287:29: 287:143 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:287:29: 287:143 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:287:29: 287:143 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:128:43: 128:83 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:287:39: 287:41 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:288:29: 288:42 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:288:29: 288:42 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:287:99: 287:101 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:288:44: 288:50 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde_derive_internals/src/check.rs:288:44: 288:50 (#97),
            scope: scope[0],
        },
    },
]