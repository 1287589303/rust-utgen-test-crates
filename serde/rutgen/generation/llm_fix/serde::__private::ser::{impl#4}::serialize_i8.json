{
  "name": "serde::__private::ser::{impl#4}::serialize_i8",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1025:5:1027:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Integer))\n"
      ],
      "input_infer": "i8 values: any integer value within the range of -128 to 127\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(-128);",
                "}"
              ],
              "oracle": [
                "    let result = serializer.serialize_i8(-128);",
                "    assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(-128);",
                "    let result = serializer.serialize_i8(-128);",
                "    assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(0);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "    impl SerializeMap for DummyMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize, V: Serialize { Err(Error) }",
                "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
                "        where K: Serialize { Err(Error) }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i8(127);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}