{
  "name": "serde::__private::de::content::{impl#16}::deserialize_bool",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:1172:9:1180:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.content matches Content::Bool(v) at line 1177 is false\n",
        "precondition: self.content matches _ at line 1178 is true\n",
        "expected return value/type: Err(self.invalid_type(&visitor))\n"
      ],
      "input_infer": "self.content must be of types other than Content::Bool, such as Content::U8, Content::I32, Content::String, etc.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::U8(42);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "    ",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_bool(TestVisitor), Err(deserializer.invalid_type(&TestVisitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::U8(42);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "    ",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "    assert_eq!(deserializer.deserialize_bool(TestVisitor), Err(deserializer.invalid_type(&TestVisitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::I32(100);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(deserializer.deserialize_bool(TestVisitor), Err(_)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::I32(100);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "    assert!(matches!(deserializer.deserialize_bool(TestVisitor), Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::String(String::from(\"test\"));",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(deserializer.deserialize_bool(TestVisitor), Err(_)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor<'_> for TestVisitor {",
                "        type Value = ();",
                "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
                "            unreachable!()",
                "        }",
                "        // Other required methods of Visitor would remain unimplemented.",
                "    }",
                "",
                "    let content = Content::String(String::from(\"test\"));",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: PhantomData::<serde::value::Error>,",
                "    };",
                "",
                "    let _ = deserializer.deserialize_bool(TestVisitor);",
                "    assert!(matches!(deserializer.deserialize_bool(TestVisitor), Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.content matches Content::Bool(v) at line 1176 is true\n",
        "precondition: self.content matches Content::Bool(v) at line 1176 is true\n"
      ],
      "input_infer": "self.content is of type Content::Bool with a value of true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Visitor {",
                "        value: bool,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for Visitor {",
                "        type Value = bool;",
                "",
                "        fn visit_bool(self, value: bool) -> Result<Self::Value, crate::de::Error> {",
                "            Ok(value)",
                "        }",
                "",
                "        // Other required methods can be omitted as they won't be called in this test",
                "    }",
                "",
                "    let content = Content::Bool(true);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: std::marker::PhantomData,",
                "    };",
                "    let visitor = Visitor { value: true };",
                "    let _ = deserializer.deserialize_bool(visitor);",
                "}"
              ],
              "oracle": [
                "    let content = Content::Bool(true);",
                "    let deserializer = ContentDeserializer { content, err: std::marker::PhantomData };",
                "    let visitor = Visitor { value: true };",
                "    assert_eq!(deserializer.deserialize_bool(visitor), Ok(true));",
                "    let visitor_false = Visitor { value: false };",
                "    assert_eq!(deserializer.deserialize_bool(visitor_false), Ok(true));"
              ],
              "code": [
                "{",
                "    struct Visitor {",
                "        value: bool,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for Visitor {",
                "        type Value = bool;",
                "",
                "        fn visit_bool(self, value: bool) -> Result<Self::Value, crate::de::Error> {",
                "            Ok(value)",
                "        }",
                "",
                "        // Other required methods can be omitted as they won't be called in this test",
                "    }",
                "",
                "    let content = Content::Bool(true);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: std::marker::PhantomData,",
                "    };",
                "    let visitor = Visitor { value: true };",
                "    let _ = deserializer.deserialize_bool(visitor);",
                "    let content = Content::Bool(true);",
                "    let deserializer = ContentDeserializer { content, err: std::marker::PhantomData };",
                "    let visitor = Visitor { value: true };",
                "    assert_eq!(deserializer.deserialize_bool(visitor), Ok(true));",
                "    let visitor_false = Visitor { value: false };",
                "    assert_eq!(deserializer.deserialize_bool(visitor_false), Ok(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Visitor {",
                "        value: bool,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for Visitor {",
                "        type Value = bool;",
                "",
                "        fn visit_bool(self, value: bool) -> Result<Self::Value, crate::de::Error> {",
                "            Ok(value)",
                "        }",
                "",
                "        // Other required methods can be omitted as they won't be called in this test",
                "    }",
                "",
                "    let content = Content::Bool(false);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: std::marker::PhantomData,",
                "    };",
                "    let visitor = Visitor { value: false };",
                "    let _ = deserializer.deserialize_bool(visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_bool(visitor), Ok(false));"
              ],
              "code": [
                "{",
                "    struct Visitor {",
                "        value: bool,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for Visitor {",
                "        type Value = bool;",
                "",
                "        fn visit_bool(self, value: bool) -> Result<Self::Value, crate::de::Error> {",
                "            Ok(value)",
                "        }",
                "",
                "        // Other required methods can be omitted as they won't be called in this test",
                "    }",
                "",
                "    let content = Content::Bool(false);",
                "    let deserializer = ContentDeserializer {",
                "        content,",
                "        err: std::marker::PhantomData,",
                "    };",
                "    let visitor = Visitor { value: false };",
                "    let _ = deserializer.deserialize_bool(visitor);",
                "    assert_eq!(deserializer.deserialize_bool(visitor), Ok(false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}