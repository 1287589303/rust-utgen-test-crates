{
  "name": "serde::__private::ser::{impl#5}::end",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1216:5:1218:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self should be an instance of FlatMapSerializeMap with a valid underlying SerializeMap that handles Result<(), Self::Error> correctly.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = ();",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock_map = MockSerializeMap;",
                "    let flat_map = FlatMapSerializeMap(&mut mock_map);",
                "    let _result = flat_map.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = ();",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock_map = MockSerializeMap;",
                "    let flat_map = FlatMapSerializeMap(&mut mock_map);",
                "    let _result = flat_map.end();",
                "    assert_eq!(_result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}