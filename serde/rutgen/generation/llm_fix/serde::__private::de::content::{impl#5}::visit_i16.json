{
  "name": "serde::__private::de::content::{impl#5}::visit_i16",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:360:9:365:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::I16(value))\n"
      ],
      "input_infer": "i16 values: -32768 to 32767, including boundary values -32768 and 32767\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(-32768);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(-32768)));",
                "    let result = visitor.visit_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = visitor.visit_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(-32768);",
                "    assert_eq!(result, Ok(Content::I16(-32768)));",
                "    let result = visitor.visit_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = visitor.visit_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::I16(_))));",
                "    assert!(result.unwrap() == Content::I16(-1));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::I16(_))));",
                "    assert!(result.unwrap() == Content::I16(-1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = visitor.visit_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    let result = visitor.visit_i16(100);",
                "    assert_eq!(result, Ok(Content::I16(100)));",
                "    let result = visitor.visit_i16(i16::MIN);",
                "    assert_eq!(result, Ok(Content::I16(i16::MIN)));",
                "    let result = visitor.visit_i16(i16::MAX);",
                "    assert_eq!(result, Ok(Content::I16(i16::MAX)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = visitor.visit_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    let result = visitor.visit_i16(100);",
                "    assert_eq!(result, Ok(Content::I16(100)));",
                "    let result = visitor.visit_i16(i16::MIN);",
                "    assert_eq!(result, Ok(Content::I16(i16::MIN)));",
                "    let result = visitor.visit_i16(i16::MAX);",
                "    assert_eq!(result, Ok(Content::I16(i16::MAX)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(1)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::I16(_))));",
                "    assert_eq!(result.unwrap(), Content::I16(1));",
                "    let result = visitor.visit_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    assert!(matches!(visitor.visit_i16(i16::MAX), Ok(Content::I16(i16::MAX))));",
                "    assert!(matches!(visitor.visit_i16(i16::MIN), Ok(Content::I16(i16::MIN))));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(1);",
                "    assert_eq!(result, Ok(Content::I16(1)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::I16(_))));",
                "    assert_eq!(result.unwrap(), Content::I16(1));",
                "    let result = visitor.visit_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    assert!(matches!(visitor.visit_i16(i16::MAX), Ok(Content::I16(i16::MAX))));",
                "    assert!(matches!(visitor.visit_i16(i16::MIN), Ok(Content::I16(i16::MIN))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(32767);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(32767)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}