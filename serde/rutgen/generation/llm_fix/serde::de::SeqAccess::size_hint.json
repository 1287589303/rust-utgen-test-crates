{
  "name": "serde::de::SeqAccess::size_hint",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1739:5:1741:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: None\n"
      ],
      "input_infer": "self: valid reference to any struct implementing SeqAccess; no parameters are needed since the function always returns None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for TestStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let test_struct = TestStruct;",
                "    test_struct.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_struct.size_hint(), None);"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for TestStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let test_struct = TestStruct;",
                "    test_struct.size_hint();",
                "    assert_eq!(test_struct.size_hint(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for AnotherStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let another_struct = AnotherStruct;",
                "    another_struct.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(another_struct.size_hint(), None);"
              ],
              "code": [
                "{",
                "    struct AnotherStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for AnotherStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let another_struct = AnotherStruct;",
                "    another_struct.size_hint();",
                "    assert_eq!(another_struct.size_hint(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EdgeCaseStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for EdgeCaseStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let edge_case_struct = EdgeCaseStruct;",
                "    edge_case_struct.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(edge_case_struct.size_hint(), None);"
              ],
              "code": [
                "{",
                "    struct EdgeCaseStruct;",
                "",
                "    impl<'de> SeqAccess<'de> for EdgeCaseStruct {",
                "        type Error = ();",
                "",
                "        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
                "        where",
                "            T: DeserializeSeed<'de>,",
                "        {",
                "            Ok(None)",
                "        }",
                "    }",
                "",
                "    let edge_case_struct = EdgeCaseStruct;",
                "    edge_case_struct.size_hint();",
                "    assert_eq!(edge_case_struct.size_hint(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}