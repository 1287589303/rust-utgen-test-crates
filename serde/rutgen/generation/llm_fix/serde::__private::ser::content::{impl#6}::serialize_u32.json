{
  "name": "serde::__private::ser::content::{impl#6}::serialize_u32",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:600:9:602:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::U32(v))\n"
      ],
      "input_infer": "u32 values from 0 to 4,294,967,295 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(0);",
                "}"
              ],
              "oracle": [
                "    result.expect(\"Expected Ok variant for u32 serialization\");",
                "    assert_eq!(result, Ok(Content::U32(0)));",
                "    ",
                "    let result = serializer.serialize_u32(10);",
                "    assert_eq!(result, Ok(Content::U32(10)));",
                "    ",
                "    let result = serializer.serialize_u32(u32::MAX);",
                "    assert_eq!(result, Ok(Content::U32(u32::MAX)));",
                "    ",
                "    let result = serializer.serialize_u32(1);",
                "    assert_eq!(result, Ok(Content::U32(1)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(0);",
                "    result.expect(\"Expected Ok variant for u32 serialization\");",
                "    assert_eq!(result, Ok(Content::U32(0)));",
                "    ",
                "    let result = serializer.serialize_u32(10);",
                "    assert_eq!(result, Ok(Content::U32(10)));",
                "    ",
                "    let result = serializer.serialize_u32(u32::MAX);",
                "    assert_eq!(result, Ok(Content::U32(u32::MAX)));",
                "    ",
                "    let result = serializer.serialize_u32(1);",
                "    assert_eq!(result, Ok(Content::U32(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U32(1)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(1);",
                "    assert_eq!(result, Ok(Content::U32(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(123456);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U32(123456)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(123456);",
                "    assert_eq!(result, Ok(Content::U32(123456)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(4294967295);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::U32(4294967295));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>{ error: PhantomData };",
                "    let result = serializer.serialize_u32(4294967295);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::U32(4294967295));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}