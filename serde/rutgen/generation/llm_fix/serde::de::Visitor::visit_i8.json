{
  "name": "serde::de::Visitor::visit_i8",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1327:5:1332:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input: Test with i8 values ranging from -128 to 127, as well as testing with an out-of-range value (-129 and 128) to ensure proper error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(-128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(-128), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(-128);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(-128), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(0), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(0);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(0), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(127), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(127);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Signed(127), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(-129);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let visitor = TestVisitor;",
                "    visitor.visit_i8(-129)",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(-129);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let visitor = TestVisitor;",
                "    visitor.visit_i8(-129)",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(128);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Signed(128), &visitor));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"an i8\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i8(128);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Signed(128), &visitor));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}