{
  "name": "serde::__private::ser::content::{impl#6}::serialize_char",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:616:9:618:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Char(v))\n"
      ],
      "input_infer": "char input: any valid Unicode character including boundary cases like '\\0', '\\u{10FFFF}', special characters, and edge cases like non-ASCII characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('A');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('A'), Ok(Content::Char('A')));",
                "    assert_eq!(serializer.serialize_char('z'), Ok(Content::Char('z')));",
                "    assert_eq!(serializer.serialize_char('1'), Ok(Content::Char('1')));",
                "    assert_eq!(serializer.serialize_char('@'), Ok(Content::Char('@')));",
                "    assert_eq!(serializer.serialize_char(' '), Ok(Content::Char(' ')));",
                "    assert_eq!(serializer.serialize_char('😀'), Ok(Content::Char('😀')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('A');",
                "    assert_eq!(serializer.serialize_char('A'), Ok(Content::Char('A')));",
                "    assert_eq!(serializer.serialize_char('z'), Ok(Content::Char('z')));",
                "    assert_eq!(serializer.serialize_char('1'), Ok(Content::Char('1')));",
                "    assert_eq!(serializer.serialize_char('@'), Ok(Content::Char('@')));",
                "    assert_eq!(serializer.serialize_char(' '), Ok(Content::Char(' ')));",
                "    assert_eq!(serializer.serialize_char('😀'), Ok(Content::Char('😀')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('😊');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('😊'), Ok(Content::Char('😊')));",
                "    assert_eq!(serializer.serialize_char('a'), Ok(Content::Char('a')));",
                "    assert_eq!(serializer.serialize_char('Z'), Ok(Content::Char('Z')));",
                "    assert_eq!(serializer.serialize_char(' '), Ok(Content::Char(' ')));",
                "    assert_eq!(serializer.serialize_char('\\n'), Ok(Content::Char('\\n')));",
                "    assert_eq!(serializer.serialize_char('\\0'), Ok(Content::Char('\\0')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('😊');",
                "    assert_eq!(serializer.serialize_char('😊'), Ok(Content::Char('😊')));",
                "    assert_eq!(serializer.serialize_char('a'), Ok(Content::Char('a')));",
                "    assert_eq!(serializer.serialize_char('Z'), Ok(Content::Char('Z')));",
                "    assert_eq!(serializer.serialize_char(' '), Ok(Content::Char(' ')));",
                "    assert_eq!(serializer.serialize_char('\\n'), Ok(Content::Char('\\n')));",
                "    assert_eq!(serializer.serialize_char('\\0'), Ok(Content::Char('\\0')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('\\0');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('\\0'), Ok(Content::Char('\\0')));",
                "    assert_eq!(serializer.serialize_char('a'), Ok(Content::Char('a')));",
                "    assert_eq!(serializer.serialize_char('Z'), Ok(Content::Char('Z')));",
                "    assert_eq!(serializer.serialize_char('𐍈'), Ok(Content::Char('𐍈')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('\\0');",
                "    assert_eq!(serializer.serialize_char('\\0'), Ok(Content::Char('\\0')));",
                "    assert_eq!(serializer.serialize_char('a'), Ok(Content::Char('a')));",
                "    assert_eq!(serializer.serialize_char('Z'), Ok(Content::Char('Z')));",
                "    assert_eq!(serializer.serialize_char('𐍈'), Ok(Content::Char('𐍈')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('\\u{10FFFF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('\\u{10FFFF}'), Ok(Content::Char('\\u{10FFFF}')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('\\u{10FFFF}');",
                "    assert_eq!(serializer.serialize_char('\\u{10FFFF}'), Ok(Content::Char('\\u{10FFFF}')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('$');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('$'), Ok(Content::Char('$')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('$');",
                "    assert_eq!(serializer.serialize_char('$'), Ok(Content::Char('$')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('é');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('é'), Ok(Content::Char('é')));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_char('é');",
                "    assert_eq!(serializer.serialize_char('é'), Ok(Content::Char('é')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}