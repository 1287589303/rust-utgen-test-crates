{
  "name": "serde::de::Visitor::visit_f64",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1461:5:1466:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Float(v), &self))\n"
      ],
      "input_infer": "f64 input values including positive, negative, zero, and edge cases like NaN and infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(1.0);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(visitor.visit_f64(1.0), Err(Error::invalid_type(Unexpected::Float(1.0), _))));",
                "    assert!(matches!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), _))));",
                "    assert!(matches!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::NAN), Err(Error::invalid_type(Unexpected::Float(std::f64::NAN), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(std::f64::INFINITY), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::NEG_INFINITY), Err(Error::invalid_type(Unexpected::Float(std::f64::NEG_INFINITY), _))));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(1.0);",
                "    assert!(matches!(visitor.visit_f64(1.0), Err(Error::invalid_type(Unexpected::Float(1.0), _))));",
                "    assert!(matches!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), _))));",
                "    assert!(matches!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::NAN), Err(Error::invalid_type(Unexpected::Float(std::f64::NAN), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(std::f64::INFINITY), _))));",
                "    assert!(matches!(visitor.visit_f64(std::f64::NEG_INFINITY), Err(Error::invalid_type(Unexpected::Float(std::f64::NEG_INFINITY), _))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(-1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(1.0), Err(Error::invalid_type(Unexpected::Float(1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(-1.0);",
                "    assert_eq!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(1.0), Err(Error::invalid_type(Unexpected::Float(1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(3.14159), Err(Error::invalid_type(Unexpected::Float(3.14159), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(0.0);",
                "    assert_eq!(visitor.visit_f64(0.0), Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(-1.0), Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));",
                "    assert_eq!(visitor.visit_f64(3.14159), Err(Error::invalid_type(Unexpected::Float(3.14159), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor)));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))",
                "    let _ = visitor.visit_f64(3.14);",
                "    Err(Error::invalid_type(Unexpected::Float(3.14), &visitor))",
                "    let _ = visitor.visit_f64(1.0e10);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0e10), &visitor))",
                "    let _ = visitor.visit_f64(-1.0e10);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0e10), &visitor))"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))",
                "    let _ = visitor.visit_f64(3.14);",
                "    Err(Error::invalid_type(Unexpected::Float(3.14), &visitor))",
                "    let _ = visitor.visit_f64(1.0e10);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0e10), &visitor))",
                "    let _ = visitor.visit_f64(-1.0e10);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0e10), &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))",
                "    let _ = visitor.visit_f64(1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0), &visitor))",
                "    let _ = visitor.visit_f64(-1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor))"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))",
                "    let _ = visitor.visit_f64(1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0), &visitor))",
                "    let _ = visitor.visit_f64(-1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0), &visitor))",
                "    let _ = visitor.visit_f64(-1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_f64(f64::NAN);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NAN), &visitor))",
                "    let _ = visitor.visit_f64(f64::INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(f64::NEG_INFINITY);",
                "    Err(Error::invalid_type(Unexpected::Float(f64::NEG_INFINITY), &visitor))",
                "    let _ = visitor.visit_f64(1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(1.0), &visitor))",
                "    let _ = visitor.visit_f64(-1.0);",
                "    Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor))",
                "    let _ = visitor.visit_f64(0.0);",
                "    Err(Error::invalid_type(Unexpected::Float(0.0), &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}