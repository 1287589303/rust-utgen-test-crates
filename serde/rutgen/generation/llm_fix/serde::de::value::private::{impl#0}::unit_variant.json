{
  "name": "serde::de::value::private::{impl#0}::unit_variant",
  "mod_info": {
    "name": "de::value::private",
    "loc": "serde/src/de/value.rs:1730:1:1894:2"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1756:9:1758:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self: an instance of a type that implements de::VariantAccess, specifically UnitOnly<E> where E: de::Error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "    impl de::Error for TestError {}",
                "",
                "    let result: Result<(), TestError> = UnitOnly::<TestError> {",
                "        marker: PhantomData,",
                "    }.unit_variant();",
                "",
                "    // Function call only for testing purposes",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "    impl de::Error for TestError {}",
                "",
                "    let result: Result<(), TestError> = UnitOnly::<TestError> {",
                "        marker: PhantomData,",
                "    }.unit_variant();",
                "",
                "    // Function call only for testing purposes",
                "    let _ = result;",
                "    assert!(result.is_ok());",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherTestError;",
                "    impl de::Error for AnotherTestError {}",
                "",
                "    let result: Result<(), AnotherTestError> = UnitOnly::<AnotherTestError> {",
                "        marker: PhantomData,",
                "    }.unit_variant();",
                "",
                "    // Function call only for testing purposes",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());"
              ],
              "code": [
                "{",
                "    struct AnotherTestError;",
                "    impl de::Error for AnotherTestError {}",
                "",
                "    let result: Result<(), AnotherTestError> = UnitOnly::<AnotherTestError> {",
                "        marker: PhantomData,",
                "    }.unit_variant();",
                "",
                "    // Function call only for testing purposes",
                "    let _ = result;",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}