{
  "name": "serde::format::{impl#1}::write_str",
  "mod_info": {
    "name": "format",
    "loc": "serde/src/lib.rs:315:1:315:12"
  },
  "visible": true,
  "loc": "serde/src/format.rs:21:5:29:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.offset + s.len() > self.bytes.len() at line 22 is true\n",
        "expected return value/type: Err(fmt::Error)\n"
      ],
      "input_infer": "self.bytes: [u8; 0..n]; self.offset: 0..n; s: str with length > n - offset\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: [u8; 5] = [0; 5];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
                "    let result = buf.write_str(\"exceeds\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut buffer: [u8; 5] = [0; 5];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
                "    let result = buf.write_str(\"exceeds\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: [u8; 10] = [0; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 8 };",
                "    let result = buf.write_str(\"12\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut buffer: [u8; 10] = [0; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 8 };",
                "    let result = buf.write_str(\"12\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: [u8; 3] = [0; 3];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
                "    let result = buf.write_str(\"abc\");",
                "}"
              ],
              "oracle": [
                "    let mut buffer: [u8; 3] = [0; 3];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
                "    let result = buf.write_str(\"abc\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut buffer: [u8; 3] = [0; 3];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
                "    let result = buf.write_str(\"abc\");",
                "    let mut buffer: [u8; 3] = [0; 3];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
                "    let result = buf.write_str(\"abc\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 15 };",
                "    let result = buf.write_str(\"longerthanallowed\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut buffer: [u8; 20] = [0; 20];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 15 };",
                "    let result = buf.write_str(\"longerthanallowed\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.offset + s.len() > self.bytes.len() at line 22 is false, with bound self.offset + s.len() == self.bytes.len()\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self.offset in range [0, self.bytes.len()], s with length such that self.offset + s.len() == self.bytes.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
                "    let s = \"hello\"; // len(s) = 5",
                "    let result = buf.write_str(s);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(buf.offset, 10);",
                "    assert_eq!(&buffer, &[0, 0, 0, 0, 0, b'h', b'e', b'l', b'l', b'o']);"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
                "    let s = \"hello\"; // len(s) = 5",
                "    let result = buf.write_str(s);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(buf.offset, 10);",
                "    assert_eq!(&buffer, &[0, 0, 0, 0, 0, b'h', b'e', b'l', b'l', b'o']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 10 };",
                "    let s = \"\"; // len(s) = 0",
                "    let result = buf.write_str(s);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 10];",
                "    let mut buf = Buf { bytes: &mut buffer, offset: 10 };",
                "    let s = \"\"; // len(s) = 0",
                "    let result = buf.write_str(s);",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}