{
  "name": "serde::de::Visitor::visit_borrowed_str",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1510:5:1515:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: string `v` that is a valid `&'de str`, where `v` must be a non-empty string, the length of `v` can range from 1 to a reasonable upper limit (e.g., 1024 characters) to cover typical use cases, and must live at least as long as the `Deserializer` reference; also testing should include boundary values like an empty string and a very long string at the upper limit.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"test\"), Err(Error::invalid_type(Unexpected::Str(\"test\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"long string\"), Err(Error::invalid_type(Unexpected::Str(\"long string\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"!@#$%^&*()\"), Err(Error::invalid_type(Unexpected::Str(\"!@#$%^&*()\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\" \"), Err(Error::invalid_type(Unexpected::Str(\" \"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"valid string\"), Err(Error::invalid_type(Unexpected::Str(\"valid string\"), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"test\"), Err(Error::invalid_type(Unexpected::Str(\"test\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"long string\"), Err(Error::invalid_type(Unexpected::Str(\"long string\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"!@#$%^&*()\"), Err(Error::invalid_type(Unexpected::Str(\"!@#$%^&*()\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\" \"), Err(Error::invalid_type(Unexpected::Str(\" \"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"valid string\"), Err(Error::invalid_type(Unexpected::Str(\"valid string\"), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"a\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_borrowed_str(\"a\"), Err(Error::invalid_type(Unexpected::Str(\"a\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"example string\"), Err(Error::invalid_type(Unexpected::Str(\"example string\"), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"a\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "    assert_eq!(visitor.visit_borrowed_str(\"a\"), Err(Error::invalid_type(Unexpected::Str(\"a\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));",
                "    assert_eq!(visitor.visit_borrowed_str(\"example string\"), Err(Error::invalid_type(Unexpected::Str(\"example string\"), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"a\".repeat(1024); // String of length 1024",
                "    let _ = visitor.visit_borrowed_str(&input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_borrowed_str(\"short\"), Ok(()));",
                "    assert!(visitor.visit_borrowed_str(\"\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"long string that exceeds the limit\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"another test string\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"test string with spaces\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"test string with special chars !@#$%\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"multi-line\\nstring\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"string with \\0 null character\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with \\u{D800} invalid char\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with length 1024\").is_ok());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"a\".repeat(1024); // String of length 1024",
                "    let _ = visitor.visit_borrowed_str(&input);",
                "    assert_eq!(visitor.visit_borrowed_str(\"short\"), Ok(()));",
                "    assert!(visitor.visit_borrowed_str(\"\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"long string that exceeds the limit\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"another test string\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"test string with spaces\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"test string with special chars !@#$%\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"multi-line\\nstring\").is_ok());",
                "    assert!(visitor.visit_borrowed_str(\"string with \\0 null character\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with \\u{D800} invalid char\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with length 1024\").is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"this is a test string\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Ok(()));",
                "    assert_eq!(visitor.visit_borrowed_str(\"test\"), Ok(()));",
                "    assert_eq!(visitor.visit_borrowed_str(\"a long test string with multiple words\"), Ok(()));",
                "    assert!(visitor.visit_borrowed_str(\"test\\x00string\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"test\\nstring\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with special char #\").is_err());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"TestVisitor\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let input: &str = \"this is a test string\";",
                "    let _ = visitor.visit_borrowed_str(input);",
                "    assert_eq!(visitor.visit_borrowed_str(\"\"), Ok(()));",
                "    assert_eq!(visitor.visit_borrowed_str(\"test\"), Ok(()));",
                "    assert_eq!(visitor.visit_borrowed_str(\"a long test string with multiple words\"), Ok(()));",
                "    assert!(visitor.visit_borrowed_str(\"test\\x00string\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"test\\nstring\").is_err());",
                "    assert!(visitor.visit_borrowed_str(\"string with special char #\").is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}