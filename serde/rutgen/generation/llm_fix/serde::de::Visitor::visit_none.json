{
  "name": "serde::de::Visitor::visit_none",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1604:5:1609:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Option, &self))\n"
      ],
      "input_infer": "test input conditions: call visit_none() on any implementation of Visitor with a dummy Error type satisfying E: Error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "    impl<'de> crate::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"a dummy visitor\")",
                "        }",
                "    }",
                "",
                "    struct DummyError;",
                "",
                "    impl std::fmt::Display for DummyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"dummy error\")",
                "        }",
                "    }",
                "",
                "    impl std::error::Error for DummyError {}",
                "",
                "    let visitor = DummyVisitor;",
                "    let result: Result<(), DummyError> = visitor.visit_none();",
                "}"
              ],
              "oracle": [
                "    let expected = Err(Error::invalid_type(Unexpected::Option, &visitor));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "    impl<'de> crate::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"a dummy visitor\")",
                "        }",
                "    }",
                "",
                "    struct DummyError;",
                "",
                "    impl std::fmt::Display for DummyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"dummy error\")",
                "        }",
                "    }",
                "",
                "    impl std::error::Error for DummyError {}",
                "",
                "    let visitor = DummyVisitor;",
                "    let result: Result<(), DummyError> = visitor.visit_none();",
                "    let expected = Err(Error::invalid_type(Unexpected::Option, &visitor));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherDummyVisitor;",
                "    impl<'de> crate::Visitor<'de> for AnotherDummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"another dummy visitor\")",
                "        }",
                "    }",
                "",
                "    struct AnotherDummyError;",
                "",
                "    impl std::fmt::Display for AnotherDummyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"another dummy error\")",
                "        }",
                "    }",
                "",
                "    impl std::error::Error for AnotherDummyError {}",
                "",
                "    let another_visitor = AnotherDummyVisitor;",
                "    let result: Result<(), AnotherDummyError> = another_visitor.visit_none();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Option, &another_visitor)));"
              ],
              "code": [
                "{",
                "    struct AnotherDummyVisitor;",
                "    impl<'de> crate::Visitor<'de> for AnotherDummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"another dummy visitor\")",
                "        }",
                "    }",
                "",
                "    struct AnotherDummyError;",
                "",
                "    impl std::fmt::Display for AnotherDummyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"another dummy error\")",
                "        }",
                "    }",
                "",
                "    impl std::error::Error for AnotherDummyError {}",
                "",
                "    let another_visitor = AnotherDummyVisitor;",
                "    let result: Result<(), AnotherDummyError> = another_visitor.visit_none();",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Option, &another_visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}