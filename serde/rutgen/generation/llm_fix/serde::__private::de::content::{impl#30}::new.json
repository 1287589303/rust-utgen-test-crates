{
  "name": "serde::__private::de::content::{impl#30}::new",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:2280:9:2285:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: InternallyTaggedUnitVisitor {\n                type_name,\n                variant_name,\n            }\n"
      ],
      "input_infer": "type_name: non-empty string, variant_name: non-empty string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let type_name = \"Type1\";",
                "    let variant_name = \"Variant1\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.type_name, \"Type1\");",
                "    assert_eq!(visitor.variant_name, \"Variant1\");"
              ],
              "code": [
                "{",
                "    let type_name = \"Type1\";",
                "    let variant_name = \"Variant1\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "    assert_eq!(visitor.type_name, \"Type1\");",
                "    assert_eq!(visitor.variant_name, \"Variant1\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let type_name = \"Type2\";",
                "    let variant_name = \"Variant2\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "}"
              ],
              "oracle": [
                "    let type_name = \"Type2\";",
                "    let variant_name = \"Variant2\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "    assert_eq!(visitor.type_name, type_name);",
                "    assert_eq!(visitor.variant_name, variant_name);"
              ],
              "code": [
                "{",
                "    let type_name = \"Type2\";",
                "    let variant_name = \"Variant2\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "    let type_name = \"Type2\";",
                "    let variant_name = \"Variant2\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "    assert_eq!(visitor.type_name, type_name);",
                "    assert_eq!(visitor.variant_name, variant_name);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let type_name = \"A\";",
                "    let variant_name = \"B\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.type_name, \"A\");",
                "    assert_eq!(visitor.variant_name, \"B\");",
                "    assert!(std::mem::size_of::<InternallyTaggedUnitVisitor>() > 0);"
              ],
              "code": [
                "{",
                "    let type_name = \"A\";",
                "    let variant_name = \"B\";",
                "    let visitor = InternallyTaggedUnitVisitor::new(type_name, variant_name);",
                "    assert_eq!(visitor.type_name, \"A\");",
                "    assert_eq!(visitor.variant_name, \"B\");",
                "    assert!(std::mem::size_of::<InternallyTaggedUnitVisitor>() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}