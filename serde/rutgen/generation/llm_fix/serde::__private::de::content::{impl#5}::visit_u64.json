{
  "name": "serde::__private::de::content::{impl#5}::visit_u64",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:402:9:407:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::U64(value))\n"
      ],
      "input_infer": "value: u64 in the range [0, 18446744073709551615]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(0u64);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U64(0u64)));",
                "    let result = visitor.visit_u64(1u64);",
                "    assert_eq!(result, Ok(Content::U64(1u64)));",
                "    let result = visitor.visit_u64(u64::MAX);",
                "    assert_eq!(result, Ok(Content::U64(u64::MAX)));",
                "    let result = visitor.visit_u64(123456789u64);",
                "    assert_eq!(result, Ok(Content::U64(123456789u64)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(0u64);",
                "    assert_eq!(result, Ok(Content::U64(0u64)));",
                "    let result = visitor.visit_u64(1u64);",
                "    assert_eq!(result, Ok(Content::U64(1u64)));",
                "    let result = visitor.visit_u64(u64::MAX);",
                "    assert_eq!(result, Ok(Content::U64(u64::MAX)));",
                "    let result = visitor.visit_u64(123456789u64);",
                "    assert_eq!(result, Ok(Content::U64(123456789u64)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(1234567890u64);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U64(1234567890u64)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(1234567890u64);",
                "    assert_eq!(result, Ok(Content::U64(1234567890u64)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(18446744073709551615u64);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U64(18446744073709551615u64)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_u64(18446744073709551615u64);",
                "    assert_eq!(result, Ok(Content::U64(18446744073709551615u64)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}