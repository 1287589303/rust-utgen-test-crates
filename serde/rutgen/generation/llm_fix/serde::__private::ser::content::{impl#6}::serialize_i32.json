{
  "name": "serde::__private::ser::content::{impl#6}::serialize_i32",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:584:9:586:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::I32(v))\n"
      ],
      "input_infer": "i32 values from -2,147,483,648 to 2,147,483,647, including boundary values -2,147,483,648, -1, 0, 1, and 2,147,483,647\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(-2_147_483_648);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i32(-2_147_483_648), Ok(Content::I32(-2_147_483_648)));",
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
                "    assert!(serializer.serialize_i32(-2_147_483_649).is_err());",
                "    assert!(serializer.serialize_i32(2_147_483_648).is_err());"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(-2_147_483_648);",
                "    assert_eq!(serializer.serialize_i32(-2_147_483_648), Ok(Content::I32(-2_147_483_648)));",
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
                "    assert!(serializer.serialize_i32(-2_147_483_649).is_err());",
                "    assert!(serializer.serialize_i32(2_147_483_648).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i32(-1), Ok(Content::I32(-1)));",
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(1), Ok(Content::I32(1)));",
                "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
                "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(-1);",
                "    assert_eq!(serializer.serialize_i32(-1), Ok(Content::I32(-1)));",
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(1), Ok(Content::I32(1)));",
                "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
                "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(-10), Ok(Content::I32(-10)));",
                "    assert_eq!(serializer.serialize_i32(12345), Ok(Content::I32(12345)));",
                "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
                "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(0);",
                "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
                "    assert_eq!(serializer.serialize_i32(-10), Ok(Content::I32(-10)));",
                "    assert_eq!(serializer.serialize_i32(12345), Ok(Content::I32(12345)));",
                "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
                "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(1);",
                "}"
              ],
              "oracle": [
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i32(1);",
                "    assert_eq!(result, Ok(Content::I32(1)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(1);",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i32(1);",
                "    assert_eq!(result, Ok(Content::I32(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(2_147_483_647);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_i32(2_147_483_647);",
                "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}