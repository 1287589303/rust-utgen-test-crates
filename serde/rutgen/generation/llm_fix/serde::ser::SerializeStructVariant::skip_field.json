{
  "name": "serde::ser::SerializeStructVariant::skip_field",
  "mod_info": {
    "name": "ser",
    "loc": "serde/src/lib.rs:313:1:313:13"
  },
  "visible": true,
  "loc": "serde/src/ser/mod.rs:1936:5:1939:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "key: non-empty static string; key: empty string; key: long static string (maximum allowed length); key: special characters in static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"field1\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"field1\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"\");",
                "    assert!(result.is_ok());",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let long_string: &'static str = \"a\".repeat(1024).as_str();",
                "    let result = test_struct.skip_field(long_string);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let long_string: &'static str = \"a\".repeat(1024).as_str();",
                "    let result = test_struct.skip_field(long_string);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"field@#!$%^&*()\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl SerializeStructVariant for TestStruct {",
                "        type Ok = ();",
                "        type Error = std::convert::Infallible;",
                "",
                "        fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut test_struct = TestStruct;",
                "    let result = test_struct.skip_field(\"field@#!$%^&*()\");",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}