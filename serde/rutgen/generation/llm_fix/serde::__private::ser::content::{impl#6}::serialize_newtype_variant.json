{
  "name": "serde::__private::ser::content::{impl#6}::serialize_newtype_variant",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:666:9:682:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.serialize(self) matches Err(err) at line 680 is true\n",
        "expected return value/type: Err(err)\n"
      ],
      "input_infer": "value that implements Serialize and returns an error when serialized using self, with a static string for name, u32 for variant_index, and a static string for variant.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ErroneousSerialize;",
                "",
                "    impl Serialize for ErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let err_value = ErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"ErrorType\", 0, \"ErrorVariant\", &err_value);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().to_string(), \"serialization error\");",
                "    assert_matches!(result, Err(_));",
                "    assert!(matches!(result, Err(Error::custom(\"serialization error\"))));",
                "    assert!(result.unwrap_err().is_err());"
              ],
              "code": [
                "{",
                "    struct ErroneousSerialize;",
                "",
                "    impl Serialize for ErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let err_value = ErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"ErrorType\", 0, \"ErrorVariant\", &err_value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().to_string(), \"serialization error\");",
                "    assert_matches!(result, Err(_));",
                "    assert!(matches!(result, Err(Error::custom(\"serialization error\"))));",
                "    assert!(result.unwrap_err().is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherErroneousSerialize;",
                "",
                "    impl Serialize for AnotherErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"another serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let another_err_value = AnotherErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"AnotherErrorType\", 1, \"AnotherErrorVariant\", &another_err_value);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"another serialization error\");"
              ],
              "code": [
                "{",
                "    struct AnotherErroneousSerialize;",
                "",
                "    impl Serialize for AnotherErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"another serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let another_err_value = AnotherErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"AnotherErrorType\", 1, \"AnotherErrorVariant\", &another_err_value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"another serialization error\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct StaticStrErroneousSerialize;",
                "",
                "    impl Serialize for StaticStrErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"static str serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let static_str_err_value = StaticStrErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"StaticStrType\", 2, \"StaticStrVariant\", &static_str_err_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.as_ref().err().unwrap().to_string() == \"static str serialization error\");"
              ],
              "code": [
                "{",
                "    struct StaticStrErroneousSerialize;",
                "",
                "    impl Serialize for StaticStrErroneousSerialize {",
                "        fn serialize<S: Serializer>(&self, _: S) -> Result<Content, S::Error> {",
                "            Err(Error::custom(\"static str serialization error\"))",
                "        }",
                "    }",
                "",
                "    let serializer: ContentSerializer<dyn Error> = ContentSerializer { error: PhantomData };",
                "    let static_str_err_value = StaticStrErroneousSerialize;",
                "",
                "    let result: Result<Content, _> = serializer.serialize_newtype_variant(\"StaticStrType\", 2, \"StaticStrVariant\", &static_str_err_value);",
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.as_ref().err().unwrap().to_string() == \"static str serialization error\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.serialize(self) matches Ok(val) at line 680 is true\n",
        "expected return value/type: Ok(Content::NewtypeVariant(\n                name,\n                variant_index,\n                variant,\n                Box::new(tri!(value.serialize(self))),\n            ))\n"
      ],
      "input_infer": "name: non-empty static string; variant_index: non-negative integer; variant: non-empty static string; value: any type that implements Serialize and when serialized returns Ok(Content)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_str(\"test_value\")",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"TestStruct\", 0, \"TestVariant\", &TestValue);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let content = result.unwrap();",
                "    match content {",
                "    Content::NewtypeVariant(name, variant_index, variant, value) => {",
                "    assert_eq!(name, \"TestStruct\");",
                "    assert_eq!(variant_index, 0);",
                "    assert_eq!(variant, \"TestVariant\");",
                "    assert_eq!(*value.downcast::<Content>().unwrap(), Content::Str(\"test_value\".to_string()));",
                "    },",
                "    _ => panic!(\"Expected NewtypeVariant\"),",
                "    }"
              ],
              "code": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_str(\"test_value\")",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"TestStruct\", 0, \"TestVariant\", &TestValue);",
                "    assert!(result.is_ok());",
                "    let content = result.unwrap();",
                "    match content {",
                "    Content::NewtypeVariant(name, variant_index, variant, value) => {",
                "    assert_eq!(name, \"TestStruct\");",
                "    assert_eq!(variant_index, 0);",
                "    assert_eq!(variant, \"TestVariant\");",
                "    assert_eq!(*value.downcast::<Content>().unwrap(), Content::Str(\"test_value\".to_string()));",
                "    },",
                "    _ => panic!(\"Expected NewtypeVariant\"),",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_i32(42)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"IntegerStruct\", 1, \"IntegerVariant\", &TestValue);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::NewtypeVariant(\"IntegerStruct\", 1, \"IntegerVariant\", Box::new(Content::I32(42))));"
              ],
              "code": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_i32(42)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"IntegerStruct\", 1, \"IntegerVariant\", &TestValue);",
                "    assert_eq!(result, Ok(Content::NewtypeVariant(\"IntegerStruct\", 1, \"IntegerVariant\", Box::new(Content::I32(42))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_f64(3.14)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"FloatStruct\", 2, \"FloatVariant\", &TestValue);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::NewtypeVariant(\"FloatStruct\", 2, \"FloatVariant\", Box::new(Content::F64(3.14))));"
              ],
              "code": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_f64(3.14)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"FloatStruct\", 2, \"FloatVariant\", &TestValue);",
                "    assert_eq!(result, Ok(Content::NewtypeVariant(\"FloatStruct\", 2, \"FloatVariant\", Box::new(Content::F64(3.14))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_bool(true)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"BoolStruct\", 3, \"BoolVariant\", &TestValue);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let content = result.unwrap();",
                "    assert_eq!(content, Content::NewtypeVariant(\"BoolStruct\", 3, \"BoolVariant\", Box::new(Content::Bool(true))));"
              ],
              "code": [
                "{",
                "    struct TestValue;",
                "",
                "    impl Serialize for TestValue {",
                "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            serializer.serialize_bool(true)",
                "        }",
                "    }",
                "",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_newtype_variant(\"BoolStruct\", 3, \"BoolVariant\", &TestValue);",
                "    assert!(result.is_ok());",
                "    let content = result.unwrap();",
                "    assert_eq!(content, Content::NewtypeVariant(\"BoolStruct\", 3, \"BoolVariant\", Box::new(Content::Bool(true))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}