{
  "name": "serde::__private::ser::{impl#4}::serialize_bool",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1021:5:1023:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Boolean))\n"
      ],
      "input_infer": "bool value: true, bool value: false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockMap;",
                "",
                "    impl SerializeMap for MockMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = MockMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_bool(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bool(true), Err(serializer.bad_type(Unsupported::Boolean)));"
              ],
              "code": [
                "{",
                "    struct MockMap;",
                "",
                "    impl SerializeMap for MockMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = MockMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_bool(true);",
                "    assert_eq!(serializer.serialize_bool(true), Err(serializer.bad_type(Unsupported::Boolean)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockMap;",
                "",
                "    impl SerializeMap for MockMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = MockMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_bool(false);",
                "}"
              ],
              "oracle": [
                "    serializer.serialize_bool(false).unwrap_err(); // expected: Err(Self::bad_type(Unsupported::Boolean))"
              ],
              "code": [
                "{",
                "    struct MockMap;",
                "",
                "    impl SerializeMap for MockMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = MockMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_bool(false);",
                "    serializer.serialize_bool(false).unwrap_err(); // expected: Err(Self::bad_type(Unsupported::Boolean))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}