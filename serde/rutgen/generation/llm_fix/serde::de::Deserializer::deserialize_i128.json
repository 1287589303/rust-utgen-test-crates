{
  "name": "serde::de::Deserializer::deserialize_i128",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:960:5:966:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::custom(\"i128 is not supported\"))\n"
      ],
      "input_infer": "self must implement the Deserializer trait, and visitor must implement the Visitor trait; function should be called with no actual data since it will always result in error regardless of visitor behavior.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDeserializer;",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        // Implement other required methods with default \"not implemented\" behavior.",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i8<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i16<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u8<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u16<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_f32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_f64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_char<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_str<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_bytes<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_byte_buf<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_option<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_unit<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_unit_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_newtype_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_seq<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_tuple<V>(",
                "            self,",
                "            _len: usize,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_tuple_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _len: usize,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_map<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _fields: &'static [&'static str],",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_enum<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _variants: &'static [&'static str],",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_identifier<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_ignored_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        #[inline]",
                "        fn is_human_readable(&self) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"a value\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    deserializer.deserialize_i128(TestVisitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_i128(TestVisitor), Err(Error::custom(\"i128 is not supported\")));"
              ],
              "code": [
                "{",
                "    struct TestDeserializer;",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        // Implement other required methods with default \"not implemented\" behavior.",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i8<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i16<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_i64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u8<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u16<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_u64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_f32<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_f64<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_char<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_str<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_bytes<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_byte_buf<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_option<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_unit<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_unit_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_newtype_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_seq<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_tuple<V>(",
                "            self,",
                "            _len: usize,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_tuple_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _len: usize,",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_map<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_struct<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _fields: &'static [&'static str],",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_enum<V>(",
                "            self,",
                "            _name: &'static str,",
                "            _variants: &'static [&'static str],",
                "            _visitor: V,",
                "        ) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_identifier<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        fn deserialize_ignored_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>",
                "        where",
                "            V: Visitor<'de>,",
                "        {",
                "            Err(Self::Error::custom(\"Not implemented\"))",
                "        }",
                "",
                "        #[inline]",
                "        fn is_human_readable(&self) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"a value\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    deserializer.deserialize_i128(TestVisitor);",
                "    assert_eq!(deserializer.deserialize_i128(TestVisitor), Err(Error::custom(\"i128 is not supported\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}