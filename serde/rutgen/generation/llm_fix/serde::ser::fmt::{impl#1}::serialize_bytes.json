{
  "name": "serde::ser::fmt::{impl#1}::serialize_bytes",
  "mod_info": {
    "name": "ser::fmt",
    "loc": "serde/src/ser/mod.rs:112:1:112:9"
  },
  "visible": true,
  "loc": "serde/src/ser/fmt.rs:84:5:86:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(fmt::Error)\n"
      ],
      "input_infer": "_v: &[u8] = [0], _v: &[u8] = [], _v: &[u8] = [255]*1024, _v: &[u8] = [0, 1, 2, 3, 4, 5], _v: &[u8] is null or points to invalid memory\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[]);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);"
              ],
              "code": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[]);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0]);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);"
              ],
              "code": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0]);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[255; 1024]);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);"
              ],
              "code": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[255; 1024]);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0, 1, 2, 3, 4, 5]);",
                "}"
              ],
              "oracle": [
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0, 1, 2, 3, 4, 5]);",
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0, 1, 2, 3, 4, 5]);",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(&[0, 1, 2, 3, 4, 5]);",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(std::ptr::null());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.serialize_bytes(std::ptr::null()), Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut formatter = std::fmt::Formatter::new();",
                "    let result = formatter.serialize_bytes(std::ptr::null());",
                "    assert_eq!(formatter.serialize_bytes(std::ptr::null()), Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}