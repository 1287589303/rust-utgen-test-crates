{
  "name": "serde::__private::de::{impl#11}::expecting",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:2771:5:2773:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.enum_name should be a valid non-empty static string representing the enum name, and formatter should be a valid mutable reference to fmt::Formatter.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "}"
              ],
              "oracle": [
                "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum MyEnum\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum MyEnum\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum \");",
                "    let visitor = TestVisitor { enum_name: \"TestEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum TestEnum\");",
                "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum AnotherEnum\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum \");",
                "    let visitor = TestVisitor { enum_name: \"TestEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum TestEnum\");",
                "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum AnotherEnum\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum AnotherEnum\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor {",
                "        enum_name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = &'static str;",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"variant of enum {}\", self.enum_name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
                "    let mut output = String::new();",
                "    let result = visitor.expecting(&mut output);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, \"variant of enum AnotherEnum\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}