{
  "name": "serde::de::Visitor::visit_u128",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1433:5:1444:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(\n            Unexpected::Other(writer.as_str()),\n            &self,\n        ))\n"
      ],
      "input_infer": "Input condition range for visit_u128: valid u128 values (0 to 340282366920938463463374607431768211455) including boundary cases (0, 1, 340282366920938463463374607431768211455) and invalid cases (negative values, non-numeric strings).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(0);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `0` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `1` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `100` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `12345678901234567890` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `u128::MAX` as u128\"), &self))"
              ],
              "code": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(0);",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `0` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `1` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `100` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `12345678901234567890` as u128\"), &self))",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `u128::MAX` as u128\"), &self))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(1);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `1` as u128\"), &self))"
              ],
              "code": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(1);",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `1` as u128\"), &self))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(340282366920938463463374607431768211455);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `340282366920938463463374607431768211455` as u128\"), &self))"
              ],
              "code": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(340282366920938463463374607431768211455);",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `340282366920938463463374607431768211455` as u128\"), &self))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(123456789012345678901234567890123456);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(",
                "    Unexpected::Other(\"integer `123456789012345678901234567890123456` as u128\"),",
                "    &MyVisitor,",
                "    ))"
              ],
              "code": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(123456789012345678901234567890123456);",
                "    Err(Error::invalid_type(",
                "    Unexpected::Other(\"integer `123456789012345678901234567890123456` as u128\"),",
                "    &MyVisitor,",
                "    ))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(-1);",
                "}"
              ],
              "oracle": [
                "    let visitor = MyVisitor;",
                "    let result = visitor.visit_u128(-1u128);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Other(\"integer `18446744073709551615` as u128\"), &visitor)));"
              ],
              "code": [
                "{",
                "    struct MyVisitor;",
                "    impl<'de> Visitor<'de> for MyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"a u128 value\")",
                "        }",
                "    }",
                "    let _ = MyVisitor.visit_u128(-1);",
                "    let visitor = MyVisitor;",
                "    let result = visitor.visit_u128(-1u128);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Other(\"integer `18446744073709551615` as u128\"), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}