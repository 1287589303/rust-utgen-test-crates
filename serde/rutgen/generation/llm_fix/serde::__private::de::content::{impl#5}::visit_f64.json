{
  "name": "serde::__private::de::content::{impl#5}::visit_f64",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:416:9:421:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::F64(value))\n"
      ],
      "input_infer": "valid input range for f64: all possible f64 values including NaN and Infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(3.14);",
                "    assert_eq!(result, Ok(Content::F64(3.14)));",
                "    let result = visitor.visit_f64(-2.71);",
                "    assert_eq!(result, Ok(Content::F64(-2.71)));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(0.0);",
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(3.14);",
                "    assert_eq!(result, Ok(Content::F64(3.14)));",
                "    let result = visitor.visit_f64(-2.71);",
                "    assert_eq!(result, Ok(Content::F64(-2.71)));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(-1.23);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(-1.23)));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(1.23);",
                "    assert_eq!(result, Ok(Content::F64(1.23)));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(-1.23);",
                "    assert_eq!(result, Ok(Content::F64(-1.23)));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(1.23);",
                "    assert_eq!(result, Ok(Content::F64(1.23)));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(3.14);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(3.14)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::F64(_))));",
                "    assert_eq!(result.unwrap(), Content::F64(3.14));",
                "    assert_eq!(result.as_ref().unwrap(), &Content::F64(3.14));",
                "    assert!(result.unwrap_err().is_none());"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(3.14);",
                "    assert_eq!(result, Ok(Content::F64(3.14)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::F64(_))));",
                "    assert_eq!(result.unwrap(), Content::F64(3.14));",
                "    assert_eq!(result.as_ref().unwrap(), &Content::F64(3.14));",
                "    assert!(result.unwrap_err().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::NAN));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::INFINITY));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::NEG_INFINITY));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(0.0));",
                "    let result = visitor.visit_f64(3.14);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(3.14));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::NAN));",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::INFINITY));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(f64::NEG_INFINITY));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(0.0));",
                "    let result = visitor.visit_f64(3.14);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F64(3.14));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(1.5);",
                "    assert_eq!(result, Ok(Content::F64(1.5)));",
                "    let result = visitor.visit_f64(-1.5);",
                "    assert_eq!(result, Ok(Content::F64(-1.5)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    let result = visitor.visit_f64(0.0);",
                "    assert_eq!(result, Ok(Content::F64(0.0)));",
                "    let result = visitor.visit_f64(1.5);",
                "    assert_eq!(result, Ok(Content::F64(1.5)));",
                "    let result = visitor.visit_f64(-1.5);",
                "    assert_eq!(result, Ok(Content::F64(-1.5)));",
                "    let result = visitor.visit_f64(f64::NAN);",
                "    assert_eq!(result, Ok(Content::F64(f64::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::F64(_))));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result, Ok(Content::F64(_))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(1.7976931348623157e308); // Largest positive f64",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(Content::F64(1.7976931348623157e308))));",
                "    ",
                "    let result = visitor.visit_f64(-1.7976931348623157e308); // Largest negative f64",
                "    assert!(matches!(result, Ok(Content::F64(-1.7976931348623157e308))));",
                "    ",
                "    let result = visitor.visit_f64(0.0); // Zero value",
                "    assert!(matches!(result, Ok(Content::F64(0.0))));",
                "    ",
                "    let result = visitor.visit_f64(1.0); // Positive normal value",
                "    assert!(matches!(result, Ok(Content::F64(1.0))));",
                "    ",
                "    let result = visitor.visit_f64(-1.0); // Negative normal value",
                "    assert!(matches!(result, Ok(Content::F64(-1.0))));",
                "    ",
                "    let result = visitor.visit_f64(f64::NAN); // Not a Number value",
                "    assert!(matches!(result, Ok(Content::F64(f64::NAN))));",
                "    ",
                "    let result = visitor.visit_f64(f64::INFINITY); // Positive Infinity",
                "    assert!(matches!(result, Ok(Content::F64(f64::INFINITY))));",
                "    ",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY); // Negative Infinity",
                "    assert!(matches!(result, Ok(Content::F64(f64::NEG_INFINITY))));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(1.7976931348623157e308); // Largest positive f64",
                "    assert!(matches!(result, Ok(Content::F64(1.7976931348623157e308))));",
                "    ",
                "    let result = visitor.visit_f64(-1.7976931348623157e308); // Largest negative f64",
                "    assert!(matches!(result, Ok(Content::F64(-1.7976931348623157e308))));",
                "    ",
                "    let result = visitor.visit_f64(0.0); // Zero value",
                "    assert!(matches!(result, Ok(Content::F64(0.0))));",
                "    ",
                "    let result = visitor.visit_f64(1.0); // Positive normal value",
                "    assert!(matches!(result, Ok(Content::F64(1.0))));",
                "    ",
                "    let result = visitor.visit_f64(-1.0); // Negative normal value",
                "    assert!(matches!(result, Ok(Content::F64(-1.0))));",
                "    ",
                "    let result = visitor.visit_f64(f64::NAN); // Not a Number value",
                "    assert!(matches!(result, Ok(Content::F64(f64::NAN))));",
                "    ",
                "    let result = visitor.visit_f64(f64::INFINITY); // Positive Infinity",
                "    assert!(matches!(result, Ok(Content::F64(f64::INFINITY))));",
                "    ",
                "    let result = visitor.visit_f64(f64::NEG_INFINITY); // Negative Infinity",
                "    assert!(matches!(result, Ok(Content::F64(f64::NEG_INFINITY))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(-1.7976931348623157e308); // Largest negative f64",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F64(-1.7976931348623157e308)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f64(-1.7976931348623157e308); // Largest negative f64",
                "    assert_eq!(result, Ok(Content::F64(-1.7976931348623157e308)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}