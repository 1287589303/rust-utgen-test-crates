{
  "name": "serde::__private::de::content::{impl#6}::new",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": false,
  "loc": "serde/src/private/de.rs:554:9:559:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: TagOrContentVisitor {\n                name,\n                value: PhantomData,\n            }\n"
      ],
      "input_infer": "name: any valid static string slice (e.g., \"test\", \"example\", \"\", \"a\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "}"
              ],
              "oracle": [
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "    assert_eq!(visitor.name, \"test\");",
                "    assert!(std::mem::discriminant(&visitor.value) == std::mem::discriminant(&PhantomData::<TagOrContent>));"
              ],
              "code": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "    assert_eq!(visitor.name, \"test\");",
                "    assert!(std::mem::discriminant(&visitor.value) == std::mem::discriminant(&PhantomData::<TagOrContent>));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"\");",
                "}"
              ],
              "oracle": [
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "    assert_eq!(visitor.name, \"test\");",
                "    let visitor_default = TagOrContentVisitor::new(\"\");",
                "    assert_eq!(visitor_default.name, \"\");",
                "    let visitor_another = TagOrContentVisitor::new(\"example\");",
                "    assert_ne!(visitor_another.name, visitor_default.name);",
                "    assert!(std::any::TypeId::of::<TagOrContentVisitor>() == std::any::TypeId::of::<TagOrContentVisitor>());"
              ],
              "code": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"\");",
                "    let visitor = TagOrContentVisitor::new(\"test\");",
                "    assert_eq!(visitor.name, \"test\");",
                "    let visitor_default = TagOrContentVisitor::new(\"\");",
                "    assert_eq!(visitor_default.name, \"\");",
                "    let visitor_another = TagOrContentVisitor::new(\"example\");",
                "    assert_ne!(visitor_another.name, visitor_default.name);",
                "    assert!(std::any::TypeId::of::<TagOrContentVisitor>() == std::any::TypeId::of::<TagOrContentVisitor>());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"a\");",
                "}"
              ],
              "oracle": [
                "    let visitor = TagOrContentVisitor::new(\"a\");",
                "    assert_eq!(visitor.name, \"a\");",
                "    assert!(std::mem::size_of::<visitor.value>() > 0);",
                "    assert_eq!(std::any::type_name::<TagOrContentVisitor>(), \"TagOrContentVisitor\");",
                "    assert!(std::ptr::eq(visitor.value, PhantomData::<TagOrContent>::default()));"
              ],
              "code": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"a\");",
                "    let visitor = TagOrContentVisitor::new(\"a\");",
                "    assert_eq!(visitor.name, \"a\");",
                "    assert!(std::mem::size_of::<visitor.value>() > 0);",
                "    assert_eq!(std::any::type_name::<TagOrContentVisitor>(), \"TagOrContentVisitor\");",
                "    assert!(std::ptr::eq(visitor.value, PhantomData::<TagOrContent>::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"example\");",
                "}"
              ],
              "oracle": [
                "    let visitor = TagOrContentVisitor::new(\"example\");",
                "    assert_eq!(visitor.name, \"example\");",
                "    assert!(std::mem::size_of_val(&visitor.value) > 0);"
              ],
              "code": [
                "{",
                "    let visitor = TagOrContentVisitor::new(\"example\");",
                "    let visitor = TagOrContentVisitor::new(\"example\");",
                "    assert_eq!(visitor.name, \"example\");",
                "    assert!(std::mem::size_of_val(&visitor.value) > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}