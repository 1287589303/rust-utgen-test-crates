{
  "name": "serde::de::Visitor::visit_i128",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1371:5:1382:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(\n            Unexpected::Other(writer.as_str()),\n            &self,\n        ))\n"
      ],
      "input_infer": "i128 values in the range of -170141183460469231731687303715884105728 to 170141183460469231731687303715884105727 with various valid and invalid edge cases including the minimum and maximum i128, zero, and random values within this range\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(-170141183460469231731687303715884105728);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e, Error::invalid_type(Unexpected::Other(\"integer `-170141183460469231731687303715884105728` as i128\"), &visitor));",
                "    }"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(-170141183460469231731687303715884105728);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e, Error::invalid_type(Unexpected::Other(\"integer `-170141183460469231731687303715884105728` as i128\"), &visitor));",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(170141183460469231731687303715884105727);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `170141183460469231731687303715884105727` as i128\"), &visitor))"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(170141183460469231731687303715884105727);",
                "    Err(Error::invalid_type(Unexpected::Other(\"integer `170141183460469231731687303715884105727` as i128\"), &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(0);",
                "}"
              ],
              "oracle": [
                "    let expected = Err(Error::invalid_type(Unexpected::Other(\"integer `0` as i128\"), &visitor));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(0);",
                "    let expected = Err(Error::invalid_type(Unexpected::Other(\"integer `0` as i128\"), &visitor));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(123456789012345678901234567890123456789);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind(), ErrorKind::InvalidType);",
                "    assert_eq!(result.err().unwrap().unexpected(), Unexpected::Other(\"integer `123456789012345678901234567890123456789` as i128\"));",
                "    assert_eq!(result.err().unwrap().line(), 1371);"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(123456789012345678901234567890123456789);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind(), ErrorKind::InvalidType);",
                "    assert_eq!(result.err().unwrap().unexpected(), Unexpected::Other(\"integer `123456789012345678901234567890123456789` as i128\"));",
                "    assert_eq!(result.err().unwrap().line(), 1371);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(-123456789012345678901234567890123456789);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::invalid_type(Unexpected::Other(\"integer `-123456789012345678901234567890123456789` as i128\"), &visitor));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_i128(-123456789012345678901234567890123456789);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::invalid_type(Unexpected::Other(\"integer `-123456789012345678901234567890123456789` as i128\"), &visitor));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}