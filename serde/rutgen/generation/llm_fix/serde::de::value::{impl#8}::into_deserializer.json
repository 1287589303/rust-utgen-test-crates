{
  "name": "serde::de::value::{impl#8}::into_deserializer",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:184:5:186:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "self of type UnitDeserializer<E> where E implements de::Error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "    impl de::Error for TestError {",
                "        fn custom<T>(_: T) -> Self {",
                "            TestError",
                "        }",
                "    }",
                "",
                "    let deserializer: UnitDeserializer<TestError> = UnitDeserializer { marker: PhantomData };",
                "    let result = deserializer.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, deserializer);"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "    impl de::Error for TestError {",
                "        fn custom<T>(_: T) -> Self {",
                "            TestError",
                "        }",
                "    }",
                "",
                "    let deserializer: UnitDeserializer<TestError> = UnitDeserializer { marker: PhantomData };",
                "    let result = deserializer.into_deserializer();",
                "    assert_eq!(result, deserializer);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherError;",
                "    impl de::Error for AnotherError {",
                "        fn custom<T>(_: T) -> Self {",
                "            AnotherError",
                "        }",
                "    }",
                "",
                "    let deserializer: UnitDeserializer<AnotherError> = UnitDeserializer { marker: PhantomData };",
                "    let result = deserializer.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, deserializer);"
              ],
              "code": [
                "{",
                "    struct AnotherError;",
                "    impl de::Error for AnotherError {",
                "        fn custom<T>(_: T) -> Self {",
                "            AnotherError",
                "        }",
                "    }",
                "",
                "    let deserializer: UnitDeserializer<AnotherError> = UnitDeserializer { marker: PhantomData };",
                "    let result = deserializer.into_deserializer();",
                "    assert_eq!(result, deserializer);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}