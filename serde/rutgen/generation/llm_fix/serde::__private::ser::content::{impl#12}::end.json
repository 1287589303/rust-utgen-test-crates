{
  "name": "serde::__private::ser::content::{impl#12}::end",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:949:9:951:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Struct(self.name, self.fields))\n"
      ],
      "input_infer": "self must be an instance of SerializeStruct with valid name (non-empty static string) and fields (non-empty Vec of pairs of static strings and Content)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"TestStruct\",",
                "        fields: vec![",
                "            (\"field1\", Content::U32(42)),",
                "            (\"field2\", Content::String(String::from(\"value\"))),",
                "        ],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ as Result<Content, TestError>, Ok(Content::Struct(\"TestStruct\", vec![",
                "    (\"field1\", Content::U32(42)),",
                "    (\"field2\", Content::String(String::from(\"value\"))),",
                "    ])));"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"TestStruct\",",
                "        fields: vec![",
                "            (\"field1\", Content::U32(42)),",
                "            (\"field2\", Content::String(String::from(\"value\"))),",
                "        ],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "    assert_eq!(_ as Result<Content, TestError>, Ok(Content::Struct(\"TestStruct\", vec![",
                "    (\"field1\", Content::U32(42)),",
                "    (\"field2\", Content::String(String::from(\"value\"))),",
                "    ])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"EmptyFieldsStruct\",",
                "        fields: vec![],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ as Result<Content, TestError>, Ok(Content::Struct(\"EmptyFieldsStruct\", vec![])));"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"EmptyFieldsStruct\",",
                "        fields: vec![],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "    assert_eq!(_ as Result<Content, TestError>, Ok(Content::Struct(\"EmptyFieldsStruct\", vec![])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"SingleFieldStruct\",",
                "        fields: vec![(\"singleField\", Content::Bool(true))],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ , Ok(Content::Struct(\"SingleFieldStruct\", vec![(\"singleField\", Content::Bool(true))])));"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"SingleFieldStruct\",",
                "        fields: vec![(\"singleField\", Content::Bool(true))],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "    assert_eq!(_ , Ok(Content::Struct(\"SingleFieldStruct\", vec![(\"singleField\", Content::Bool(true))])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"VariedContentStruct\",",
                "        fields: vec![",
                "            (\"fieldBool\", Content::Bool(false)),",
                "            (\"fieldU8\", Content::U8(255)),",
                "            (\"fieldString\", Content::String(String::from(\"test\"))),",
                "            (\"fieldSeq\", Content::Seq(vec![Content::I32(1), Content::I32(2)])),",
                "        ],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_, Ok(Content::Struct(\"VariedContentStruct\", vec![",
                "    (\"fieldBool\", Content::Bool(false)),",
                "    (\"fieldU8\", Content::U8(255)),",
                "    (\"fieldString\", Content::String(String::from(\"test\"))),",
                "    (\"fieldSeq\", Content::Seq(vec![Content::I32(1), Content::I32(2)])),",
                "    ])));"
              ],
              "code": [
                "{",
                "    struct TestError;",
                "",
                "    impl serde::Error for TestError {}",
                "",
                "    let serializer = SerializeStruct {",
                "        name: \"VariedContentStruct\",",
                "        fields: vec![",
                "            (\"fieldBool\", Content::Bool(false)),",
                "            (\"fieldU8\", Content::U8(255)),",
                "            (\"fieldString\", Content::String(String::from(\"test\"))),",
                "            (\"fieldSeq\", Content::Seq(vec![Content::I32(1), Content::I32(2)])),",
                "        ],",
                "        error: PhantomData::<TestError>,",
                "    };",
                "",
                "    let _ = serializer.end();",
                "    assert_eq!(_, Ok(Content::Struct(\"VariedContentStruct\", vec![",
                "    (\"fieldBool\", Content::Bool(false)),",
                "    (\"fieldU8\", Content::U8(255)),",
                "    (\"fieldString\", Content::String(String::from(\"test\"))),",
                "    (\"fieldSeq\", Content::Seq(vec![Content::I32(1), Content::I32(2)])),",
                "    ])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}