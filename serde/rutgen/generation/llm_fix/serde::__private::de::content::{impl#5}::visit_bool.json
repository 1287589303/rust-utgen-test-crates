{
  "name": "serde::__private::de::content::{impl#5}::visit_bool",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:346:9:351:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Bool(value))\n"
      ],
      "input_infer": "boolean value: {true, false}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result: Result<Content, _> = visitor.visit_bool(true);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::Bool(true));",
                "    ",
                "    let result_false: Result<Content, _> = visitor.visit_bool(false);",
                "    assert!(result_false.is_ok());",
                "    assert_eq!(result_false.unwrap(), Content::Bool(false));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result: Result<Content, _> = visitor.visit_bool(true);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::Bool(true));",
                "    ",
                "    let result_false: Result<Content, _> = visitor.visit_bool(false);",
                "    assert!(result_false.is_ok());",
                "    assert_eq!(result_false.unwrap(), Content::Bool(false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result: Result<Content, _> = visitor.visit_bool(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::Bool(false)));",
                "    let result_true: Result<Content, _> = visitor.visit_bool(true);",
                "    assert_eq!(result_true, Ok(Content::Bool(true)));",
                "    let result_invalid: Result<Content, _> = visitor.visit_bool(1);",
                "    assert!(result_invalid.is_err());"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result: Result<Content, _> = visitor.visit_bool(false);",
                "    assert_eq!(result, Ok(Content::Bool(false)));",
                "    let result_true: Result<Content, _> = visitor.visit_bool(true);",
                "    assert_eq!(result_true, Ok(Content::Bool(true)));",
                "    let result_invalid: Result<Content, _> = visitor.visit_bool(1);",
                "    assert!(result_invalid.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}