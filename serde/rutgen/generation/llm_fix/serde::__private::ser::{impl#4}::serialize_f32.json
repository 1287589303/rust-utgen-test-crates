{
  "name": "serde::__private::ser::{impl#4}::serialize_f32",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1057:5:1059:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Float))\n"
      ],
      "input_infer": "serialize_f32 input should be any valid f32 value, including edge cases like NaN, positive infinity, negative infinity, or normal float values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(3.14f32);",
                "}"
              ],
              "oracle": [
                "    serializer.serialize_f32(3.14f32) -> Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float))"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(3.14f32);",
                "    serializer.serialize_f32(3.14f32) -> Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(0.0f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(Self::bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(0.0f32);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(Self::bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(-1.23f32);",
                "}"
              ],
              "oracle": [
                "    Err(Self::bad_type(Unsupported::Float))"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(-1.23f32);",
                "    Err(Self::bad_type(Unsupported::Float))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    let expected_error = Err(serializer.bad_type(Unsupported::Float));",
                "    assert_eq!(result, expected_error);",
                "    result.is_err();",
                "    result.unwrap_err();"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    let expected_error = Err(serializer.bad_type(Unsupported::Float));",
                "    assert_eq!(result, expected_error);",
                "    result.is_err();",
                "    result.unwrap_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Err(_)));",
                "    assert_eq!(result, Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(matches!(result, Err(_)));",
                "    assert_eq!(result, Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    serializer.serialize_f32(f32::NAN).unwrap_err();",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestMap;",
                "",
                "    impl SerializeMap for TestMap {",
                "        type Error = ();",
                "        ",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize, V: Serialize {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap;",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    serializer.serialize_f32(f32::NAN).unwrap_err();",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}