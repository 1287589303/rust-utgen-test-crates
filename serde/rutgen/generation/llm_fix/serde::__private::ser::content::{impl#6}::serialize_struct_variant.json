{
  "name": "serde::__private::ser::content::{impl#6}::serialize_struct_variant",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:746:9:760:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(SerializeStructVariant {\n                name,\n                variant_index,\n                variant,\n                fields: Vec::with_capacity(len),\n                error: PhantomData,\n            })\n"
      ],
      "input_infer": "name must be a valid &'static str, variant_index must be a non-negative u32, variant must be a valid &'static str, len must be a non-negative usize (including 0 for no fields)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 0, \"VariantType\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialize_struct_variant = result.unwrap();",
                "    assert_eq!(serialize_struct_variant.name, \"VariantName\");",
                "    assert_eq!(serialize_struct_variant.variant_index, 0);",
                "    assert_eq!(serialize_struct_variant.variant, \"VariantType\");",
                "    assert_eq!(serialize_struct_variant.fields.len(), 0);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 0, \"VariantType\", 0);",
                "    assert!(result.is_ok());",
                "    let serialize_struct_variant = result.unwrap();",
                "    assert_eq!(serialize_struct_variant.name, \"VariantName\");",
                "    assert_eq!(serialize_struct_variant.variant_index, 0);",
                "    assert_eq!(serialize_struct_variant.variant, \"VariantType\");",
                "    assert_eq!(serialize_struct_variant.fields.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 1, \"VariantType\", 5);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialize_struct_variant = result.unwrap();",
                "    assert_eq!(serialize_struct_variant.name, \"VariantName\");",
                "    assert_eq!(serialize_struct_variant.variant_index, 1);",
                "    assert_eq!(serialize_struct_variant.variant, \"VariantType\");",
                "    assert_eq!(serialize_struct_variant.fields.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 1, \"VariantType\", 5);",
                "    assert!(result.is_ok());",
                "    let serialize_struct_variant = result.unwrap();",
                "    assert_eq!(serialize_struct_variant.name, \"VariantName\");",
                "    assert_eq!(serialize_struct_variant.variant_index, 1);",
                "    assert_eq!(serialize_struct_variant.variant, \"VariantType\");",
                "    assert_eq!(serialize_struct_variant.fields.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", u32::MAX, \"VariantType\", 10);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let struct_variant = result.unwrap();",
                "    assert_eq!(struct_variant.name, \"VariantName\");",
                "    assert_eq!(struct_variant.variant_index, u32::MAX);",
                "    assert_eq!(struct_variant.variant, \"VariantType\");",
                "    assert_eq!(struct_variant.fields.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", u32::MAX, \"VariantType\", 10);",
                "    assert!(result.is_ok());",
                "    let struct_variant = result.unwrap();",
                "    assert_eq!(struct_variant.name, \"VariantName\");",
                "    assert_eq!(struct_variant.variant_index, u32::MAX);",
                "    assert_eq!(struct_variant.variant, \"VariantType\");",
                "    assert_eq!(struct_variant.fields.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"\", 0, \"\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().name, \"\");",
                "    assert_eq!(result.unwrap().variant_index, 0);",
                "    assert_eq!(result.unwrap().variant, \"\");",
                "    assert_eq!(result.unwrap().fields.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_struct_variant(\"\", 0, \"\", 0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().name, \"\");",
                "    assert_eq!(result.unwrap().variant_index, 0);",
                "    assert_eq!(result.unwrap().variant, \"\");",
                "    assert_eq!(result.unwrap().fields.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let len = usize::MAX;",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 0, \"VariantType\", len);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialized_variant = result.unwrap();",
                "    assert_eq!(serialized_variant.name, \"VariantName\");",
                "    assert_eq!(serialized_variant.variant_index, 0);",
                "    assert_eq!(serialized_variant.variant, \"VariantType\");",
                "    assert_eq!(serialized_variant.fields.capacity(), len);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let len = usize::MAX;",
                "    let result = serializer.serialize_struct_variant(\"VariantName\", 0, \"VariantType\", len);",
                "    assert!(result.is_ok());",
                "    let serialized_variant = result.unwrap();",
                "    assert_eq!(serialized_variant.name, \"VariantName\");",
                "    assert_eq!(serialized_variant.variant_index, 0);",
                "    assert_eq!(serialized_variant.variant, \"VariantType\");",
                "    assert_eq!(serialized_variant.fields.capacity(), len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}