{
  "name": "serde::__private::ser::content::{impl#6}::serialize_tuple_variant",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:710:9:724:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(SerializeTupleVariant {\n                name,\n                variant_index,\n                variant,\n                fields: Vec::with_capacity(len),\n                error: PhantomData,\n            })\n"
      ],
      "input_infer": "name: non-empty static string; variant_index: any non-negative integer; variant: non-empty static string; len: non-negative integer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"TestStruct\";",
                "    let variant_index = 0;",
                "    let variant = \"TestVariant\";",
                "    let len = 2;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    let result_value = _result.unwrap();",
                "    assert_eq!(result_value.name, \"TestStruct\");",
                "    assert_eq!(result_value.variant_index, 0);",
                "    assert_eq!(result_value.variant, \"TestVariant\");",
                "    assert_eq!(result_value.fields.capacity(), 2);"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"TestStruct\";",
                "    let variant_index = 0;",
                "    let variant = \"TestVariant\";",
                "    let len = 2;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "    assert_eq!(_result.is_ok(), true);",
                "    let result_value = _result.unwrap();",
                "    assert_eq!(result_value.name, \"TestStruct\");",
                "    assert_eq!(result_value.variant_index, 0);",
                "    assert_eq!(result_value.variant, \"TestVariant\");",
                "    assert_eq!(result_value.fields.capacity(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"EmptyStruct\";",
                "    let variant_index = 0;",
                "    let variant = \"EmptyVariant\";",
                "    let len = 0;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(SerializeTupleVariant {",
                "    name: \"EmptyStruct\",",
                "    variant_index: 0,",
                "    variant: \"EmptyVariant\",",
                "    fields: Vec::with_capacity(0),",
                "    error: PhantomData,",
                "    }));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"EmptyStruct\";",
                "    let variant_index = 0;",
                "    let variant = \"EmptyVariant\";",
                "    let len = 0;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "    assert_eq!(_result, Ok(SerializeTupleVariant {",
                "    name: \"EmptyStruct\",",
                "    variant_index: 0,",
                "    variant: \"EmptyVariant\",",
                "    fields: Vec::with_capacity(0),",
                "    error: PhantomData,",
                "    }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"LargeStruct\";",
                "    let variant_index = 1;",
                "    let variant = \"LargeVariant\";",
                "    let len = 1000;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(SerializeTupleVariant {",
                "    name: \"LargeStruct\",",
                "    variant_index: 1,",
                "    variant: \"LargeVariant\",",
                "    fields: Vec::with_capacity(1000),",
                "    error: PhantomData,",
                "    }));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"LargeStruct\";",
                "    let variant_index = 1;",
                "    let variant = \"LargeVariant\";",
                "    let len = 1000;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "    assert_eq!(_result, Ok(SerializeTupleVariant {",
                "    name: \"LargeStruct\",",
                "    variant_index: 1,",
                "    variant: \"LargeVariant\",",
                "    fields: Vec::with_capacity(1000),",
                "    error: PhantomData,",
                "    }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"MaxIndexStruct\";",
                "    let variant_index = u32::MAX;",
                "    let variant = \"MaxIndexVariant\";",
                "    let len = 1;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(SerializeTupleVariant { name, variant_index, variant, fields: Vec::with_capacity(len), error: PhantomData }));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let name = \"MaxIndexStruct\";",
                "    let variant_index = u32::MAX;",
                "    let variant = \"MaxIndexVariant\";",
                "    let len = 1;",
                "    let _result = serializer.serialize_tuple_variant(name, variant_index, variant, len);",
                "    assert_eq!(_result, Ok(SerializeTupleVariant { name, variant_index, variant, fields: Vec::with_capacity(len), error: PhantomData }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}