{
  "name": "serde::de::Visitor::visit_bool",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1315:5:1320:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Bool(v), &self))\n"
      ],
      "input_infer": "boolean value input: true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), _> = visitor.visit_bool(true);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Err(Error::invalid_type(Unexpected::Bool(true), &_))));",
                "    assert_eq!(result.is_err(), true);"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), _> = visitor.visit_bool(true);",
                "    assert!(matches!(result, Err(Error::invalid_type(Unexpected::Bool(true), &_))));",
                "    assert_eq!(result.is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), _> = visitor.visit_bool(false);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bool(false), &visitor));",
                "    let result_true: Result<(), _> = visitor.visit_bool(true);",
                "    assert!(result_true.is_err());",
                "    assert_eq!(result_true.unwrap_err(), Error::invalid_type(Unexpected::Bool(true), &visitor));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), _> = visitor.visit_bool(false);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bool(false), &visitor));",
                "    let result_true: Result<(), _> = visitor.visit_bool(true);",
                "    assert!(result_true.is_err());",
                "    assert_eq!(result_true.unwrap_err(), Error::invalid_type(Unexpected::Bool(true), &visitor));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}