{
  "name": "serde::__private::ser::{impl#4}::serialize_i16",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1029:5:1031:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Integer))\n"
      ],
      "input_infer": "i16 values ranging from -32768 to 32767 (inclusive) for the serialize_i16 function invoking the expected error condition.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(-32768);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i16(-32768), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(0), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(32767), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(12345), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(-1), Err(TestSerializer::bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(-32768);",
                "    assert_eq!(serializer.serialize_i16(-32768), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(0), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(32767), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(12345), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "    assert_eq!(serializer.serialize_i16(-1), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i16(-1), Err(TestSerializer::bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(-1);",
                "    assert_eq!(serializer.serialize_i16(-1), Err(TestSerializer::bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i16(0), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(0);",
                "    assert_eq!(serializer.serialize_i16(0), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i16(1), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(1);",
                "    assert_eq!(serializer.serialize_i16(1), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(32767);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i16(32767), Err(Error));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Integer))",
                "        }",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_i16(32767);",
                "    assert_eq!(serializer.serialize_i16(32767), Err(Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}