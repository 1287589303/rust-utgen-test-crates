{
  "name": "serde::de::ignored_any::{impl#0}::visit_i128",
  "mod_info": {
    "name": "de::ignored_any",
    "loc": "serde/src/de/mod.rs:121:1:121:17"
  },
  "visible": true,
  "loc": "serde/src/de/ignored_any.rs:133:5:136:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(IgnoredAny)\n"
      ],
      "input_infer": "i128 values including edge cases -128, 0, 127, 128, 2^63-1, -2^63, 2^64-1, -2^64 and random values within i128 range\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-128);",
                "}"
              ],
              "oracle": [
                "    result.unwrap() == IgnoredAny;"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-128);",
                "    result.unwrap() == IgnoredAny;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(0);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(127);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(128);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(2i128.pow(63) - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(2i128.pow(63) - 1);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-2i128.pow(63));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-2i128.pow(63));",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(2i128.pow(64) - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(-2i128.pow(64));",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(0);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(i128::MAX);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(i128::MIN);",
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(2i128.pow(64) - 1);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(-2i128.pow(64));",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(0);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(i128::MAX);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result = visitor.visit_i128(i128::MIN);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-2i128.pow(64));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(-2i128.pow(64));",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(123456789012345678901234567890i128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let result = visitor.visit_i128(123456789012345678901234567890i128);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}