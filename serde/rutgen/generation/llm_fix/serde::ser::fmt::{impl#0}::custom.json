{
  "name": "serde::ser::fmt::{impl#0}::custom",
  "mod_info": {
    "name": "ser::fmt",
    "loc": "serde/src/ser/mod.rs:112:1:112:9"
  },
  "visible": true,
  "loc": "serde/src/ser/fmt.rs:5:5:7:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: fmt::Error\n"
      ],
      "input_infer": "_msg can be any type that implements the Display trait, including strings, numbers, or custom types; test input conditions: valid Display types and empty Display types (e.g., \"test\", 123, MyStruct implementing Display).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = fmt::Error::custom(\"test string\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, fmt::Error);"
              ],
              "code": [
                "{",
                "    let error = fmt::Error::custom(\"test string\");",
                "    assert_eq!(error, fmt::Error);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = fmt::Error::custom(123);",
                "}"
              ],
              "oracle": [
                "    let error = fmt::Error::custom(123);",
                "    assert_eq!(error, fmt::Error);"
              ],
              "code": [
                "{",
                "    let error = fmt::Error::custom(123);",
                "    let error = fmt::Error::custom(123);",
                "    assert_eq!(error, fmt::Error);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = fmt::Error::custom(\"\");",
                "}"
              ],
              "oracle": [
                "    let error = fmt::Error::custom(\"\");",
                "    assert_eq!(error, fmt::Error);"
              ],
              "code": [
                "{",
                "    let error = fmt::Error::custom(\"\");",
                "    let error = fmt::Error::custom(\"\");",
                "    assert_eq!(error, fmt::Error);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyStruct;",
                "    impl std::fmt::Display for MyStruct {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"MyStruct display\");",
                "        }",
                "    }",
                "",
                "    let my_struct = MyStruct;",
                "    let error = fmt::Error::custom(my_struct);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, fmt::Error);"
              ],
              "code": [
                "{",
                "    struct MyStruct;",
                "    impl std::fmt::Display for MyStruct {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"MyStruct display\");",
                "        }",
                "    }",
                "",
                "    let my_struct = MyStruct;",
                "    let error = fmt::Error::custom(my_struct);",
                "    assert_eq!(error, fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}