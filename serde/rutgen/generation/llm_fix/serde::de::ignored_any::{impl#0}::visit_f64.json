{
  "name": "serde::de::ignored_any::{impl#0}::visit_f64",
  "mod_info": {
    "name": "de::ignored_any",
    "loc": "serde/src/de/mod.rs:121:1:121:17"
  },
  "visible": true,
  "loc": "serde/src/de/ignored_any.rs:151:5:154:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(IgnoredAny)\n"
      ],
      "input_infer": "test input conditions or ranges: any valid f64 value including NaN, -1.0, 0.0, and 1.0, as well as edge cases like std::f64::MIN, std::f64::MAX, std::f64::INFINITY, and -std::f64::INFINITY\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(-1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(-1.0);",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.23), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.23), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(0.0);",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.23), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.23), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(1.0);",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::MIN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(std::f64::MIN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::MIN);",
                "    assert_eq!(visitor.visit_f64(std::f64::MIN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::MAX);",
                "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-3.14), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::INFINITY);",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-3.14), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(-std::f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(-std::f64::INFINITY);",
                "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    let visitor = IgnoredAny;",
                "    let _ = visitor.visit_f64(std::f64::NAN);",
                "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
                "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}