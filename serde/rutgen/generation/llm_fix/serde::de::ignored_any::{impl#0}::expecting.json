{
  "name": "serde::de::ignored_any::{impl#0}::expecting",
  "mod_info": {
    "name": "de::ignored_any",
    "loc": "serde/src/de/mod.rs:121:1:121:17"
  },
  "visible": true,
  "loc": "serde/src/de/ignored_any.rs:116:5:118:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: IgnoredAny, formatter: &mut fmt::Formatter (valid reference to a formatter), expected return: fmt::Result.\n",
      "answers": [
        {
          "uses": [
            "use std::fmt;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt;",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let ignored_any = IgnoredAny;",
                "    let _ = ignored_any.expecting(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.output, \"anything at all\");",
                "    assert!(formatter.output.len() > 0);",
                "    assert!(formatter.output.contains(\"anything at all\"));",
                "    assert!(formatter.output == \"anything at all\");",
                "    assert!(formatter.output.is_ascii());",
                "    assert!(formatter.output.chars().count() == 17);"
              ],
              "code": [
                "{",
                "    use std::fmt;",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let ignored_any = IgnoredAny;",
                "    let _ = ignored_any.expecting(&mut formatter);",
                "    assert_eq!(formatter.output, \"anything at all\");",
                "    assert!(formatter.output.len() > 0);",
                "    assert!(formatter.output.contains(\"anything at all\"));",
                "    assert!(formatter.output == \"anything at all\");",
                "    assert!(formatter.output.is_ascii());",
                "    assert!(formatter.output.chars().count() == 17);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt;",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let ignored_any = IgnoredAny;",
                "    let _ = ignored_any.expecting(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.output, \"anything at all\");"
              ],
              "code": [
                "{",
                "    use std::fmt;",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let ignored_any = IgnoredAny;",
                "    let _ = ignored_any.expecting(&mut formatter);",
                "    assert_eq!(formatter.output, \"anything at all\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}