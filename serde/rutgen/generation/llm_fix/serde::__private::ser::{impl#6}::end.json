{
  "name": "serde::__private::ser::{impl#6}::end",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1239:5:1241:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "self is a valid FlatMapSerializeStruct instance and M is a SerializeMap implementation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    let result = struct_serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    let result = struct_serializer.end();",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    struct_serializer.serialize_field(\"key1\", &\"value1\").unwrap();",
                "    struct_serializer.serialize_field(\"key2\", &\"value2\").unwrap();",
                "    let result = struct_serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    struct_serializer.serialize_field(\"key1\", &\"value1\").unwrap();",
                "    struct_serializer.serialize_field(\"key2\", &\"value2\").unwrap();",
                "    let result = struct_serializer.end();",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    let result = struct_serializer.end();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct DummyMap;",
                "",
                "    impl SerializeMap for DummyMap {",
                "        type Error = ();",
                "",
                "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
                "        where",
                "            K: Serialize,",
                "            V: Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut map = DummyMap;",
                "    let mut struct_serializer = FlatMapSerializeStruct(&mut map);",
                "    let result = struct_serializer.end();",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}