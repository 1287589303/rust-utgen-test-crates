{
  "name": "serde::__private::ser::content::{impl#6}::serialize_u8",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:592:9:594:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::U8(v))\n"
      ],
      "input_infer": "Input range for u8 values: 0 to 255 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U8(0)));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(Content::U8(255)));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(Content::U8(1)));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(Content::U8(128)));",
                "    let result = serializer.serialize_u8(10);",
                "    assert_eq!(result, Ok(Content::U8(10)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(0);",
                "    assert_eq!(result, Ok(Content::U8(0)));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(Content::U8(255)));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(Content::U8(1)));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(Content::U8(128)));",
                "    let result = serializer.serialize_u8(10);",
                "    assert_eq!(result, Ok(Content::U8(10)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U8(255)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(Content::U8(255)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U8(128)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(Content::U8(128)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(1);",
                "}"
              ],
              "oracle": [
                "    result.unwrap() == Content::U8(1)"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(1);",
                "    result.unwrap() == Content::U8(1)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(50);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::U8(50)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_u8(50);",
                "    assert_eq!(result, Ok(Content::U8(50)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}