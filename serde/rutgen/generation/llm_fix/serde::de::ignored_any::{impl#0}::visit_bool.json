{
  "name": "serde::de::ignored_any::{impl#0}::visit_bool",
  "mod_info": {
    "name": "de::ignored_any",
    "loc": "serde/src/de/mod.rs:121:1:121:17"
  },
  "visible": true,
  "loc": "serde/src/de/ignored_any.rs:121:5:124:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(IgnoredAny)\n"
      ],
      "input_infer": "test input conditions: boolean values (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = IgnoredAny;",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bool(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = IgnoredAny;",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bool(true);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = IgnoredAny;",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bool(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result_true = visitor.visit_bool(true);",
                "    assert_eq!(result_true, Ok(IgnoredAny));",
                "    let result_empty = visitor.visit_bool(false);",
                "    assert!(result_empty.is_ok());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = IgnoredAny;",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bool(false);",
                "    assert_eq!(result, Ok(IgnoredAny));",
                "    let result_true = visitor.visit_bool(true);",
                "    assert_eq!(result_true, Ok(IgnoredAny));",
                "    let result_empty = visitor.visit_bool(false);",
                "    assert!(result_empty.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}