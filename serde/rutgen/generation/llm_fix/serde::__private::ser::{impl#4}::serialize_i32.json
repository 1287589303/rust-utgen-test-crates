{
  "name": "serde::__private::ser::{impl#4}::serialize_i32",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1033:5:1035:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Integer))\n"
      ],
      "input_infer": "i32 input values: any valid 32-bit integer, including boundary cases like -2147483648, -1, 0, 1, and 2147483647\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MIN);",
                "}"
              ],
              "oracle": [
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MIN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));"
              ],
              "code": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MIN);",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MIN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(-1);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(0);",
                "}"
              ],
              "oracle": [
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(0);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");"
              ],
              "code": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(0);",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(0);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");"
              ],
              "code": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(1);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MAX);",
                "}"
              ],
              "oracle": [
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MAX);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), FlatMapSerializer::bad_type(Unsupported::Integer));"
              ],
              "code": [
                "{",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MAX);",
                "    let mut map = std::collections::HashMap::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_i32(i32::MAX);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), FlatMapSerializer::bad_type(Unsupported::Integer));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}