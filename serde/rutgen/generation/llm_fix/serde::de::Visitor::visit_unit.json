{
  "name": "serde::de::Visitor::visit_unit",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1625:5:1630:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Unit, &self))\n"
      ],
      "input_infer": "Test input conditions: invoke visit_unit with any type implementing Error where E: Error.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"Test Visitor\")",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), &dyn StdError> = visitor.visit_unit();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Unit, &visitor));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"Test Visitor\")",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), &dyn StdError> = visitor.visit_unit();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Unit, &visitor));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"Test Visitor\")",
                "        }",
                "    }",
                "",
                "    struct CustomError;",
                "    impl std::fmt::Debug for CustomError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
                "            write!(f, \"CustomError\")",
                "        }",
                "    }",
                "    ",
                "    impl std::error::Error for CustomError {}",
                "    ",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), CustomError> = visitor.visit_unit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unit, &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"Test Visitor\")",
                "        }",
                "    }",
                "",
                "    struct CustomError;",
                "    impl std::fmt::Debug for CustomError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
                "            write!(f, \"CustomError\")",
                "        }",
                "    }",
                "    ",
                "    impl std::error::Error for CustomError {}",
                "    ",
                "    let visitor = TestVisitor;",
                "    let result: Result<(), CustomError> = visitor.visit_unit();",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unit, &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}