{
  "name": "serde::__private::ser::content::{impl#6}::serialize_bytes",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:624:9:626:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Bytes(value.to_owned()))\n"
      ],
      "input_infer": "valid input: non-empty slice of u8, empty slice of u8, and slice at boundary size (max and min slice lengths)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[1, 2, 3, 4, 5];",
                "    let _ = serializer.serialize_bytes(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3, 4, 5]), Ok(Content::Bytes(vec![1, 2, 3, 4, 5])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[10, 20, 30]), Ok(Content::Bytes(vec![10, 20, 30])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Content::Bytes(vec![255])));"
              ],
              "code": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[1, 2, 3, 4, 5];",
                "    let _ = serializer.serialize_bytes(input);",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3, 4, 5]), Ok(Content::Bytes(vec![1, 2, 3, 4, 5])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[10, 20, 30]), Ok(Content::Bytes(vec![10, 20, 30])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Content::Bytes(vec![255])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[];",
                "    let _ = serializer.serialize_bytes(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Content::Bytes(vec![1, 2, 3])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Content::Bytes(vec![255])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 0, 0]), Ok(Content::Bytes(vec![0, 0, 0])));",
                "    assert_eq!(serializer.serialize_bytes(b\"test\"), Ok(Content::Bytes(vec![116, 101, 115, 116])));"
              ],
              "code": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[];",
                "    let _ = serializer.serialize_bytes(input);",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Content::Bytes(vec![1, 2, 3])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Content::Bytes(vec![255])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 0, 0]), Ok(Content::Bytes(vec![0, 0, 0])));",
                "    assert_eq!(serializer.serialize_bytes(b\"test\"), Ok(Content::Bytes(vec![116, 101, 115, 116])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[0];",
                "    let _ = serializer.serialize_bytes(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[0]), Ok(Content::Bytes(vec![0])));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Content::Bytes(vec![1, 2, 3])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MAX]), Ok(Content::Bytes(vec![u8::MAX])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MIN]), Ok(Content::Bytes(vec![u8::MIN])));"
              ],
              "code": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[0];",
                "    let _ = serializer.serialize_bytes(input);",
                "    assert_eq!(serializer.serialize_bytes(&[0]), Ok(Content::Bytes(vec![0])));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Content::Bytes(vec![1, 2, 3])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MAX]), Ok(Content::Bytes(vec![u8::MAX])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MIN]), Ok(Content::Bytes(vec![u8::MIN])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[",
                "        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,",
                "        // Fill out to arbitrary large size for testing.",
                "    ];",
                "    let _ = serializer.serialize_bytes(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[1]), Ok(Content::Bytes(vec![1])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 255]), Ok(Content::Bytes(vec![0, 255])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MAX]), Ok(Content::Bytes(vec![u8::MAX])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 1, 2, 3]), Ok(Content::Bytes(vec![0, 1, 2, 3])));",
                "    let input_large = (0..255).collect::<Vec<u8>>();",
                "    assert_eq!(serializer.serialize_bytes(&input_large), Ok(Content::Bytes(input_large.clone())));"
              ],
              "code": [
                "{",
                "    let serializer: ContentSerializer<()>;",
                "    let input: &[u8] = &[",
                "        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,",
                "        // Fill out to arbitrary large size for testing.",
                "    ];",
                "    let _ = serializer.serialize_bytes(input);",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Content::Bytes(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[1]), Ok(Content::Bytes(vec![1])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 255]), Ok(Content::Bytes(vec![0, 255])));",
                "    assert_eq!(serializer.serialize_bytes(&[u8::MAX]), Ok(Content::Bytes(vec![u8::MAX])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 1, 2, 3]), Ok(Content::Bytes(vec![0, 1, 2, 3])));",
                "    let input_large = (0..255).collect::<Vec<u8>>();",
                "    assert_eq!(serializer.serialize_bytes(&input_large), Ok(Content::Bytes(input_large.clone())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}