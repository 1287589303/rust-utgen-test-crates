{
  "name": "serde::de::Visitor::visit_f32",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1451:5:1456:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid f32 inputs including edge cases like -3.4028235E38, -1.0, 0.0, 1.0, 3.4028235E38, and NaN; ensure E implements Error type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(-3.4028235E38f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `-3.4028235E38`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(3.4028235E38f32);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `3.4028235E38`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(0.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `0.0`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(1.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `1.0`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(-1.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `-1.0`, expected a float\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(-3.4028235E38f32);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `-3.4028235E38`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(3.4028235E38f32);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `3.4028235E38`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(0.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `0.0`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(1.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `1.0`, expected a float\");",
                "    ",
                "    let _result = visitor.visit_f32(-1.0);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"invalid type: float `-1.0`, expected a float\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(-1.0f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(-1.0f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(-1.0), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(0.0f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(0.0f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(1.0f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));",
                "    assert!(visitor.visit_f32(f32::NAN).is_err());",
                "    assert!(visitor.visit_f32(f32::INFINITY).is_err());",
                "    assert!(visitor.visit_f32(f32::NEG_INFINITY).is_err());",
                "    assert!(visitor.visit_f32(0.0f32).is_ok());",
                "    assert!(visitor.visit_f32(-1.0f32).is_ok());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(1.0f32);",
                "    assert_eq!(_result, Ok(()));",
                "    assert!(visitor.visit_f32(f32::NAN).is_err());",
                "    assert!(visitor.visit_f32(f32::INFINITY).is_err());",
                "    assert!(visitor.visit_f32(f32::NEG_INFINITY).is_err());",
                "    assert!(visitor.visit_f32(0.0f32).is_ok());",
                "    assert!(visitor.visit_f32(-1.0f32).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(3.4028235E38f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(3.4028235E38f32), &visitor)));",
                "    let _result = visitor.visit_f32(-3.4028235E38f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(-3.4028235E38f32), &visitor)));",
                "    let _result = visitor.visit_f32(0.0f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    let _result = visitor.visit_f32(f32::NAN);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(f32::NAN), &visitor)));",
                "    let _result = visitor.visit_f32(f32::INFINITY);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(f32::INFINITY), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(3.4028235E38f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(3.4028235E38f32), &visitor)));",
                "    let _result = visitor.visit_f32(-3.4028235E38f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(-3.4028235E38f32), &visitor)));",
                "    let _result = visitor.visit_f32(0.0f32);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(0.0), &visitor)));",
                "    let _result = visitor.visit_f32(f32::NAN);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(f32::NAN), &visitor)));",
                "    let _result = visitor.visit_f32(f32::INFINITY);",
                "    assert_eq!(_result, Err(Error::invalid_type(Unexpected::Float(f32::INFINITY), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().kind(), ErrorKind::InvalidType);",
                "    assert_eq!(_result.unwrap_err().message(), \"expected a float\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        ",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(formatter, \"a float\")",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor;",
                "    let _result = visitor.visit_f32(f32::NAN);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().kind(), ErrorKind::InvalidType);",
                "    assert_eq!(_result.unwrap_err().message(), \"expected a float\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}