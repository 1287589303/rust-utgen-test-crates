[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(0), &visitor)));",
          "    ",
          "    let result: Result<(), _> = visitor.visit_u64(1);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));",
          "    ",
          "    let result: Result<(), _> = visitor.visit_u64(u64::MAX);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(u64::MAX), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(0), &visitor)));",
          "    ",
          "    let result: Result<(), _> = visitor.visit_u64(1);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));",
          "    ",
          "    let result: Result<(), _> = visitor.visit_u64(u64::MAX);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(u64::MAX), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(1);",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(12345678901234);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(12345678901234), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(12345678901234);",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(12345678901234), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(18446744073709551615);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(18446744073709551615), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"test\")",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_u64(18446744073709551615);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Unsigned(18446744073709551615), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]