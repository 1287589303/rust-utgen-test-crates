[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "",
          "    let instance: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: std::mem::MaybeUninit::uninit().assume_init(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    let _result = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<ValidOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<ValidError>(), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let instance: Impossible<ValidOk, ValidError> = Impossible {",
          "    void: std::mem::MaybeUninit::uninit().assume_init(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    true",
          "    }).is_err());",
          "    assert!(std::mem::size_of::<Error>() > 0);"
        ],
        "code": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "",
          "    let instance: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: std::mem::MaybeUninit::uninit().assume_init(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    let _result = instance.end();",
          "    assert_eq!(std::mem::size_of::<ValidOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<ValidError>(), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let instance: Impossible<ValidOk, ValidError> = Impossible {",
          "    void: std::mem::MaybeUninit::uninit().assume_init(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    true",
          "    }).is_err());",
          "    assert!(std::mem::size_of::<Error>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct PanicOk;",
          "    struct PanicError;",
          "",
          "    let instance: Impossible<PanicOk, PanicError> = Impossible {",
          "        void: std::mem::MaybeUninit::uninit().assume_init(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    let _result = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let instance: Impossible<_, _> = Impossible {",
          "    void: std::mem::MaybeUninit::uninit().assume_init(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    let _result = instance.end();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct PanicOk;",
          "    struct PanicError;",
          "",
          "    let instance: Impossible<PanicOk, PanicError> = Impossible {",
          "        void: std::mem::MaybeUninit::uninit().assume_init(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    let _result = instance.end();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let instance: Impossible<_, _> = Impossible {",
          "    void: std::mem::MaybeUninit::uninit().assume_init(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    let _result = instance.end();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]