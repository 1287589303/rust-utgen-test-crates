[
  {
    "uses": [
      "use crate::de::Error;",
      "use crate::de::Visitor;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::de::Error;",
          "    use crate::de::Visitor;",
          "",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_enum<V>(self, _deserializer: V) -> Result<Self::Value, Error>",
          "        where",
          "            V: EnumAccess<'de>,",
          "        {",
          "            Err(Error::custom(\"expected only one key\"))",
          "        }",
          "",
          "        // Other necessary Visitor methods can be empty for this test",
          "        fn visit_bool(self, _: bool) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Error> { Ok(()) }",
          "        // Other methods omitted for brevity...",
          "    }",
          "",
          "    let content = Content::Map(vec![",
          "        (Content::Str(\"variant1\"), Content::Str(\"value1\")),",
          "        (Content::Str(\"variant2\"), Content::Str(\"value2\")),",
          "    ]);",
          "",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_enum(\"TestEnum\", &[\"variant1\", \"variant2\"], MockVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    deserializer.deserialize_enum(\"TestEnum\", &[\"variant1\", \"variant2\"], MockVisitor),",
          "    Err(Error::invalid_value(Unexpected::Map, &\"map with a single key\"))",
          "    );"
        ],
        "code": [
          "{",
          "    use crate::de::Error;",
          "    use crate::de::Visitor;",
          "",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_enum<V>(self, _deserializer: V) -> Result<Self::Value, Error>",
          "        where",
          "            V: EnumAccess<'de>,",
          "        {",
          "            Err(Error::custom(\"expected only one key\"))",
          "        }",
          "",
          "        // Other necessary Visitor methods can be empty for this test",
          "        fn visit_bool(self, _: bool) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Error> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Error> { Ok(()) }",
          "        // Other methods omitted for brevity...",
          "    }",
          "",
          "    let content = Content::Map(vec![",
          "        (Content::Str(\"variant1\"), Content::Str(\"value1\")),",
          "        (Content::Str(\"variant2\"), Content::Str(\"value2\")),",
          "    ]);",
          "",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_enum(\"TestEnum\", &[\"variant1\", \"variant2\"], MockVisitor);",
          "    assert_eq!(",
          "    deserializer.deserialize_enum(\"TestEnum\", &[\"variant1\", \"variant2\"], MockVisitor),",
          "    Err(Error::invalid_value(Unexpected::Map, &\"map with a single key\"))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]