[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"TestEnum\", 0, \"VariantA\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.serialized.len(), 1);",
          "    assert_eq!(map.serialized[0].0, \"VariantA\");"
        ],
        "code": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"TestEnum\", 0, \"VariantA\");",
          "    assert_eq!(map.serialized.len(), 1);",
          "    assert_eq!(map.serialized[0].0, \"VariantA\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"AnotherEnum\", 1, \"VariantB\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.serialized.len(), 1);",
          "    assert_eq!(map.serialized[0].0, \"VariantB\");",
          "    assert_eq!(map.serialized[0].1, ());"
        ],
        "code": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"AnotherEnum\", 1, \"VariantB\");",
          "    assert_eq!(map.serialized.len(), 1);",
          "    assert_eq!(map.serialized[0].0, \"VariantB\");",
          "    assert_eq!(map.serialized[0].1, ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"InvalidEnum\", u32::MAX, \"VariantC\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.serialized.len(), 0);",
          "    let result = serializer.serialize_unit_variant(\"InvalidEnum\", u32::MAX, \"VariantC\");",
          "    assert!(result.is_err());",
          "    assert_eq!(map.serialized.len(), 0);"
        ],
        "code": [
          "{",
          "    struct MockMap {",
          "        serialized: Vec<(String, ())>,",
          "    }",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn serialize_key(&mut self, key: &str) -> Result<(), Self::Error> {",
          "            self.serialized.push((key.to_string(), ()));",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry(&mut self, _key: &str, _: &()) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap { serialized: Vec::new() };",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_unit_variant(\"InvalidEnum\", u32::MAX, \"VariantC\");",
          "    assert_eq!(map.serialized.len(), 0);",
          "    let result = serializer.serialize_unit_variant(\"InvalidEnum\", u32::MAX, \"VariantC\");",
          "    assert!(result.is_err());",
          "    assert_eq!(map.serialized.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]