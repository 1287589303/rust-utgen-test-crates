[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-1.7976931348623157E+308);",
          "}"
        ],
        "oracle": [
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
          "    assert_eq!(result, Ok(Content::F64(-1.7976931348623157E+308)));",
          "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
          "    assert_eq!(result, Ok(Content::F64(1.7976931348623157E+308)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Content::F64(0.0)));",
          "    let result = serializer.serialize_f64(-0.0);",
          "    assert_eq!(result, Ok(Content::F64(-0.0)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert!(matches!(content, Content::F64(_)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-1.7976931348623157E+308);",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
          "    assert_eq!(result, Ok(Content::F64(-1.7976931348623157E+308)));",
          "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
          "    assert_eq!(result, Ok(Content::F64(1.7976931348623157E+308)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Content::F64(0.0)));",
          "    let result = serializer.serialize_f64(-0.0);",
          "    assert_eq!(result, Ok(Content::F64(-0.0)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert!(matches!(content, Content::F64(_)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Content::F64(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Content::F64(f64::NEG_INFINITY)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(1.7976931348623157E+308);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(1.7976931348623157E+308), Ok(Content::F64(1.7976931348623157E+308)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(-0.0), Ok(Content::F64(-0.0)));",
          "    assert_eq!(serializer.serialize_f64(3.14159), Ok(Content::F64(3.14159)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Ok(Content::F64(f64::NAN)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(1.7976931348623157E+308);",
          "    assert_eq!(serializer.serialize_f64(1.7976931348623157E+308), Ok(Content::F64(1.7976931348623157E+308)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(-0.0), Ok(Content::F64(-0.0)));",
          "    assert_eq!(serializer.serialize_f64(3.14159), Ok(Content::F64(3.14159)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Ok(Content::F64(f64::NAN)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.5), Ok(Content::F64(1.5)));",
          "    assert_eq!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(serializer.serialize_f64(2.71828), Ok(Content::F64(2.71828)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(0.0);",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.5), Ok(Content::F64(1.5)));",
          "    assert_eq!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(serializer.serialize_f64(2.71828), Ok(Content::F64(2.71828)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(-0.0), Ok(Content::F64(-0.0)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::INFINITY), Ok(Content::F64(std::f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::NEG_INFINITY), Ok(Content::F64(std::f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::NAN).is_err(), true);"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-0.0);",
          "    assert_eq!(serializer.serialize_f64(-0.0), Ok(Content::F64(-0.0)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::INFINITY), Ok(Content::F64(std::f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::NEG_INFINITY), Ok(Content::F64(std::f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(std::f64::NAN).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(1.0).unwrap(), Content::F64(1.0));",
          "    assert!(serializer.serialize_f64(f64::NAN).is_ok());",
          "    assert!(serializer.serialize_f64(f64::INFINITY).is_ok());",
          "    assert!(serializer.serialize_f64(f64::NEG_INFINITY).is_ok());",
          "    assert_eq!(serializer.serialize_f64(-1.0).unwrap(), Content::F64(-1.0));",
          "    assert_eq!(serializer.serialize_f64(0.0).unwrap(), Content::F64(0.0));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(1.0);",
          "    assert_eq!(serializer.serialize_f64(1.0).unwrap(), Content::F64(1.0));",
          "    assert!(serializer.serialize_f64(f64::NAN).is_ok());",
          "    assert!(serializer.serialize_f64(f64::INFINITY).is_ok());",
          "    assert!(serializer.serialize_f64(f64::NEG_INFINITY).is_ok());",
          "    assert_eq!(serializer.serialize_f64(-1.0).unwrap(), Content::F64(-1.0));",
          "    assert_eq!(serializer.serialize_f64(0.0).unwrap(), Content::F64(0.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(3.14159), Ok(Content::F64(3.14159)));",
          "    assert_eq!(serializer.serialize_f64(f64::MAX), Ok(Content::F64(f64::MAX)));",
          "    assert_eq!(serializer.serialize_f64(f64::MIN), Ok(Content::F64(f64::MIN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(-1.0);",
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(3.14159), Ok(Content::F64(3.14159)));",
          "    assert_eq!(serializer.serialize_f64(f64::MAX), Ok(Content::F64(f64::MAX)));",
          "    assert_eq!(serializer.serialize_f64(f64::MIN), Ok(Content::F64(f64::MIN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::NAN);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Ok(Content::F64(_))));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0))));",
          "    assert!(matches!(serializer.serialize_f64(1.5), Ok(Content::F64(1.5))));",
          "    assert!(matches!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14))));",
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY))));",
          "    assert!(matches!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY))));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::NAN);",
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Ok(Content::F64(_))));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0))));",
          "    assert!(matches!(serializer.serialize_f64(1.5), Ok(Content::F64(1.5))));",
          "    assert!(matches!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14))));",
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY))));",
          "    assert!(matches!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Ok(Content::F64(1.0)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Ok(Content::F64(-1.0)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14)));",
          "    assert_eq!(serializer.serialize_f64(3.14), Ok(Content::F64(3.14)));",
          "    assert_eq!(serializer.serialize_f64(f64::MAX), Ok(Content::F64(f64::MAX)));",
          "    assert_eq!(serializer.serialize_f64(f64::MIN), Ok(Content::F64(f64::MIN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Ok(Content::F64(f64::NEG_INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Ok(Content::F64(f64::INFINITY)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(serializer.serialize_f64(0.0), Ok(Content::F64(0.0)));",
          "    assert_eq!(serializer.serialize_f64(-3.14), Ok(Content::F64(-3.14)));",
          "    assert_eq!(serializer.serialize_f64(3.14), Ok(Content::F64(3.14)));",
          "    assert_eq!(serializer.serialize_f64(f64::MAX), Ok(Content::F64(f64::MAX)));",
          "    assert_eq!(serializer.serialize_f64(f64::MIN), Ok(Content::F64(f64::MIN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]