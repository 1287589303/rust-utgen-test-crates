[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", 0, \"Variant\", 0);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().map, &mut map);",
          "    assert_eq!(result.unwrap().fields.len(), 0);"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", 0, \"Variant\", 0);",
          "    let _ = result.unwrap();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().map, &mut map);",
          "    assert_eq!(result.unwrap().fields.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", 1, \"AnotherVariant\", 1);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let tuple_variant_value = result.unwrap();",
          "    assert_eq!(tuple_variant_value.fields.len(), 0);",
          "    assert_eq!(tuple_variant_value.map, &mut map);"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", 1, \"AnotherVariant\", 1);",
          "    let _ = result.unwrap();",
          "    assert!(result.is_ok());",
          "    let tuple_variant_value = result.unwrap();",
          "    assert_eq!(tuple_variant_value.fields.len(), 0);",
          "    assert_eq!(tuple_variant_value.map, &mut map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", u32::MAX, \"MaxVariant\", 0);",
          "    let _ = result.unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result.unwrap(), FlatMapSerializeTupleVariantAsMapValue { .. }));",
          "    assert_eq!(result.unwrap(), FlatMapSerializeTupleVariantAsMapValue::new(&mut map));",
          "    assert_eq!(serializer.serialize_tuple_variant(\"Test\", 0, \"Variant\", 0).is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "",
          "    impl SerializeMap for DummyMap {",
          "        type Error = ();",
          "        fn serialize_key(&mut self, _: &'static str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize { Ok(()) }",
          "        fn end(self) -> Result<(), Self::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_tuple_variant(\"Test\", u32::MAX, \"MaxVariant\", 0);",
          "    let _ = result.unwrap();",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result.unwrap(), FlatMapSerializeTupleVariantAsMapValue { .. }));",
          "    assert_eq!(result.unwrap(), FlatMapSerializeTupleVariantAsMapValue::new(&mut map));",
          "    assert_eq!(serializer.serialize_tuple_variant(\"Test\", 0, \"Variant\", 0).is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]