[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"key1\", \"key2\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    let empty_vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![];",
          "    let empty_deserializer = FlatMapDeserializer(&mut empty_vec, PhantomData);",
          "    assert!(matches!(empty_deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)));",
          "    let invalid_fields: &'static [&'static str] = &[\"invalid_key\"];",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", invalid_fields, visitor), Err(_)));",
          "    let single_entry_vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![Some((Content::Str(\"key1\"), Content::Str(\"value1\")))];",
          "    let single_entry_deserializer = FlatMapDeserializer(&mut single_entry_vec, PhantomData);",
          "    assert!(matches!(single_entry_deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    let visitor_with_error: TestVisitorWithError;",
          "    impl<'de> Visitor<'de> for TestVisitorWithError {",
          "    type Value = ();",
          "    fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error> {",
          "    Err(Error::custom(\"Visitor error\"))",
          "    }",
          "    }",
          "    let visitor_error = TestVisitorWithError;",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor_error), Err(_)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"key1\", \"key2\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    let empty_vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![];",
          "    let empty_deserializer = FlatMapDeserializer(&mut empty_vec, PhantomData);",
          "    assert!(matches!(empty_deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)));",
          "    let invalid_fields: &'static [&'static str] = &[\"invalid_key\"];",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", invalid_fields, visitor), Err(_)));",
          "    let single_entry_vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![Some((Content::Str(\"key1\"), Content::Str(\"value1\")))];",
          "    let single_entry_deserializer = FlatMapDeserializer(&mut single_entry_vec, PhantomData);",
          "    assert!(matches!(single_entry_deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    let visitor_with_error: TestVisitorWithError;",
          "    impl<'de> Visitor<'de> for TestVisitorWithError {",
          "    type Value = ();",
          "    fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error> {",
          "    Err(Error::custom(\"Visitor error\"))",
          "    }",
          "    }",
          "    let visitor_error = TestVisitorWithError;",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor_error), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor).is_ok(), true);",
          "    assert!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor).is_ok());",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)) == false);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "    assert_eq!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor).is_ok(), true);",
          "    assert!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor).is_ok());",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(())));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\")))",
          "    ];",
          "",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"non_existing_key\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", &[], visitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", &[\"key1\"], visitor), Ok(_)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\")))",
          "    ];",
          "",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"non_existing_key\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", &[], visitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_struct(\"TestStruct\", &[\"key1\"], visitor), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        None,",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"key1\", \"key2\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(()));",
          "    assert!(vec[0].is_some());",
          "    assert_eq!(vec[0].as_ref().unwrap().0, Content::Str(\"key1\"));",
          "    assert_eq!(vec[0].as_ref().unwrap().1, Content::Str(\"value1\"));",
          "    assert!(vec[1].is_none());",
          "    assert!(vec[2].is_some());",
          "    assert_eq!(vec[2].as_ref().unwrap().0, Content::Str(\"key2\"));",
          "    assert_eq!(vec[2].as_ref().unwrap().1, Content::Str(\"value2\"));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_map<V>(self, _map: V) -> Result<Self::Value, Self::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut vec: Vec<Option<(Content<'static>, Content<'static>)>> = vec![",
          "        Some((Content::Str(\"key1\"), Content::Str(\"value1\"))),",
          "        None,",
          "        Some((Content::Str(\"key2\"), Content::Str(\"value2\")))",
          "    ];",
          "    ",
          "    let deserializer = FlatMapDeserializer(&mut vec, PhantomData);",
          "    let fields: &'static [&'static str] = &[\"key1\", \"key2\"];",
          "    let visitor = TestVisitor;",
          "",
          "    let _ = deserializer.deserialize_struct(\"TestStruct\", fields, visitor);",
          "    assert_eq!(deserializer.deserialize_struct(\"TestStruct\", fields, visitor), Ok(()));",
          "    assert!(vec[0].is_some());",
          "    assert_eq!(vec[0].as_ref().unwrap().0, Content::Str(\"key1\"));",
          "    assert_eq!(vec[0].as_ref().unwrap().1, Content::Str(\"value1\"));",
          "    assert!(vec[1].is_none());",
          "    assert!(vec[2].is_some());",
          "    assert_eq!(vec[2].as_ref().unwrap().0, Content::Str(\"key2\"));",
          "    assert_eq!(vec[2].as_ref().unwrap().1, Content::Str(\"value2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]