[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "    }",
          "",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u64 = Content::U64(42);",
          "    let deserializer_u64 = ContentRefDeserializer {",
          "    content: &content_u64,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u64.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i64 = Content::I64(42);",
          "    let deserializer_i64 = ContentRefDeserializer {",
          "    content: &content_i64,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i64.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u8 = Content::U8(255);",
          "    let deserializer_u8 = ContentRefDeserializer {",
          "    content: &content_u8,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u8.deserialize_integer(TestVisitor), Ok(()));",
          "    let content_i32 = Content::I32(42);",
          "    let deserializer_i32 = ContentRefDeserializer {",
          "    content: &content_i32,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i32.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i16 = Content::I16(42);",
          "    let deserializer_i16 = ContentRefDeserializer {",
          "    content: &content_i16,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i16.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i8 = Content::I8(42);",
          "    let deserializer_i8 = ContentRefDeserializer {",
          "    content: &content_i8,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i8.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u32 = Content::U32(42);",
          "    let deserializer_u32 = ContentRefDeserializer {",
          "    content: &content_u32,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u32.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u16 = Content::U16(42);",
          "    let deserializer_u16 = ContentRefDeserializer {",
          "    content: &content_u16,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u16.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u8\".into())",
          "        }",
          "    }",
          "",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u64 = Content::U64(42);",
          "    let deserializer_u64 = ContentRefDeserializer {",
          "    content: &content_u64,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u64.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i64 = Content::I64(42);",
          "    let deserializer_i64 = ContentRefDeserializer {",
          "    content: &content_i64,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i64.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u8 = Content::U8(255);",
          "    let deserializer_u8 = ContentRefDeserializer {",
          "    content: &content_u8,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u8.deserialize_integer(TestVisitor), Ok(()));",
          "    let content_i32 = Content::I32(42);",
          "    let deserializer_i32 = ContentRefDeserializer {",
          "    content: &content_i32,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i32.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i16 = Content::I16(42);",
          "    let deserializer_i16 = ContentRefDeserializer {",
          "    content: &content_i16,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i16.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_i8 = Content::I8(42);",
          "    let deserializer_i8 = ContentRefDeserializer {",
          "    content: &content_i8,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_i8.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u32 = Content::U32(42);",
          "    let deserializer_u32 = ContentRefDeserializer {",
          "    content: &content_u32,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u32.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "    let content_u16 = Content::U16(42);",
          "    let deserializer_u16 = ContentRefDeserializer {",
          "    content: &content_u16,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer_u16.deserialize_integer(TestVisitor), Err(\"Expected u8\".into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "    }",
          "",
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected u64\".into())",
          "        }",
          "    }",
          "",
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: std::marker::PhantomData,",
          "    };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Ok(()));",
          "    let content = Content::U64(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::U32(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::I16(1);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::U8(1);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Unit;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Seq(vec![]);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Some(Box::new(Content::I64(10)));",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl Visitor<'_> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Err(\"Expected i64\".into())",
          "        }",
          "",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, Box<dyn std::fmt::Debug>> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: std::marker::PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.deserialize_integer(TestVisitor);",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Ok(()));",
          "    let content = Content::U64(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::U32(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::I16(1);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::U8(1);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Unit;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Seq(vec![]);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert!(deserializer.deserialize_integer(TestVisitor).is_err());",
          "    let content = Content::Some(Box::new(Content::I64(10)));",
          "    let deserializer = ContentRefDeserializer { content: &content, err: std::marker::PhantomData };",
          "    assert_eq!(deserializer.deserialize_integer(TestVisitor), Err(\"Expected i64\".into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]