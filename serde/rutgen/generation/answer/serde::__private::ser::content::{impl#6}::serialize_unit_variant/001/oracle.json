[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"TestEnum\";",
          "    let variant_index = 0;",
          "    let variant = \"VariantA\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(\"TestEnum\", 0, \"VariantA\"));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"TestEnum\";",
          "    let variant_index = 0;",
          "    let variant = \"VariantA\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(\"TestEnum\", 0, \"VariantA\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"ExampleStruct\";",
          "    let variant_index = 1;",
          "    let variant = \"VariantB\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert!(matches!(content, Content::UnitVariant(\"ExampleStruct\", 1, \"VariantB\")));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"ExampleStruct\";",
          "    let variant_index = 1;",
          "    let variant = \"VariantB\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert!(matches!(content, Content::UnitVariant(\"ExampleStruct\", 1, \"VariantB\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"AnotherEnum\";",
          "    let variant_index = 0;",
          "    let variant = \"VariantC\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(name, variant_index, variant));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"AnotherEnum\";",
          "    let variant_index = 0;",
          "    let variant = \"VariantC\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(name, variant_index, variant));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"LargeIndexEnum\";",
          "    let variant_index = std::u32::MAX;",
          "    let variant = \"VariantD\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(name, variant_index, variant));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"LargeIndexEnum\";",
          "    let variant_index = std::u32::MAX;",
          "    let variant = \"VariantD\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(name, variant_index, variant));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"StringEnum\";",
          "    let variant_index = 2;",
          "    let variant = \"VariantE\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(\"StringEnum\", 2, \"VariantE\"));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let name = \"StringEnum\";",
          "    let variant_index = 2;",
          "    let variant = \"VariantE\";",
          "    let result = serializer.serialize_unit_variant(name, variant_index, variant);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::UnitVariant(\"StringEnum\", 2, \"VariantE\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]