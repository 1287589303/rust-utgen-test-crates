[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(std::panic::catch_unwind(|| one_of.fmt(&mut formatter)).is_err());",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(one_of.fmt(&mut formatter).unwrap(), \"`name1`\");",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(one_of.fmt(&mut formatter).unwrap(), \"`name1` or `name2`\");",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(one_of.fmt(&mut formatter).is_ok());",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\", \"name4\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(formatter.write_str(\"one of \").is_ok());"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    one_of.fmt(&mut formatter);",
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(std::panic::catch_unwind(|| one_of.fmt(&mut formatter)).is_err());",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(one_of.fmt(&mut formatter).unwrap(), \"`name1`\");",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(one_of.fmt(&mut formatter).unwrap(), \"`name1` or `name2`\");",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(one_of.fmt(&mut formatter).is_ok());",
          "    ",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\", \"name4\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert!(formatter.write_str(\"one of \").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let names_empty: &'static [&'static str] = &[];",
          "    let one_of_empty = OneOf { names: names_empty };",
          "    assert_eq!(one_of_empty.fmt(&mut std::fmt::Formatter::new()), Err(any_err));",
          "    ",
          "    let names_two: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of_two = OneOf { names: names_two };",
          "    let mut formatter_two = std::fmt::Formatter::new();",
          "    assert!(one_of_two.fmt(&mut formatter_two).is_ok());",
          "    ",
          "    let names_one: &'static [&'static str] = &[\"name1\"];",
          "    let one_of_one = OneOf { names: names_one };",
          "    let mut formatter_one = std::fmt::Formatter::new();",
          "    assert!(one_of_one.fmt(&mut formatter_one).is_ok());",
          "    ",
          "    let names_multiple: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of_multiple = OneOf { names: names_multiple };",
          "    let mut formatter_multiple = std::fmt::Formatter::new();",
          "    assert!(one_of_multiple.fmt(&mut formatter_multiple).is_ok());",
          "    ",
          "    let mut formatter_error = MockFormatter::new();",
          "    let names_error: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of_error = OneOf { names: names_error };",
          "    assert_eq!(one_of_error.fmt(&mut formatter_error), Err(any_err));"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "    let names_empty: &'static [&'static str] = &[];",
          "    let one_of_empty = OneOf { names: names_empty };",
          "    assert_eq!(one_of_empty.fmt(&mut std::fmt::Formatter::new()), Err(any_err));",
          "    ",
          "    let names_two: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of_two = OneOf { names: names_two };",
          "    let mut formatter_two = std::fmt::Formatter::new();",
          "    assert!(one_of_two.fmt(&mut formatter_two).is_ok());",
          "    ",
          "    let names_one: &'static [&'static str] = &[\"name1\"];",
          "    let one_of_one = OneOf { names: names_one };",
          "    let mut formatter_one = std::fmt::Formatter::new();",
          "    assert!(one_of_one.fmt(&mut formatter_one).is_ok());",
          "    ",
          "    let names_multiple: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of_multiple = OneOf { names: names_multiple };",
          "    let mut formatter_multiple = std::fmt::Formatter::new();",
          "    assert!(one_of_multiple.fmt(&mut formatter_multiple).is_ok());",
          "    ",
          "    let mut formatter_error = MockFormatter::new();",
          "    let names_error: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of_error = OneOf { names: names_error };",
          "    assert_eq!(one_of_error.fmt(&mut formatter_error), Err(any_err));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    panic!(\"Expected panic when names.len() is 0\");",
          "    assert_eq!(one_of.fmt(&mut formatter), Err(err)); // for names.len() matching 2",
          "    assert_eq!(one_of.fmt(&mut formatter), Ok(())); // for names.len() matching 1",
          "    assert_eq!(one_of.fmt(&mut formatter), Err(err)); // for names.len() matching _ with write_str(\"one of \") resulting in error"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "    panic!(\"Expected panic when names.len() is 0\");",
          "    assert_eq!(one_of.fmt(&mut formatter), Err(err)); // for names.len() matching 2",
          "    assert_eq!(one_of.fmt(&mut formatter), Ok(())); // for names.len() matching 1",
          "    assert_eq!(one_of.fmt(&mut formatter), Err(err)); // for names.len() matching _ with write_str(\"one of \") resulting in error",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    panic!(); // precondition: self.names.len() matches 0 at line 2283 is true",
          "    assert!(one_of.fmt(&mut formatter).is_err()); // precondition: formatter.write_str(\"one of \") matches Err(err) at line 2287 is true",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches 1 at line 2284 is true",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches 2 at line 2285 is true",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches _ at line 2286 is true"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "    panic!(); // precondition: self.names.len() matches 0 at line 2283 is true",
          "    assert!(one_of.fmt(&mut formatter).is_err()); // precondition: formatter.write_str(\"one of \") matches Err(err) at line 2287 is true",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches 1 at line 2284 is true",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches 2 at line 2285 is true",
          "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
          "    let one_of = OneOf { names };",
          "    assert!(one_of.fmt(&mut formatter).is_ok()); // precondition: self.names.len() matches _ at line 2286 is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]