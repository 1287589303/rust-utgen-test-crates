[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter { output: String::new() };",
          "    let one_of = OneOf { names: &[\"first_name\", \"second_name\"] };",
          "    let _ = one_of.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"`first_name` or `second_name`\");"
        ],
        "code": [
          "{",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter { output: String::new() };",
          "    let one_of = OneOf { names: &[\"first_name\", \"second_name\"] };",
          "    let _ = one_of.fmt(formatter);",
          "    assert_eq!(formatter.output, \"`first_name` or `second_name`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter { output: String::new() };",
          "    let one_of = OneOf { names: &[] };",
          "    let _ = one_of.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(one_of.names.len(), 2);",
          "    assert!(formatter.output.contains(\"`\"));",
          "    assert!(formatter.output.contains(\"or\"));",
          "    assert!(formatter.output.matches(\"`\").count() == 2);",
          "    assert!(formatter.output.ends_with(\"`\"));",
          "    assert!(formatter.output.starts_with(\"one of \"));"
        ],
        "code": [
          "{",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter { output: String::new() };",
          "    let one_of = OneOf { names: &[] };",
          "    let _ = one_of.fmt(formatter);",
          "    assert_eq!(one_of.names.len(), 2);",
          "    assert!(formatter.output.contains(\"`\"));",
          "    assert!(formatter.output.contains(\"or\"));",
          "    assert!(formatter.output.matches(\"`\").count() == 2);",
          "    assert!(formatter.output.ends_with(\"`\"));",
          "    assert!(formatter.output.starts_with(\"one of \"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]