[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[cfg(test)]",
      "fn test_one_of_display_empty_names() {",
      "    let names: &'static [&'static str] = &[];",
      "    let one_of = OneOf { names };",
      "    let mut buffer = String::new();",
      "    let result = std::fmt::write(&mut buffer, one_of);",
      "}",
      "",
      "#[cfg(test)]",
      "fn test_one_of_display_one_name() {",
      "    let names: &'static [&'static str] = &[\"name1\"];",
      "    let one_of = OneOf { names };",
      "    let mut buffer = String::new();",
      "    let _ = std::fmt::write(&mut buffer, one_of);",
      "}",
      "",
      "#[cfg(test)]",
      "fn test_one_of_display_two_names() {",
      "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
      "    let one_of = OneOf { names };",
      "    let mut buffer = String::new();",
      "    let _ = std::fmt::write(&mut buffer, one_of);",
      "}",
      "",
      "#[cfg(test)]",
      "fn test_one_of_display_multiple_names() {",
      "    let names: &'static [&'static str] = &[\"name1\", \"name2\", \"name3\"];",
      "    let one_of = OneOf { names };",
      "    let mut buffer = String::new();",
      "    let _ = std::fmt::write(&mut buffer, one_of);",
      "}",
      "",
      "#[cfg(test)]",
      "fn test_one_of_display_error_multiple_names() {",
      "    let names: &'static [&'static str] = &[\"name1\", \"name2\"];",
      "    let one_of = OneOf { names };",
      "    let mut erroneous_formatter = std::fmt::Formatter::new();",
      "    let _ = std::fmt::write(&mut erroneous_formatter, one_of);",
      "}"
    ],
    "chain_tests": []
  }
]