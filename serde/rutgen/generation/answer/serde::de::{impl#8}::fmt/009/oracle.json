[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[\"value1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let names: &'static [&'static str] = &[\"value1\"];",
          "    let one_of = OneOf { names };",
          "    assert_eq!(one_of.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"`value1`\");"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[\"value1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "    let names: &'static [&'static str] = &[\"value1\"];",
          "    let one_of = OneOf { names };",
          "    assert_eq!(one_of.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"`value1`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(one_of.names.len(), 1);",
          "    assert!(formatter.buffer.is_empty());",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = one_of.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer, \"`name1`\");"
        ],
        "code": [
          "{",
          "    let names: &'static [&'static str] = &[];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = one_of.fmt(&mut formatter);",
          "    assert_eq!(one_of.names.len(), 1);",
          "    assert!(formatter.buffer.is_empty());",
          "    let names: &'static [&'static str] = &[\"name1\"];",
          "    let one_of = OneOf { names };",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = one_of.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer, \"`name1`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]