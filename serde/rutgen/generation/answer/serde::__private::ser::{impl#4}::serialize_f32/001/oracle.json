[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(3.14f32);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_f32(3.14f32) -> Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float))"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(3.14f32);",
          "    serializer.serialize_f32(3.14f32) -> Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(0.0f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Self::bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(0.0f32);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Self::bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(-1.23f32);",
          "}"
        ],
        "oracle": [
          "    Err(Self::bad_type(Unsupported::Float))"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(-1.23f32);",
          "    Err(Self::bad_type(Unsupported::Float))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    let expected_error = Err(serializer.bad_type(Unsupported::Float));",
          "    assert_eq!(result, expected_error);",
          "    result.is_err();",
          "    result.unwrap_err();"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    let expected_error = Err(serializer.bad_type(Unsupported::Float));",
          "    assert_eq!(result, expected_error);",
          "    result.is_err();",
          "    result.unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result, Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result, Err(FlatMapSerializer::<TestMap>::bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_f32(f32::NAN).unwrap_err();",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "    serializer.serialize_f32(f32::NAN).unwrap_err();",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]