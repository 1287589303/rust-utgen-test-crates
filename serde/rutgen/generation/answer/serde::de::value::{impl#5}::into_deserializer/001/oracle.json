[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyStruct;",
          "    ",
          "    impl<'de> IntoDeserializer<'de> for EmptyStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = EmptyStruct;",
          "    let deserializer = instance.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::any::TypeId::of::<UnitDeserializer<Error>>() == std::any::TypeId::of_val(&deserializer));",
          "    assert!(std::any::TypeId::of::<UnitDeserializer<Error>>() == std::any::TypeId::of::<EmptyStruct::Deserializer>());"
        ],
        "code": [
          "{",
          "    struct EmptyStruct;",
          "    ",
          "    impl<'de> IntoDeserializer<'de> for EmptyStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = EmptyStruct;",
          "    let deserializer = instance.into_deserializer();",
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::any::TypeId::of::<UnitDeserializer<Error>>() == std::any::TypeId::of_val(&deserializer));",
          "    assert!(std::any::TypeId::of::<UnitDeserializer<Error>>() == std::any::TypeId::of::<EmptyStruct::Deserializer>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonEmptyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    impl<'de> IntoDeserializer<'de> for NonEmptyStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = NonEmptyStruct { field: 42 };",
          "    let deserializer = instance.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "    assert!(deserializer.is_human_readable());",
          "    assert!(std::mem::size_of::<UnitDeserializer<Error>>() > 0);",
          "    assert!(std::mem::size_of::<NonEmptyStruct>() > 0);",
          "    assert!(std::mem::size_of::<Error>() > 0);"
        ],
        "code": [
          "{",
          "    struct NonEmptyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    impl<'de> IntoDeserializer<'de> for NonEmptyStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = NonEmptyStruct { field: 42 };",
          "    let deserializer = instance.into_deserializer();",
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "    assert!(deserializer.is_human_readable());",
          "    assert!(std::mem::size_of::<UnitDeserializer<Error>>() > 0);",
          "    assert!(std::mem::size_of::<NonEmptyStruct>() > 0);",
          "    assert!(std::mem::size_of::<Error>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TupleStruct(i32, i32);",
          "",
          "    impl<'de> IntoDeserializer<'de> for TupleStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = TupleStruct(1, 2);",
          "    let deserializer = instance.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, UnitDeserializer::new());"
        ],
        "code": [
          "{",
          "    struct TupleStruct(i32, i32);",
          "",
          "    impl<'de> IntoDeserializer<'de> for TupleStruct {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = TupleStruct(1, 2);",
          "    let deserializer = instance.into_deserializer();",
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct GenericStruct<T> {",
          "        field: T,",
          "    }",
          "",
          "    impl<'de, T: IntoDeserializer<'de, Error>> IntoDeserializer<'de> for GenericStruct<T> {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = GenericStruct { field: EmptyStruct };",
          "    let deserializer = instance.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, UnitDeserializer::new());"
        ],
        "code": [
          "{",
          "    struct GenericStruct<T> {",
          "        field: T,",
          "    }",
          "",
          "    impl<'de, T: IntoDeserializer<'de, Error>> IntoDeserializer<'de> for GenericStruct<T> {",
          "        type Deserializer = UnitDeserializer<Error>;",
          "        fn into_deserializer(self) -> Self::Deserializer {",
          "            UnitDeserializer::new()",
          "        }",
          "    }",
          "",
          "    let instance = GenericStruct { field: EmptyStruct };",
          "    let deserializer = instance.into_deserializer();",
          "    assert_eq!(deserializer, UnitDeserializer::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]