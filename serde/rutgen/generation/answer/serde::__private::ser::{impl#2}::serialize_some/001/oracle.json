[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Unit;",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let _ = serializer.serialize_some(&Unit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_some(&Unit).is_err(), true);",
          "    assert_eq!(serializer.serialize_some(&Unit).unwrap_err().to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    assert_eq!(serializer.serialize_some(&Unit).unwrap_err().is::<Error>(), true);",
          "    assert_eq!(serializer.serialize_some::<i32>(&42).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct Unit;",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let _ = serializer.serialize_some(&Unit);",
          "    assert_eq!(serializer.serialize_some(&Unit).is_err(), true);",
          "    assert_eq!(serializer.serialize_some(&Unit).unwrap_err().to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    assert_eq!(serializer.serialize_some(&Unit).unwrap_err().is::<Error>(), true);",
          "    assert_eq!(serializer.serialize_some::<i32>(&42).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_struct = MyStruct { field: 42 };",
          "    let _ = serializer.serialize_some(&my_struct);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_some(&my_struct), Err(serializer.bad_type(Unsupported::Optional)));"
        ],
        "code": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_struct = MyStruct { field: 42 };",
          "    let _ = serializer.serialize_some(&my_struct);",
          "    assert_eq!(serializer.serialize_some(&my_struct), Err(serializer.bad_type(Unsupported::Optional)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    enum MyEnum {",
          "        Variant1,",
          "        Variant2,",
          "    }",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_enum = MyEnum::Variant1;",
          "    let _ = serializer.serialize_some(&my_enum);",
          "}"
        ],
        "oracle": [
          "    Err(serializer.bad_type(Unsupported::Optional));"
        ],
        "code": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    enum MyEnum {",
          "        Variant1,",
          "        Variant2,",
          "    }",
          "",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_enum = MyEnum::Variant1;",
          "    let _ = serializer.serialize_some(&my_enum);",
          "    Err(serializer.bad_type(Unsupported::Optional));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_string = String::from(\"test\");",
          "    let _ = serializer.serialize_some(&my_string);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_some(&my_string);",
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"tag\",",
          "        variant_name: \"variant_name\",",
          "        delegate: T,",
          "    };",
          "",
          "    let my_string = String::from(\"test\");",
          "    let _ = serializer.serialize_some(&my_string);",
          "    let result = serializer.serialize_some(&my_string);",
          "    assert!(result.is_err());",
          "    let error = result.unwrap_err();",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]