[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"a sequence\");"
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.output == \"a sequence\""
        ],
        "code": [
          "{",
          "    struct MockFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter { output: String::new() };",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(&mut formatter);",
          "    formatter.output == \"a sequence\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]