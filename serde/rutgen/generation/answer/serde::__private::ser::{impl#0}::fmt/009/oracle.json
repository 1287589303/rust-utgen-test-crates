[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unsupported.fmt(&mut formatter);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(formatter.to_string(), \"an integer\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unsupported.fmt(&mut formatter);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(formatter.to_string(), \"an integer\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"an integer\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer, \"a float\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unsupported = Unsupported::Boolean; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Integer; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Float; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Char; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::String; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::ByteArray; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Optional; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Sequence; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Tuple; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    let unsupported = Unsupported::Boolean; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Integer; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Float; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Char; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::String; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::ByteArray; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Optional; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Sequence; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::Tuple; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum; assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.contents(), \"a byte array\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a string\");",
          "    let unsupported = Unsupported::Optional;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a byte array\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a string\");",
          "    let unsupported = Unsupported::Optional;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.buffer(), \"an optional\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.contents(), \"a sequence\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.to_string(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.to_string(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]