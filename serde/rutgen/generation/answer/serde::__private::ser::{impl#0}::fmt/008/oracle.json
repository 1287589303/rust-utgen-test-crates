[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Integer;",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let value = Unsupported::Enum;",
          "    assert_eq!(formatter.output(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Integer;",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let value = Unsupported::Enum;",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.get_output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a float\");",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a boolean\");",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a float\");",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a boolean\");",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a float\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"a char\") == Ok(());",
          "    formatter.write_str(\"a float\") == Err(fmt::Error);"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    formatter.write_str(\"a char\") == Ok(());",
          "    formatter.write_str(\"a float\") == Err(fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer, \"a string\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a float\");",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an integer\");",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a char\");",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a string\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a float\");",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an integer\");",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a char\");",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    ",
          "    let value = Unsupported::Boolean;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    ",
          "    let value = Unsupported::Integer;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    ",
          "    let value = Unsupported::Char;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    ",
          "    let value = Unsupported::String;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    ",
          "    let value = Unsupported::ByteArray;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    ",
          "    let value = Unsupported::Optional;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    ",
          "    let value = Unsupported::Sequence;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    ",
          "    let value = Unsupported::Tuple;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    ",
          "    let value = Unsupported::TupleStruct;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    ",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    {",
          "    let value = Unsupported::Enum;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    ",
          "    let value = Unsupported::Boolean;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    ",
          "    let value = Unsupported::Integer;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    ",
          "    let value = Unsupported::Char;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    ",
          "    let value = Unsupported::String;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    ",
          "    let value = Unsupported::ByteArray;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    ",
          "    let value = Unsupported::Optional;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    ",
          "    let value = Unsupported::Sequence;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    ",
          "    let value = Unsupported::Tuple;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    ",
          "    let value = Unsupported::TupleStruct;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    ",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    {",
          "    let value = Unsupported::Enum;",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a float\");",
          "    let value = Unsupported::Integer;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an integer\");",
          "    let value = Unsupported::Char;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a float\");",
          "    let value = Unsupported::Integer;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an integer\");",
          "    let value = Unsupported::Char;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_output(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Boolean;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Tuple;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Boolean;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Tuple;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter, \"a tuple\");",
          "    formatter.clear();",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"a float\");",
          "    formatter.clear();",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"a string\");",
          "    formatter.clear();"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"a tuple\");",
          "    formatter.clear();",
          "    let value = Unsupported::Float;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"a float\");",
          "    formatter.clear();",
          "    let value = Unsupported::String;",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter, \"a string\");",
          "    formatter.clear();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]