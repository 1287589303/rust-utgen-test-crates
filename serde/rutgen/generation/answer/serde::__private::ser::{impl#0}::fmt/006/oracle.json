[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.error().is_none());"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.error().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.contents(), \"a float\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.contents(), \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::Boolean;",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::String;",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::Boolean;",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::String;",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a string\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"a byte array\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a string\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a char\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a byte array\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a string\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a char\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a sequence\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.write_str(\"a string\").is_ok());",
          "    assert!(formatter.write_str(\"a boolean\").is_ok());",
          "    assert!(formatter.write_str(\"an integer\").is_ok());",
          "    assert!(formatter.write_str(\"a float\").is_ok());",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert!(formatter.write_str(\"a byte array\").is_ok());",
          "    assert!(formatter.write_str(\"an optional\").is_ok());",
          "    assert!(formatter.write_str(\"a sequence\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] assert!(formatter.write_str(\"an enum\").is_ok());"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.write_str(\"a string\").is_ok());",
          "    assert!(formatter.write_str(\"a boolean\").is_ok());",
          "    assert!(formatter.write_str(\"an integer\").is_ok());",
          "    assert!(formatter.write_str(\"a float\").is_ok());",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert!(formatter.write_str(\"a byte array\").is_ok());",
          "    assert!(formatter.write_str(\"an optional\").is_ok());",
          "    assert!(formatter.write_str(\"a sequence\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] assert!(formatter.write_str(\"an enum\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an optional\");",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer, \"a tuple\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a sequence\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple struct\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple\");",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a boolean\");",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an integer\");",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a float\");",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a char\");",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a string\");",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a byte array\");",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"an optional\");",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a sequence\");",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"a tuple struct\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter).unwrap(), \"a tuple struct\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter).unwrap(), \"a tuple struct\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().as_str(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let unsupported = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    unsupported.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().as_str(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]