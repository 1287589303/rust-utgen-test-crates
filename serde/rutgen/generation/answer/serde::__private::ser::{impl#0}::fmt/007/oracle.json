[
  {
    "uses": [
      "use std::fmt::Display;",
      "use std::fmt;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_char = Unsupported::Char;",
          "",
          "    unsupported_char.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    unsupported_char.fmt(formatter).unwrap() == fmt::Result::Ok",
          "    formatter.write_str(\"a char\") == fmt::Result::Ok"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_char = Unsupported::Char;",
          "",
          "    unsupported_char.fmt(formatter).unwrap();",
          "    unsupported_char.fmt(formatter).unwrap() == fmt::Result::Ok",
          "    formatter.write_str(\"a char\") == fmt::Result::Ok",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_string = Unsupported::String;",
          "",
          "    unsupported_string.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"a char\").unwrap();",
          "    formatter.write_str(\"an integer\").unwrap();",
          "    formatter.write_str(\"a float\").unwrap();",
          "    formatter.write_str(\"a string\").unwrap();",
          "    formatter.write_str(\"a byte array\").unwrap();",
          "    formatter.write_str(\"an optional\").unwrap();",
          "    formatter.write_str(\"a sequence\").unwrap();",
          "    formatter.write_str(\"a tuple\").unwrap();",
          "    formatter.write_str(\"a tuple struct\").unwrap();",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    formatter.write_str(\"an enum\").unwrap();"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_string = Unsupported::String;",
          "",
          "    unsupported_string.fmt(formatter).unwrap();",
          "    formatter.write_str(\"a char\").unwrap();",
          "    formatter.write_str(\"an integer\").unwrap();",
          "    formatter.write_str(\"a float\").unwrap();",
          "    formatter.write_str(\"a string\").unwrap();",
          "    formatter.write_str(\"a byte array\").unwrap();",
          "    formatter.write_str(\"an optional\").unwrap();",
          "    formatter.write_str(\"a sequence\").unwrap();",
          "    formatter.write_str(\"a tuple\").unwrap();",
          "    formatter.write_str(\"a tuple struct\").unwrap();",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    formatter.write_str(\"an enum\").unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_integer = Unsupported::Integer;",
          "",
          "    unsupported_integer.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    fmt_result = unsupported_integer.fmt(formatter);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    formatter.write_str(\"an integer\").unwrap();"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_integer = Unsupported::Integer;",
          "",
          "    unsupported_integer.fmt(formatter).unwrap();",
          "    fmt_result = unsupported_integer.fmt(formatter);",
          "    assert_eq!(fmt_result, Ok(()));",
          "    formatter.write_str(\"an integer\").unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_float = Unsupported::Float;",
          "",
          "    unsupported_float.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert_eq!(unsupported_float.fmt(formatter).unwrap(), fmt::Result::Ok);"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_float = Unsupported::Float;",
          "",
          "    unsupported_float.fmt(formatter).unwrap();",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert_eq!(unsupported_float.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_boolean = Unsupported::Boolean;",
          "",
          "    unsupported_boolean.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported_boolean.fmt(formatter).unwrap(), ());",
          "    assert!(formatter.write_str(\"a boolean\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_boolean = Unsupported::Boolean;",
          "",
          "    unsupported_boolean.fmt(formatter).unwrap();",
          "    assert_eq!(unsupported_boolean.fmt(formatter).unwrap(), ());",
          "    assert!(formatter.write_str(\"a boolean\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported_sequence.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    let unsupported_char = Unsupported::Char;",
          "    assert_eq!(unsupported_char.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    let unsupported_string = Unsupported::String;",
          "    assert_eq!(unsupported_string.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a string\").is_ok());",
          "    let unsupported_integer = Unsupported::Integer;",
          "    assert_eq!(unsupported_integer.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"an integer\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_sequence = Unsupported::Sequence;",
          "",
          "    unsupported_sequence.fmt(formatter).unwrap();",
          "    assert_eq!(unsupported_sequence.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    let unsupported_char = Unsupported::Char;",
          "    assert_eq!(unsupported_char.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    let unsupported_string = Unsupported::String;",
          "    assert_eq!(unsupported_string.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a string\").is_ok());",
          "    let unsupported_integer = Unsupported::Integer;",
          "    assert_eq!(unsupported_integer.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"an integer\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_optional = Unsupported::Optional;",
          "",
          "    unsupported_optional.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported_optional.fmt(formatter).is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"an optional\").is_ok(), true);"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_optional = Unsupported::Optional;",
          "",
          "    unsupported_optional.fmt(formatter).unwrap();",
          "    assert_eq!(unsupported_optional.fmt(formatter).is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"an optional\").is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_tuple = Unsupported::Tuple;",
          "",
          "    unsupported_tuple.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"a char\") == Ok(())",
          "    ",
          "    unsupported_tuple.fmt(formatter) == Ok(())"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_tuple = Unsupported::Tuple;",
          "",
          "    unsupported_tuple.fmt(formatter).unwrap();",
          "    formatter.write_str(\"a char\") == Ok(())",
          "    ",
          "    unsupported_tuple.fmt(formatter) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_tuple_struct = Unsupported::TupleStruct;",
          "",
          "    unsupported_tuple_struct.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"a tuple struct\").unwrap();"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_tuple_struct = Unsupported::TupleStruct;",
          "",
          "    unsupported_tuple_struct.fmt(formatter).unwrap();",
          "    formatter.write_str(\"a tuple struct\").unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_enum = Unsupported::Enum;",
          "",
          "    unsupported_enum.fmt(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported_enum.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert_eq!(formatter.write_str(\"a char\").unwrap(), fmt::Result::Ok);",
          "    assert_eq!(unsupported_enum.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(matches!(unsupported_enum, Unsupported::Char));"
        ],
        "code": [
          "{",
          "    use std::fmt::{self, Display};",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let formatter = &mut TestFormatter;",
          "    let unsupported_enum = Unsupported::Enum;",
          "",
          "    unsupported_enum.fmt(formatter).unwrap();",
          "    assert_eq!(unsupported_enum.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(formatter.write_str(\"a char\").is_ok());",
          "    assert_eq!(formatter.write_str(\"a char\").unwrap(), fmt::Result::Ok);",
          "    assert_eq!(unsupported_enum.fmt(formatter).unwrap(), fmt::Result::Ok);",
          "    assert!(matches!(unsupported_enum, Unsupported::Char));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]