[
  {
    "uses": [
      "use std::fmt::Formatter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::Formatter;",
          "",
          "    struct MockFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            MockFormatter",
          "        }",
          "",
          "        fn write_str(&mut self, _s: &str) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter::new();",
          "    let unsupported = Unsupported::Optional;",
          "",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"an optional\"), Ok(()));"
        ],
        "code": [
          "{",
          "    use std::fmt::Formatter;",
          "",
          "    struct MockFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            MockFormatter",
          "        }",
          "",
          "        fn write_str(&mut self, _s: &str) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = MockFormatter::new();",
          "    let unsupported = Unsupported::Optional;",
          "",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"an optional\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]