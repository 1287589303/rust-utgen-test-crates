[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a boolean\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a boolean\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"an integer\") == Ok(());",
          "    formatter.write_str(\"a boolean\") == Err(_);",
          "    formatter.write_str(\"a float\") == Err(_);",
          "    formatter.write_str(\"a char\") == Err(_);",
          "    formatter.write_str(\"a string\") == Err(_);",
          "    formatter.write_str(\"a byte array\") == Err(_);",
          "    formatter.write_str(\"an optional\") == Err(_);",
          "    formatter.write_str(\"a sequence\") == Err(_);",
          "    formatter.write_str(\"a tuple\") == Err(_);",
          "    formatter.write_str(\"a tuple struct\") == Err(_);",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    formatter.write_str(\"an enum\") == Err(_);"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    formatter.write_str(\"an integer\") == Ok(());",
          "    formatter.write_str(\"a boolean\") == Err(_);",
          "    formatter.write_str(\"a float\") == Err(_);",
          "    formatter.write_str(\"a char\") == Err(_);",
          "    formatter.write_str(\"a string\") == Err(_);",
          "    formatter.write_str(\"a byte array\") == Err(_);",
          "    formatter.write_str(\"an optional\") == Err(_);",
          "    formatter.write_str(\"a sequence\") == Err(_);",
          "    formatter.write_str(\"a tuple\") == Err(_);",
          "    formatter.write_str(\"a tuple struct\") == Err(_);",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
          "    formatter.write_str(\"an enum\") == Err(_);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"a boolean\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"a boolean\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().as_slice(), b\"a char\");",
          "    assert_eq!(value, Unsupported::Char);"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().as_slice(), b\"a char\");",
          "    assert_eq!(value, Unsupported::Char);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a string\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().as_str(), \"a byte array\");",
          "    assert!(formatter.error().is_none());"
        ],
        "code": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().as_str(), \"a byte array\");",
          "    assert!(formatter.error().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.fmt(&mut formatter).to_string(), \"an optional\");",
          "    assert!(formatter.to_string().contains(\"an optional\"));"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(value.fmt(&mut formatter).to_string(), \"an optional\");",
          "    assert!(formatter.to_string().contains(\"an optional\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"a sequence\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"a sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"a boolean\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"a boolean\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"a tuple struct\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"a tuple struct\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"an enum\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"an enum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]