[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Boolean;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a boolean\");",
          "    let value = Unsupported::Integer;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an integer\");",
          "    let value = Unsupported::Float;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a float\");",
          "    let value = Unsupported::Char;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a char\");",
          "    let value = Unsupported::String;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a string\");",
          "    let value = Unsupported::ByteArray;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    let value = Unsupported::Optional;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an optional\");",
          "    let value = Unsupported::Sequence;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a sequence\");",
          "    let value = Unsupported::Tuple;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple\");",
          "    let value = Unsupported::TupleStruct;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a tuple struct\");",
          "    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))] {",
          "    let value = Unsupported::Enum;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"an enum\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"a byte array\").unwrap();",
          "    assert_eq!(formatter.to_string(), \"a byte array\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Integer;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    formatter.write_str(\"a byte array\").unwrap();",
          "    assert_eq!(formatter.to_string(), \"a byte array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"a float\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Float;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"a byte array\");",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Char;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"a byte array\");",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    Unsupported::ByteArray => formatter.write_str(\"a byte array\") == Ok(());",
          "    Unsupported::String => formatter.write_str(\"a string\") == Ok(());",
          "    formatter.has_written(\"a byte array\") == true;",
          "    formatter.has_written(\"a string\") == false;"
        ],
        "code": [
          "{",
          "    let value = Unsupported::String;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    Unsupported::ByteArray => formatter.write_str(\"a byte array\") == Ok(());",
          "    Unsupported::String => formatter.write_str(\"a string\") == Ok(());",
          "    formatter.has_written(\"a byte array\") == true;",
          "    formatter.has_written(\"a string\") == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"a byte array\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.get_buffer(), \"an optional\");",
          "    let value = Unsupported::ByteArray;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_buffer(), \"a byte array\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Optional;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_buffer(), \"an optional\");",
          "    let value = Unsupported::ByteArray;",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.get_buffer(), \"a byte array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"a sequence\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Sequence;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"a sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.str(), \"a tuple struct\");",
          "    assert_eq!(formatter.str(), \"a tuple\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Tuple;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.str(), \"a tuple struct\");",
          "    assert_eq!(formatter.str(), \"a tuple\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.output(), \"a byte array\");"
        ],
        "code": [
          "{",
          "    let value = Unsupported::TupleStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let value = Unsupported::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unsupported::ByteArray;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"a byte array\");",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]