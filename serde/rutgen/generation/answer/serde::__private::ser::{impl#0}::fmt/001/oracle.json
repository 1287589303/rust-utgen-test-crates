[
  {
    "uses": [
      "use std::fmt;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", unsupported), \"a tuple struct\");",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    assert!(unsupported.fmt(&mut formatter).is_ok());",
          "    assert!(format!(\"{:?}\", unsupported).contains(\"tuple struct\"));"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::TupleStruct;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{:?}\", unsupported), \"a tuple struct\");",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    assert!(unsupported.fmt(&mut formatter).is_ok());",
          "    assert!(format!(\"{:?}\", unsupported).contains(\"tuple struct\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Boolean;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(unsupported.to_string(), \"an integer\");"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Integer;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(unsupported.to_string(), \"an integer\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(unsupported.to_string(), \"a float\");"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Float;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(unsupported.to_string(), \"a float\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"a char\"), Ok(()));",
          "    let unsupported_tuple_struct = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported_tuple_struct.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"a tuple struct\"), Ok(()));"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Char;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"a char\"), Ok(()));",
          "    let unsupported_tuple_struct = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported_tuple_struct.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.write_str(\"a tuple struct\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    formatter.write_str(\"a tuple struct\").unwrap();",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::String;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    formatter.write_str(\"a tuple struct\").unwrap();",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    formatter.write_str(\"not a tuple struct\");",
          "    assert!(formatter.write_str(\"not a tuple struct\").is_ok());",
          "    assert_eq!(formatter.write_str(\"a tuple struct\"), Ok(()));"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::ByteArray;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    formatter.write_str(\"not a tuple struct\");",
          "    assert!(formatter.write_str(\"not a tuple struct\").is_ok());",
          "    assert_eq!(formatter.write_str(\"a tuple struct\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(format!(\"{:?}\", Unsupported::TupleStruct), \"a tuple struct\");",
          "    assert!(matches!(unsupported, Unsupported::Optional));",
          "    assert!(matches!(unsupported, Unsupported::TupleStruct));",
          "    assert!(formatter.write_str(\"test\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Optional;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(format!(\"{:?}\", Unsupported::TupleStruct), \"a tuple struct\");",
          "    assert!(matches!(unsupported, Unsupported::Optional));",
          "    assert!(matches!(unsupported, Unsupported::TupleStruct));",
          "    assert!(formatter.write_str(\"test\").is_ok());",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    assert_ne!(unsupported.fmt(&mut formatter), Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Sequence;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    let unsupported = Unsupported::TupleStruct;",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"a tuple struct\").is_ok());",
          "    assert_ne!(unsupported.fmt(&mut formatter), Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"a tuple\");"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unsupported = Unsupported::Tuple;",
          "    let mut formatter = TestFormatter;",
          "    let _ = unsupported.fmt(&mut formatter);",
          "    assert_eq!(unsupported.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.output, \"a tuple\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]