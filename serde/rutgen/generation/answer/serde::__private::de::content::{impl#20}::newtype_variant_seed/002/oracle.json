[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl de::Error for DummyError {",
          "        fn custom<T: std::fmt::Display>(_: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "    ",
          "    struct DummySeed;",
          "    impl<'de> de::DeserializeSeed<'de> for DummySeed {",
          "        type Value = ();",
          "        ",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, DummyError>",
          "        where",
          "            T: deserializer::Deserializer<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let deserializer: VariantDeserializer<'_, DummyError> = VariantDeserializer {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let seed = DummySeed;",
          "    let _result = deserializer.newtype_variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"newtype variant\")));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl de::Error for DummyError {",
          "        fn custom<T: std::fmt::Display>(_: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "    ",
          "    struct DummySeed;",
          "    impl<'de> de::DeserializeSeed<'de> for DummySeed {",
          "        type Value = ();",
          "        ",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, DummyError>",
          "        where",
          "            T: deserializer::Deserializer<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let deserializer: VariantDeserializer<'_, DummyError> = VariantDeserializer {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let seed = DummySeed;",
          "    let _result = deserializer.newtype_variant_seed(seed);",
          "    assert_eq!(_result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"newtype variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]