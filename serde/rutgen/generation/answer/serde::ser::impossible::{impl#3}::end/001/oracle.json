[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "    ",
          "    impl ser::Error for ValidError {}",
          "",
          "    let impossible: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<ValidOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<ValidError>(), 0);",
          "    assert!(std::any::TypeId::of::<ValidOk>() == std::any::TypeId::of::<ValidOk>());",
          "    assert!(std::any::TypeId::of::<ValidError>() == std::any::TypeId::of::<ValidError>());",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_ok());"
        ],
        "code": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "    ",
          "    impl ser::Error for ValidError {}",
          "",
          "    let impossible: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    impossible.end().unwrap();",
          "    assert_eq!(std::mem::size_of::<ValidOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<ValidError>(), 0);",
          "    assert!(std::any::TypeId::of::<ValidOk>() == std::any::TypeId::of::<ValidOk>());",
          "    assert!(std::any::TypeId::of::<ValidError>() == std::any::TypeId::of::<ValidError>());",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "    ",
          "    impl ser::Error for ValidError {}",
          "",
          "    let impossible: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    impossible.end(); ",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());"
        ],
        "code": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "    ",
          "    impl ser::Error for ValidError {}",
          "",
          "    let impossible: Impossible<ValidOk, ValidError> = Impossible {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "",
          "    impossible.end(); ",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]