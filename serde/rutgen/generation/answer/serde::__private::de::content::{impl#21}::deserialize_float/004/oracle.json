[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { }",
          "    }",
          "",
          "    let content = Content::I64(-9_223_372_036_854_775_808);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    deserializer.deserialize_float(MockVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(9_223_372_036_854_775_807);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(-1);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(1);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(12345);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(-12345);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::U8(255);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));",
          "    let content = Content::F32(1.0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));",
          "    let content = Content::F64(1.0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { }",
          "    }",
          "",
          "    let content = Content::I64(-9_223_372_036_854_775_808);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    deserializer.deserialize_float(MockVisitor);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(9_223_372_036_854_775_807);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(-1);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(1);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(12345);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(-12345);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::U8(255);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));",
          "    let content = Content::F32(1.0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));",
          "    let content = Content::F64(1.0);",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Err(deserializer.invalid_type(&MockVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { }",
          "    }",
          "",
          "    let content = Content::I64(9_223_372_036_854_775_807);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    deserializer.deserialize_float(MockVisitor);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.deserialize_float(MockVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(1);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());",
          "    let content = Content::I64(-1);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());",
          "    let content = Content::I32(0);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());"
        ],
        "code": [
          "{",
          "    struct MockVisitor;",
          "",
          "    impl<'de> Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Err(E) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { }",
          "    }",
          "",
          "    let content = Content::I64(9_223_372_036_854_775_807);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    deserializer.deserialize_float(MockVisitor);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_float(MockVisitor), Ok(()));",
          "    let content = Content::I64(1);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());",
          "    let content = Content::I64(-1);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());",
          "    let content = Content::I32(0);",
          "    assert!(deserializer.deserialize_float(MockVisitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]