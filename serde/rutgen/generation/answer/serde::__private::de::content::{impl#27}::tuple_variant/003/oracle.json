[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "    ",
          "    struct TestVariantAccess<'a, 'de> {",
          "        value: Option<&'a Content<'de>>,",
          "    }",
          "    ",
          "    impl<'de, 'a> de::VariantAccess<'de> for TestVariantAccess<'a, 'de> {",
          "        type Error = de::Error;",
          "        fn unit_variant(self) -> Result<(), Self::Error> { unimplemented!() }",
          "        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error> ",
          "        where T: de::DeserializeSeed<'de> {",
          "            unimplemented!()",
          "        }",
          "        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error> ",
          "        where V: de::Visitor<'de> {",
          "            match self.value {",
          "                Some(_) => unreachable!(),",
          "                None => Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")),",
          "            }",
          "        }",
          "        fn struct_variant<V>(self, _fields: &'static [&'static str], visitor: V) -> Result<V::Value, Self::Error>",
          "        where V: de::Visitor<'de> {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let deserializer = TestVariantAccess { value: None };",
          "    let visitor = TestVisitor;",
          "    let _result = deserializer.tuple_variant(0, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "    ",
          "    struct TestVariantAccess<'a, 'de> {",
          "        value: Option<&'a Content<'de>>,",
          "    }",
          "    ",
          "    impl<'de, 'a> de::VariantAccess<'de> for TestVariantAccess<'a, 'de> {",
          "        type Error = de::Error;",
          "        fn unit_variant(self) -> Result<(), Self::Error> { unimplemented!() }",
          "        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error> ",
          "        where T: de::DeserializeSeed<'de> {",
          "            unimplemented!()",
          "        }",
          "        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error> ",
          "        where V: de::Visitor<'de> {",
          "            match self.value {",
          "                Some(_) => unreachable!(),",
          "                None => Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")),",
          "            }",
          "        }",
          "        fn struct_variant<V>(self, _fields: &'static [&'static str], visitor: V) -> Result<V::Value, Self::Error>",
          "        where V: de::Visitor<'de> {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let deserializer = TestVariantAccess { value: None };",
          "    let visitor = TestVisitor;",
          "    let _result = deserializer.tuple_variant(0, visitor);",
          "    assert_eq!(_result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]