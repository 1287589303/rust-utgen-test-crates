[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::U32(0),",
          "        Content::Bool(true),",
          "        Content::F64(3.14),",
          "    ]));",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(3, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.tuple_variant(3, visitor), Ok(()));",
          "    assert!(deserializer.value.is_some());",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(deserializer.value.unwrap().as_seq().is_some());",
          "    assert!(matches!(deserializer.tuple_variant(3, visitor), Ok(())));",
          "    assert!(matches!(deserializer.tuple_variant(2, visitor), Err(_)));",
          "    assert!(matches!(deserializer.tuple_variant(3, DummyVisitor), Ok(())));",
          "    assert!(matches!(deserializer.tuple_variant(0, visitor), Err(_)));",
          "    assert!(matches!(deserializer.tuple_variant(5, visitor), Err(_)));"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::U32(0),",
          "        Content::Bool(true),",
          "        Content::F64(3.14),",
          "    ]));",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(3, visitor);",
          "    assert_eq!(deserializer.tuple_variant(3, visitor), Ok(()));",
          "    assert!(deserializer.value.is_some());",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(deserializer.value.unwrap().as_seq().is_some());",
          "    assert!(matches!(deserializer.tuple_variant(3, visitor), Ok(())));",
          "    assert!(matches!(deserializer.tuple_variant(2, visitor), Err(_)));",
          "    assert!(matches!(deserializer.tuple_variant(3, DummyVisitor), Ok(())));",
          "    assert!(matches!(deserializer.tuple_variant(0, visitor), Err(_)));",
          "    assert!(matches!(deserializer.tuple_variant(5, visitor), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::Str(\"test\"),",
          "        Content::Bytes(vec![1, 2, 3]),",
          "    ]));",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(2, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.tuple_variant(2, visitor).is_ok(), true);",
          "    assert!(matches!(deserializer.tuple_variant(2, visitor), Ok(())));",
          "    assert!(deserializer.tuple_variant(2, visitor).is_ok());",
          "    assert!(deserializer.value.is_some());",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(vec![Content::Str(\"test\"), Content::Bytes(vec![1, 2, 3])]))));",
          "    assert!(deserializer.tuple_variant(1, visitor).is_err());",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).is_err(), true);",
          "    assert!(deserializer.tuple_variant(2, visitor).is_ok());",
          "    assert!(deserializer.tuple_variant(3, visitor).is_err());"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::Str(\"test\"),",
          "        Content::Bytes(vec![1, 2, 3]),",
          "    ]));",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(2, visitor);",
          "    assert_eq!(deserializer.tuple_variant(2, visitor).is_ok(), true);",
          "    assert!(matches!(deserializer.tuple_variant(2, visitor), Ok(())));",
          "    assert!(deserializer.tuple_variant(2, visitor).is_ok());",
          "    assert!(deserializer.value.is_some());",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(vec![Content::Str(\"test\"), Content::Bytes(vec![1, 2, 3])]))));",
          "    assert!(deserializer.tuple_variant(1, visitor).is_err());",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).is_err(), true);",
          "    assert!(deserializer.tuple_variant(2, visitor).is_ok());",
          "    assert!(deserializer.tuple_variant(3, visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value: Option<Content> = None;",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(0, visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(matches!(deserializer.value, Some(other) if other != Content::Seq(vec![])));",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).is_err(), true);",
          "    assert!(deserializer.tuple_variant(1, visitor).is_err());",
          "    assert!(deserializer.tuple_variant(0, visitor).unwrap_err().unexpected(), &other.unexpected());",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).unwrap_err().unexpected(), Unexpected::UnitVariant);"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "    impl<'de> de::Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value: Option<Content> = None;",
          "    let deserializer = VariantRefDeserializer {",
          "        value,",
          "        err: PhantomData,",
          "    };",
          "    let visitor = DummyVisitor;",
          "    let _ = deserializer.tuple_variant(0, visitor);",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert!(matches!(deserializer.value, Some(other) if other != Content::Seq(vec![])));",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).is_err(), true);",
          "    assert!(deserializer.tuple_variant(1, visitor).is_err());",
          "    assert!(deserializer.tuple_variant(0, visitor).unwrap_err().unexpected(), &other.unexpected());",
          "    assert_eq!(deserializer.tuple_variant(0, visitor).unwrap_err().unexpected(), Unexpected::UnitVariant);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]