[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let content = Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "",
          "    let visitor = VisitorImpl;",
          "    let _result = deserializer.tuple_variant(2, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(de::Error::invalid_type(other.unexpected(), &\"tuple variant\")));",
          "    assert!(matches!(deserializer.value, Some(Content::Map(_))));",
          "    assert!(deserializer.value.is_some());",
          "    assert_ne!(deserializer.value, Some(Content::Seq(vec![])));",
          "    assert_ne!(deserializer.value, None);",
          "    assert!(matches!(content, Content::Map(_)));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let content = Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "",
          "    let visitor = VisitorImpl;",
          "    let _result = deserializer.tuple_variant(2, visitor);",
          "    assert_eq!(_result, Err(de::Error::invalid_type(other.unexpected(), &\"tuple variant\")));",
          "    assert!(matches!(deserializer.value, Some(Content::Map(_))));",
          "    assert!(deserializer.value.is_some());",
          "    assert_ne!(deserializer.value, Some(Content::Seq(vec![])));",
          "    assert_ne!(deserializer.value, None);",
          "    assert!(matches!(content, Content::Map(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let content = Content::String(\"not a sequence\".to_string());",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "",
          "    let visitor = VisitorImpl;",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::String(\"not a sequence\".to_string());",
          "    let deserializer = VariantRefDeserializer {",
          "    value: Some(&content),",
          "    err: PhantomData,",
          "    };",
          "    assert_eq!(deserializer.tuple_variant(1, VisitorImpl), Err(de::Error::invalid_type(Unexpected::Str(\"not a sequence\"), &\"tuple variant\")));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let content = Content::String(\"not a sequence\".to_string());",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "",
          "    let visitor = VisitorImpl;",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    let content = Content::String(\"not a sequence\".to_string());",
          "    let deserializer = VariantRefDeserializer {",
          "    value: Some(&content),",
          "    err: PhantomData,",
          "    };",
          "    assert_eq!(deserializer.tuple_variant(1, VisitorImpl), Err(de::Error::invalid_type(Unexpected::Str(\"not a sequence\"), &\"tuple variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]