[
  {
    "uses": [
      "use std::fmt;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter { output: String::new() };",
          "    let ignored_any = IgnoredAny;",
          "    let _ = ignored_any.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"anything at all\");",
          "    assert!(formatter.output.len() > 0);",
          "    assert!(formatter.output.contains(\"anything at all\"));",
          "    assert!(formatter.output == \"anything at all\");",
          "    assert!(formatter.output.is_ascii());",
          "    assert!(formatter.output.chars().count() == 17);"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter { output: String::new() };",
          "    let ignored_any = IgnoredAny;",
          "    let _ = ignored_any.expecting(&mut formatter);",
          "    assert_eq!(formatter.output, \"anything at all\");",
          "    assert!(formatter.output.len() > 0);",
          "    assert!(formatter.output.contains(\"anything at all\"));",
          "    assert!(formatter.output == \"anything at all\");",
          "    assert!(formatter.output.is_ascii());",
          "    assert!(formatter.output.chars().count() == 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter { output: String::new() };",
          "    let ignored_any = IgnoredAny;",
          "    let _ = ignored_any.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"anything at all\");"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "    struct TestFormatter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter { output: String::new() };",
          "    let ignored_any = IgnoredAny;",
          "    let _ = ignored_any.expecting(&mut formatter);",
          "    assert_eq!(formatter.output, \"anything at all\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]