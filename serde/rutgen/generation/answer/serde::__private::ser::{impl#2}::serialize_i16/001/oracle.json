[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(-32768);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_i16(0);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(1);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(32767);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(-1);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(-32768);",
          "    let result = serializer.serialize_i16(0);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(1);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(32767);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_i16(-1);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(0);",
          "}"
        ],
        "oracle": [
          "    let serializer = DummySerializer;",
          "    let result = serializer.serialize_i16(0);",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(0);",
          "    let serializer = DummySerializer;",
          "    let result = serializer.serialize_i16(0);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(32767);",
          "}"
        ],
        "oracle": [
          "    Err(self.bad_type(Unsupported::Integer))"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(32767);",
          "    Err(self.bad_type(Unsupported::Integer))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(-32769);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_i16(-32769);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(-32769);",
          "    let result = serializer.serialize_i16(-32769);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(32768);",
          "}"
        ],
        "oracle": [
          "    Err(self.bad_type(Unsupported::Integer))"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = Impossible<(), ()>;",
          "        type SerializeTuple = Impossible<(), ()>;",
          "        type SerializeTupleStruct = Impossible<(), ()>;",
          "        type SerializeTupleVariant = Impossible<(), ()>;",
          "        type SerializeMap = Impossible<(), ()>;",
          "        type SerializeStruct = Impossible<(), ()>;",
          "        type SerializeStructVariant = Impossible<(), ()>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {",
          "            Err(())",
          "        }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Ok(()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Ok(()) }",
          "        // other methods omitted for brevity",
          "    }",
          "    let serializer = DummySerializer;",
          "    let _ = serializer.serialize_i16(32768);",
          "    Err(self.bad_type(Unsupported::Integer))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]