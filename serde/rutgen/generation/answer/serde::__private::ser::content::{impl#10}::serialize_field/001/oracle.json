[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidValue;",
          "",
          "    impl Serialize for InvalidValue {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidValue);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err().to_string().contains(\"serialization error\"));"
        ],
        "code": [
          "{",
          "    struct InvalidValue;",
          "",
          "    impl Serialize for InvalidValue {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidValue);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err().to_string().contains(\"serialization error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidString;",
          "",
          "    impl Serialize for InvalidString {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidString);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"serialization error\");"
        ],
        "code": [
          "{",
          "    struct InvalidString;",
          "",
          "    impl Serialize for InvalidString {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidString);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"serialization error\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidInteger;",
          "",
          "    impl Serialize for InvalidInteger {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidInteger);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"serialization error\");"
        ],
        "code": [
          "{",
          "    struct InvalidInteger;",
          "",
          "    impl Serialize for InvalidInteger {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(S::Error::custom(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        fields: Vec<Content>,",
          "        error: PhantomData<dyn Error>,",
          "    }",
          "",
          "    impl SerializeTupleVariant for TestSerializer {",
          "        type Ok = Content;",
          "        type Error = Box<dyn Error>;",
          "",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let value = tri!(value.serialize(ContentSerializer::<Self::Error>::new()));",
          "            self.fields.push(value);",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Content, Self::Error> {",
          "            Ok(Content::Seq(self.fields))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let result = serializer.serialize_field(&InvalidInteger);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"serialization error\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]