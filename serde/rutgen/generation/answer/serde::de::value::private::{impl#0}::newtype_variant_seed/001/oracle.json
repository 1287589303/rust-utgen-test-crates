[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Seed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for Seed {",
          "        type Value = ();",
          "    }",
          "",
          "    let unit_only: UnitOnly<()> = UnitOnly {",
          "        marker: PhantomData,",
          "    };",
          "    let _ = unit_only.newtype_variant_seed(Seed);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(unit_only.newtype_variant_seed(Seed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))));"
        ],
        "code": [
          "{",
          "    struct Seed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for Seed {",
          "        type Value = ();",
          "    }",
          "",
          "    let unit_only: UnitOnly<()> = UnitOnly {",
          "        marker: PhantomData,",
          "    };",
          "    let _ = unit_only.newtype_variant_seed(Seed);",
          "    assert!(matches!(unit_only.newtype_variant_seed(Seed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
          "        type Value = ();",
          "    }",
          "",
          "    let unit_only: UnitOnly<()> = UnitOnly {",
          "        marker: PhantomData,",
          "    };",
          "    let _ = unit_only.newtype_variant_seed(EmptySeed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit_only.newtype_variant_seed(EmptySeed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));"
        ],
        "code": [
          "{",
          "    struct EmptySeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
          "        type Value = ();",
          "    }",
          "",
          "    let unit_only: UnitOnly<()> = UnitOnly {",
          "        marker: PhantomData,",
          "    };",
          "    let _ = unit_only.newtype_variant_seed(EmptySeed);",
          "    assert_eq!(unit_only.newtype_variant_seed(EmptySeed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]