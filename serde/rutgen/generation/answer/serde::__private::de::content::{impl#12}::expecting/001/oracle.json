[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TagOrContentFieldVisitor {",
          "        tag: \"tagField\",",
          "        content: \"contentField\",",
          "    };",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = visitor.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TagOrContentFieldVisitor {",
          "        tag: \"tagField\",",
          "        content: \"contentField\",",
          "    };",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = visitor.expecting(&mut formatter);",
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TagOrContentFieldVisitor {",
          "        tag: \"anotherTag\",",
          "        content: \"anotherContent\",",
          "    };",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = visitor.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TagOrContentFieldVisitor {",
          "        tag: \"anotherTag\",",
          "        content: \"anotherContent\",",
          "    };",
          "    let mut formatter = TestFormatter;",
          "",
          "    let _ = visitor.expecting(&mut formatter);",
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]