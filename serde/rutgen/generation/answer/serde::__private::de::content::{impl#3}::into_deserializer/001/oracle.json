[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer<_, _>>());",
          "    assert!(deserializer.content.is_some());"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer<_, _>>());",
          "    assert!(deserializer.content.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.content, &Content::U8(255)));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());",
          "    assert_eq!(deserializer.content, &content);"
        ],
        "code": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert!(matches!(deserializer.content, &Content::U8(255)));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());",
          "    assert_eq!(deserializer.content, &content);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U16(65535);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::U16(65535));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::U16(_)));",
          "    assert!(matches!(deserializer.content, Content::U16(65535)));"
        ],
        "code": [
          "{",
          "    let content = Content::U16(65535);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::U16(65535));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::U16(_)));",
          "    assert!(matches!(deserializer.content, Content::U16(65535)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U32(4294967295);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::U32(4294967295));",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.is_human_readable());"
        ],
        "code": [
          "{",
          "    let content = Content::U32(4294967295);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::U32(4294967295));",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.is_human_readable());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I8(-128);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::I8(-128));",
          "    assert!(deserializer.is_human_readable());",
          "    assert!(deserializer.next_key::<u8>().is_err());",
          "    assert!(deserializer.next_value::<u8>().is_err());",
          "    assert!(deserializer.next_entry::<u8, u8>().is_err());"
        ],
        "code": [
          "{",
          "    let content = Content::I8(-128);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::I8(-128));",
          "    assert!(deserializer.is_human_readable());",
          "    assert!(deserializer.next_key::<u8>().is_err());",
          "    assert!(deserializer.next_value::<u8>().is_err());",
          "    assert!(deserializer.next_entry::<u8, u8>().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::I16(-32768));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());",
          "    assert!(deserializer.is_human_readable());",
          "    assert_eq!(deserializer.content, Content::I16(-32768));"
        ],
        "code": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::I16(-32768));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());",
          "    assert!(deserializer.is_human_readable());",
          "    assert_eq!(deserializer.content, Content::I16(-32768));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(-2147483648);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::I32(-2147483648));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::I32(_)));",
          "    assert!(deserializer.into_deserializer().is::<ContentRefDeserializer<_, _>>());",
          "    assert!(deserializer.is_human_readable());"
        ],
        "code": [
          "{",
          "    let content = Content::I32(-2147483648);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::I32(-2147483648));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::I32(_)));",
          "    assert!(deserializer.into_deserializer().is::<ContentRefDeserializer<_, _>>());",
          "    assert!(deserializer.is_human_readable());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::F32(3.14159);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::F32(3.14159));",
          "    assert!(deserializer.err.is_phantom());"
        ],
        "code": [
          "{",
          "    let content = Content::F32(3.14159);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::F32(3.14159));",
          "    assert!(deserializer.err.is_phantom());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::F64(2.71828);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::F64(2.71828));",
          "    assert!(std::any::type_name::<ContentRefDeserializer<_, _>>() == \"ContentRefDeserializer<_, _>\");",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.content.is_some());"
        ],
        "code": [
          "{",
          "    let content = Content::F64(2.71828);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::F64(2.71828));",
          "    assert!(std::any::type_name::<ContentRefDeserializer<_, _>>() == \"ContentRefDeserializer<_, _>\");",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.content.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Char('c');",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Char('c'));",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.content.is_some());",
          "    assert_eq!(deserializer.content.as_ref().unwrap(), &Content::Char('c'));",
          "    assert_eq!(deserializer.content.len(), 1);"
        ],
        "code": [
          "{",
          "    let content = Content::Char('c');",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::Char('c'));",
          "    assert!(deserializer.err.is_none());",
          "    assert!(deserializer.content.is_some());",
          "    assert_eq!(deserializer.content.as_ref().unwrap(), &Content::Char('c'));",
          "    assert_eq!(deserializer.content.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"Hello, world!\"));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"Hello, world!\"));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bytes(&[1, 2, 3]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Bytes(&[1, 2, 3]));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());"
        ],
        "code": [
          "{",
          "    let content = Content::Bytes(&[1, 2, 3]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::Bytes(&[1, 2, 3]));",
          "    assert!(deserializer.err.is::<PhantomData<value::Error>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::None;",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    let content = Content::None;",
          "    let deserializer: ContentRefDeserializer<_, _> = content.into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::None);",
          "    assert!(matches!(deserializer.content, Content::None));"
        ],
        "code": [
          "{",
          "    let content = Content::None;",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    let content = Content::None;",
          "    let deserializer: ContentRefDeserializer<_, _> = content.into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::None);",
          "    assert!(matches!(deserializer.content, Content::None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner_content = Content::Bool(false);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Some(Box::new(Content::Bool(false))));"
        ],
        "code": [
          "{",
          "    let inner_content = Content::Bool(false);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::Some(Box::new(Content::Bool(false))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Unit;",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Unit);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer<&Content<'static>, value::Error>>());",
          "    assert!(deserializer.err.is_none());"
        ],
        "code": [
          "{",
          "    let content = Content::Unit;",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &Content::Unit);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer<&Content<'static>, value::Error>>());",
          "    assert!(deserializer.err.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner_content = Content::U32(42);",
          "    let content = Content::Newtype(Box::new(inner_content));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<_>>());"
        ],
        "code": [
          "{",
          "    let inner_content = Content::U32(42);",
          "    let content = Content::Newtype(Box::new(inner_content));",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(content, Content::Seq(_)));",
          "    assert!(matches!(content, Content::U8(_)));",
          "    assert_eq!(deserializer.content, &Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(deserializer.content.is_some());",
          "    assert_eq!(deserializer.content.size_hint(), None);",
          "    assert!(deserializer.content.is::<Content>());"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(content, Content::Seq(_)));",
          "    assert!(matches!(content, Content::U8(_)));",
          "    assert_eq!(deserializer.content, &Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(deserializer.content.is_some());",
          "    assert_eq!(deserializer.content.size_hint(), None);",
          "    assert!(deserializer.content.is::<Content>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Map(vec![",
          "        (Content::String(String::from(\"key1\")), Content::U32(1)),",
          "        (Content::String(String::from(\"key2\")), Content::U32(2)),",
          "    ]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_phantom());",
          "    assert!(matches!(deserializer.content, Content::Map(_)));",
          "    assert_eq!(deserializer.content, &Content::Map(vec![(Content::String(String::from(\"key1\")), Content::U32(1)), (Content::String(String::from(\"key2\")), Content::U32(2))]));",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);"
        ],
        "code": [
          "{",
          "    let content = Content::Map(vec![",
          "        (Content::String(String::from(\"key1\")), Content::U32(1)),",
          "        (Content::String(String::from(\"key2\")), Content::U32(2)),",
          "    ]);",
          "    let deserializer: ContentRefDeserializer<_, _> = (&content).into_deserializer();",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_phantom());",
          "    assert!(matches!(deserializer.content, Content::Map(_)));",
          "    assert_eq!(deserializer.content, &Content::Map(vec![(Content::String(String::from(\"key1\")), Content::U32(1)), (Content::String(String::from(\"key2\")), Content::U32(2))]));",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]