[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_str(\"test_value\")",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"TestStruct\", 0, \"TestVariant\", &TestValue);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    match content {",
          "    Content::NewtypeVariant(name, variant_index, variant, value) => {",
          "    assert_eq!(name, \"TestStruct\");",
          "    assert_eq!(variant_index, 0);",
          "    assert_eq!(variant, \"TestVariant\");",
          "    assert_eq!(*value.downcast::<Content>().unwrap(), Content::Str(\"test_value\".to_string()));",
          "    },",
          "    _ => panic!(\"Expected NewtypeVariant\"),",
          "    }"
        ],
        "code": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_str(\"test_value\")",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"TestStruct\", 0, \"TestVariant\", &TestValue);",
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    match content {",
          "    Content::NewtypeVariant(name, variant_index, variant, value) => {",
          "    assert_eq!(name, \"TestStruct\");",
          "    assert_eq!(variant_index, 0);",
          "    assert_eq!(variant, \"TestVariant\");",
          "    assert_eq!(*value.downcast::<Content>().unwrap(), Content::Str(\"test_value\".to_string()));",
          "    },",
          "    _ => panic!(\"Expected NewtypeVariant\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_i32(42)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"IntegerStruct\", 1, \"IntegerVariant\", &TestValue);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::NewtypeVariant(\"IntegerStruct\", 1, \"IntegerVariant\", Box::new(Content::I32(42))));"
        ],
        "code": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_i32(42)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"IntegerStruct\", 1, \"IntegerVariant\", &TestValue);",
          "    assert_eq!(result, Ok(Content::NewtypeVariant(\"IntegerStruct\", 1, \"IntegerVariant\", Box::new(Content::I32(42))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_f64(3.14)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"FloatStruct\", 2, \"FloatVariant\", &TestValue);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::NewtypeVariant(\"FloatStruct\", 2, \"FloatVariant\", Box::new(Content::F64(3.14))));"
        ],
        "code": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_f64(3.14)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"FloatStruct\", 2, \"FloatVariant\", &TestValue);",
          "    assert_eq!(result, Ok(Content::NewtypeVariant(\"FloatStruct\", 2, \"FloatVariant\", Box::new(Content::F64(3.14))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_bool(true)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"BoolStruct\", 3, \"BoolVariant\", &TestValue);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert_eq!(content, Content::NewtypeVariant(\"BoolStruct\", 3, \"BoolVariant\", Box::new(Content::Bool(true))));"
        ],
        "code": [
          "{",
          "    struct TestValue;",
          "",
          "    impl Serialize for TestValue {",
          "        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            serializer.serialize_bool(true)",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_newtype_variant(\"BoolStruct\", 3, \"BoolVariant\", &TestValue);",
          "    assert!(result.is_ok());",
          "    let content = result.unwrap();",
          "    assert_eq!(content, Content::NewtypeVariant(\"BoolStruct\", 3, \"BoolVariant\", Box::new(Content::Bool(true))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]