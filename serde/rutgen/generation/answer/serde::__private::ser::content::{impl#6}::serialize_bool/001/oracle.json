[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _result = serializer.serialize_bool(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Content::Bool(true)));",
          "    assert!(matches!(_result, Ok(Content::Bool(v)) if v == true));",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.as_ref().unwrap().is_bool(), true);",
          "    assert!(matches!(_result, Ok(Content::Bool(_))));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _result = serializer.serialize_bool(true);",
          "    assert_eq!(_result, Ok(Content::Bool(true)));",
          "    assert!(matches!(_result, Ok(Content::Bool(v)) if v == true));",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.as_ref().unwrap().is_bool(), true);",
          "    assert!(matches!(_result, Ok(Content::Bool(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _result = serializer.serialize_bool(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Content::Bool(false)));",
          "    assert!(!matches!(_result, Err(_)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _result = serializer.serialize_bool(false);",
          "    assert_eq!(_result, Ok(Content::Bool(false)));",
          "    assert!(!matches!(_result, Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]