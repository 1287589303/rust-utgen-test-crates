[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct OkType;",
          "    struct MyError;",
          "",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "        void: std::mem::zeroed(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _result: Result<OkType, MyError> = impossible_instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<OkType>(), 0);",
          "    assert_eq!(std::mem::size_of::<MyError>(), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "    void: std::mem::zeroed(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    impossible_instance.end()",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct OkType;",
          "    struct MyError;",
          "",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "        void: std::mem::zeroed(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _result: Result<OkType, MyError> = impossible_instance.end();",
          "    assert_eq!(std::mem::size_of::<OkType>(), 0);",
          "    assert_eq!(std::mem::size_of::<MyError>(), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "    void: std::mem::zeroed(),",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    impossible_instance.end()",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct OkType;",
          "    struct MyError;",
          "",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "        void: std::mem::zeroed(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _result: Result<OkType, MyError> = impossible_instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<OkType>(), std::mem::size_of::<OkType>());",
          "    assert_eq!(std::mem::size_of::<MyError>(), std::mem::size_of::<MyError>());",
          "    assert!(std::mem::transmute::<_, *const Void>(impossible_instance.void).is_null());",
          "    assert!(std::panic::catch_unwind(|| { impossible_instance.end(); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { impossible_instance.serialize_field(\"key\", &\"value\"); }).is_err());",
          "    assert!(std::mem::discriminant(&impossible_instance.ok) == std::mem::discriminant(&phantom_data));",
          "    assert!(std::mem::discriminant(&impossible_instance.error) == std::mem::discriminant(&phantom_data));",
          "    assert!(impossible_instance.void == std::mem::zeroed());"
        ],
        "code": [
          "{",
          "    struct OkType;",
          "    struct MyError;",
          "",
          "    let impossible_instance: Impossible<OkType, MyError> = Impossible {",
          "        void: std::mem::zeroed(),",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _result: Result<OkType, MyError> = impossible_instance.end();",
          "    assert_eq!(std::mem::size_of::<OkType>(), std::mem::size_of::<OkType>());",
          "    assert_eq!(std::mem::size_of::<MyError>(), std::mem::size_of::<MyError>());",
          "    assert!(std::mem::transmute::<_, *const Void>(impossible_instance.void).is_null());",
          "    assert!(std::panic::catch_unwind(|| { impossible_instance.end(); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { impossible_instance.serialize_field(\"key\", &\"value\"); }).is_err());",
          "    assert!(std::mem::discriminant(&impossible_instance.ok) == std::mem::discriminant(&phantom_data));",
          "    assert!(std::mem::discriminant(&impossible_instance.error) == std::mem::discriminant(&phantom_data));",
          "    assert!(impossible_instance.void == std::mem::zeroed());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]