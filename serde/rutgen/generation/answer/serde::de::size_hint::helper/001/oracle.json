[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (0, None);",
          "    let result = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bounds = (0, None);",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (1, Some(2));",
          "    let result = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bounds = (1, Some(2));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (usize::MAX, Some(usize::MAX - 1));",
          "    let result = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bounds = (usize::MAX, Some(usize::MAX - 1));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (0, Some(1));",
          "    let result = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bounds = (0, Some(1));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (usize::MIN, Some(1));",
          "    let result = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let bounds = (usize::MIN, Some(1));",
          "    let result = helper(bounds);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]