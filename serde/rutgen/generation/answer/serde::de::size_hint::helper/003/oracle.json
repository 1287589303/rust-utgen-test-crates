[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (5, Some(10)); ",
          "    let _ = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(helper((5, Some(10))), None);"
        ],
        "code": [
          "{",
          "    let bounds = (5, Some(10)); ",
          "    let _ = helper(bounds);",
          "    assert_eq!(helper((5, Some(10))), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (3, None); ",
          "    let _ = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    let bounds = (3, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (7, Some(7));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(7));",
          "    ",
          "    let bounds = (2, Some(8));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (5, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(5));",
          "    ",
          "    let bounds = (10, Some(15));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (0, Some(0));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let bounds = (4, None);",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (6, Some(4));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bounds = (3, None); ",
          "    let _ = helper(bounds);",
          "    let bounds = (3, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (7, Some(7));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(7));",
          "    ",
          "    let bounds = (2, Some(8));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (5, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(5));",
          "    ",
          "    let bounds = (10, Some(15));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (0, Some(0));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let bounds = (4, None);",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (6, Some(4));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bounds = (7, Some(7)); ",
          "    let _ = helper(bounds);",
          "}"
        ],
        "oracle": [
          "    let bounds = (7, Some(8));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (5, Some(10));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (10, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (3, None);",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (0, Some(0));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(0));"
        ],
        "code": [
          "{",
          "    let bounds = (7, Some(7)); ",
          "    let _ = helper(bounds);",
          "    let bounds = (7, Some(8));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (5, Some(10));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (10, Some(5));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (3, None);",
          "    let result = helper(bounds);",
          "    assert_eq!(result, None);",
          "    ",
          "    let bounds = (0, Some(0));",
          "    let result = helper(bounds);",
          "    assert_eq!(result, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]