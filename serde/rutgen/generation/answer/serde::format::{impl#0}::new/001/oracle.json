[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes: [u8; 0] = [];",
          "    let buf = Buf::new(&mut bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.bytes, &mut bytes);",
          "    assert_eq!(buf.offset, 0);"
        ],
        "code": [
          "{",
          "    let mut bytes: [u8; 0] = [];",
          "    let buf = Buf::new(&mut bytes);",
          "    assert_eq!(buf.bytes, &mut bytes);",
          "    assert_eq!(buf.offset, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes: [u8; 1] = [1];",
          "    let buf = Buf::new(&mut bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.offset, 0);",
          "    assert_eq!(buf.bytes.as_ptr(), bytes.as_ptr());",
          "    assert_eq!(buf.bytes.len(), 1);",
          "    assert_eq!(buf.bytes[0], 1);"
        ],
        "code": [
          "{",
          "    let mut bytes: [u8; 1] = [1];",
          "    let buf = Buf::new(&mut bytes);",
          "    assert_eq!(buf.offset, 0);",
          "    assert_eq!(buf.bytes.as_ptr(), bytes.as_ptr());",
          "    assert_eq!(buf.bytes.len(), 1);",
          "    assert_eq!(buf.bytes[0], 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes: [u8; 10] = [0; 10];",
          "    let buf = Buf::new(&mut bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.bytes, &mut bytes);",
          "    assert_eq!(buf.offset, 0);"
        ],
        "code": [
          "{",
          "    let mut bytes: [u8; 10] = [0; 10];",
          "    let buf = Buf::new(&mut bytes);",
          "    assert_eq!(buf.bytes, &mut bytes);",
          "    assert_eq!(buf.offset, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes: [u8; 1024] = [0; 1024];",
          "    let buf = Buf::new(&mut bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.offset, 0);",
          "    assert_eq!(buf.bytes.len(), 1024);",
          "    assert_eq!(buf.bytes as *const _ as usize, bytes.as_mut_ptr() as usize);"
        ],
        "code": [
          "{",
          "    let mut bytes: [u8; 1024] = [0; 1024];",
          "    let buf = Buf::new(&mut bytes);",
          "    assert_eq!(buf.offset, 0);",
          "    assert_eq!(buf.bytes.len(), 1024);",
          "    assert_eq!(buf.bytes as *const _ as usize, bytes.as_mut_ptr() as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]