[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_?, Ok(Content::Tuple(Vec::new())));",
          "    assert!(serialize_tuple.elements.is_empty());"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_?, Ok(Content::Tuple(Vec::new())));",
          "    assert!(serialize_tuple.elements.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Bool(true)],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serialize_tuple.end(), Ok(Content::Tuple(vec![Content::Bool(true)])));",
          "    ",
          "    let serialize_tuple_empty: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_empty.end(), Ok(Content::Tuple(vec![])));",
          "    ",
          "    let serialize_tuple_multiple: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![Content::U8(255), Content::F32(1.23)],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_multiple.end(), Ok(Content::Tuple(vec![Content::U8(255), Content::F32(1.23)])));",
          "    ",
          "    let serialize_tuple_none: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![Content::None],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_none.end(), Ok(Content::Tuple(vec![Content::None])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Bool(true)],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(serialize_tuple.end(), Ok(Content::Tuple(vec![Content::Bool(true)])));",
          "    ",
          "    let serialize_tuple_empty: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_empty.end(), Ok(Content::Tuple(vec![])));",
          "    ",
          "    let serialize_tuple_multiple: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![Content::U8(255), Content::F32(1.23)],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_multiple.end(), Ok(Content::Tuple(vec![Content::U8(255), Content::F32(1.23)])));",
          "    ",
          "    let serialize_tuple_none: SerializeTuple<()> = SerializeTuple {",
          "    elements: vec![Content::None],",
          "    error: PhantomData,",
          "    };",
          "    assert_eq!(serialize_tuple_none.end(), Ok(Content::Tuple(vec![Content::None])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::U8(255)],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::U8(255)])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::U8(255)],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::U8(255)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![",
          "            Content::U16(200),",
          "            Content::F32(1.23),",
          "            Content::Char('a'),",
          "        ],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ as Result<Content, ()>, Ok(Content::Tuple(vec![",
          "    Content::U16(200),",
          "    Content::F32(1.23),",
          "    Content::Char('a'),",
          "    ])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![",
          "            Content::U16(200),",
          "            Content::F32(1.23),",
          "            Content::Char('a'),",
          "        ],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_ as Result<Content, ()>, Ok(Content::Tuple(vec![",
          "    Content::U16(200),",
          "    Content::F32(1.23),",
          "    Content::Char('a'),",
          "    ])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::None],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::None], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::None])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::Bool(true)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::Bool(true)])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::U8(255)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::U8(255)])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::String(String::from(\"test\"))], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::String(String::from(\"test\"))])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::F64(3.14)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::F64(3.14)])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::None],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::None], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::None])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::Bool(true)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::Bool(true)])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::U8(255)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::U8(255)])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::String(String::from(\"test\"))], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::String(String::from(\"test\"))])));",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple { elements: vec![Content::F64(3.14)], error: PhantomData };",
          "    let result = serialize_tuple.end();",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::F64(3.14)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Unit],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap_result(self.elements), Content::Tuple(vec![Content::Unit]));",
          "    assert!(_is_ok(result));",
          "    assert_eq!(result.unwrap(), Content::Tuple(vec![Content::Unit]));",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert!(_unwrap_result(result).eq(&Content::Tuple(vec![Content::Unit])));",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::Unit])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Unit],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_unwrap_result(self.elements), Content::Tuple(vec![Content::Unit]));",
          "    assert!(_is_ok(result));",
          "    assert_eq!(result.unwrap(), Content::Tuple(vec![Content::Unit]));",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert!(_unwrap_result(result).eq(&Content::Tuple(vec![Content::Unit])));",
          "    assert_eq!(result, Ok(Content::Tuple(vec![Content::Unit])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::String(String::from(\"test\"))],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::String(String::from(\"test\"))])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::String(String::from(\"test\"))],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::String(String::from(\"test\"))])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Some(Box::new(Content::U64(123456789)))],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::Some(Box::new(Content::U64(123456789)))])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Some(Box::new(Content::U64(123456789)))],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_ , Ok(Content::Tuple(vec![Content::Some(Box::new(Content::U64(123456789)))])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Tuple(vec![Content::I32(42), Content::F64(3.14)])],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap_result(_), Ok(Content::Tuple(vec![Content::I32(42), Content::F64(3.14)])));"
        ],
        "code": [
          "{",
          "    let serialize_tuple: SerializeTuple<()> = SerializeTuple {",
          "        elements: vec![Content::Tuple(vec![Content::I32(42), Content::F64(3.14)])],",
          "        error: PhantomData,",
          "    };",
          "    let _ = serialize_tuple.end();",
          "    assert_eq!(_unwrap_result(_), Ok(Content::Tuple(vec![Content::I32(42), Content::F64(3.14)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]