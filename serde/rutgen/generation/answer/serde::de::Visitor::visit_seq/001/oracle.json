[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySeq;",
          "",
          "    impl<'de> SeqAccess<'de> for EmptySeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(EmptySeq);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Seq, &self))"
        ],
        "code": [
          "{",
          "    struct EmptySeq;",
          "",
          "    impl<'de> SeqAccess<'de> for EmptySeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(EmptySeq);",
          "    Err(Error::invalid_type(Unexpected::Seq, &self))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementSeq;",
          "",
          "    impl<'de> SeqAccess<'de> for SingleElementSeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(1))",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(SingleElementSeq);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Seq, &self))"
        ],
        "code": [
          "{",
          "    struct SingleElementSeq;",
          "",
          "    impl<'de> SeqAccess<'de> for SingleElementSeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(1))",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(SingleElementSeq);",
          "    Err(Error::invalid_type(Unexpected::Seq, &self))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultipleElementsSeq;",
          "",
          "    impl<'de> SeqAccess<'de> for MultipleElementsSeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(1))",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(MultipleElementsSeq);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Seq, &visitor))"
        ],
        "code": [
          "{",
          "    struct MultipleElementsSeq;",
          "",
          "    impl<'de> SeqAccess<'de> for MultipleElementsSeq {",
          "        type Error = &'static str;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(1))",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any sequence\")",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_seq(MultipleElementsSeq);",
          "    Err(Error::invalid_type(Unexpected::Seq, &visitor))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]