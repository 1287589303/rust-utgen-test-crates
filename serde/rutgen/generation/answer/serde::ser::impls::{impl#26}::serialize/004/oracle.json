[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(192, 168, 1, 1));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    let non_human_readable_serializer = MockSerializer { is_human_readable: false };",
          "    let addr_v4 = net::SocketAddr::V4(net::Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(addr_v4.serialize(non_human_readable_serializer), Ok(()));",
          "    ",
          "    let addr_v6 = net::SocketAddr::V6(net::Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));",
          "    assert_eq!(addr_v6.serialize(non_human_readable_serializer), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(192, 168, 1, 1));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "    let non_human_readable_serializer = MockSerializer { is_human_readable: false };",
          "    let addr_v4 = net::SocketAddr::V4(net::Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(addr_v4.serialize(non_human_readable_serializer), Ok(()));",
          "    ",
          "    let addr_v6 = net::SocketAddr::V6(net::Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));",
          "    assert_eq!(addr_v6.serialize(non_human_readable_serializer), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(0, 0, 0, 0));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    addr.serialize(serializer).is_ok()",
          "    serializer.serialize_newtype_variant(\"SocketAddr\", 0, \"V4\", &addr).is_ok()",
          "    serializer.serialize_newtype_variant(\"SocketAddr\", 1, \"V6\", &addr).is_err()",
          "    addr.serialize(serializer).unwrap();"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(0, 0, 0, 0));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "    addr.serialize(serializer).is_ok()",
          "    serializer.serialize_newtype_variant(\"SocketAddr\", 0, \"V4\", &addr).is_ok()",
          "    serializer.serialize_newtype_variant(\"SocketAddr\", 1, \"V6\", &addr).is_err()",
          "    addr.serialize(serializer).unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(127, 0, 0, 1));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    addr.serialize(serializer).is_ok()",
          "    serializer.is_human_readable() == false",
          "    *addr == net::SocketAddr::V4(net::Ipv4Addr::new(127, 0, 0, 1))"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(127, 0, 0, 1));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "    addr.serialize(serializer).is_ok()",
          "    serializer.is_human_readable() == false",
          "    *addr == net::SocketAddr::V4(net::Ipv4Addr::new(127, 0, 0, 1))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(255, 255, 255, 255));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(addr.serialize(serializer), Ok(()));",
          "    assert_eq!(serializer.is_human_readable(), false);",
          "    assert!(matches!(*self, net::SocketAddr::V4(_)));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "",
          "        fn is_human_readable(&self) -> bool {",
          "            false",
          "        }",
          "",
          "        fn serialize_newtype_variant<T: Serialize>(",
          "            &self,",
          "            _: &str,",
          "            _: u32,",
          "            _: &str,",
          "            _: &T,",
          "        ) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let addr = net::SocketAddr::V4(net::Ipv4Addr::new(255, 255, 255, 255));",
          "    let serializer = MockSerializer;",
          "    let _ = addr.serialize(serializer);",
          "    assert_eq!(addr.serialize(serializer), Ok(()));",
          "    assert_eq!(serializer.is_human_readable(), false);",
          "    assert!(matches!(*self, net::SocketAddr::V4(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]