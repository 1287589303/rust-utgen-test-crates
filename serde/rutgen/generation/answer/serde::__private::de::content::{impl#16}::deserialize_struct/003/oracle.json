[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert_eq!(deserializer.deserialize_struct(\"test\", &[]).unwrap(), /* expected value for empty Seq */);",
          "    assert!(matches!(deserializer.deserialize_struct(\"test\", &[]), Ok(_)));"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert_eq!(deserializer.deserialize_struct(\"test\", &[]).unwrap(), /* expected value for empty Seq */);",
          "    assert!(matches!(deserializer.deserialize_struct(\"test\", &[]), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::U32(42)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, Content::Seq(vec![Content::U32(42)]));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).unwrap().is_some());"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::U32(42)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "    assert_eq!(deserializer.content, Content::Seq(vec![Content::U32(42)]));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).unwrap().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::U16(1), Content::U16(2), Content::U16(3)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, Content::Seq(vec![Content::U16(1), Content::U16(2), Content::U16(3)]));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert!(matches!(deserializer.deserialize_struct(\"test\", &[]), Ok(_)));"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::U16(1), Content::U16(2), Content::U16(3)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "    assert_eq!(deserializer.content, Content::Seq(vec![Content::U16(1), Content::U16(2), Content::U16(3)]));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert!(matches!(deserializer.deserialize_struct(\"test\", &[]), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq((0..100).map(Content::U32).collect());",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.content, Content::Seq(_)));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert_eq!(deserializer.deserialize_struct(\"test\", &[]).unwrap(), expected_value);"
        ],
        "code": [
          "{",
          "    let content = Content::Seq((0..100).map(Content::U32).collect());",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    deserializer.deserialize_struct(\"test\", &[]).unwrap();",
          "    assert!(matches!(deserializer.content, Content::Seq(_)));",
          "    assert!(deserializer.deserialize_struct(\"test\", &[]).is_ok());",
          "    assert_eq!(deserializer.deserialize_struct(\"test\", &[]).unwrap(), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]