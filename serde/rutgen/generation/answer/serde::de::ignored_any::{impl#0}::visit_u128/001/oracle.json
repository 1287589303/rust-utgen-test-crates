[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(0u128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u128(0u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(1u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(u128::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(12345678901234567890u128), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(0u128);",
          "    assert_eq!(visitor.visit_u128(0u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(1u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(u128::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(12345678901234567890u128), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(1u128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u128(1u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(0u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(u128::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(123456789012345678901234567890u128), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(1u128);",
          "    assert_eq!(visitor.visit_u128(1u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(0u128), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(u128::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_u128(123456789012345678901234567890u128), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(340282366920938463463374607431768211455u128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u128(340282366920938463463374607431768211455u128), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(340282366920938463463374607431768211455u128);",
          "    assert_eq!(visitor.visit_u128(340282366920938463463374607431768211455u128), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(170141183460469231731687303715884105727u128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u128(170141183460469231731687303715884105727u128), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_u128(170141183460469231731687303715884105727u128);",
          "    assert_eq!(visitor.visit_u128(170141183460469231731687303715884105727u128), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]