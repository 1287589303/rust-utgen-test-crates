[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('\\0');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('\\0')));",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));",
          "    let result = visitor.visit_char('$');",
          "    assert_eq!(result, Ok(Content::Char('$')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('\\0');",
          "    assert_eq!(result, Ok(Content::Char('\\0')));",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));",
          "    let result = visitor.visit_char('$');",
          "    assert_eq!(result, Ok(Content::Char('$')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('a')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('Z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('Z')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('9');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('9')));",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('A');",
          "    assert_eq!(result, Ok(Content::Char('A')));",
          "    let result = visitor.visit_char('!');",
          "    assert_eq!(result, Ok(Content::Char('!')));",
          "    let result = visitor.visit_char(' ');",
          "    assert_eq!(result, Ok(Content::Char(' ')));",
          "    let result = visitor.visit_char('üòä');",
          "    assert_eq!(result, Ok(Content::Char('üòä')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('9');",
          "    assert_eq!(result, Ok(Content::Char('9')));",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('A');",
          "    assert_eq!(result, Ok(Content::Char('A')));",
          "    let result = visitor.visit_char('!');",
          "    assert_eq!(result, Ok(Content::Char('!')));",
          "    let result = visitor.visit_char(' ');",
          "    assert_eq!(result, Ok(Content::Char(' ')));",
          "    let result = visitor.visit_char('üòä');",
          "    assert_eq!(result, Ok(Content::Char('üòä')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('!');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('!')));",
          "    ",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    ",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    ",
          "    let result = visitor.visit_char('@');",
          "    assert_eq!(result, Ok(Content::Char('@')));",
          "    ",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('!');",
          "    assert_eq!(result, Ok(Content::Char('!')));",
          "    ",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    ",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    ",
          "    let result = visitor.visit_char('@');",
          "    assert_eq!(result, Ok(Content::Char('@')));",
          "    ",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char(' ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char(' ')));",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));",
          "    let result = visitor.visit_char('!');",
          "    assert_eq!(result, Ok(Content::Char('!')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char(' ');",
          "    assert_eq!(result, Ok(Content::Char(' ')));",
          "    let result = visitor.visit_char('a');",
          "    assert_eq!(result, Ok(Content::Char('a')));",
          "    let result = visitor.visit_char('Z');",
          "    assert_eq!(result, Ok(Content::Char('Z')));",
          "    let result = visitor.visit_char('1');",
          "    assert_eq!(result, Ok(Content::Char('1')));",
          "    let result = visitor.visit_char('!');",
          "    assert_eq!(result, Ok(Content::Char('!')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('ùíú');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::Char('ùíú')));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result = visitor.visit_char('ùíú');",
          "    assert_eq!(result, Ok(Content::Char('ùíú')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]