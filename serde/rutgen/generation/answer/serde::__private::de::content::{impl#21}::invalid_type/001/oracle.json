[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedBool;",
          "    ",
          "    impl Expected for ExpectedBool {}",
          "",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedBool;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.invalid_type(&exp).is_err(), true);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Bool(true));",
          "    assert!(matches!(deserializer.invalid_type(&exp), Err(_)));",
          "    assert!(deserializer.invalid_type(&exp).is_a::<E>());",
          "    assert!(matches!(deserializer.invalid_type(&exp).kind(), Some(ErrorKind::InvalidType)));"
        ],
        "code": [
          "{",
          "    struct ExpectedBool;",
          "    ",
          "    impl Expected for ExpectedBool {}",
          "",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedBool;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.invalid_type(&exp).is_err(), true);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Bool(true));",
          "    assert!(matches!(deserializer.invalid_type(&exp), Err(_)));",
          "    assert!(deserializer.invalid_type(&exp).is_a::<E>());",
          "    assert!(matches!(deserializer.invalid_type(&exp).kind(), Some(ErrorKind::InvalidType)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedU8;",
          "",
          "    impl Expected for ExpectedU8 {}",
          "",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedU8;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: PhantomData::<()>,",
          "    };",
          "    let exp = ExpectedU8;",
          "    let result = deserializer.invalid_type(&exp);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType);",
          "    assert_eq!(result.unwrap_err().unexpected(), Unexpected::Unsigned(255));"
        ],
        "code": [
          "{",
          "    struct ExpectedU8;",
          "",
          "    impl Expected for ExpectedU8 {}",
          "",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedU8;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: PhantomData::<()>,",
          "    };",
          "    let exp = ExpectedU8;",
          "    let result = deserializer.invalid_type(&exp);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType);",
          "    assert_eq!(result.unwrap_err().unexpected(), Unexpected::Unsigned(255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedI32;",
          "",
          "    impl Expected for ExpectedI32 {}",
          "",
          "    let content = Content::I32(-100);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedI32;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Signed(-100));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType(..)));"
        ],
        "code": [
          "{",
          "    struct ExpectedI32;",
          "",
          "    impl Expected for ExpectedI32 {}",
          "",
          "    let content = Content::I32(-100);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedI32;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Signed(-100));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType(..)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedF64;",
          "",
          "    impl Expected for ExpectedF64 {}",
          "",
          "    let content = Content::F64(3.14);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedF64;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.invalid_type(&exp).type_id(), de::Error::invalid_type(content.unexpected(), &exp).type_id());",
          "    assert!(deserializer.invalid_type(&exp).is_err());",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));",
          "    assert_eq!(deserializer.invalid_type(&exp).unexpected(), content.unexpected());",
          "    assert_eq!(deserializer.invalid_type(&exp).message(), \"invalid type\");"
        ],
        "code": [
          "{",
          "    struct ExpectedF64;",
          "",
          "    impl Expected for ExpectedF64 {}",
          "",
          "    let content = Content::F64(3.14);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedF64;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.invalid_type(&exp).type_id(), de::Error::invalid_type(content.unexpected(), &exp).type_id());",
          "    assert!(deserializer.invalid_type(&exp).is_err());",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));",
          "    assert_eq!(deserializer.invalid_type(&exp).unexpected(), content.unexpected());",
          "    assert_eq!(deserializer.invalid_type(&exp).message(), \"invalid type\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedChar;",
          "",
          "    impl Expected for ExpectedChar {}",
          "",
          "    let content = Content::Char('a');",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedChar;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Char('a'));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));"
        ],
        "code": [
          "{",
          "    struct ExpectedChar;",
          "",
          "    impl Expected for ExpectedChar {}",
          "",
          "    let content = Content::Char('a');",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedChar;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Char('a'));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedString;",
          "",
          "    impl Expected for ExpectedString {}",
          "",
          "    let content = Content::String(\"test\".to_string());",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedString;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content.as_str(), None);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Str(\"test\"));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));",
          "    assert!(matches!(deserializer.invalid_type(&exp), Err(_)));"
        ],
        "code": [
          "{",
          "    struct ExpectedString;",
          "",
          "    impl Expected for ExpectedString {}",
          "",
          "    let content = Content::String(\"test\".to_string());",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedString;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.content.as_str(), None);",
          "    assert_eq!(deserializer.content.unexpected(), Unexpected::Str(\"test\"));",
          "    assert!(matches!(deserializer.invalid_type(&exp), de::Error::InvalidType { .. }));",
          "    assert!(matches!(deserializer.invalid_type(&exp), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedSeq;",
          "",
          "    impl Expected for ExpectedSeq {}",
          "",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedSeq;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: PhantomData::<()>,",
          "    };",
          "    let exp = ExpectedSeq;",
          "    assert!(deserializer.invalid_type(&exp).is_err());"
        ],
        "code": [
          "{",
          "    struct ExpectedSeq;",
          "",
          "    impl Expected for ExpectedSeq {}",
          "",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedSeq;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentRefDeserializer {",
          "    content: &content,",
          "    err: PhantomData::<()>,",
          "    };",
          "    let exp = ExpectedSeq;",
          "    assert!(deserializer.invalid_type(&exp).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ExpectedMap;",
          "",
          "    impl Expected for ExpectedMap {}",
          "",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::Str(\"value\"))]);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedMap;",
          "    let _ = deserializer.invalid_type(&exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.invalid_type(&exp), de::Error::invalid_type(content.unexpected(), &exp));",
          "    assert!(matches!(content, Content::Map(_)));",
          "    assert!(matches!(content.unexpected(), Unexpected::Map));",
          "    assert!(std::mem::size_of::<ContentRefDeserializer>() > 0);",
          "    assert!(std::mem::size_of::<ExpectedMap>() > 0);",
          "    assert!(deserializer.err == PhantomData::<()>);"
        ],
        "code": [
          "{",
          "    struct ExpectedMap;",
          "",
          "    impl Expected for ExpectedMap {}",
          "",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::Str(\"value\"))]);",
          "    let deserializer = ContentRefDeserializer {",
          "        content: &content,",
          "        err: PhantomData::<()>,",
          "    };",
          "    ",
          "    let exp = ExpectedMap;",
          "    let _ = deserializer.invalid_type(&exp);",
          "    assert_eq!(deserializer.invalid_type(&exp), de::Error::invalid_type(content.unexpected(), &exp));",
          "    assert!(matches!(content, Content::Map(_)));",
          "    assert!(matches!(content.unexpected(), Unexpected::Map));",
          "    assert!(std::mem::size_of::<ContentRefDeserializer>() > 0);",
          "    assert!(std::mem::size_of::<ExpectedMap>() > 0);",
          "    assert!(deserializer.err == PhantomData::<()>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]