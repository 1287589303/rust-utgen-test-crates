[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "",
          "    impl ser::Error for ValidError {}",
          "",
          "    let instance = Impossible::<ValidOk, ValidError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert!(instance.end().is_ok());",
          "    assert_eq!(instance.end().unwrap(), ValidOk);",
          "    assert!(std::mem::size_of::<instance>() > 0);",
          "    assert!(std::mem::transmute::<_, Result<ValidOk, ValidError>>(instance.end()).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = instance.end(); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = instance.end(); }).is_err());",
          "    assert_eq!(instance.void, void);",
          "    assert!(std::any::TypeId::of::<ValidError>() == std::any::TypeId::of::<Error>());",
          "    assert!(std::any::TypeId::of::<ValidOk>() == std::any::TypeId::of::<Ok>());"
        ],
        "code": [
          "{",
          "    struct ValidOk;",
          "    struct ValidError;",
          "",
          "    impl ser::Error for ValidError {}",
          "",
          "    let instance = Impossible::<ValidOk, ValidError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    assert!(instance.end().is_ok());",
          "    assert_eq!(instance.end().unwrap(), ValidOk);",
          "    assert!(std::mem::size_of::<instance>() > 0);",
          "    assert!(std::mem::transmute::<_, Result<ValidOk, ValidError>>(instance.end()).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = instance.end(); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { let _ = instance.end(); }).is_err());",
          "    assert_eq!(instance.void, void);",
          "    assert!(std::any::TypeId::of::<ValidError>() == std::any::TypeId::of::<Error>());",
          "    assert!(std::any::TypeId::of::<ValidOk>() == std::any::TypeId::of::<Ok>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestOk;",
          "    struct TestError;",
          "",
          "    impl ser::Error for TestError {}",
          "",
          "    let instance = Impossible::<TestOk, TestError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let instance = Impossible::<TestOk, TestError> {",
          "    void: Void {},",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    instance.end();",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestOk;",
          "    struct TestError;",
          "",
          "    impl ser::Error for TestError {}",
          "",
          "    let instance = Impossible::<TestOk, TestError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let instance = Impossible::<TestOk, TestError> {",
          "    void: Void {},",
          "    ok: PhantomData,",
          "    error: PhantomData,",
          "    };",
          "    instance.end();",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinimalOk;",
          "    struct MinimalError;",
          "",
          "    impl ser::Error for MinimalError {}",
          "",
          "    let instance = Impossible::<MinimalOk, MinimalError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(instance.end().is_ok(), false);",
          "    assert!(matches!(instance.end(), Err(_)));",
          "    assert!(std::mem::size_of::<Impossible<MinimalOk, MinimalError>>() > 0);",
          "    assert!(std::mem::size_of::<MinimalOk>() > 0);",
          "    assert!(std::mem::size_of::<MinimalError>() > 0);"
        ],
        "code": [
          "{",
          "    struct MinimalOk;",
          "    struct MinimalError;",
          "",
          "    impl ser::Error for MinimalError {}",
          "",
          "    let instance = Impossible::<MinimalOk, MinimalError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    assert_eq!(instance.end().is_ok(), false);",
          "    assert!(matches!(instance.end(), Err(_)));",
          "    assert!(std::mem::size_of::<Impossible<MinimalOk, MinimalError>>() > 0);",
          "    assert!(std::mem::size_of::<MinimalOk>() > 0);",
          "    assert!(std::mem::size_of::<MinimalError>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomOk;",
          "    struct CustomError;",
          "",
          "    impl ser::Error for CustomError {}",
          "",
          "    let instance = Impossible::<CustomOk, CustomError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(instance.end().is_ok(), false);",
          "    let result = instance.end();",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(std::mem::transmute::<_, fn()>(result.unwrap_err()));"
        ],
        "code": [
          "{",
          "    struct CustomOk;",
          "    struct CustomError;",
          "",
          "    impl ser::Error for CustomError {}",
          "",
          "    let instance = Impossible::<CustomOk, CustomError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    assert_eq!(instance.end().is_ok(), false);",
          "    let result = instance.end();",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(std::mem::transmute::<_, fn()>(result.unwrap_err()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EdgeOk;",
          "    struct EdgeError;",
          "",
          "    impl ser::Error for EdgeError {}",
          "",
          "    let instance = Impossible::<EdgeOk, EdgeError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<EdgeOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<EdgeError>(), 0);",
          "    let instance = Impossible::<EdgeOk, EdgeError> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let result = instance.end();",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(std::panic::catch_unwind(|| { instance.end(); }).is_err());"
        ],
        "code": [
          "{",
          "    struct EdgeOk;",
          "    struct EdgeError;",
          "",
          "    impl ser::Error for EdgeError {}",
          "",
          "    let instance = Impossible::<EdgeOk, EdgeError> {",
          "        void: Void {},",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let _ = instance.end();",
          "    assert_eq!(std::mem::size_of::<EdgeOk>(), 0);",
          "    assert_eq!(std::mem::size_of::<EdgeError>(), 0);",
          "    let instance = Impossible::<EdgeOk, EdgeError> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let result = instance.end();",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(std::panic::catch_unwind(|| { instance.end(); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]