[
  {
    "uses": [
      "use std::collections::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    let deserializer = map.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, map);",
          "    assert!(matches!(deserializer, MapDeserializer::new(_)));",
          "    assert_eq!(deserializer.inner(), map.into_iter());",
          "    assert!(deserializer.is_empty());"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);",
          "    assert!(matches!(deserializer, MapDeserializer::new(_)));",
          "    assert_eq!(deserializer.inner(), map.into_iter());",
          "    assert!(deserializer.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let deserializer = map.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let deserializer = map.into_deserializer();",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let map: HashMap<String, i32> = HashMap::new();",
          "    let deserializer = map.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, map);"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let map: HashMap<String, i32> = HashMap::new();",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), i);",
          "    }",
          "    let deserializer = map.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, map);"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    ",
          "    let mut map: HashMap<String, i32> = HashMap::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), i);",
          "    }",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]