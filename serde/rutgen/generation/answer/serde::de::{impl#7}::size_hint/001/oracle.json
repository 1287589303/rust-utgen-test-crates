[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_map.size_hint(), None);"
        ],
        "code": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "    assert_eq!(test_map.size_hint(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(0)",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_map.size_hint(), Some(0));"
        ],
        "code": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(0)",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "    assert_eq!(test_map.size_hint(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(5)",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_map.size_hint(), Some(5));",
          "    assert!(test_map.next_value_seed(PhantomData).is_err());",
          "    assert_eq!(test_map.next_key_seed(PhantomData), Ok(None));",
          "    assert!(test_map.size_hint().is_some());",
          "    assert!(test_map.next_key::<i32>().is_none());"
        ],
        "code": [
          "{",
          "    struct TestMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "        type Error = ();",
          "        ",
          "        fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>",
          "        where",
          "            V: DeserializeSeed<'de>,",
          "        {",
          "            Err(())",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(5)",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMapAccess;",
          "    let _ = test_map.size_hint();",
          "    assert_eq!(test_map.size_hint(), Some(5));",
          "    assert!(test_map.next_value_seed(PhantomData).is_err());",
          "    assert_eq!(test_map.next_key_seed(PhantomData), Ok(None));",
          "    assert!(test_map.size_hint().is_some());",
          "    assert!(test_map.next_key::<i32>().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]