[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"test_variant\",",
          "        variant_index: 1,",
          "        variant: \"test\",",
          "        fields: vec![Content::U32(42)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Content::TupleVariant(\"test_variant\", 1, \"test\", vec![Content::U32(42)])));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"test_variant\",",
          "        variant_index: 1,",
          "        variant: \"test\",",
          "        fields: vec![Content::U32(42)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "    assert_eq!(_result, Ok(Content::TupleVariant(\"test_variant\", 1, \"test\", vec![Content::U32(42)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"empty_fields\",",
          "        variant_index: 0,",
          "        variant: \"empty_variant\",",
          "        fields: Vec::new(),",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    let expected = Ok(Content::TupleVariant(\"empty_fields\", 0, \"empty_variant\", Vec::new()));",
          "    assert_eq!(_result, expected);",
          "    assert!(_result.is_ok());",
          "    assert_matches!(_result.unwrap(), Content::TupleVariant(\"empty_fields\", 0, \"empty_variant\", _));",
          "    assert_eq!(_.len(), 0);"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"empty_fields\",",
          "        variant_index: 0,",
          "        variant: \"empty_variant\",",
          "        fields: Vec::new(),",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "    let expected = Ok(Content::TupleVariant(\"empty_fields\", 0, \"empty_variant\", Vec::new()));",
          "    assert_eq!(_result, expected);",
          "    assert!(_result.is_ok());",
          "    assert_matches!(_result.unwrap(), Content::TupleVariant(\"empty_fields\", 0, \"empty_variant\", _));",
          "    assert_eq!(_.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"valid_variant\",",
          "        variant_index: 0,",
          "        variant: \"variant_name\",",
          "        fields: vec![Content::I32(-1)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    result = serializer.end();",
          "    assert_eq!(result, Ok(Content::TupleVariant(\"valid_variant\", 0, \"variant_name\", vec![Content::I32(-1)])));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"valid_variant\",",
          "        variant_index: 0,",
          "        variant: \"variant_name\",",
          "        fields: vec![Content::I32(-1)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "    result = serializer.end();",
          "    assert_eq!(result, Ok(Content::TupleVariant(\"valid_variant\", 0, \"variant_name\", vec![Content::I32(-1)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"large_index\",",
          "        variant_index: 1_000_000,",
          "        variant: \"big_variant\",",
          "        fields: vec![Content::F64(3.14)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    _result,",
          "    Ok(Content::TupleVariant(",
          "    \"large_index\",",
          "    1_000_000,",
          "    \"big_variant\",",
          "    vec![Content::F64(3.14)],",
          "    ))",
          "    );"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl std::fmt::Debug for DummyError {}",
          "    impl serde::ser::Error for DummyError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            DummyError",
          "        }",
          "    }",
          "",
          "    let serializer = SerializeTupleVariant::<DummyError> {",
          "        name: \"large_index\",",
          "        variant_index: 1_000_000,",
          "        variant: \"big_variant\",",
          "        fields: vec![Content::F64(3.14)],",
          "        error: std::marker::PhantomData,",
          "    };",
          "    let _result = serializer.end();",
          "    assert_eq!(",
          "    _result,",
          "    Ok(Content::TupleVariant(",
          "    \"large_index\",",
          "    1_000_000,",
          "    \"big_variant\",",
          "    vec![Content::F64(3.14)],",
          "    ))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]