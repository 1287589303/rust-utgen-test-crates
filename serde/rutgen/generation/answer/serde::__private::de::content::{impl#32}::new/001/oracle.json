[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"Type1\", \"Variant1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.type_name, \"Type1\");",
          "    assert_eq!(visitor.variant_name, \"Variant1\");",
          "    assert!(std::ptr::eq(visitor.type_name, \"Type1\"));",
          "    assert!(std::ptr::eq(visitor.variant_name, \"Variant1\"));"
        ],
        "code": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"Type1\", \"Variant1\");",
          "    assert_eq!(visitor.type_name, \"Type1\");",
          "    assert_eq!(visitor.variant_name, \"Variant1\");",
          "    assert!(std::ptr::eq(visitor.type_name, \"Type1\"));",
          "    assert!(std::ptr::eq(visitor.variant_name, \"Variant1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"TypeABC\", \"VariantXYZ\");",
          "}"
        ],
        "oracle": [
          "    let visitor = UntaggedUnitVisitor::new(\"TypeABC\", \"VariantXYZ\");",
          "    assert_eq!(visitor.type_name, \"TypeABC\");",
          "    assert_eq!(visitor.variant_name, \"VariantXYZ\");"
        ],
        "code": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"TypeABC\", \"VariantXYZ\");",
          "    let visitor = UntaggedUnitVisitor::new(\"TypeABC\", \"VariantXYZ\");",
          "    assert_eq!(visitor.type_name, \"TypeABC\");",
          "    assert_eq!(visitor.variant_name, \"VariantXYZ\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"Type!\", \"Variant@\");",
          "}"
        ],
        "oracle": [
          "    let visitor = UntaggedUnitVisitor::new(\"Type!\", \"Variant@\");",
          "    assert_eq!(visitor.type_name, \"Type!\");",
          "    assert_eq!(visitor.variant_name, \"Variant@\");"
        ],
        "code": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"Type!\", \"Variant@\");",
          "    let visitor = UntaggedUnitVisitor::new(\"Type!\", \"Variant@\");",
          "    assert_eq!(visitor.type_name, \"Type!\");",
          "    assert_eq!(visitor.variant_name, \"Variant@\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"123Type\", \"456Variant\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.type_name, \"123Type\");",
          "    assert_eq!(visitor.variant_name, \"456Variant\");",
          "    assert!(std::mem::size_of::<UntaggedUnitVisitor>() > 0);"
        ],
        "code": [
          "{",
          "    let visitor = UntaggedUnitVisitor::new(\"123Type\", \"456Variant\");",
          "    assert_eq!(visitor.type_name, \"123Type\");",
          "    assert_eq!(visitor.variant_name, \"456Variant\");",
          "    assert!(std::mem::size_of::<UntaggedUnitVisitor>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]