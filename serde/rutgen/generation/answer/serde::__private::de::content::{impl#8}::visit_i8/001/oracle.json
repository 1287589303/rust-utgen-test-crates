[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(-128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(127);",
          "}"
        ],
        "oracle": [
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let result = visitor.visit_i8::<()>(-1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1))));",
          "    let result = visitor.visit_i8::<()>(128);",
          "    assert!(result.is_err());",
          "    let result = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(127);",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let result = visitor.visit_i8::<()>(-1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1))));",
          "    let result = visitor.visit_i8::<()>(128);",
          "    assert!(result.is_err());",
          "    let result = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(-1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(-1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));",
          "    let result = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let result = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "    let visitor_invalid = TagOrContentVisitor { name: \"invalid\", value: PhantomData };",
          "    let result = visitor_invalid.visit_i8::<()>(1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));",
          "    let result = visitor_invalid.visit_i8::<()>(-1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1))));",
          "    let result = visitor_invalid.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "    let result = visitor_invalid.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor_invalid.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let visitor_other = TagOrContentVisitor { name: \"other\", value: PhantomData };",
          "    let result = visitor_other.visit_i8::<()>(1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));",
          "    let result = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let result = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "    let visitor_invalid = TagOrContentVisitor { name: \"invalid\", value: PhantomData };",
          "    let result = visitor_invalid.visit_i8::<()>(1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));",
          "    let result = visitor_invalid.visit_i8::<()>(-1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-1))));",
          "    let result = visitor_invalid.visit_i8::<()>(0);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(0))));",
          "    let result = visitor_invalid.visit_i8::<()>(-128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    let result = visitor_invalid.visit_i8::<()>(127);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(127))));",
          "    let visitor_other = TagOrContentVisitor { name: \"other\", value: PhantomData };",
          "    let result = visitor_other.visit_i8::<()>(1);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(1))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(128))));",
          "    assert!(result.is_ok());",
          "    let result_negative = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result_negative, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    assert!(result_negative.is_ok());",
          "    let result_zero = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result_zero, Ok(TagOrContent::Content(Content::I8(0))));",
          "    assert!(result_zero.is_ok());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    let visitor = TagOrContentVisitor { name: \"test\", value: PhantomData };",
          "    let result = visitor.visit_i8::<()>(128);",
          "    assert_eq!(result, Ok(TagOrContent::Content(Content::I8(128))));",
          "    assert!(result.is_ok());",
          "    let result_negative = visitor.visit_i8::<()>(-128);",
          "    assert_eq!(result_negative, Ok(TagOrContent::Content(Content::I8(-128))));",
          "    assert!(result_negative.is_ok());",
          "    let result_zero = visitor.visit_i8::<()>(0);",
          "    assert_eq!(result_zero, Ok(TagOrContent::Content(Content::I8(0))));",
          "    assert!(result_zero.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]