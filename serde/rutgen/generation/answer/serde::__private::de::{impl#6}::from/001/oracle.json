[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[];",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(borrowed.value, input);",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(deserializer.marker.is_some());",
          "    assert!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>() > 0);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[];",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "    assert_eq!(borrowed.value, input);",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(deserializer.marker.is_some());",
          "    assert!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[1, 2, 3];",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(borrowed.0, &[1, 2, 3]);",
          "    assert!(matches!(deserializer, BorrowedBytesDeserializer { value: &[1, 2, 3], .. }));",
          "    assert!(deserializer.marker.is::<PhantomData<Error>>());",
          "    assert_eq!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>(), 16);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[1, 2, 3];",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "    assert_eq!(borrowed.0, &[1, 2, 3]);",
          "    assert!(matches!(deserializer, BorrowedBytesDeserializer { value: &[1, 2, 3], .. }));",
          "    assert!(deserializer.marker.is::<PhantomData<Error>>());",
          "    assert_eq!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>(), 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0; 1024]; // array of size 1024 initialized with zeros",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(borrowed.0.len(), 1024);",
          "    assert_eq!(borrowed.0[0], 0);",
          "    assert_eq!(borrowed.0[511], 0);",
          "    assert_eq!(borrowed.0[1023], 0);",
          "    assert!(matches!(deserializer.value, input));",
          "    assert_eq!(deserializer.marker, PhantomData::<Error>);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0; 1024]; // array of size 1024 initialized with zeros",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "    assert_eq!(borrowed.0.len(), 1024);",
          "    assert_eq!(borrowed.0[0], 0);",
          "    assert_eq!(borrowed.0[511], 0);",
          "    assert_eq!(borrowed.0[1023], 0);",
          "    assert!(matches!(deserializer.value, input));",
          "    assert_eq!(deserializer.marker, PhantomData::<Error>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[5; 512]; // array of size 512 initialized with fives",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(borrowed.value, input);",
          "    assert!(deserializer.value.len() == 512);",
          "    assert!(deserializer.value.iter().all(|&x| x == 5));",
          "    let deserializer_from = borrowed.from();",
          "    assert!(std::ptr::eq(&deserializer, &deserializer_from));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[5; 512]; // array of size 512 initialized with fives",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "    assert_eq!(borrowed.value, input);",
          "    assert!(deserializer.value.len() == 512);",
          "    assert!(deserializer.value.iter().all(|&x| x == 5));",
          "    let deserializer_from = borrowed.from();",
          "    assert!(std::ptr::eq(&deserializer, &deserializer_from));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[255; 1024]; // array of size 1024 initialized with 255",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(borrowed.value, &[255; 1024]);",
          "    assert!(borrowed.value.len() == 1024);",
          "    assert!(borrowed.value.iter().all(|&x| x == 255));",
          "    assert!(deserializer.value == &[255; 1024]);",
          "    assert!(deserializer.marker == PhantomData);",
          "    assert!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>() > 0);",
          "    assert!(std::mem::size_of::<Borrowed<'_, [u8]>>() > 0);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[255; 1024]; // array of size 1024 initialized with 255",
          "    let borrowed = Borrowed(input);",
          "    let deserializer: BorrowedBytesDeserializer<Error> = borrowed.from();",
          "    assert_eq!(borrowed.value, &[255; 1024]);",
          "    assert!(borrowed.value.len() == 1024);",
          "    assert!(borrowed.value.iter().all(|&x| x == 255));",
          "    assert!(deserializer.value == &[255; 1024]);",
          "    assert!(deserializer.marker == PhantomData);",
          "    assert!(std::mem::size_of::<BorrowedBytesDeserializer<Error>>() > 0);",
          "    assert!(std::mem::size_of::<Borrowed<'_, [u8]>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]