[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[\"field1\", \"field2\"];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "}"
        ],
        "oracle": [
          "    Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[\"field1\", \"field2\"];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "    Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    unit_only.struct_variant(fields, visitor),",
          "    Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))",
          "    );"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "    assert_eq!(",
          "    unit_only.struct_variant(fields, visitor),",
          "    Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[\"single_field\"];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "}"
        ],
        "oracle": [
          "    let result = unit_only.struct_variant(fields, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> de::Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a struct variant\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let unit_only = UnitOnly::<std::convert::Infallible> { marker: std::marker::PhantomData };",
          "    let fields: &'static [&'static str] = &[\"single_field\"];",
          "    let visitor = VisitorImpl;",
          "",
          "    let _result = unit_only.struct_variant(fields, visitor);",
          "    let result = unit_only.struct_variant(fields, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]