[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyMap;",
          "    impl<'de> serde::de::MapAccess<'de> for EmptyMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = EmptyMap;",
          "    let _ = visitor.visit_map(map);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))"
        ],
        "code": [
          "{",
          "    struct EmptyMap;",
          "    impl<'de> serde::de::MapAccess<'de> for EmptyMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = EmptyMap;",
          "    let _ = visitor.visit_map(map);",
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonEmptyMap;",
          "    impl<'de> serde::de::MapAccess<'de> for NonEmptyMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(/* dummy key */))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = NonEmptyMap;",
          "    let _ = visitor.visit_map(map);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))"
        ],
        "code": [
          "{",
          "    struct NonEmptyMap;",
          "    impl<'de> serde::de::MapAccess<'de> for NonEmptyMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(/* dummy key */))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = NonEmptyMap;",
          "    let _ = visitor.visit_map(map);",
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SpecificMap;",
          "    impl<'de> serde::de::MapAccess<'de> for SpecificMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(/* dummy key */))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = SpecificMap;",
          "    let _ = visitor.visit_map(map);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))"
        ],
        "code": [
          "{",
          "    struct SpecificMap;",
          "    impl<'de> serde::de::MapAccess<'de> for SpecificMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(Some(/* dummy key */))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = SpecificMap;",
          "    let _ = visitor.visit_map(map);",
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FailingMap;",
          "    impl<'de> serde::de::MapAccess<'de> for FailingMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Key error\"))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = FailingMap;",
          "    let _ = visitor.visit_map(map);",
          "}"
        ],
        "oracle": [
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))"
        ],
        "code": [
          "{",
          "    struct FailingMap;",
          "    impl<'de> serde::de::MapAccess<'de> for FailingMap {",
          "        type Error = serde::de::Error;",
          "        fn next_key_seed<K>(&mut self, _: K) -> Result<Option<K::Value>, Self::Error>",
          "        where",
          "            K: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Key error\"))",
          "        }",
          "        fn next_value_seed<V>(&mut self, _: V) -> Result<(), Self::Error>",
          "        where",
          "            V: serde::de::DeserializeSeed<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn finish(self) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestVisitor;",
          "    impl<'de> serde::de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let map = FailingMap;",
          "    let _ = visitor.visit_map(map);",
          "    Err(Error::invalid_type(Unexpected::Map, &visitor))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]