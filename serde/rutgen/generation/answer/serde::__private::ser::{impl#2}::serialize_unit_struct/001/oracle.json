[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSerializer;",
          "",
          "    impl Serializer for TestSerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = TestSerializeMap;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {",
          "            let mut map = tri!(self.serialize_map(Some(1)));",
          "            tri!(map.serialize_entry(\"tag\", \"variant_name\"));",
          "            map.end()",
          "        }",
          "    }",
          "",
          "    struct TestSerializeMap;",
          "",
          "    impl SerializeMap for TestSerializeMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<T>(&mut self, _: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_value<T>(&mut self, _: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let serializer = TestSerializer;",
          "    let _ = serializer.serialize_unit_struct(\"test\");",
          "}"
        ],
        "oracle": [
          "    let serializer = TestSerializer;",
          "    let result = serializer.serialize_unit_struct(\"test\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error);"
        ],
        "code": [
          "{",
          "    struct TestSerializer;",
          "",
          "    impl Serializer for TestSerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = TestSerializeMap;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {",
          "            let mut map = tri!(self.serialize_map(Some(1)));",
          "            tri!(map.serialize_entry(\"tag\", \"variant_name\"));",
          "            map.end()",
          "        }",
          "    }",
          "",
          "    struct TestSerializeMap;",
          "",
          "    impl SerializeMap for TestSerializeMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<T>(&mut self, _: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_value<T>(&mut self, _: &T) -> Result<(), Self::Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let serializer = TestSerializer;",
          "    let _ = serializer.serialize_unit_struct(\"test\");",
          "    let serializer = TestSerializer;",
          "    let result = serializer.serialize_unit_struct(\"test\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]