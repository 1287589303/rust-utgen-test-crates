[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"struct variant\")",
          "        }",
          "",
          "        fn visit_map<V>(self, _visitor: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::MapAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn visit_seq<V>(self, _visitor: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantRefDeserializer::<_, TestVisitor> {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.struct_variant(&[] , TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(",
          "    deserializer.struct_variant(&[], TestVisitor),",
          "    Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"struct variant\"))",
          "    ));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"struct variant\")",
          "        }",
          "",
          "        fn visit_map<V>(self, _visitor: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::MapAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn visit_seq<V>(self, _visitor: V) -> Result<Self::Value, V::Error>",
          "        where",
          "            V: de::SeqAccess<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantRefDeserializer::<_, TestVisitor> {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let _ = deserializer.struct_variant(&[] , TestVisitor);",
          "    assert!(matches!(",
          "    deserializer.struct_variant(&[], TestVisitor),",
          "    Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"struct variant\"))",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]