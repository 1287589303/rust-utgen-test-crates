[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Bool(true);",
          "    let deserializer = VariantRefDeserializer {",
          "    value: Some(&content),",
          "    err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(content.unexpected(), &\"struct variant\"));"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "    let content = Content::Bool(true);",
          "    let deserializer = VariantRefDeserializer {",
          "    value: Some(&content),",
          "    err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(content.unexpected(), &\"struct variant\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(42);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::I32(42);",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert_eq!(result, Err(de::Error::invalid_type(content.unexpected(), &\"struct variant\")));"
        ],
        "code": [
          "{",
          "    let content = Content::I32(42);",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "    let content = Content::I32(42);",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert_eq!(result, Err(de::Error::invalid_type(content.unexpected(), &\"struct variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert_eq!(result, Err(de::Error::invalid_type(content.unexpected(), &\"struct variant\")));"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert_eq!(result, Err(de::Error::invalid_type(content.unexpected(), &\"struct variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Unit;",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Unit;",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e, de::Error::invalid_type(content.unexpected(), &\"struct variant\"));",
          "    }"
        ],
        "code": [
          "{",
          "    let content = Content::Unit;",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "    let content = Content::Unit;",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e, de::Error::invalid_type(content.unexpected(), &\"struct variant\"));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::F64(3.14)));",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Newtype(Box::new(Content::F64(3.14)));",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e, de::Error::invalid_type(content.unexpected(), &\"struct variant\"));",
          "    }"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::F64(3.14)));",
          "    let deserializer = VariantRefDeserializer {",
          "        value: Some(&content),",
          "        err: PhantomData,",
          "    };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let _ = deserializer.struct_variant(&[\"field\"], visitor);",
          "    let content = Content::Newtype(Box::new(Content::F64(3.14)));",
          "    let deserializer = VariantRefDeserializer { value: Some(&content), err: PhantomData };",
          "    let visitor = // create an appropriate Visitor instance here",
          "    let result = deserializer.struct_variant(&[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e, de::Error::invalid_type(content.unexpected(), &\"struct variant\"));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]