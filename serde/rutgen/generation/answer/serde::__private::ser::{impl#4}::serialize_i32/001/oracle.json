[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MIN);",
          "}"
        ],
        "oracle": [
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MIN);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));"
        ],
        "code": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MIN);",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MIN);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(-1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(-1);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(0);",
          "}"
        ],
        "oracle": [
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");"
        ],
        "code": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(0);",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");"
        ],
        "code": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(1);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"can only flatten structs and maps (got Integer)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MAX);",
          "}"
        ],
        "oracle": [
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MAX);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), FlatMapSerializer::bad_type(Unsupported::Integer));"
        ],
        "code": [
          "{",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MAX);",
          "    let mut map = std::collections::HashMap::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i32(i32::MAX);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), FlatMapSerializer::bad_type(Unsupported::Integer));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]