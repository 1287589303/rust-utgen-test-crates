[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[derive(Default)]",
      "struct TestVisitor;",
      "",
      "impl<'de> Visitor<'de> for TestVisitor {",
      "    type Value = ();",
      "",
      "    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
      "        formatter.write_str(\"any string\")",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"\"));",
          "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Str(\"\"), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"a\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"invalid type: string \\\"a\\\", expected any string\");"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"a\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"invalid type: string \\\"a\\\", expected any string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"你好\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"你好\"), &visitor));",
          "    ",
          "    let result_empty = visitor.visit_string(String::new());",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"\"), &visitor));",
          "    ",
          "    let result_numeric = visitor.visit_string(String::from(\"12345\"));",
          "    assert!(result_numeric.is_err());",
          "    assert_eq!(result_numeric.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"12345\"), &visitor));"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"你好\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"你好\"), &visitor));",
          "    ",
          "    let result_empty = visitor.visit_string(String::new());",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"\"), &visitor));",
          "    ",
          "    let result_numeric = visitor.visit_string(String::from(\"12345\"));",
          "    assert!(result_numeric.is_err());",
          "    assert_eq!(result_numeric.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Str(\"12345\"), &visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let long_string = \"a\".repeat(10_000);",
          "    let result = visitor.visit_string(long_string);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Err(Error::invalid_type(Unexpected::Str(\"a\".repeat(10_000).as_str()), &visitor));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let long_string = \"a\".repeat(10_000);",
          "    let result = visitor.visit_string(long_string);",
          "    let expected_result = Err(Error::invalid_type(Unexpected::Str(\"a\".repeat(10_000).as_str()), &visitor));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"!@#$%^&*()\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: string \\\"!@#$%^&*()\\\", expected any string\");"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"!@#$%^&*()\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: string \\\"!@#$%^&*()\\\", expected any string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"   \"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: string \\\"   \\\", expected: any string\");"
        ],
        "code": [
          "{",
          "    let visitor = TestVisitor::default();",
          "    let result = visitor.visit_string(String::from(\"   \"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: string \\\"   \\\", expected: any string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]