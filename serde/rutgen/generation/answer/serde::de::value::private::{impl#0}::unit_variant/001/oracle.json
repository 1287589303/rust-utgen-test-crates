[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl de::Error for TestError {}",
          "",
          "    let result: Result<(), TestError> = UnitOnly::<TestError> {",
          "        marker: PhantomData,",
          "    }.unit_variant();",
          "",
          "    // Function call only for testing purposes",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl de::Error for TestError {}",
          "",
          "    let result: Result<(), TestError> = UnitOnly::<TestError> {",
          "        marker: PhantomData,",
          "    }.unit_variant();",
          "",
          "    // Function call only for testing purposes",
          "    let _ = result;",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherTestError;",
          "    impl de::Error for AnotherTestError {}",
          "",
          "    let result: Result<(), AnotherTestError> = UnitOnly::<AnotherTestError> {",
          "        marker: PhantomData,",
          "    }.unit_variant();",
          "",
          "    // Function call only for testing purposes",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());"
        ],
        "code": [
          "{",
          "    struct AnotherTestError;",
          "    impl de::Error for AnotherTestError {}",
          "",
          "    let result: Result<(), AnotherTestError> = UnitOnly::<AnotherTestError> {",
          "        marker: PhantomData,",
          "    }.unit_variant();",
          "",
          "    // Function call only for testing purposes",
          "    let _ = result;",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]