[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "    ",
          "    struct FailingSerialize;",
          "",
          "    impl Serialize for FailingSerialize {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<(), TestError>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(TestError)",
          "        }",
          "    }",
          "",
          "    let mut tuple_struct = SerializeTupleStruct::<TestError> {",
          "        name: \"Test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    ",
          "    let value = FailingSerialize;",
          "",
          "    let result = tuple_struct.serialize_field(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TestError));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "    ",
          "    struct FailingSerialize;",
          "",
          "    impl Serialize for FailingSerialize {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<(), TestError>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(TestError)",
          "        }",
          "    }",
          "",
          "    let mut tuple_struct = SerializeTupleStruct::<TestError> {",
          "        name: \"Test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    ",
          "    let value = FailingSerialize;",
          "",
          "    let result = tuple_struct.serialize_field(&value);",
          "    assert_eq!(result, Err(TestError));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    struct CustomObject;",
          "",
          "    impl Serialize for CustomObject {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<(), TestError>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(TestError)",
          "        }",
          "    }",
          "",
          "    let mut tuple_struct = SerializeTupleStruct::<TestError> {",
          "        name: \"Test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let custom_value = CustomObject;",
          "",
          "    let result = tuple_struct.serialize_field(&custom_value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(TestError)));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    struct CustomObject;",
          "",
          "    impl Serialize for CustomObject {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<(), TestError>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(TestError)",
          "        }",
          "    }",
          "",
          "    let mut tuple_struct = SerializeTupleStruct::<TestError> {",
          "        name: \"Test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "",
          "    let custom_value = CustomObject;",
          "",
          "    let result = tuple_struct.serialize_field(&custom_value);",
          "    assert!(matches!(result, Err(TestError)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]