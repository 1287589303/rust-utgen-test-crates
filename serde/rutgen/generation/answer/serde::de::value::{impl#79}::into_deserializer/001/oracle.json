[
  {
    "uses": [
      "use std::collections::BTreeSet;",
      "use std::collections::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let map: HashMap<String, i32> = HashMap::new();",
          "    let deserializer = map.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer, map);"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let map: HashMap<String, i32> = HashMap::new();",
          "    let deserializer = map.into_deserializer();",
          "    assert_eq!(deserializer, map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<i32> = Vec::new();",
          "    let deserializer = vec.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    let vec: Vec<i32> = Vec::new();",
          "    let deserializer = vec.into_deserializer();",
          "    assert_eq!(deserializer, vec);"
        ],
        "code": [
          "{",
          "    let vec: Vec<i32> = Vec::new();",
          "    let deserializer = vec.into_deserializer();",
          "    let vec: Vec<i32> = Vec::new();",
          "    let deserializer = vec.into_deserializer();",
          "    assert_eq!(deserializer, vec);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::BTreeSet;",
          "",
          "    let set: BTreeSet<i32> = BTreeSet::new();",
          "    let deserializer = set.into_deserializer();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.into_deserializer(), set);"
        ],
        "code": [
          "{",
          "    use std::collections::BTreeSet;",
          "",
          "    let set: BTreeSet<i32> = BTreeSet::new();",
          "    let deserializer = set.into_deserializer();",
          "    assert_eq!(set.into_deserializer(), set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]