[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(0u32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u32(0u32), Ok(()));",
          "    assert_eq!(visitor.visit_u32(1u32), Ok(()));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Ok(()));",
          "    assert_eq!(visitor.visit_u32(42u32), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(0u32);",
          "    assert_eq!(visitor.visit_u32(0u32), Ok(()));",
          "    assert_eq!(visitor.visit_u32(1u32), Ok(()));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Ok(()));",
          "    assert_eq!(visitor.visit_u32(42u32), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(4_294_967_295u32);",
          "}"
        ],
        "oracle": [
          "    assert!(visitor.visit_u32(4_294_967_295u32).is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(4_294_967_295u32);",
          "    assert!(visitor.visit_u32(4_294_967_295u32).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(2_147_483_647u32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u32(0u32), Err(Error::invalid_type(Unexpected::Unsigned(0), &visitor)));",
          "    assert_eq!(visitor.visit_u32(1u32), Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));",
          "    assert_eq!(visitor.visit_u32(2u32), Err(Error::invalid_type(Unexpected::Unsigned(2), &visitor)));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Err(Error::invalid_type(Unexpected::Unsigned(u32::MAX), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(2_147_483_647u32);",
          "    assert_eq!(visitor.visit_u32(0u32), Err(Error::invalid_type(Unexpected::Unsigned(0), &visitor)));",
          "    assert_eq!(visitor.visit_u32(1u32), Err(Error::invalid_type(Unexpected::Unsigned(1), &visitor)));",
          "    assert_eq!(visitor.visit_u32(2u32), Err(Error::invalid_type(Unexpected::Unsigned(2), &visitor)));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Err(Error::invalid_type(Unexpected::Unsigned(u32::MAX), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(1u32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u32(1u32), Err(Error::invalid_type(Unexpected::Unsigned(1u32 as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(0u32), Err(Error::invalid_type(Unexpected::Unsigned(0u32 as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Err(Error::invalid_type(Unexpected::Unsigned(u32::MAX as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(42u32), Err(Error::invalid_type(Unexpected::Unsigned(42u32 as u64), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(1u32);",
          "    assert_eq!(visitor.visit_u32(1u32), Err(Error::invalid_type(Unexpected::Unsigned(1u32 as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(0u32), Err(Error::invalid_type(Unexpected::Unsigned(0u32 as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(u32::MAX), Err(Error::invalid_type(Unexpected::Unsigned(u32::MAX as u64), &visitor)));",
          "    assert_eq!(visitor.visit_u32(42u32), Err(Error::invalid_type(Unexpected::Unsigned(42u32 as u64), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(3_000_000_000u32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_u32(3_000_000_000u32), Err(Error::invalid_type(Unexpected::Unsigned(300000000), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_u32(3_000_000_000u32);",
          "    assert_eq!(visitor.visit_u32(3_000_000_000u32), Err(Error::invalid_type(Unexpected::Unsigned(300000000), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]