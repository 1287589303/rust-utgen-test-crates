[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "}"
        ],
        "oracle": [
          "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum MyEnum\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    let visitor = TestVisitor { enum_name: \"MyEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum MyEnum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum \");",
          "    let visitor = TestVisitor { enum_name: \"TestEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum TestEnum\");",
          "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum AnotherEnum\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum \");",
          "    let visitor = TestVisitor { enum_name: \"TestEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum TestEnum\");",
          "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum AnotherEnum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum AnotherEnum\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        enum_name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = &'static str;",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(formatter, \"variant of enum {}\", self.enum_name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { enum_name: \"AnotherEnum\" };",
          "    let mut output = String::new();",
          "    let result = visitor.expecting(&mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"variant of enum AnotherEnum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]