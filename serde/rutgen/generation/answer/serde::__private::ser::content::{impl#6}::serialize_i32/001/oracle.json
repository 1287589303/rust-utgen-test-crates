[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(-2_147_483_648);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_i32(-2_147_483_648), Ok(Content::I32(-2_147_483_648)));",
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
          "    assert!(serializer.serialize_i32(-2_147_483_649).is_err());",
          "    assert!(serializer.serialize_i32(2_147_483_648).is_err());"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(-2_147_483_648);",
          "    assert_eq!(serializer.serialize_i32(-2_147_483_648), Ok(Content::I32(-2_147_483_648)));",
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
          "    assert!(serializer.serialize_i32(-2_147_483_649).is_err());",
          "    assert!(serializer.serialize_i32(2_147_483_648).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(-1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_i32(-1), Ok(Content::I32(-1)));",
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(1), Ok(Content::I32(1)));",
          "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
          "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(-1);",
          "    assert_eq!(serializer.serialize_i32(-1), Ok(Content::I32(-1)));",
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(1), Ok(Content::I32(1)));",
          "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
          "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(-10), Ok(Content::I32(-10)));",
          "    assert_eq!(serializer.serialize_i32(12345), Ok(Content::I32(12345)));",
          "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
          "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(0);",
          "    assert_eq!(serializer.serialize_i32(0), Ok(Content::I32(0)));",
          "    assert_eq!(serializer.serialize_i32(-10), Ok(Content::I32(-10)));",
          "    assert_eq!(serializer.serialize_i32(12345), Ok(Content::I32(12345)));",
          "    assert_eq!(serializer.serialize_i32(i32::MAX), Ok(Content::I32(i32::MAX)));",
          "    assert_eq!(serializer.serialize_i32(i32::MIN), Ok(Content::I32(i32::MIN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(1);",
          "}"
        ],
        "oracle": [
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_i32(1);",
          "    assert_eq!(result, Ok(Content::I32(1)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(1);",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_i32(1);",
          "    assert_eq!(result, Ok(Content::I32(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(2_147_483_647);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let _ = serializer.serialize_i32(2_147_483_647);",
          "    assert_eq!(serializer.serialize_i32(2_147_483_647), Ok(Content::I32(2_147_483_647)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]