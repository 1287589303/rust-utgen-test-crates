[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "}"
        ],
        "oracle": [
          "    let serializer = TaggedSerializer {",
          "    type_ident: \"TestType\",",
          "    variant_ident: \"TestVariant\",",
          "    tag: \"TestTag\",",
          "    variant_name: \"TestVariantName\",",
          "    delegate: MockSerializer,",
          "    };",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Boolean)));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    let serializer = TaggedSerializer {",
          "    type_ident: \"TestType\",",
          "    variant_ident: \"TestVariant\",",
          "    tag: \"TestTag\",",
          "    variant_name: \"TestVariantName\",",
          "    delegate: MockSerializer,",
          "    };",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Boolean)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "}"
        ],
        "oracle": [
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Float\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Char\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing String\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\")));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Float\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Char\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing String\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\")));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, ser::Error::custom(\"cannot serialize tagged newtype variant TestType::TestVariant containing Unsupported::Float\"));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error, ser::Error::custom(\"cannot serialize tagged newtype variant TestType::TestVariant containing Unsupported::Float\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Unsupported::Char\")));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing Unsupported::Char\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing String\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\");"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    let result = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing String\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\");",
          "    ",
          "    let result = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(result, \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "}"
        ],
        "oracle": [
          "    let error = serializer.bad_type(Unsupported::Boolean); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Integer); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Float); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Char); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\".to_string());",
          "    let error = serializer.bad_type(Unsupported::String); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing String\".to_string());",
          "    let error = serializer.bad_type(Unsupported::ByteArray); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Optional); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Sequence); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Tuple); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\".to_string());",
          "    let error = serializer.bad_type(Unsupported::TupleStruct); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\".to_string());"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    let error = serializer.bad_type(Unsupported::Boolean); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Integer); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Float); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Char); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\".to_string());",
          "    let error = serializer.bad_type(Unsupported::String); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing String\".to_string());",
          "    let error = serializer.bad_type(Unsupported::ByteArray); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Optional); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Sequence); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\".to_string());",
          "    let error = serializer.bad_type(Unsupported::Tuple); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\".to_string());",
          "    let error = serializer.bad_type(Unsupported::TupleStruct); assert_eq!(error, \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Optional)));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Optional)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "}"
        ],
        "oracle": [
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing String\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\");"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Boolean\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Float\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing String\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing ByteArray\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Optional\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Sequence\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Tuple\");",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing TupleStruct\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "}"
        ],
        "oracle": [
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Boolean)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Integer)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Float)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Char)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::String)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::ByteArray)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Optional)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Sequence)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Tuple)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    let error = serializer.bad_type(Unsupported::Boolean);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Boolean)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Integer);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Integer)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Float);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Float)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Char);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Char)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::String);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::String)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::ByteArray)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Optional);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Optional)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Sequence);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Sequence)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::Tuple);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::Tuple)));",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant TestType::TestVariant containing {:?}\", Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "}"
        ],
        "oracle": [
          "    let serializer = TaggedSerializer { type_ident: \"TestType\", variant_ident: \"TestVariant\", tag: \"TestTag\", variant_name: \"TestVariantName\", delegate: MockSerializer };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant {}::{} containing {:?}\", \"TestType\", \"TestVariant\", Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct MockSerializer;",
          "    impl Serializer for MockSerializer {",
          "        type Ok = ();",
          "        type Error = String;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_none(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_unit_variant(self, _: &'static str, _: u32, _: &'static str) -> Result<Self::Ok, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_struct<T>(self, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_newtype_variant<T>(self, _: &'static str, _: u32, _: &'static str, _: &T) -> Result<Self::Ok, Self::Error> where T: ?Sized + Serialize { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_tuple_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeTupleVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn serialize_struct_variant(self, _: &'static str, _: u32, _: &'static str, _: usize) -> Result<Self::SerializeStructVariant, Self::Error> { Err(\"Not implemented\".to_string()) }",
          "        fn is_human_readable(&self) -> bool { false }",
          "    }",
          "    ",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"TestTag\",",
          "        variant_name: \"TestVariantName\",",
          "        delegate: MockSerializer,",
          "    };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    let serializer = TaggedSerializer { type_ident: \"TestType\", variant_ident: \"TestVariant\", tag: \"TestTag\", variant_name: \"TestVariantName\", delegate: MockSerializer };",
          "    ",
          "    let error = serializer.bad_type(Unsupported::TupleStruct);",
          "    assert_eq!(error, ser::Error::custom(format_args!(\"cannot serialize tagged newtype variant {}::{} containing {:?}\", \"TestType\", \"TestVariant\", Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]