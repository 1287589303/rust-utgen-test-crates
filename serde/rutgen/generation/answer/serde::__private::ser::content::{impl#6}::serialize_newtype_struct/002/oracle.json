[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue;",
          "    ",
          "    impl Serialize for TestValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_str(\"test\")",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"test_struct\";",
          "    let value = TestValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_,",
          "    Ok(Content::NewtypeStruct(",
          "    \"test_struct\",",
          "    Box::new(tri!(value.serialize(content_serializer))),",
          "    ))",
          "    );"
        ],
        "code": [
          "{",
          "    struct TestValue;",
          "    ",
          "    impl Serialize for TestValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_str(\"test\")",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"test_struct\";",
          "    let value = TestValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "    assert_eq!(_,",
          "    Ok(Content::NewtypeStruct(",
          "    \"test_struct\",",
          "    Box::new(tri!(value.serialize(content_serializer))),",
          "    ))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StringValue;",
          "",
          "    impl Serialize for StringValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_str(\"string_value\")",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"string_struct\";",
          "    let value = StringValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content_serializer.serialize_newtype_struct(name, &value), Ok(Content::NewtypeStruct(name, Box::new(Content::Str(\"string_value\")))));"
        ],
        "code": [
          "{",
          "    struct StringValue;",
          "",
          "    impl Serialize for StringValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_str(\"string_value\")",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"string_struct\";",
          "    let value = StringValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "    assert_eq!(content_serializer.serialize_newtype_struct(name, &value), Ok(Content::NewtypeStruct(name, Box::new(Content::Str(\"string_value\")))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BoolValue;",
          "",
          "    impl Serialize for BoolValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_bool(true)",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"bool_struct\";",
          "    let value = BoolValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    content_serializer.serialize_newtype_struct(name, &value),",
          "    Ok(Content::NewtypeStruct(",
          "    name,",
          "    Box::new(Content::Bool(true))",
          "    ))",
          "    );"
        ],
        "code": [
          "{",
          "    struct BoolValue;",
          "",
          "    impl Serialize for BoolValue {",
          "        fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {",
          "            serializer.serialize_bool(true)",
          "        }",
          "    }",
          "",
          "    let content_serializer = ContentSerializer { error: PhantomData::<()>::default() };",
          "    let name = \"bool_struct\";",
          "    let value = BoolValue;",
          "",
          "    let _ = content_serializer.serialize_newtype_struct(name, &value);",
          "    assert_eq!(",
          "    content_serializer.serialize_newtype_struct(name, &value),",
          "    Ok(Content::NewtypeStruct(",
          "    name,",
          "    Box::new(Content::Bool(true))",
          "    ))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]