[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorStub;",
          "",
          "    impl ser::Error for ErrorStub {",
          "        fn custom<T>(_: T) -> Self {",
          "            ErrorStub",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<ErrorStub> {",
          "        error: PhantomData,",
          "    };",
          "",
          "    struct FailingSerialize;",
          "",
          "    impl Serialize for FailingSerialize {",
          "        fn serialize<S>(&self, _: S) -> Result<Content, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ErrorStub::custom(\"serialization failed\"))",
          "        }",
          "    }",
          "",
          "    let value = FailingSerialize;",
          "    let result = serializer.serialize_newtype_struct(\"test\", &value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"serialization failed\");",
          "    assert!(result.err().is_some());"
        ],
        "code": [
          "{",
          "    struct ErrorStub;",
          "",
          "    impl ser::Error for ErrorStub {",
          "        fn custom<T>(_: T) -> Self {",
          "            ErrorStub",
          "        }",
          "    }",
          "",
          "    let serializer = ContentSerializer::<ErrorStub> {",
          "        error: PhantomData,",
          "    };",
          "",
          "    struct FailingSerialize;",
          "",
          "    impl Serialize for FailingSerialize {",
          "        fn serialize<S>(&self, _: S) -> Result<Content, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ErrorStub::custom(\"serialization failed\"))",
          "        }",
          "    }",
          "",
          "    let value = FailingSerialize;",
          "    let result = serializer.serialize_newtype_struct(\"test\", &value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"serialization failed\");",
          "    assert!(result.err().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]