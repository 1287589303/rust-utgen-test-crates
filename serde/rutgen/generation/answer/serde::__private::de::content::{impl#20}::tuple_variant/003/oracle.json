[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockError;",
          "",
          "    struct MockVisitor;",
          "",
          "    impl<'de> de::Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(formatter, \"mock visitor\")",
          "        }",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantDeserializer::<MockError> {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let result: Result<(), MockError> = deserializer.tuple_variant(0, MockVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")));"
        ],
        "code": [
          "{",
          "    struct MockError;",
          "",
          "    struct MockVisitor;",
          "",
          "    impl<'de> de::Visitor<'de> for MockVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(formatter, \"mock visitor\")",
          "        }",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantDeserializer::<MockError> {",
          "        value: None,",
          "        err: PhantomData,",
          "    };",
          "",
          "    let result: Result<(), MockError> = deserializer.tuple_variant(0, MockVisitor);",
          "    assert_eq!(result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"tuple variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]