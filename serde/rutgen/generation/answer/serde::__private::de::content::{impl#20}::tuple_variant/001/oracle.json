[
  {
    "uses": [
      "use crate::de;",
      "use crate::de::Visitor;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::de::{self, Visitor};",
          "    ",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"expected tuple\")",
          "        }",
          "",
          "        fn visit_tuple<E>(self, _len: usize) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "",
          "    let _ = deserializer.tuple_variant(1, TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let value = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    ",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(",
          "    Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]).unexpected(),",
          "    &\"tuple variant\",",
          "    ));"
        ],
        "code": [
          "{",
          "    use crate::de::{self, Visitor};",
          "    ",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"expected tuple\")",
          "        }",
          "",
          "        fn visit_tuple<E>(self, _len: usize) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "",
          "    let _ = deserializer.tuple_variant(1, TestVisitor);",
          "    let value = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    ",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_type(",
          "    Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]).unexpected(),",
          "    &\"tuple variant\",",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::de::{self, Visitor};",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"expected tuple\")",
          "        }",
          "",
          "        fn visit_tuple<E>(self, _len: usize) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Unit);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "",
          "    let _ = deserializer.tuple_variant(1, TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    ",
          "    let value = Some(Content::String(String::from(\"test\")));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    ",
          "    let value = Some(Content::U8(1));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    use crate::de::{self, Visitor};",
          "",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"expected tuple\")",
          "        }",
          "",
          "        fn visit_tuple<E>(self, _len: usize) -> Result<Self::Value, E>",
          "        where",
          "            E: de::Error,",
          "        {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Unit);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "",
          "    let _ = deserializer.tuple_variant(1, TestVisitor);",
          "    let value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    ",
          "    let value = Some(Content::String(String::from(\"test\")));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "    ",
          "    let value = Some(Content::U8(1));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let result = deserializer.tuple_variant(1, TestVisitor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]