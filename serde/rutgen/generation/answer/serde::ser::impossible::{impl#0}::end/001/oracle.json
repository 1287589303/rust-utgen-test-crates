[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct OkType;",
          "    struct ErrorType;",
          "",
          "    let impossible: Impossible<OkType, ErrorType> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| impossible.end()).is_err(), true);",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| impossible.end()), Err(_)));",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());"
        ],
        "code": [
          "{",
          "    struct OkType;",
          "    struct ErrorType;",
          "",
          "    let impossible: Impossible<OkType, ErrorType> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    assert_eq!(std::panic::catch_unwind(|| impossible.end()).is_err(), true);",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| impossible.end()), Err(_)));",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct EmptyOk;",
          "    struct ErrorType;",
          "",
          "    let impossible: Impossible<EmptyOk, ErrorType> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());"
        ],
        "code": [
          "{",
          "    struct EmptyOk;",
          "    struct ErrorType;",
          "",
          "    let impossible: Impossible<EmptyOk, ErrorType> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    assert!(std::panic::catch_unwind(|| impossible.end()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct OkType;",
          "    struct EmptyError;",
          "",
          "    let impossible: Impossible<OkType, EmptyError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<OkType, EmptyError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end()",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct OkType;",
          "    struct EmptyError;",
          "",
          "    let impossible: Impossible<OkType, EmptyError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<OkType, EmptyError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end()",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct NonEmptyOk;",
          "    struct NonEmptyError;",
          "",
          "    let impossible: Impossible<NonEmptyOk, NonEmptyError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<NonEmptyOk, NonEmptyError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end()",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct NonEmptyOk;",
          "    struct NonEmptyError;",
          "",
          "    let impossible: Impossible<NonEmptyOk, NonEmptyError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<NonEmptyOk, NonEmptyError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end()",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct OkType;",
          "    struct InvalidError;",
          "",
          "    let impossible: Impossible<OkType, InvalidError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<OkType, InvalidError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct OkType;",
          "    struct InvalidError;",
          "",
          "    let impossible: Impossible<OkType, InvalidError> = Impossible {",
          "        void: std::mem::transmute::<_, Void>(()),",
          "        ok: std::marker::PhantomData,",
          "        error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let impossible: Impossible<OkType, InvalidError> = Impossible {",
          "    void: std::mem::transmute::<_, Void>(()),",
          "    ok: std::marker::PhantomData,",
          "    error: std::marker::PhantomData,",
          "    };",
          "    impossible.end().unwrap();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]