[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_bool(true);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Error::invalid_type(Unexpected::Bool(true), &_))));",
          "    assert_eq!(result.is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_bool(true);",
          "    assert!(matches!(result, Err(Error::invalid_type(Unexpected::Bool(true), &_))));",
          "    assert_eq!(result.is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_bool(false);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bool(false), &visitor));",
          "    let result_true: Result<(), _> = visitor.visit_bool(true);",
          "    assert!(result_true.is_err());",
          "    assert_eq!(result_true.unwrap_err(), Error::invalid_type(Unexpected::Bool(true), &visitor));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let result: Result<(), _> = visitor.visit_bool(false);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bool(false), &visitor));",
          "    let result_true: Result<(), _> = visitor.visit_bool(true);",
          "    assert!(result_true.is_err());",
          "    assert_eq!(result_true.unwrap_err(), Error::invalid_type(Unexpected::Bool(true), &visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]