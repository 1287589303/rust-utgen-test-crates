[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Option<&()> = None;",
          "    let _ = serializer.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert_eq!(serializer.serialize_value(&value).err().unwrap(), Error);"
        ],
        "code": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Option<&()> = None;",
          "    let _ = serializer.serialize_value(&value);",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert_eq!(serializer.serialize_value(&value).err().unwrap(), Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value = \"Test string\";",
          "    let _ = serializer.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value = \"Test string\";",
          "    let result = serializer.serialize_value(&value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().err, ErrorImpl);"
        ],
        "code": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value = \"Test string\";",
          "    let _ = serializer.serialize_value(&value);",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value = \"Test string\";",
          "    let result = serializer.serialize_value(&value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().err, ErrorImpl);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Vec<i32> = vec![];",
          "    let _ = serializer.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_value(&value).is_err(), true);",
          "    assert!(matches!(serializer.serialize_value(&value), Err(Error)));",
          "    let value: i32 = 5;",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    let value: String = String::from(\"test\");",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert!(serializer.serialize_value(&None::<i32>).is_err());",
          "    assert!(serializer.serialize_value(&Some(5)).is_err());"
        ],
        "code": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Vec<i32> = vec![];",
          "    let _ = serializer.serialize_value(&value);",
          "    assert_eq!(serializer.serialize_value(&value).is_err(), true);",
          "    assert!(matches!(serializer.serialize_value(&value), Err(Error)));",
          "    let value: i32 = 5;",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    let value: String = String::from(\"test\");",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert!(serializer.serialize_value(&None::<i32>).is_err());",
          "    assert!(serializer.serialize_value(&Some(5)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Vec<i32> = (0..1000).collect();",
          "    let _ = serializer.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert!(serializer.serialize_value(&()).is_err());",
          "    assert!(serializer.serialize_value(&\"test string\").is_err());",
          "    assert!(serializer.serialize_value(&vec![1, 2, 3]).is_err());",
          "    assert!(serializer.serialize_value(&Some(5)).is_err());",
          "    assert!(serializer.serialize_value(&None::<i32>).is_err());",
          "    assert!(serializer.serialize_value(&true).is_err());",
          "    assert!(serializer.serialize_value(&false).is_err());",
          "    assert!(serializer.serialize_value(&3.14).is_err());"
        ],
        "code": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    let value: Vec<i32> = (0..1000).collect();",
          "    let _ = serializer.serialize_value(&value);",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert!(serializer.serialize_value(&()).is_err());",
          "    assert!(serializer.serialize_value(&\"test string\").is_err());",
          "    assert!(serializer.serialize_value(&vec![1, 2, 3]).is_err());",
          "    assert!(serializer.serialize_value(&Some(5)).is_err());",
          "    assert!(serializer.serialize_value(&None::<i32>).is_err());",
          "    assert!(serializer.serialize_value(&true).is_err());",
          "    assert!(serializer.serialize_value(&false).is_err());",
          "    assert!(serializer.serialize_value(&3.14).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    struct NonSerializable;",
          "    let value = NonSerializable;",
          "    let _ = serializer.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert_eq!(serializer.serialize_value(&value).err().unwrap().kind(), ErrorKind::SomeExpectedErrorKind);",
          "    assert!(matches!(serializer.serialize_value(&value), Err(Error { .. })));",
          "    assert_eq!(serializer.ok, ());",
          "    assert_eq!(serializer.error, PhantomData);",
          "    assert!(serializer.void.is_unreachable());"
        ],
        "code": [
          "{",
          "    let mut serializer = Impossible::<(), Error> { void: Void {}, ok: PhantomData, error: PhantomData };",
          "    struct NonSerializable;",
          "    let value = NonSerializable;",
          "    let _ = serializer.serialize_value(&value);",
          "    assert!(serializer.serialize_value(&value).is_err());",
          "    assert_eq!(serializer.serialize_value(&value).err().unwrap().kind(), ErrorKind::SomeExpectedErrorKind);",
          "    assert!(matches!(serializer.serialize_value(&value), Err(Error { .. })));",
          "    assert_eq!(serializer.ok, ());",
          "    assert_eq!(serializer.error, PhantomData);",
          "    assert!(serializer.void.is_unreachable());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]