[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter;",
          "    let visitor = UnitVisitor;",
          "    let _ = visitor.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.expecting(&mut formatter).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = TestFormatter;",
          "    let visitor = UnitVisitor;",
          "    let _ = visitor.expecting(&mut formatter);",
          "    assert_eq!(visitor.expecting(&mut formatter).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyFormatter;",
          "    ",
          "    impl fmt::Write for EmptyFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = EmptyFormatter;",
          "    let visitor = UnitVisitor;",
          "    let _ = visitor.expecting(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"unit\").is_ok());",
          "    assert!(matches!(visitor.expecting(&mut formatter), Ok(_)));",
          "    assert!(std::panic::catch_unwind(|| visitor.expecting(&mut formatter)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| visitor.expecting(&mut fmt::Formatter)).is_err());"
        ],
        "code": [
          "{",
          "    struct EmptyFormatter;",
          "    ",
          "    impl fmt::Write for EmptyFormatter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut formatter = EmptyFormatter;",
          "    let visitor = UnitVisitor;",
          "    let _ = visitor.expecting(&mut formatter);",
          "    assert_eq!(visitor.expecting(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\"unit\").is_ok());",
          "    assert!(matches!(visitor.expecting(&mut formatter), Ok(_)));",
          "    assert!(std::panic::catch_unwind(|| visitor.expecting(&mut formatter)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| visitor.expecting(&mut fmt::Formatter)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]