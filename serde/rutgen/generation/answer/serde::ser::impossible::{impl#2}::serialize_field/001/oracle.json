[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &str = \"test string\";",
          "    let _ = serializer.serialize_field(value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_field(&\"test string\").is_err());",
          "    assert!(serializer.serialize_field(&42).is_err());",
          "    assert!(serializer.serialize_field(&vec![1, 2, 3]).is_err());",
          "    assert!(serializer.serialize_field(&None::<&str>).is_err());",
          "    assert!(serializer.serialize_field(&Some(\"test\")).is_err());"
        ],
        "code": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &str = \"test string\";",
          "    let _ = serializer.serialize_field(value);",
          "    assert!(serializer.serialize_field(&\"test string\").is_err());",
          "    assert!(serializer.serialize_field(&42).is_err());",
          "    assert!(serializer.serialize_field(&vec![1, 2, 3]).is_err());",
          "    assert!(serializer.serialize_field(&None::<&str>).is_err());",
          "    assert!(serializer.serialize_field(&Some(\"test\")).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &i32 = &42;",
          "    let _ = serializer.serialize_field(value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_field(&value).is_err());",
          "    assert_eq!(serializer.end().is_err(), true);",
          "    let result = serializer.serialize_field(&value);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(serializer.end().is_err());",
          "    assert_eq!(serializer.end().unwrap_err(), Error);"
        ],
        "code": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &i32 = &42;",
          "    let _ = serializer.serialize_field(value);",
          "    assert!(serializer.serialize_field(&value).is_err());",
          "    assert_eq!(serializer.end().is_err(), true);",
          "    let result = serializer.serialize_field(&value);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result.unwrap_err(), Error));",
          "    assert!(serializer.end().is_err());",
          "    assert_eq!(serializer.end().unwrap_err(), Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &Vec<i32> = &vec![1, 2, 3];",
          "    let _ = serializer.serialize_field(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_field(&value), Err(Error));",
          "    assert!(matches!(serializer.serialize_field(&value), Err(_)));",
          "    assert!(std::mem::size_of_val(&value) > 0);",
          "    assert!(std::any::TypeId::of::<Vec<i32>>() == std::any::TypeId::of_val(value));",
          "    assert!(std::ptr::addr_of!(value) != std::ptr::null());",
          "    assert!(std::mem::drop(serializer).is_ok());",
          "    assert_eq!(serializer.end(), Err(Error));"
        ],
        "code": [
          "{",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value: &Vec<i32> = &vec![1, 2, 3];",
          "    let _ = serializer.serialize_field(value);",
          "    assert_eq!(serializer.serialize_field(&value), Err(Error));",
          "    assert!(matches!(serializer.serialize_field(&value), Err(_)));",
          "    assert!(std::mem::size_of_val(&value) > 0);",
          "    assert!(std::any::TypeId::of::<Vec<i32>>() == std::any::TypeId::of_val(value));",
          "    assert!(std::ptr::addr_of!(value) != std::ptr::null());",
          "    assert!(std::mem::drop(serializer).is_ok());",
          "    assert_eq!(serializer.end(), Err(Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Serialize)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value = &MyStruct { field: 10 };",
          "    let _ = serializer.serialize_field(value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.serialize_field(value).is_err());",
          "    assert_eq!(serializer.end().is_err(), true);"
        ],
        "code": [
          "{",
          "    #[derive(Serialize)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "",
          "    struct SerializeImpl;",
          "",
          "    impl SerializeTupleStruct for Impossible<(), Error> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        ",
          "        fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            let _ = value;",
          "            match self.void {}",
          "        }",
          "",
          "        fn end(self) -> Result<(), Error> {}",
          "    }",
          "",
          "    let mut serializer = Impossible {",
          "        void: Void,",
          "        ok: PhantomData,",
          "        error: PhantomData,",
          "    };",
          "    let value = &MyStruct { field: 10 };",
          "    let _ = serializer.serialize_field(value);",
          "    assert!(serializer.serialize_field(value).is_err());",
          "    assert_eq!(serializer.end().is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]