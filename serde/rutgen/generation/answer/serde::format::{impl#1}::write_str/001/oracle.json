[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
          "    let result = buf.write_str(\"exceeds\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 5] = [0; 5];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
          "    let result = buf.write_str(\"exceeds\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 10] = [0; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 8 };",
          "    let result = buf.write_str(\"12\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 10] = [0; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 8 };",
          "    let result = buf.write_str(\"12\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 3] = [0; 3];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
          "    let result = buf.write_str(\"abc\");",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [u8; 3] = [0; 3];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
          "    let result = buf.write_str(\"abc\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 3] = [0; 3];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
          "    let result = buf.write_str(\"abc\");",
          "    let mut buffer: [u8; 3] = [0; 3];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 2 };",
          "    let result = buf.write_str(\"abc\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [u8; 20] = [0; 20];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 15 };",
          "    let result = buf.write_str(\"longerthanallowed\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut buffer: [u8; 20] = [0; 20];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 15 };",
          "    let result = buf.write_str(\"longerthanallowed\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]