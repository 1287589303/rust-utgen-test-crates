[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
          "    let s = \"hello\"; // len(s) = 5",
          "    let result = buf.write_str(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(buf.offset, 10);",
          "    assert_eq!(&buffer, &[0, 0, 0, 0, 0, b'h', b'e', b'l', b'l', b'o']);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 5 };",
          "    let s = \"hello\"; // len(s) = 5",
          "    let result = buf.write_str(s);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(buf.offset, 10);",
          "    assert_eq!(&buffer, &[0, 0, 0, 0, 0, b'h', b'e', b'l', b'l', b'o']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 10 };",
          "    let s = \"\"; // len(s) = 0",
          "    let result = buf.write_str(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let mut buf = Buf { bytes: &mut buffer, offset: 10 };",
          "    let s = \"\"; // len(s) = 0",
          "    let result = buf.write_str(s);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]