[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::<&str>::Str(\"\");",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Str(\"test\");",
          "    let expected = Unexpected::Str(\"test\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"another test\");",
          "    let expected = Unexpected::Str(\"another test\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\" \");",
          "    let expected = Unexpected::Str(\" \");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"123\");",
          "    let expected = Unexpected::Str(\"123\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"!@#\");",
          "    let expected = Unexpected::Str(\"!@#\");",
          "    assert_eq!(content.unexpected(), expected);"
        ],
        "code": [
          "{",
          "    let content = Content::<&str>::Str(\"\");",
          "    let _result = content.unexpected();",
          "    let content = Content::Str(\"test\");",
          "    let expected = Unexpected::Str(\"test\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"another test\");",
          "    let expected = Unexpected::Str(\"another test\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\" \");",
          "    let expected = Unexpected::Str(\" \");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"123\");",
          "    let expected = Unexpected::Str(\"123\");",
          "    assert_eq!(content.unexpected(), expected);",
          "    ",
          "    let content = Content::Str(\"!@#\");",
          "    let expected = Unexpected::Str(\"!@#\");",
          "    assert_eq!(content.unexpected(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::<&str>::Str(\"!@#$%^&*()\");",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Str(\"!@#$%^&*()\");",
          "    let expected_result = Unexpected::Str(\"!@#$%^&*()\");",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let content = Content::<&str>::Str(\"!@#$%^&*()\");",
          "    let _result = content.unexpected();",
          "    let content = Content::Str(\"!@#$%^&*()\");",
          "    let expected_result = Unexpected::Str(\"!@#$%^&*()\");",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::<&str>::Str(\"test string\");",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Str(\"test string\"));"
        ],
        "code": [
          "{",
          "    let content = Content::<&str>::Str(\"test string\");",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Str(\"test string\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::<&str>::Str(\"こんにちは\");",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Str(\"こんにちは\");",
          "    let expected = Unexpected::Str(\"こんにちは\");",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let content = Content::<&str>::Str(\"こんにちは\");",
          "    let _result = content.unexpected();",
          "    let content = Content::Str(\"こんにちは\");",
          "    let expected = Unexpected::Str(\"こんにちは\");",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::<&str>::Str(\"   \");",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Str(\"   \");",
          "    let expected = Unexpected::Str(\"   \");",
          "    assert_eq!(content.unexpected(), expected);"
        ],
        "code": [
          "{",
          "    let content = Content::<&str>::Str(\"   \");",
          "    let _result = content.unexpected();",
          "    let content = Content::Str(\"   \");",
          "    let expected = Unexpected::Str(\"   \");",
          "    assert_eq!(content.unexpected(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]