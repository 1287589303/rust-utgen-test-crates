[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I8(-128);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Signed(-128));"
        ],
        "code": [
          "{",
          "    let content = Content::I8(-128);",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Signed(-128));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I8(0);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Signed(0));"
        ],
        "code": [
          "{",
          "    let content = Content::I8(0);",
          "    let _result = content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Signed(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I8(127);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::I8(127);",
          "    let expected = Unexpected::Signed(127 as i64);",
          "    assert_eq!(content.unexpected(), expected);"
        ],
        "code": [
          "{",
          "    let content = Content::I8(127);",
          "    let _result = content.unexpected();",
          "    let content = Content::I8(127);",
          "    let expected = Unexpected::Signed(127 as i64);",
          "    assert_eq!(content.unexpected(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]