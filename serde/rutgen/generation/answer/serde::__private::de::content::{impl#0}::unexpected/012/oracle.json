[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::F64(0.0);",
          "    let _ = content.unexpected(); // Test for zero",
          "",
          "    let content = Content::F64(1.0);",
          "    let _ = content.unexpected(); // Test for positive value",
          "",
          "    let content = Content::F64(-1.0);",
          "    let _ = content.unexpected(); // Test for negative value",
          "",
          "    let content = Content::F64(f64::MAX);",
          "    let _ = content.unexpected(); // Test for maximal f64",
          "",
          "    let content = Content::F64(f64::MIN);",
          "    let _ = content.unexpected(); // Test for minimal f64",
          "",
          "    let content = Content::F64(f32::MAX as f64);",
          "    let _ = content.unexpected(); // Test for maximal f32 represented in f64",
          "",
          "    let content = Content::F64(f32::MIN as f64);",
          "    let _ = content.unexpected(); // Test for minimal f32 represented in f64",
          "",
          "    let content = Content::F64(f64::INFINITY);",
          "    let _ = content.unexpected(); // Test for positive infinity",
          "",
          "    let content = Content::F64(f64::NEG_INFINITY);",
          "    let _ = content.unexpected(); // Test for negative infinity",
          "",
          "    let content = Content::F64(f64::NAN);",
          "    let _ = content.unexpected(); // Test for NaN",
          "}"
        ],
        "oracle": [
          "    let content = Content::F64(0.0); assert_eq!(content.unexpected(), Unexpected::Float(0.0)); // Test for zero",
          "    let content = Content::F64(1.0); assert_eq!(content.unexpected(), Unexpected::Float(1.0)); // Test for positive value",
          "    let content = Content::F64(-1.0); assert_eq!(content.unexpected(), Unexpected::Float(-1.0)); // Test for negative value",
          "    let content = Content::F64(f64::MAX); assert_eq!(content.unexpected(), Unexpected::Float(f64::MAX)); // Test for maximal f64",
          "    let content = Content::F64(f64::MIN); assert_eq!(content.unexpected(), Unexpected::Float(f64::MIN)); // Test for minimal f64",
          "    let content = Content::F64(f32::MAX as f64); assert_eq!(content.unexpected(), Unexpected::Float(f32::MAX as f64)); // Test for maximal f32 represented in f64",
          "    let content = Content::F64(f32::MIN as f64); assert_eq!(content.unexpected(), Unexpected::Float(f32::MIN as f64)); // Test for minimal f32 represented in f64",
          "    let content = Content::F64(f64::INFINITY); assert_eq!(content.unexpected(), Unexpected::Float(f64::INFINITY)); // Test for positive infinity",
          "    let content = Content::F64(f64::NEG_INFINITY); assert_eq!(content.unexpected(), Unexpected::Float(f64::NEG_INFINITY)); // Test for negative infinity",
          "    let content = Content::F64(f64::NAN); assert!(content.unexpected() == Unexpected::Float(f64::NAN) || content.unexpected().is_nan()); // Test for NaN"
        ],
        "code": [
          "{",
          "    let content = Content::F64(0.0);",
          "    let _ = content.unexpected(); // Test for zero",
          "",
          "    let content = Content::F64(1.0);",
          "    let _ = content.unexpected(); // Test for positive value",
          "",
          "    let content = Content::F64(-1.0);",
          "    let _ = content.unexpected(); // Test for negative value",
          "",
          "    let content = Content::F64(f64::MAX);",
          "    let _ = content.unexpected(); // Test for maximal f64",
          "",
          "    let content = Content::F64(f64::MIN);",
          "    let _ = content.unexpected(); // Test for minimal f64",
          "",
          "    let content = Content::F64(f32::MAX as f64);",
          "    let _ = content.unexpected(); // Test for maximal f32 represented in f64",
          "",
          "    let content = Content::F64(f32::MIN as f64);",
          "    let _ = content.unexpected(); // Test for minimal f32 represented in f64",
          "",
          "    let content = Content::F64(f64::INFINITY);",
          "    let _ = content.unexpected(); // Test for positive infinity",
          "",
          "    let content = Content::F64(f64::NEG_INFINITY);",
          "    let _ = content.unexpected(); // Test for negative infinity",
          "",
          "    let content = Content::F64(f64::NAN);",
          "    let _ = content.unexpected(); // Test for NaN",
          "    let content = Content::F64(0.0); assert_eq!(content.unexpected(), Unexpected::Float(0.0)); // Test for zero",
          "    let content = Content::F64(1.0); assert_eq!(content.unexpected(), Unexpected::Float(1.0)); // Test for positive value",
          "    let content = Content::F64(-1.0); assert_eq!(content.unexpected(), Unexpected::Float(-1.0)); // Test for negative value",
          "    let content = Content::F64(f64::MAX); assert_eq!(content.unexpected(), Unexpected::Float(f64::MAX)); // Test for maximal f64",
          "    let content = Content::F64(f64::MIN); assert_eq!(content.unexpected(), Unexpected::Float(f64::MIN)); // Test for minimal f64",
          "    let content = Content::F64(f32::MAX as f64); assert_eq!(content.unexpected(), Unexpected::Float(f32::MAX as f64)); // Test for maximal f32 represented in f64",
          "    let content = Content::F64(f32::MIN as f64); assert_eq!(content.unexpected(), Unexpected::Float(f32::MIN as f64)); // Test for minimal f32 represented in f64",
          "    let content = Content::F64(f64::INFINITY); assert_eq!(content.unexpected(), Unexpected::Float(f64::INFINITY)); // Test for positive infinity",
          "    let content = Content::F64(f64::NEG_INFINITY); assert_eq!(content.unexpected(), Unexpected::Float(f64::NEG_INFINITY)); // Test for negative infinity",
          "    let content = Content::F64(f64::NAN); assert!(content.unexpected() == Unexpected::Float(f64::NAN) || content.unexpected().is_nan()); // Test for NaN",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]