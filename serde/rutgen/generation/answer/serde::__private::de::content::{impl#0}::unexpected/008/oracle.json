[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::ByteBuf(vec![]);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Bytes(&[]));",
          "    assert!(_result.is_bytes());"
        ],
        "code": [
          "{",
          "    let content = Content::ByteBuf(vec![]);",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Bytes(&[]));",
          "    assert!(_result.is_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::ByteBuf(vec![1]);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::ByteBuf(vec![1]);",
          "    let expected = Unexpected::Bytes(&vec![1]);",
          "    assert_eq!(content.unexpected(), expected);"
        ],
        "code": [
          "{",
          "    let content = Content::ByteBuf(vec![1]);",
          "    let _result = content.unexpected();",
          "    let content = Content::ByteBuf(vec![1]);",
          "    let expected = Unexpected::Bytes(&vec![1]);",
          "    assert_eq!(content.unexpected(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::ByteBuf(vec![1, 2, 3, 4, 5]);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&[1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let content = Content::ByteBuf(vec![1, 2, 3, 4, 5]);",
          "    let _result = content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&[1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::ByteBuf(vec![0; 1024]); // 1 KB",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Bytes(&vec![0; 1024]));"
        ],
        "code": [
          "{",
          "    let content = Content::ByteBuf(vec![0; 1024]); // 1 KB",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Bytes(&vec![0; 1024]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]