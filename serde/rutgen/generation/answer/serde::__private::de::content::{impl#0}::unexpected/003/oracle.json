[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::Bool(true)));",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::NewtypeStruct);"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::Bool(true)));",
          "    let _ = content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::NewtypeStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::U8(8)));",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Newtype(Box::new(Content::U8(8)));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::U8(8)));",
          "    let _ = content.unexpected();",
          "    let content = Content::Newtype(Box::new(Content::U8(8)));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::String(String::from(\"test\"))));",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Newtype(Box::new(Content::String(String::from(\"test\"))));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::String(String::from(\"test\"))));",
          "    let _ = content.unexpected();",
          "    let content = Content::Newtype(Box::new(Content::String(String::from(\"test\"))));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::F32(3.14)));",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Newtype(Box::new(Content::F32(3.14)));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::F32(3.14)));",
          "    let _ = content.unexpected();",
          "    let content = Content::Newtype(Box::new(Content::F32(3.14)));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::Char('c')));",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Newtype(Box::new(Content::Char('c')));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::Char('c')));",
          "    let _ = content.unexpected();",
          "    let content = Content::Newtype(Box::new(Content::Char('c')));",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::NewtypeStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]