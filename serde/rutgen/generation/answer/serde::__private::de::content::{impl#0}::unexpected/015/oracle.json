[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(i32::MIN);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::I32(i32::MIN);",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::Signed(i32::MIN as i64));"
        ],
        "code": [
          "{",
          "    let content = Content::I32(i32::MIN);",
          "    let _result = content.unexpected();",
          "    let content = Content::I32(i32::MIN);",
          "    let result = content.unexpected();",
          "    assert_eq!(result, Unexpected::Signed(i32::MIN as i64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(0);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::I32(0);",
          "    let expected = Unexpected::Signed(0);",
          "    assert_eq!(content.unexpected(), expected);"
        ],
        "code": [
          "{",
          "    let content = Content::I32(0);",
          "    let _result = content.unexpected();",
          "    let content = Content::I32(0);",
          "    let expected = Unexpected::Signed(0);",
          "    assert_eq!(content.unexpected(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(12345);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Signed(12345));"
        ],
        "code": [
          "{",
          "    let content = Content::I32(12345);",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Signed(12345));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(i32::MAX);",
          "    let _result = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Signed(i32::MAX as i64));"
        ],
        "code": [
          "{",
          "    let content = Content::I32(i32::MAX);",
          "    let _result = content.unexpected();",
          "    assert_eq!(_result, Unexpected::Signed(i32::MAX as i64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]