[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::None;",
          "    content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Option);"
        ],
        "code": [
          "{",
          "    let content = Content::None;",
          "    content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Some(Box::new(Content::Bool(true)));",
          "    content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);",
          "    let content_some = Content::Some(Box::new(Content::None));",
          "    assert_eq!(content_some.unexpected(), Unexpected::Option);",
          "    let content_some_bool = Content::Some(Box::new(Content::Bool(false)));",
          "    assert_eq!(content_some_bool.unexpected(), Unexpected::Option);"
        ],
        "code": [
          "{",
          "    let content = Content::Some(Box::new(Content::Bool(true)));",
          "    content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);",
          "    let content_some = Content::Some(Box::new(Content::None));",
          "    assert_eq!(content_some.unexpected(), Unexpected::Option);",
          "    let content_some_bool = Content::Some(Box::new(Content::Bool(false)));",
          "    assert_eq!(content_some_bool.unexpected(), Unexpected::Option);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Some(Box::new(Content::U32(0)));",
          "    content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);"
        ],
        "code": [
          "{",
          "    let content = Content::Some(Box::new(Content::U32(0)));",
          "    content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Some(Box::new(Content::String(\"test\".to_string())));",
          "    content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);",
          "    let content_some = Content::Some(Box::new(Content::String(\"test\".to_string())));",
          "    assert!(matches!(content_some.unexpected(), Unexpected::Option));"
        ],
        "code": [
          "{",
          "    let content = Content::Some(Box::new(Content::String(\"test\".to_string())));",
          "    content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Option);",
          "    let content_none = Content::None;",
          "    assert_eq!(content_none.unexpected(), Unexpected::Option);",
          "    let content_some = Content::Some(Box::new(Content::String(\"test\".to_string())));",
          "    assert!(matches!(content_some.unexpected(), Unexpected::Option));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]