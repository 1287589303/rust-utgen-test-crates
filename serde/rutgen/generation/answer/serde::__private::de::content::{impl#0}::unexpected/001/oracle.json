[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map_content = Content::Map(vec![",
          "        (Content::String(\"key1\".to_string()), Content::Bool(true)),",
          "        (Content::U32(42), Content::F64(3.14)),",
          "    ]);",
          "    let _result = map_content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let map_content = Content::Map(vec![",
          "        (Content::String(\"key1\".to_string()), Content::Bool(true)),",
          "        (Content::U32(42), Content::F64(3.14)),",
          "    ]);",
          "    let _result = map_content.unexpected();",
          "    assert_eq!(_result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map_content = Content::Map(vec![]);",
          "    let _result = map_content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let map_content = Content::Map(vec![]);",
          "    let _result = map_content.unexpected();",
          "    assert_eq!(_result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map_content = Content::Map(vec![",
          "        (Content::I8(-1), Content::U16(100)),",
          "        (Content::Char('a'), Content::String(\"value\".to_string())),",
          "    ]);",
          "    let _result = map_content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let map_content = Content::Map(vec![",
          "        (Content::I8(-1), Content::U16(100)),",
          "        (Content::Char('a'), Content::String(\"value\".to_string())),",
          "    ]);",
          "    let _result = map_content.unexpected();",
          "    assert_eq!(_result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]