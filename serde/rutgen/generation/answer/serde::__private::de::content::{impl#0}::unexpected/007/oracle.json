[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bytes(vec![0, 255]);",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    let content = Content::Bytes(vec![0, 255]);",
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&[0, 255]));"
        ],
        "code": [
          "{",
          "    let content = Content::Bytes(vec![0, 255]);",
          "    let _ = content.unexpected();",
          "    let content = Content::Bytes(vec![0, 255]);",
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&[0, 255]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bytes(vec![]);",
          "    let _ = content.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&vec![]));"
        ],
        "code": [
          "{",
          "    let content = Content::Bytes(vec![]);",
          "    let _ = content.unexpected();",
          "    assert_eq!(content.unexpected(), Unexpected::Bytes(&vec![]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]