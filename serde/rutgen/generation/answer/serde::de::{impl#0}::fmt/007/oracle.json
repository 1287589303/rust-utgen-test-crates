[
  {
    "uses": [
      "use crate::lib::*;",
      "use std::fmt;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "    use crate::lib::*;",
          "    ",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let unexpected_map = Unexpected::Map;",
          "    let _ = unexpected_map.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"map\"), Ok(()));"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "    use crate::lib::*;",
          "    ",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let unexpected_map = Unexpected::Map;",
          "    let _ = unexpected_map.fmt(&mut formatter);",
          "    assert_eq!(formatter.write_str(\"map\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt;",
          "    use crate::lib::*;",
          "    ",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let unexpected_map = Unexpected::Map;",
          "    let _ = write!(formatter, \"{}\", unexpected_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(write!(formatter, \"{}\", unexpected_map), Ok(()));",
          "    assert!(formatter.write_str(\"map\").is_ok());"
        ],
        "code": [
          "{",
          "    use std::fmt;",
          "    use crate::lib::*;",
          "    ",
          "    struct TestFormatter;",
          "    ",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut formatter = TestFormatter;",
          "    let unexpected_map = Unexpected::Map;",
          "    let _ = write!(formatter, \"{}\", unexpected_map);",
          "    assert_eq!(write!(formatter, \"{}\", unexpected_map), Ok(()));",
          "    assert!(formatter.write_str(\"map\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]