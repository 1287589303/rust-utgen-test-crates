[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Unsigned(42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"integer `42`\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Unsigned(42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"integer `42`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Signed(-3);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"integer `-3`\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Signed(-3);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"integer `-3`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Float(3.14);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected_option = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_option.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Float(3.14);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    let unexpected_option = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_option.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Char('a');",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"character `a`\");",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Char('a');",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"character `a`\");",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Str(\"string\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"string \\\"string\\\"\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Str(\"string\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"string \\\"string\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Bytes(&[1, 2, 3]);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"byte array\");",
          "    ",
          "    let unexpected_value = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"unit value\");",
          "    ",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"Option value\");",
          "    ",
          "    let unexpected_value = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"newtype struct\");",
          "    ",
          "    let unexpected_value = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"sequence\");",
          "    ",
          "    let unexpected_value = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"map\");",
          "    ",
          "    let unexpected_value = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"enum\");",
          "    ",
          "    let unexpected_value = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"unit variant\");",
          "    ",
          "    let unexpected_value = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"newtype variant\");",
          "    ",
          "    let unexpected_value = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"tuple variant\");",
          "    ",
          "    let unexpected_value = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"struct variant\");",
          "    ",
          "    let unexpected_value = Unexpected::Other(\"example\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"example\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Bytes(&[1, 2, 3]);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"byte array\");",
          "    ",
          "    let unexpected_value = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"unit value\");",
          "    ",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"Option value\");",
          "    ",
          "    let unexpected_value = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"newtype struct\");",
          "    ",
          "    let unexpected_value = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"sequence\");",
          "    ",
          "    let unexpected_value = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"map\");",
          "    ",
          "    let unexpected_value = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"enum\");",
          "    ",
          "    let unexpected_value = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"unit variant\");",
          "    ",
          "    let unexpected_value = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"newtype variant\");",
          "    ",
          "    let unexpected_value = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"tuple variant\");",
          "    ",
          "    let unexpected_value = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"struct variant\");",
          "    ",
          "    let unexpected_value = Unexpected::Other(\"example\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"example\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"Option value\") == fmt::Result::Ok",
          "    write!(formatter, \"unit value\") == fmt::Result::Ok",
          "    formatter.to_string() == \"Option value\"",
          "    formatter.to_string() == \"unit value\"",
          "    unexpected_value.fmt(&mut formatter);",
          "    expected_output.contains(\"Option value\");",
          "    expected_output.contains(\"unit value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    write!(formatter, \"Option value\") == fmt::Result::Ok",
          "    write!(formatter, \"unit value\") == fmt::Result::Ok",
          "    formatter.to_string() == \"Option value\"",
          "    formatter.to_string() == \"unit value\"",
          "    unexpected_value.fmt(&mut formatter);",
          "    expected_output.contains(\"Option value\");",
          "    expected_output.contains(\"unit value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unexpected_value.fmt(&mut formatter).to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(unexpected_value.fmt(&mut formatter).to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    unexpected_value = Unexpected::Option;",
          "    formatter = fmt::Formatter::new();",
          "    _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    unexpected_value = Unexpected::Option;",
          "    formatter = fmt::Formatter::new();",
          "    _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"Option value\")"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    write!(formatter, \"Option value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    let unexpected_value = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"unit variant\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit variant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"newtype variant\");",
          "    assert!(formatter.errors().is_empty());"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype variant\");",
          "    assert!(formatter.errors().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unexpected_value.to_string(), \"tuple variant\");",
          "    assert_eq!(formatter.buffer(), \"\");",
          "    assert!(formatter.is_empty());"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(unexpected_value.to_string(), \"tuple variant\");",
          "    assert_eq!(formatter.buffer(), \"\");",
          "    assert!(formatter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"struct variant\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"struct variant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_value = Unexpected::Other(\"some other value\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Option value\");"
        ],
        "code": [
          "{",
          "    let unexpected_value = Unexpected::Other(\"some other value\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected_value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]