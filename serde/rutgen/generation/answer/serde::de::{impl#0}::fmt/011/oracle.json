[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output, \"boolean `true`\");",
          "    assert_eq!(formatter.output.len(), 15);"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.output, \"boolean `true`\");",
          "    assert_eq!(formatter.output.len(), 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Unsigned(42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.output(), \"unit value\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Unsigned(42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    let unexpected = Unexpected::Unit;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.output(), \"unit value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Signed(-42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unexpected.to_string(), \"integer `-42`\");",
          "    assert!(formatter.is_empty());",
          "    assert!(formatter.error().is_none());"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Signed(-42);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(unexpected.to_string(), \"integer `-42`\");",
          "    assert!(formatter.is_empty());",
          "    assert!(formatter.error().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Float(3.14);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"floating point `3.14`\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"unoriginal superhero\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Float(3.14);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"floating point `3.14`\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"unoriginal superhero\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Char('a');",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"character `a`\")",
          "    write!(formatter, \"boolean `{}`\", true)",
          "    write!(formatter, \"integer `{}`\", 123)",
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    write!(formatter, \"string {:?}\", \"test\")",
          "    write!(formatter, \"integer `{}`\", -123)"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Char('a');",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"character `a`\")",
          "    write!(formatter, \"boolean `{}`\", true)",
          "    write!(formatter, \"integer `{}`\", 123)",
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    write!(formatter, \"string {:?}\", \"test\")",
          "    write!(formatter, \"integer `{}`\", -123)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"string \\\"test\\\"\");",
          "    assert_eq!(unexpected.fmt(&mut fmt::Formatter::new()), Ok(()));"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"string \\\"test\\\"\");",
          "    assert_eq!(unexpected.fmt(&mut fmt::Formatter::new()), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Bytes(&[1, 2, 3]);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", Unexpected::Unit), \"unit value\");",
          "    assert!(format!(\"{:?}\", Unexpected::Bytes(&[1, 2, 3])).contains(\"byte array\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Option).contains(\"Option value\"));",
          "    assert!(format!(\"{:?}\", Unexpected::NewtypeStruct).contains(\"newtype struct\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Seq).contains(\"sequence\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Map).contains(\"map\"));"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Bytes(&[1, 2, 3]);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{:?}\", Unexpected::Unit), \"unit value\");",
          "    assert!(format!(\"{:?}\", Unexpected::Bytes(&[1, 2, 3])).contains(\"byte array\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Option).contains(\"Option value\"));",
          "    assert!(format!(\"{:?}\", Unexpected::NewtypeStruct).contains(\"newtype struct\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Seq).contains(\"sequence\"));",
          "    assert!(format!(\"{:?}\", Unexpected::Map).contains(\"map\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "    let unexpected = Unexpected::Bytes(&[1, 2, 3]);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"byte array\");",
          "    let unexpected = Unexpected::Seq;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"sequence\");",
          "    let unexpected = Unexpected::Map;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"map\");",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"test\\\"\");",
          "    let unexpected = Unexpected::Char('a');",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"character 'a'\");",
          "    let unexpected = Unexpected::Float(3.14);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `3.14`\");",
          "    let unexpected = Unexpected::Signed(-42);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"integer `-42`\");",
          "    let unexpected = Unexpected::Unsigned(42);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"integer `42`\");",
          "    let unexpected = Unexpected::Unit;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit value\");",
          "    let unexpected = Unexpected::NewtypeStruct;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype struct\");",
          "    let unexpected = Unexpected::UnitVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit variant\");",
          "    let unexpected = Unexpected::NewtypeVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype variant\");",
          "    let unexpected = Unexpected::TupleVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"tuple variant\");",
          "    let unexpected = Unexpected::StructVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"struct variant\");",
          "    let unexpected = Unexpected::Other(\"unexpected type\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unexpected type\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Option;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Option value\");",
          "    let unexpected = Unexpected::Bytes(&[1, 2, 3]);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"byte array\");",
          "    let unexpected = Unexpected::Seq;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"sequence\");",
          "    let unexpected = Unexpected::Map;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"map\");",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"test\\\"\");",
          "    let unexpected = Unexpected::Char('a');",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"character 'a'\");",
          "    let unexpected = Unexpected::Float(3.14);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `3.14`\");",
          "    let unexpected = Unexpected::Signed(-42);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"integer `-42`\");",
          "    let unexpected = Unexpected::Unsigned(42);",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"integer `42`\");",
          "    let unexpected = Unexpected::Unit;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit value\");",
          "    let unexpected = Unexpected::NewtypeStruct;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype struct\");",
          "    let unexpected = Unexpected::UnitVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit variant\");",
          "    let unexpected = Unexpected::NewtypeVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype variant\");",
          "    let unexpected = Unexpected::TupleVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"tuple variant\");",
          "    let unexpected = Unexpected::StructVariant;",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"struct variant\");",
          "    let unexpected = Unexpected::Other(\"unexpected type\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unexpected type\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"newtype struct\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"other\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::NewtypeStruct;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"newtype struct\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"other\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"sequence\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Seq;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"sequence\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"map\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Map;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"map\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    unexpected.fmt(&mut formatter).to_string() == \"enum\"",
          "    formatter.buffer.is_empty() == true",
          "    unexpected.fmt(&mut formatter).is_ok() == true",
          "    formatter.has_written() == true",
          "    unexpected = Unexpected::Unit;",
          "    unexpected.fmt(&mut formatter).to_string() == \"unit value\"",
          "    unexpected = Unexpected::Str(\"test\");",
          "    unexpected.fmt(&mut formatter).to_string() == \"string \\\"test\\\"\""
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Enum;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    unexpected.fmt(&mut formatter).to_string() == \"enum\"",
          "    formatter.buffer.is_empty() == true",
          "    unexpected.fmt(&mut formatter).is_ok() == true",
          "    formatter.has_written() == true",
          "    unexpected = Unexpected::Unit;",
          "    unexpected.fmt(&mut formatter).to_string() == \"unit value\"",
          "    unexpected = Unexpected::Str(\"test\");",
          "    unexpected.fmt(&mut formatter).to_string() == \"string \\\"test\\\"\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::UnitVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"newtype variant\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::NewtypeVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"newtype variant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    write!(formatter, \"boolean `{}`\", true)",
          "    write!(formatter, \"integer `{}`\", 42)",
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    write!(formatter, \"character `{}`\", 'a')",
          "    write!(formatter, \"string {:?}\", \"test\")",
          "    formatter.write_str(\"Option value\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::TupleVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"byte array\")",
          "    write!(formatter, \"boolean `{}`\", true)",
          "    write!(formatter, \"integer `{}`\", 42)",
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    write!(formatter, \"character `{}`\", 'a')",
          "    write!(formatter, \"string {:?}\", \"test\")",
          "    formatter.write_str(\"Option value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\") == Ok(())",
          "    formatter.write_str(\"unit value\") == Ok(())"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::StructVariant;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\") == Ok(())",
          "    formatter.write_str(\"unit value\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"unexpected thing\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unit value\") == Ok(())",
          "    formatter.write_str(\"unit value\") == Ok(())",
          "    write!(formatter, \"string {:?}\", \"unexpected thing\") == Ok(())"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"unexpected thing\");",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unit value\") == Ok(())",
          "    formatter.write_str(\"unit value\") == Ok(())",
          "    write!(formatter, \"string {:?}\", \"unexpected thing\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]