[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected = Unexpected::Other(\"unrecognized input\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"unrecognized input\");",
          "    let unexpected = Unexpected::Other(\"special character #$%\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"special character #$%\");",
          "    let unexpected = Unexpected::Other(\"long description of an error case\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"long description of an error case\");",
          "    let unexpected = Unexpected::Other(\"another test case\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"another test case\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    let unexpected = Unexpected::Other(\"unrecognized input\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"unrecognized input\");",
          "    let unexpected = Unexpected::Other(\"special character #$%\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"special character #$%\");",
          "    let unexpected = Unexpected::Other(\"long description of an error case\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"long description of an error case\");",
          "    let unexpected = Unexpected::Other(\"another test case\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let result = unexpected.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"another test case\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"unexpected\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"unexpected\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"unexpected\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unexpected\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"not a predefined variant\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"not a predefined variant\") == Ok(())"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"not a predefined variant\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"not a predefined variant\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"error!@#\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"error!@#\") == Ok(())",
          "    formatter.to_string() == \"error!@#\"",
          "    formatter.write_str(other) == Ok(())",
          "    formatter.write_str(\"error!@#\") == Ok(())"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"error!@#\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"error!@#\") == Ok(())",
          "    formatter.to_string() == \"error!@#\"",
          "    formatter.write_str(other) == Ok(())",
          "    formatter.write_str(\"error!@#\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Other(\"this is a long string that doesn't match any enum variant\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"unoriginal superhero\")",
          "    write!(formatter, \"this is a long string that doesn't match any enum variant\")",
          "    formatter.write_str(\"other\")",
          "    formatter.write_str(\"another unexpected thing\")",
          "    formatter.write_str(\"\")",
          "    formatter.write_str(\"any value\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Other(\"this is a long string that doesn't match any enum variant\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"unoriginal superhero\")",
          "    write!(formatter, \"this is a long string that doesn't match any enum variant\")",
          "    formatter.write_str(\"other\")",
          "    formatter.write_str(\"another unexpected thing\")",
          "    formatter.write_str(\"\")",
          "    formatter.write_str(\"any value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]