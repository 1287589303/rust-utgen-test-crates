[
  {
    "uses": [
      "use crate::Unexpected;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::Unexpected;",
          "",
          "    let unexpected_variant = Unexpected::UnitVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"unit variant\");"
        ],
        "code": [
          "{",
          "    use crate::Unexpected;",
          "",
          "    let unexpected_variant = Unexpected::UnitVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unit variant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::Unexpected;",
          "",
          "    let unexpected_variant = Unexpected::UnitVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = write!(formatter, \"{}\", unexpected_variant);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"{}\", Unexpected::UnitVariant);",
          "    formatter.to_string() == \"unit variant\";",
          "    formatter.has_error() == false;",
          "    write!(formatter, \"{}\", Unexpected::Unit) == Ok(());",
          "    formatter.flush().is_ok();"
        ],
        "code": [
          "{",
          "    use crate::Unexpected;",
          "",
          "    let unexpected_variant = Unexpected::UnitVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = write!(formatter, \"{}\", unexpected_variant);",
          "    write!(formatter, \"{}\", Unexpected::UnitVariant);",
          "    formatter.to_string() == \"unit variant\";",
          "    formatter.has_error() == false;",
          "    write!(formatter, \"{}\", Unexpected::Unit) == Ok(());",
          "    formatter.flush().is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]