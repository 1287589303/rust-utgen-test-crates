[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_enum = Unexpected::Enum;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_enum.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"enum\")"
        ],
        "code": [
          "{",
          "    let unexpected_enum = Unexpected::Enum;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_enum.fmt(&mut formatter);",
          "    write!(formatter, \"enum\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_enum = Unexpected::Enum;",
          "    let unexpected_other = Unexpected::Signed(10);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_enum.fmt(&mut formatter);",
          "    let _ = unexpected_other.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"enum\")",
          "    write!(formatter, \"integer `10`\")"
        ],
        "code": [
          "{",
          "    let unexpected_enum = Unexpected::Enum;",
          "    let unexpected_other = Unexpected::Signed(10);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_enum.fmt(&mut formatter);",
          "    let _ = unexpected_other.fmt(&mut formatter);",
          "    write!(formatter, \"enum\")",
          "    write!(formatter, \"integer `10`\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]