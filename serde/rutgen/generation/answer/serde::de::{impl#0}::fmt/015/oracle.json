[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(3.14);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"other value\")"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(3.14);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    write!(formatter, \"floating point `{}`\", WithDecimalPoint(3.14))",
          "    formatter.write_str(\"byte array\")",
          "    formatter.write_str(\"unit value\")",
          "    formatter.write_str(\"Option value\")",
          "    formatter.write_str(\"newtype struct\")",
          "    formatter.write_str(\"sequence\")",
          "    formatter.write_str(\"map\")",
          "    formatter.write_str(\"enum\")",
          "    formatter.write_str(\"unit variant\")",
          "    formatter.write_str(\"newtype variant\")",
          "    formatter.write_str(\"tuple variant\")",
          "    formatter.write_str(\"struct variant\")",
          "    formatter.write_str(\"other value\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unexpected::Float(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `0.0`\");",
          "    let value = Unexpected::Float(1.5);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `1.5`\");",
          "    let value = Unexpected::Float(-2.75);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `-2.75`\");",
          "    let value = Unexpected::Float(f64::INFINITY);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `inf`\");",
          "    let value = Unexpected::Float(f64::NAN);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `NaN`\");"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unexpected::Float(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `0.0`\");",
          "    let value = Unexpected::Float(1.5);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `1.5`\");",
          "    let value = Unexpected::Float(-2.75);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `-2.75`\");",
          "    let value = Unexpected::Float(f64::INFINITY);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `inf`\");",
          "    let value = Unexpected::Float(f64::NAN);",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `NaN`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(-2.71);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"floating point `-2.71`\");"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(-2.71);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `-2.71`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(f64::INFINITY);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"floating point `∞`\");",
          "    assert_eq!(value.to_string(), \"floating point `∞`\");"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(f64::INFINITY);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `∞`\");",
          "    assert_eq!(value.to_string(), \"floating point `∞`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(f64::NEG_INFINITY);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"floating point `{}\", WithDecimalPoint(f64::NEG_INFINITY))"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(f64::NEG_INFINITY);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    write!(formatter, \"floating point `{}\", WithDecimalPoint(f64::NEG_INFINITY))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Unexpected::Float(f64::NAN);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let value = Unexpected::Float(f64::NAN);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.into_string(), \"floating point `NaN`\");"
        ],
        "code": [
          "{",
          "    let value = Unexpected::Float(f64::NAN);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    let value = Unexpected::Float(f64::NAN);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    assert_eq!(value.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.into_string(), \"floating point `NaN`\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]