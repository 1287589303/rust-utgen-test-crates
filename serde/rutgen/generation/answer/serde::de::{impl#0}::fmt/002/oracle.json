[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_variant = Unexpected::StructVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"struct variant\");"
        ],
        "code": [
          "{",
          "    let unexpected_variant = Unexpected::StructVariant;",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"struct variant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected_variant = Unexpected::Other(\"unexpected data\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"unexpected data\");",
          "    assert!(formatter.has_written());"
        ],
        "code": [
          "{",
          "    let unexpected_variant = Unexpected::Other(\"unexpected data\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected_variant.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"unexpected data\");",
          "    assert!(formatter.has_written());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]