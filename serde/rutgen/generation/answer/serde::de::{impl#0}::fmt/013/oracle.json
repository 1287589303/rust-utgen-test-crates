[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"non-empty string\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"string {:?}\", \"non-empty string\")",
          "    assert_eq!(formatter.to_string(), \"string \\\"non-empty string\\\"\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"non-empty string\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"string {:?}\", \"non-empty string\")",
          "    assert_eq!(formatter.to_string(), \"string \\\"non-empty string\\\"\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"string \\\"\\\"\");",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"test\\\"\");",
          "    let unexpected = Unexpected::Str(\"Hello, World!\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"Hello, World!\\\"\");",
          "    let unexpected = Unexpected::Str(\"12345\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"12345\\\"\");",
          "    let unexpected = Unexpected::Str(\"&*()[]{}\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"&*()[]{}\\\"\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"\\\"\");",
          "    let unexpected = Unexpected::Str(\"test\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"test\\\"\");",
          "    let unexpected = Unexpected::Str(\"Hello, World!\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"Hello, World!\\\"\");",
          "    let unexpected = Unexpected::Str(\"12345\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"12345\\\"\");",
          "    let unexpected = Unexpected::Str(\"&*()[]{}\");",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"&*()[]{}\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"string with special characters! @#$%^&*()\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let unexpected = Unexpected::Str(\"string with special characters! @#$%^&*()\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"string with special characters! @#$%^&*()\\\"\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"string with special characters! @#$%^&*()\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    let unexpected = Unexpected::Str(\"string with special characters! @#$%^&*()\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"string with special characters! @#$%^&*()\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"   \");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"string {:?}\", \"   \")",
          "    formatter.write_str(\"string \\\"   \\\"\")",
          "    formatter.write_str(\"string \\\"   \\\"\").unwrap()",
          "    assert_eq!(formatter.to_string(), format!(\"string {:?}\", \"   \"))",
          "    assert_eq!(unexpected.to_string(), \"string \\\"   \\\"\")"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"   \");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    write!(formatter, \"string {:?}\", \"   \")",
          "    formatter.write_str(\"string \\\"   \\\"\")",
          "    formatter.write_str(\"string \\\"   \\\"\").unwrap()",
          "    assert_eq!(formatter.to_string(), format!(\"string {:?}\", \"   \"))",
          "    assert_eq!(unexpected.to_string(), \"string \\\"   \\\"\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = Unexpected::Str(\"string with unicode: 你好\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"string \\\"string with unicode: 你好\\\"\");"
        ],
        "code": [
          "{",
          "    let unexpected = Unexpected::Str(\"string with unicode: 你好\");",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    let _ = unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"string \\\"string with unicode: 你好\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]