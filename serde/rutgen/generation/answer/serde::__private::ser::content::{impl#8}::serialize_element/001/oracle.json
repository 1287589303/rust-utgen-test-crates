[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidType;",
          "",
          "    impl Serialize for InvalidType {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(/* insert appropriate error here */)",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTuple::</* define specific error type here */> {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let value = InvalidType;",
          "",
          "    let _result = serializer.serialize_element(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(/* insert appropriate error here */));",
          "    assert!(serializer.elements.is_empty());"
        ],
        "code": [
          "{",
          "    struct InvalidType;",
          "",
          "    impl Serialize for InvalidType {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(/* insert appropriate error here */)",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTuple::</* define specific error type here */> {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let value = InvalidType;",
          "",
          "    let _result = serializer.serialize_element(&value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(/* insert appropriate error here */));",
          "    assert!(serializer.elements.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FailingSerializer;",
          "",
          "    impl Serialize for FailingSerializer {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(/* insert appropriate error here */)",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTuple::</* define specific error type here */> {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let value = FailingSerializer;",
          "",
          "    let _result = serializer.serialize_element(&value);",
          "}"
        ],
        "oracle": [
          "    let expected_error = /* define expected error here */;",
          "    assert_eq!(_result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    struct FailingSerializer;",
          "",
          "    impl Serialize for FailingSerializer {",
          "        fn serialize<S>(&self, _: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(/* insert appropriate error here */)",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTuple::</* define specific error type here */> {",
          "        elements: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    let value = FailingSerializer;",
          "",
          "    let _result = serializer.serialize_element(&value);",
          "    let expected_error = /* define expected error here */;",
          "    assert_eq!(_result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]