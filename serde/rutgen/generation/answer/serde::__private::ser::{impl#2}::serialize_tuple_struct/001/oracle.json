[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
          "            unimplemented!()",
          "        }",
          "",
          "        // Implement other required methods as no-ops...",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
          "            Err(Error)",
          "        }",
          "    }",
          "",
          "    let serializer = DummySerializer {};",
          "    let result = serializer.serialize_tuple_struct(\"example_struct\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
          "            unimplemented!()",
          "        }",
          "",
          "        // Implement other required methods as no-ops...",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
          "            Err(Error)",
          "        }",
          "    }",
          "",
          "    let serializer = DummySerializer {};",
          "    let result = serializer.serialize_tuple_struct(\"example_struct\", 0);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer;",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
          "            unimplemented!()",
          "        }",
          "",
          "        // Implement other required methods as no-ops...",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
          "            Err(Error)",
          "        }",
          "    }",
          "",
          "    let serializer = DummySerializer {};",
          "    let result = serializer.serialize_tuple_struct(\"example_struct\", 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct DummySerializer;",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
          "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
          "",
          "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
          "            unimplemented!()",
          "        }",
          "",
          "        // Implement other required methods as no-ops...",
          "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
          "            Err(Error)",
          "        }",
          "    }",
          "",
          "    let serializer = DummySerializer {};",
          "    let result = serializer.serialize_tuple_struct(\"example_struct\", 1);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]