[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySeq;",
          "    impl<'de> SeqAccess<'de> for EmptySeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error> ",
          "        where T: DeserializeSeed<'de> { ",
          "            Ok(None) ",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(EmptySeq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_seq(EmptySeq), Ok(()));"
        ],
        "code": [
          "{",
          "    struct EmptySeq;",
          "    impl<'de> SeqAccess<'de> for EmptySeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error> ",
          "        where T: DeserializeSeed<'de> { ",
          "            Ok(None) ",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(EmptySeq);",
          "    assert_eq!(visitor.visit_seq(EmptySeq), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementSeq;",
          "    impl<'de> SeqAccess<'de> for SingleElementSeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(SingleElementSeq);",
          "}"
        ],
        "oracle": [
          "    visitor.visit_seq(SingleElementSeq) == Ok(())"
        ],
        "code": [
          "{",
          "    struct SingleElementSeq;",
          "    impl<'de> SeqAccess<'de> for SingleElementSeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(SingleElementSeq);",
          "    visitor.visit_seq(SingleElementSeq) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultipleElementsSeq;",
          "    impl<'de> SeqAccess<'de> for MultipleElementsSeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(MultipleElementsSeq);",
          "}"
        ],
        "oracle": [
          "    visitor.visit_seq(MultipleElementsSeq) == Ok(())"
        ],
        "code": [
          "{",
          "    struct MultipleElementsSeq;",
          "    impl<'de> SeqAccess<'de> for MultipleElementsSeq {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(MultipleElementsSeq);",
          "    visitor.visit_seq(MultipleElementsSeq) == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LargeSequence;",
          "    impl<'de> SeqAccess<'de> for LargeSequence {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(LargeSequence);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_seq(LargeSequence), Ok(()));"
        ],
        "code": [
          "{",
          "    struct LargeSequence;",
          "    impl<'de> SeqAccess<'de> for LargeSequence {",
          "        type Error = ();",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where T: DeserializeSeed<'de> {",
          "            Ok(Some(_seed.deserialize(&mut serde::de::value::Deserializer::new())))",
          "        }",
          "    }",
          "    let visitor = InternallyTaggedUnitVisitor { type_name: \"Unit\", variant_name: \"Variant\" };",
          "    let _ = visitor.visit_seq(LargeSequence);",
          "    assert_eq!(visitor.visit_seq(LargeSequence), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]