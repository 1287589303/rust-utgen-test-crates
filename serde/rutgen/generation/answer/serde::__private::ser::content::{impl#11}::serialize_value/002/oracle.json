[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::Bool(true)),",
          "        error: PhantomData,",
          "    };",
          "    let value = true; // boolean value that implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_none());",
          "    assert!(map.serialize_value(&value).is_ok());",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Content::Bool(true));",
          "    assert_eq!(map.entries[0].1, Content::Bool(true));"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::Bool(true)),",
          "        error: PhantomData,",
          "    };",
          "    let value = true; // boolean value that implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_none());",
          "    assert!(map.serialize_value(&value).is_ok());",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Content::Bool(true));",
          "    assert_eq!(map.entries[0].1, Content::Bool(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::U8(100)),",
          "        error: PhantomData,",
          "    };",
          "    let value = 200u8; // u8 value that implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 0);",
          "    let expected_key = Content::U8(100);",
          "    let expected_value = tri!(value.serialize(ContentSerializer::<T>::new()));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, expected_key);",
          "    assert_eq!(map.entries[0].1, expected_value);",
          "    assert!(map.key.is_none());",
          "    assert!(map.entries.contains(&expected_entry));",
          "    assert!(matches!(_result, Ok(())));"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::U8(100)),",
          "        error: PhantomData,",
          "    };",
          "    let value = 200u8; // u8 value that implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    assert_eq!(map.entries.len(), 0);",
          "    let expected_key = Content::U8(100);",
          "    let expected_value = tri!(value.serialize(ContentSerializer::<T>::new()));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, expected_key);",
          "    assert_eq!(map.entries[0].1, expected_value);",
          "    assert!(map.key.is_none());",
          "    assert!(map.entries.contains(&expected_entry));",
          "    assert!(matches!(_result, Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value = \"value\"; // &str implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    let mut map = SerializeMap::<T> { entries: Vec::new(), key: Some(Content::String(\"key\".to_string())), error: PhantomData };",
          "    let value = \"value\";",
          "    let result = map.serialize_value(&value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Content::String(\"key\".to_string()));",
          "    assert_eq!(map.entries[0].1, tri!(value.serialize(ContentSerializer::<T>::new())));"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value = \"value\"; // &str implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    let mut map = SerializeMap::<T> { entries: Vec::new(), key: Some(Content::String(\"key\".to_string())), error: PhantomData };",
          "    let value = \"value\";",
          "    let result = map.serialize_value(&value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Content::String(\"key\".to_string()));",
          "    assert_eq!(map.entries[0].1, tri!(value.serialize(ContentSerializer::<T>::new())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"none_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value: Option<&str> = None; // None is valid",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_some());",
          "    assert!(matches!(_ , Ok(())));"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"none_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value: Option<&str> = None; // None is valid",
          "    let _ = map.serialize_value(&value);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_some());",
          "    assert!(matches!(_ , Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"empty_vec_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value: Vec<u8> = Vec::new(); // empty vector implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    map.entries.len() == 0",
          "    map.key.is_none()",
          "    assert_eq!(_ , Ok(()))"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"empty_vec_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value: Vec<u8> = Vec::new(); // empty vector implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    map.entries.len() == 0",
          "    map.key.is_none()",
          "    assert_eq!(_ , Ok(()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"unit_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value = (); // unit value implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_none());",
          "    assert!(matches!($_, Ok(())));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert!(matches!(map.entries[0].0, Content::String(ref k) if k == \"unit_key\"));",
          "    assert!(matches!(map.entries[0].1, Content::Unit));"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::String(\"unit_key\".to_string())),",
          "        error: PhantomData,",
          "    };",
          "    let value = (); // unit value implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.key.is_none());",
          "    assert!(matches!($_, Ok(())));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert!(matches!(map.entries[0].0, Content::String(ref k) if k == \"unit_key\"));",
          "    assert!(matches!(map.entries[0].1, Content::Unit));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::F64(3.14)),",
          "        error: PhantomData,",
          "    };",
          "    let value = 2.71; // f64 value implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 0);",
          "    map.serialize_value(&value).unwrap();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Some(Content::F64(3.14)));",
          "    assert!(map.entries[0].1.is_some());",
          "    assert_eq!(map.key, None);"
        ],
        "code": [
          "{",
          "    let mut map = SerializeMap::<T> {",
          "        entries: Vec::new(),",
          "        key: Some(Content::F64(3.14)),",
          "        error: PhantomData,",
          "    };",
          "    let value = 2.71; // f64 value implements Serialize",
          "    let _ = map.serialize_value(&value);",
          "    assert_eq!(map.entries.len(), 0);",
          "    map.serialize_value(&value).unwrap();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].0, Some(Content::F64(3.14)));",
          "    assert!(map.entries[0].1.is_some());",
          "    assert_eq!(map.key, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]