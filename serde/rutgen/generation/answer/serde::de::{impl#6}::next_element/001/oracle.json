[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySeqAccess;",
          "    impl<'de> SeqAccess<'de> for EmptySeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "    }",
          "    let mut seq_access = EmptySeqAccess;",
          "    let _ = seq_access.next_element::<T>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq_access.next_element::<T>(), Ok(None));"
        ],
        "code": [
          "{",
          "    struct EmptySeqAccess;",
          "    impl<'de> SeqAccess<'de> for EmptySeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "    }",
          "    let mut seq_access = EmptySeqAccess;",
          "    let _ = seq_access.next_element::<T>();",
          "    assert_eq!(seq_access.next_element::<T>(), Ok(None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementSeqAccess {",
          "        called: bool,",
          "    }",
          "    impl<'de> SeqAccess<'de> for SingleElementSeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            self.called = true;",
          "            Ok(Some(T::deserialize(&mut DeserializerMock)?))",
          "        }",
          "    }",
          "    let mut seq_access = SingleElementSeqAccess { called: false };",
          "    let _ = seq_access.next_element::<T>();",
          "    assert!(seq_access.called);",
          "}"
        ],
        "oracle": [
          "    assert!(seq_access.next_element::<T>().is_ok());",
          "    assert!(seq_access.called == true);",
          "    let result: Result<Option<T>, Error> = seq_access.next_element();",
          "    assert!(result.is_some());",
          "    assert_eq!(seq_access.called, true);",
          "    seq_access.called = false;",
          "    let _ = seq_access.next_element::<AnotherType>();",
          "    assert!(seq_access.called == true);",
          "    let empty_result: Result<Option<T>, Error> = seq_access.next_element();",
          "    assert!(empty_result.is_ok());",
          "    assert!(empty_result.unwrap().is_some());"
        ],
        "code": [
          "{",
          "    struct SingleElementSeqAccess {",
          "        called: bool,",
          "    }",
          "    impl<'de> SeqAccess<'de> for SingleElementSeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            self.called = true;",
          "            Ok(Some(T::deserialize(&mut DeserializerMock)?))",
          "        }",
          "    }",
          "    let mut seq_access = SingleElementSeqAccess { called: false };",
          "    let _ = seq_access.next_element::<T>();",
          "    assert!(seq_access.called);",
          "    assert!(seq_access.next_element::<T>().is_ok());",
          "    assert!(seq_access.called == true);",
          "    let result: Result<Option<T>, Error> = seq_access.next_element();",
          "    assert!(result.is_some());",
          "    assert_eq!(seq_access.called, true);",
          "    seq_access.called = false;",
          "    let _ = seq_access.next_element::<AnotherType>();",
          "    assert!(seq_access.called == true);",
          "    let empty_result: Result<Option<T>, Error> = seq_access.next_element();",
          "    assert!(empty_result.is_ok());",
          "    assert!(empty_result.unwrap().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorSeqAccess;",
          "    impl<'de> SeqAccess<'de> for ErrorSeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Err(Error {})",
          "        }",
          "    }",
          "    let mut seq_access = ErrorSeqAccess;",
          "    let result = seq_access.next_element::<T>();",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err().is_instance_of::<Error>());",
          "    assert!(result.is_err() && result.unwrap_err() == Error {});",
          "    assert!(matches!(result, Err(Error {})));"
        ],
        "code": [
          "{",
          "    struct ErrorSeqAccess;",
          "    impl<'de> SeqAccess<'de> for ErrorSeqAccess {",
          "        type Error = Error;",
          "        fn next_element_seed<T>(&mut self, _: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Err(Error {})",
          "        }",
          "    }",
          "    let mut seq_access = ErrorSeqAccess;",
          "    let result = seq_access.next_element::<T>();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err().is_instance_of::<Error>());",
          "    assert!(result.is_err() && result.unwrap_err() == Error {});",
          "    assert!(matches!(result, Err(Error {})));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]