[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"an empty map\")",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.value, Some(Content::Map(vec![])));",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    assert!(matches!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(_, _))));",
          "    assert!(matches!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))));",
          "    let value_seq = Some(Content::Seq(vec![]));",
          "    let deserializer_seq = VariantDeserializer { value: value_seq, err: PhantomData };",
          "    assert!(deserializer_seq.struct_variant(&[], TestVisitor).is_ok());",
          "    let unexpected_value = Some(Content::IUnknown);",
          "    let deserializer_unexpected = VariantDeserializer { value: unexpected_value, err: PhantomData };",
          "    assert!(matches!(deserializer_unexpected.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(unexpected_value.unexpected(), &\"struct variant\"))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"an empty map\")",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    assert_eq!(deserializer.value, Some(Content::Map(vec![])));",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    assert!(matches!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(_, _))));",
          "    assert!(matches!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))));",
          "    let value_seq = Some(Content::Seq(vec![]));",
          "    let deserializer_seq = VariantDeserializer { value: value_seq, err: PhantomData };",
          "    assert!(deserializer_seq.struct_variant(&[], TestVisitor).is_ok());",
          "    let unexpected_value = Some(Content::IUnknown);",
          "    let deserializer_unexpected = VariantDeserializer { value: unexpected_value, err: PhantomData };",
          "    assert!(matches!(deserializer_unexpected.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(unexpected_value.unexpected(), &\"struct variant\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a non-empty map\")",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![",
          "        (Content::String(\"key1\".to_string()), Content::U32(1)),",
          "        (Content::String(\"key2\".to_string()), Content::U32(2)),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_ok(), true);",
          "    ",
          "    let value = Some(Content::Seq(vec![",
          "    Content::U32(1),",
          "    Content::U32(2),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    let value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    let value = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    let value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a non-empty map\")",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Map(vec![",
          "        (Content::String(\"key1\".to_string()), Content::U32(1)),",
          "        (Content::String(\"key2\".to_string()), Content::U32(2)),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_ok(), true);",
          "    ",
          "    let value = Some(Content::Seq(vec![",
          "    Content::U32(1),",
          "    Content::U32(2),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    let value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    let value = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    let value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"an empty sequence\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_ok(), true);",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert_eq!(deserializer.value, Some(Content::Seq(vec![])));",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    assert!(matches!(deserializer.value, Some(Content::Map(_))));",
          "    assert!(matches!(deserializer.value, Some(other) if other.unexpected() == Unexpected::Seq));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"an empty sequence\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_ok(), true);",
          "    assert!(matches!(deserializer.value, Some(Content::Seq(_))));",
          "    assert_eq!(deserializer.value, Some(Content::Seq(vec![])));",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    assert!(matches!(deserializer.value, Some(Content::Map(_))));",
          "    assert!(matches!(deserializer.value, Some(other) if other.unexpected() == Unexpected::Seq));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a non-empty sequence\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::U32(1),",
          "        Content::U32(2),",
          "        Content::U32(3),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let value_seq = Some(Content::Seq(vec![Content::U32(1), Content::U32(2), Content::U32(3)]));",
          "    let deserializer_seq = VariantDeserializer { value: value_seq, err: PhantomData };",
          "    let result_seq = deserializer_seq.struct_variant(&[], TestVisitor);",
          "    assert!(result_seq.is_ok());",
          "    ",
          "    let value_map = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer_map = VariantDeserializer { value: value_map, err: PhantomData };",
          "    let result_map = deserializer_map.struct_variant(&[], TestVisitor);",
          "    assert!(result_map.is_ok());",
          "    ",
          "    let value_other = Some(Content::F32(3.14));",
          "    let deserializer_other = VariantDeserializer { value: value_other, err: PhantomData };",
          "    let result_other = deserializer_other.struct_variant(&[], TestVisitor);",
          "    assert!(result_other.is_err());",
          "    ",
          "    let value_none = None;",
          "    let deserializer_none = VariantDeserializer { value: value_none, err: PhantomData };",
          "    let result_none = deserializer_none.struct_variant(&[], TestVisitor);",
          "    assert!(result_none.is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"a non-empty sequence\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::Seq(vec![",
          "        Content::U32(1),",
          "        Content::U32(2),",
          "        Content::U32(3),",
          "    ]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    let value_seq = Some(Content::Seq(vec![Content::U32(1), Content::U32(2), Content::U32(3)]));",
          "    let deserializer_seq = VariantDeserializer { value: value_seq, err: PhantomData };",
          "    let result_seq = deserializer_seq.struct_variant(&[], TestVisitor);",
          "    assert!(result_seq.is_ok());",
          "    ",
          "    let value_map = Some(Content::Map(vec![(Content::String(\"key\".to_string()), Content::U32(1))]));",
          "    let deserializer_map = VariantDeserializer { value: value_map, err: PhantomData };",
          "    let result_map = deserializer_map.struct_variant(&[], TestVisitor);",
          "    assert!(result_map.is_ok());",
          "    ",
          "    let value_other = Some(Content::F32(3.14));",
          "    let deserializer_other = VariantDeserializer { value: value_other, err: PhantomData };",
          "    let result_other = deserializer_other.struct_variant(&[], TestVisitor);",
          "    assert!(result_other.is_err());",
          "    ",
          "    let value_none = None;",
          "    let deserializer_none = VariantDeserializer { value: value_none, err: PhantomData };",
          "    let result_none = deserializer_none.struct_variant(&[], TestVisitor);",
          "    assert!(result_none.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"unexpected content\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::I32(42));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::Signed(42), &\"struct variant\")));",
          "    let value = Some(Content::Seq(vec![Content::I32(1), Content::I32(2)]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Ok(()));",
          "    let value = Some(Content::Map(vec![(Content::Str(\"key\".to_string()), Content::I32(42))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Ok(()));",
          "    let value = Some(Content::None);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
          "    let value = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"unexpected content\")",
          "        }",
          "        fn visit_seq<S>(self, _seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: de::SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "        fn visit_map<M>(self, _map: M) -> Result<Self::Value, M::Error>",
          "        where",
          "            M: de::MapAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Some(Content::I32(42));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::Signed(42), &\"struct variant\")));",
          "    let value = Some(Content::Seq(vec![Content::I32(1), Content::I32(2)]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Ok(()));",
          "    let value = Some(Content::Map(vec![(Content::Str(\"key\".to_string()), Content::I32(42))]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Ok(()));",
          "    let value = Some(Content::None);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
          "    let value = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"none\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value: Option<Content> = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_err(), true);",
          "    ",
          "    value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    value = Some(Content::Seq(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    value = Some(Content::String(String::from(\"test\")));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    value = Some(Content::Unit);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"none\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value: Option<Content> = None;",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    let _ = deserializer.struct_variant(&[], TestVisitor);",
          "    assert_eq!(deserializer.struct_variant(&[], TestVisitor).is_err(), true);",
          "    ",
          "    value = Some(Content::Map(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    value = Some(Content::Seq(vec![]));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_ok());",
          "    ",
          "    value = Some(Content::Bool(true));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    value = Some(Content::String(String::from(\"test\")));",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "    ",
          "    value = Some(Content::Unit);",
          "    let deserializer = VariantDeserializer { value, err: PhantomData };",
          "    assert!(deserializer.struct_variant(&[], TestVisitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]