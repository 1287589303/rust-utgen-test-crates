[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_zero_length\";",
          "    let len = 0;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_zero_length\";",
          "    let len = 0;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_positive_length\";",
          "    let len = 5;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "    assert!(result.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_positive_length\";",
          "    let len = 5;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "    assert!(result.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_zero_length_integer_map\";",
          "    let len = 0;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), 0);"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_zero_length_integer_map\";",
          "    let len = 0;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_positive_length_integer_map\";",
          "    let len = 3;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    let expected_map = DummyMap;",
          "    let expected_name: &'static str = \"test_positive_length_integer_map\";",
          "    let expected_len: usize = 3;",
          "    assert_eq!(result.map, expected_map);",
          "    assert_eq!(result.name, expected_name);",
          "    assert_eq!(result.fields.capacity(), expected_len);",
          "    assert!(result.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_positive_length_integer_map\";",
          "    let len = 3;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    let expected_map = DummyMap;",
          "    let expected_name: &'static str = \"test_positive_length_integer_map\";",
          "    let expected_len: usize = 3;",
          "    assert_eq!(result.map, expected_map);",
          "    assert_eq!(result.name, expected_name);",
          "    assert_eq!(result.fields.capacity(), expected_len);",
          "    assert!(result.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_complex_map\";",
          "    let len = 10;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    let map = DummyMap;",
          "    let name = \"test_complex_map\";",
          "    let len = 10;",
          "    let expected_fields_length = len;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), expected_fields_length);",
          "    assert_eq!(std::mem::size_of_val(&result.map), std::mem::size_of::<DummyMap>());"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    let map = DummyMap;",
          "    let name = \"test_complex_map\";",
          "    let len = 10;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    let map = DummyMap;",
          "    let name = \"test_complex_map\";",
          "    let len = 10;",
          "    let expected_fields_length = len;",
          "    let result = SerializeTupleVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), expected_fields_length);",
          "    assert_eq!(std::mem::size_of_val(&result.map), std::mem::size_of::<DummyMap>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]