[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(-1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(-1.0);",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.23), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.23), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(0.0);",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.23), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.23), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(1.0);",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(f64::NAN), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::MIN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::MIN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::MIN);",
          "    assert_eq!(visitor.visit_f64(std::f64::MIN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::MAX);",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-3.14), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::INFINITY);",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(3.14), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-3.14), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(-std::f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(-std::f64::INFINITY);",
          "    assert_eq!(visitor.visit_f64(-std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    let visitor = IgnoredAny;",
          "    let _ = visitor.visit_f64(std::f64::NAN);",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(0.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(-1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(1.0), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY), Ok(IgnoredAny));",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]