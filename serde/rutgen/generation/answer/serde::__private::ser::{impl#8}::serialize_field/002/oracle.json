[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = true;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Bool(true));",
          "    assert!(serializer.fields.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = true;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Bool(true));",
          "    assert!(serializer.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 255u8;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::U8(255));",
          "    assert!(serializer.end().is_ok());"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 255u8;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::U8(255));",
          "    assert!(serializer.end().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = -32768i16;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.fields.len() == 1",
          "    serializer.fields[0] == Content::I16(-32768)",
          "    map.len() == 1",
          "    map[0] == Content::Seq(vec![Content::I16(-32768)])"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = -32768i16;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    serializer.fields.len() == 1",
          "    serializer.fields[0] == Content::I16(-32768)",
          "    map.len() == 1",
          "    map[0] == Content::Seq(vec![Content::I16(-32768)])",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 3.14f32;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::F32(3.14));",
          "    assert!(serializer.end().is_ok());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Seq(vec![Content::F32(3.14)]));"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 3.14f32;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::F32(3.14));",
          "    assert!(serializer.end().is_ok());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Seq(vec![Content::F32(3.14)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 'a';",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue { map: &mut map, fields: Vec::new() };",
          "    let value = 'a';",
          "    let result = serializer.serialize_field(&value);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(!serializer.fields.is_empty());",
          "    assert_eq!(serializer.fields[0], Content::Char('a'));"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 'a';",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue { map: &mut map, fields: Vec::new() };",
          "    let value = 'a';",
          "    let result = serializer.serialize_field(&value);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(!serializer.fields.is_empty());",
          "    assert_eq!(serializer.fields[0], Content::Char('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = String::from(\"hello\");",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.fields.len() == 1);",
          "    assert_eq!(serializer.fields[0], Content::String(String::from(\"hello\")));",
          "    assert!(serializer.map.is_empty());",
          "    assert!(serializer.end().is_ok());"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = String::from(\"hello\");",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert!(serializer.fields.len() == 1);",
          "    assert_eq!(serializer.fields[0], Content::String(String::from(\"hello\")));",
          "    assert!(serializer.map.is_empty());",
          "    assert!(serializer.end().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = vec![1u8, 2, 3];",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.fields.len() == 1);",
          "    assert_eq!(serializer.fields[0], Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(serializer.map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = vec![1u8, 2, 3];",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert!(serializer.fields.len() == 1);",
          "    assert_eq!(serializer.fields[0], Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(serializer.map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value: Option<i32> = None;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::None);",
          "    assert!(serializer.end().is_ok());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Seq(vec![Content::None]));"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value: Option<i32> = None;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::None);",
          "    assert!(serializer.end().is_ok());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[0], Content::Seq(vec![Content::None]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = ();",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::Unit));",
          "    assert_eq!(serializer.map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = ();",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::Unit));",
          "    assert_eq!(serializer.map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = Content::Some(Box::new(Content::U32(100)));",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue { map: &mut map, fields: Vec::new() };",
          "    let value = Content::Some(Box::new(Content::U32(100)));",
          "    let result = serializer.serialize_field(&value);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::Some(Box::new(Content::U32(100))));"
        ],
        "code": [
          "{",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue {",
          "        map: &mut map,",
          "        fields: Vec::new(),",
          "    };",
          "    let value = Content::Some(Box::new(Content::U32(100)));",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    let mut map: Vec<Content> = Vec::new();",
          "    let mut serializer = FlatMapSerializeTupleVariantAsMapValue { map: &mut map, fields: Vec::new() };",
          "    let value = Content::Some(Box::new(Content::U32(100)));",
          "    let result = serializer.serialize_field(&value);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], Content::Some(Box::new(Content::U32(100))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]