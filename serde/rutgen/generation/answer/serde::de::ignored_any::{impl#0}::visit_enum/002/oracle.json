[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidEnumAccess;",
          "    impl<'de> EnumAccess<'de> for ValidEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(ValidEnumAccess);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_enum(ValidEnumAccess).is_ok(), true);",
          "    assert_eq!(IgnoredAny.visit_enum(ValidEnumAccess), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    struct ValidEnumAccess;",
          "    impl<'de> EnumAccess<'de> for ValidEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(ValidEnumAccess);",
          "    assert_eq!(IgnoredAny.visit_enum(ValidEnumAccess).is_ok(), true);",
          "    assert_eq!(IgnoredAny.visit_enum(ValidEnumAccess), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidEnumAccess;",
          "    impl<'de> EnumAccess<'de> for InvalidEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Err(())",
          "        }",
          "    }",
          "    ",
          "    let result = IgnoredAny.visit_enum(InvalidEnumAccess);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    let invalid_enum_access = InvalidEnumAccess;",
          "    let result = IgnoredAny.visit_enum(invalid_enum_access);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is::<()>());",
          "    assert_eq!(result.unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    struct InvalidEnumAccess;",
          "    impl<'de> EnumAccess<'de> for InvalidEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Err(())",
          "        }",
          "    }",
          "    ",
          "    let result = IgnoredAny.visit_enum(InvalidEnumAccess);",
          "    let _ = result.unwrap_err();",
          "    let invalid_enum_access = InvalidEnumAccess;",
          "    let result = IgnoredAny.visit_enum(invalid_enum_access);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is::<()>());",
          "    assert_eq!(result.unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyEnumAccess;",
          "    impl<'de> EnumAccess<'de> for EmptyEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(EmptyEnumAccess);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).is_ok(), true);",
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).unwrap(), IgnoredAny);",
          "    assert!(matches!(IgnoredAny.visit_enum(EmptyEnumAccess), Ok(_)));",
          "    assert!(IgnoredAny.visit_enum(EmptyEnumAccess).map_or(false, |v| v == IgnoredAny));",
          "    assert!(IgnoredAny.visit_enum(EmptyEnumAccess).is_ok());",
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).unwrap_err(), ());"
        ],
        "code": [
          "{",
          "    struct EmptyEnumAccess;",
          "    impl<'de> EnumAccess<'de> for EmptyEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(EmptyEnumAccess);",
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).is_ok(), true);",
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).unwrap(), IgnoredAny);",
          "    assert!(matches!(IgnoredAny.visit_enum(EmptyEnumAccess), Ok(_)));",
          "    assert!(IgnoredAny.visit_enum(EmptyEnumAccess).map_or(false, |v| v == IgnoredAny));",
          "    assert!(IgnoredAny.visit_enum(EmptyEnumAccess).is_ok());",
          "    assert_eq!(IgnoredAny.visit_enum(EmptyEnumAccess).unwrap_err(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ComplexEnumAccess;",
          "    impl<'de> EnumAccess<'de> for ComplexEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(ComplexEnumAccess);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_enum(ComplexEnumAccess), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    struct ComplexEnumAccess;",
          "    impl<'de> EnumAccess<'de> for ComplexEnumAccess {",
          "        type Error = ();",
          "",
          "        fn variant<V>(self) -> Result<(V, Self), Self::Error> ",
          "        where ",
          "            V: Visitor<'de>, ",
          "        {",
          "            Ok((IgnoredAny, self))",
          "        }",
          "    }",
          "    ",
          "    let _ = IgnoredAny.visit_enum(ComplexEnumAccess);",
          "    assert_eq!(IgnoredAny.visit_enum(ComplexEnumAccess), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]