[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"TestStruct\";",
          "    let fields: Vec<Content> = vec![",
          "        Content::Bool(true),",
          "        Content::U8(255),",
          "        Content::String(\"Hello\".to_string()),",
          "    ];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let result_content = _result.unwrap();",
          "    assert_eq!(result_content, Content::TupleStruct(\"TestStruct\", vec![",
          "    Content::Bool(true),",
          "    Content::U8(255),",
          "    Content::String(\"Hello\".to_string()),",
          "    ]));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"TestStruct\";",
          "    let fields: Vec<Content> = vec![",
          "        Content::Bool(true),",
          "        Content::U8(255),",
          "        Content::String(\"Hello\".to_string()),",
          "    ];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "    assert!(_result.is_ok());",
          "    let result_content = _result.unwrap();",
          "    assert_eq!(result_content, Content::TupleStruct(\"TestStruct\", vec![",
          "    Content::Bool(true),",
          "    Content::U8(255),",
          "    Content::String(\"Hello\".to_string()),",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"SingleFieldStruct\";",
          "    let fields: Vec<Content> = vec![Content::I32(42)];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), Content::TupleStruct(\"SingleFieldStruct\", vec![Content::I32(42)]));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"SingleFieldStruct\";",
          "    let fields: Vec<Content> = vec![Content::I32(42)];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), Content::TupleStruct(\"SingleFieldStruct\", vec![Content::I32(42)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"VariedFieldsStruct\";",
          "    let fields: Vec<Content> = vec![",
          "        Content::F64(3.14),",
          "        Content::Char('a'),",
          "        Content::ByteBuf(vec![1, 2, 3]),",
          "    ];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let content = _result.unwrap();",
          "    assert_eq!(content, Content::TupleStruct(\"VariedFieldsStruct\", vec![",
          "    Content::F64(3.14),",
          "    Content::Char('a'),",
          "    Content::ByteBuf(vec![1, 2, 3]),",
          "    ]));"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    impl ser::Error for DummyError {}",
          "",
          "    let name: &'static str = \"VariedFieldsStruct\";",
          "    let fields: Vec<Content> = vec![",
          "        Content::F64(3.14),",
          "        Content::Char('a'),",
          "        Content::ByteBuf(vec![1, 2, 3]),",
          "    ];",
          "",
          "    let serializer = SerializeTupleStruct {",
          "        name,",
          "        fields,",
          "        error: PhantomData::<DummyError>,",
          "    };",
          "",
          "    let _result = serializer.end();",
          "    assert!(_result.is_ok());",
          "    let content = _result.unwrap();",
          "    assert_eq!(content, Content::TupleStruct(\"VariedFieldsStruct\", vec![",
          "    Content::F64(3.14),",
          "    Content::Char('a'),",
          "    Content::ByteBuf(vec![1, 2, 3]),",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]