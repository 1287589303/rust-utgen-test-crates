[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(i16::MIN);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_integer(visitor).unwrap(), i16::MIN);",
          "    assert!(matches!(deserializer.content, Content::I16(_)));"
        ],
        "code": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(i16::MIN);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "    assert_eq!(deserializer.deserialize_integer(visitor).unwrap(), i16::MIN);",
          "    assert!(matches!(deserializer.content, Content::I16(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(i16::MAX);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MAX));",
          "    assert!(matches!(deserializer.deserialize_integer(visitor), Ok(_)));",
          "    assert!(deserializer.content.matches(Content::I16(i16::MAX)));",
          "    assert!(deserializer.deserialize_integer(visitor).is_ok());",
          "    assert!(deserializer.deserialize_integer(visitor).map(|v| v == i16::MAX).unwrap_or(false));"
        ],
        "code": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(i16::MAX);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MAX));",
          "    assert!(matches!(deserializer.deserialize_integer(visitor), Ok(_)));",
          "    assert!(deserializer.content.matches(Content::I16(i16::MAX)));",
          "    assert!(deserializer.deserialize_integer(visitor).is_ok());",
          "    assert!(deserializer.deserialize_integer(visitor).map(|v| v == i16::MAX).unwrap_or(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(0);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(0));",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(0));",
          "    let content = Content::I16(i16::MAX);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MAX));",
          "    let content = Content::I16(i16::MIN);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MIN));",
          "    let content = Content::I32(0);",
          "    assert!(deserializer.deserialize_integer(visitor).is_err());",
          "    let content = Content::I8(0);",
          "    assert!(deserializer.deserialize_integer(visitor).is_err());"
        ],
        "code": [
          "{",
          "    struct Visitor;",
          "    ",
          "    impl<'de> Visitor<'de> for Visitor {",
          "        type Value = i16;",
          "        ",
          "        fn visit_i16(self, value: i16) -> Result<Self::Value, ()> {",
          "            Ok(value)",
          "        }",
          "        ",
          "        fn invalid_type(self, _: &dyn Expected) -> () {",
          "            panic!(\"Invalid type\");",
          "        }",
          "    }",
          "    ",
          "    let content = Content::I16(0);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = Visitor;",
          "    ",
          "    let _ = deserializer.deserialize_integer(visitor);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(0));",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(0));",
          "    let content = Content::I16(i16::MAX);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MAX));",
          "    let content = Content::I16(i16::MIN);",
          "    assert_eq!(deserializer.deserialize_integer(visitor), Ok(i16::MIN));",
          "    let content = Content::I32(0);",
          "    assert!(deserializer.deserialize_integer(visitor).is_err());",
          "    let content = Content::I8(0);",
          "    assert!(deserializer.deserialize_integer(visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]