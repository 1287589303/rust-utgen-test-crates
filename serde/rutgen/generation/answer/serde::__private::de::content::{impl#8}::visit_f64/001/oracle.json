[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(-1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(-1.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(-1.0).err().unwrap(), Error::invalid_type(Unexpected::Float(-1.0), _)));",
          "    assert_eq!(visitor.visit_f64(0.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(0.0).err().unwrap(), Error::invalid_type(Unexpected::Float(0.0), _)));",
          "    assert_eq!(visitor.visit_f64(1.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(1.0).err().unwrap(), Error::invalid_type(Unexpected::Float(1.0), _)));",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(f64::NAN).err().unwrap(), Error::invalid_type(Unexpected::Float(f64::NAN), _)));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(f64::INFINITY).err().unwrap(), Error::invalid_type(Unexpected::Float(f64::INFINITY), _)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(-1.0);",
          "    assert_eq!(visitor.visit_f64(-1.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(-1.0).err().unwrap(), Error::invalid_type(Unexpected::Float(-1.0), _)));",
          "    assert_eq!(visitor.visit_f64(0.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(0.0).err().unwrap(), Error::invalid_type(Unexpected::Float(0.0), _)));",
          "    assert_eq!(visitor.visit_f64(1.0).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(1.0).err().unwrap(), Error::invalid_type(Unexpected::Float(1.0), _)));",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(f64::NAN).err().unwrap(), Error::invalid_type(Unexpected::Float(f64::NAN), _)));",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);",
          "    assert!(matches!(visitor.visit_f64(f64::INFINITY).err().unwrap(), Error::invalid_type(Unexpected::Float(f64::INFINITY), _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(0.0);",
          "}"
        ],
        "oracle": [
          "    let result = visitor.visit_f64(0.0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(0.0), &visitor));",
          "    let result = visitor.visit_f64(1.2345);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(1.2345), &visitor));",
          "    let result = visitor.visit_f64(-4.5678);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(-4.5678), &visitor));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(0.0);",
          "    let result = visitor.visit_f64(0.0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(0.0), &visitor));",
          "    let result = visitor.visit_f64(1.2345);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(1.2345), &visitor));",
          "    let result = visitor.visit_f64(-4.5678);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidType(Unexpected::Float(-4.5678), &visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(1.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-1.0).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(1.0);",
          "    assert_eq!(visitor.visit_f64(1.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-1.0).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::MIN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::MIN).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).unwrap(), TagOrContent::Content(Content::F64(0.0)));",
          "    assert_eq!(visitor.visit_f64(-1.0).unwrap(), TagOrContent::Content(Content::F64(-1.0)));",
          "    assert_eq!(visitor.visit_f64(1.0).unwrap(), TagOrContent::Content(Content::F64(1.0)));",
          "    assert!(visitor.visit_f64(std::f64::NAN).is_err());",
          "    assert!(visitor.visit_f64(std::f64::INFINITY).is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::MIN);",
          "    assert_eq!(visitor.visit_f64(std::f64::MIN).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).unwrap(), TagOrContent::Content(Content::F64(0.0)));",
          "    assert_eq!(visitor.visit_f64(-1.0).unwrap(), TagOrContent::Content(Content::F64(-1.0)));",
          "    assert_eq!(visitor.visit_f64(1.0).unwrap(), TagOrContent::Content(Content::F64(1.0)));",
          "    assert!(visitor.visit_f64(std::f64::NAN).is_err());",
          "    assert!(visitor.visit_f64(std::f64::INFINITY).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::MAX).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(-std::f64::MAX).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::MAX);",
          "    assert_eq!(visitor.visit_f64(std::f64::MAX).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(-std::f64::MAX).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(f64::INFINITY).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(1.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-1.0).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::NAN);",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(1.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-1.0).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(visitor.visit_f64(std::f64::INFINITY).is_err());",
          "    assert!(visitor.visit_f64(-std::f64::INFINITY).is_err());",
          "    assert!(visitor.visit_f64(std::f64::NAN).is_err());",
          "    assert!(visitor.visit_f64(0.0).is_ok());",
          "    assert!(visitor.visit_f64(1.0).is_ok());",
          "    assert!(visitor.visit_f64(-1.0).is_ok());",
          "    assert!(visitor.visit_f64(12345.6789).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::INFINITY);",
          "    assert!(visitor.visit_f64(std::f64::INFINITY).is_err());",
          "    assert!(visitor.visit_f64(-std::f64::INFINITY).is_err());",
          "    assert!(visitor.visit_f64(std::f64::NAN).is_err());",
          "    assert!(visitor.visit_f64(0.0).is_ok());",
          "    assert!(visitor.visit_f64(1.0).is_ok());",
          "    assert!(visitor.visit_f64(-1.0).is_ok());",
          "    assert!(visitor.visit_f64(12345.6789).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-0.0).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_f64(std::f64::NEG_INFINITY);",
          "    assert_eq!(visitor.visit_f64(std::f64::NEG_INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::INFINITY).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(std::f64::NAN).is_err(), true);",
          "    assert_eq!(visitor.visit_f64(0.0).is_ok(), true);",
          "    assert_eq!(visitor.visit_f64(-0.0).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]