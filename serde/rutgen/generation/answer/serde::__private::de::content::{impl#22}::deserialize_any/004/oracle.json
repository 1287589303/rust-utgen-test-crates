[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_unit(self) -> Result<Self::Value, serde::de::Error> {",
          "            Ok(())",
          "        }",
          "",
          "        // Other visitor methods are not needed for this test",
          "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected bool\"))",
          "        }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u8\"))",
          "        }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u16\"))",
          "        }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u32\"))",
          "        }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u64\"))",
          "        }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i8\"))",
          "        }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i16\"))",
          "        }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i32\"))",
          "        }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i64\"))",
          "        }",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected f32\"))",
          "        }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected f64\"))",
          "        }",
          "        fn visit_char(self, _: char) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected char\"))",
          "        }",
          "        fn visit_str(self, _: &str) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected &str\"))",
          "        }",
          "        fn visit_borrowed_str(self, _: &'de str) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected borrowed str\"))",
          "        }",
          "        fn visit_bytes(self, _: &[u8]) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected bytes\"))",
          "        }",
          "        fn visit_borrowed_bytes(self, _: &'de [u8]) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected borrowed bytes\"))",
          "        }",
          "        fn visit_none(self) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected none\"))",
          "        }",
          "        fn visit_some<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: Deserialize<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected some\"))",
          "        }",
          "        fn visit_newtype_struct<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: Deserialize<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected newtype struct\"))",
          "        }",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: SeqAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected sequence\"))",
          "        }",
          "        fn visit_map<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected map\"))",
          "        }",
          "    }",
          "",
          "    let content = Content::Unit;",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    let _ = deserializer.deserialize_any(TestVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_any(TestVisitor), Ok(()));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Ok(())));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected bool\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u8\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u16\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i8\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i16\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected f32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected f64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected char\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected &str\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected borrowed str\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected bytes\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected borrowed bytes\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected none\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected some\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected newtype struct\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected sequence\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected map\"))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_unit(self) -> Result<Self::Value, serde::de::Error> {",
          "            Ok(())",
          "        }",
          "",
          "        // Other visitor methods are not needed for this test",
          "        fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected bool\"))",
          "        }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u8\"))",
          "        }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u16\"))",
          "        }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u32\"))",
          "        }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected u64\"))",
          "        }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i8\"))",
          "        }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i16\"))",
          "        }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i32\"))",
          "        }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected i64\"))",
          "        }",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected f32\"))",
          "        }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected f64\"))",
          "        }",
          "        fn visit_char(self, _: char) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected char\"))",
          "        }",
          "        fn visit_str(self, _: &str) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected &str\"))",
          "        }",
          "        fn visit_borrowed_str(self, _: &'de str) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected borrowed str\"))",
          "        }",
          "        fn visit_bytes(self, _: &[u8]) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected bytes\"))",
          "        }",
          "        fn visit_borrowed_bytes(self, _: &'de [u8]) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected borrowed bytes\"))",
          "        }",
          "        fn visit_none(self) -> Result<Self::Value, serde::de::Error> {",
          "            Err(serde::de::Error::custom(\"Unexpected none\"))",
          "        }",
          "        fn visit_some<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: Deserialize<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected some\"))",
          "        }",
          "        fn visit_newtype_struct<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: Deserialize<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected newtype struct\"))",
          "        }",
          "        fn visit_seq<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: SeqAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected sequence\"))",
          "        }",
          "        fn visit_map<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            V: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"Unexpected map\"))",
          "        }",
          "    }",
          "",
          "    let content = Content::Unit;",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    let _ = deserializer.deserialize_any(TestVisitor);",
          "    assert_eq!(deserializer.deserialize_any(TestVisitor), Ok(()));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(_)));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Ok(())));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected bool\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u8\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u16\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected u64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i8\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i16\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected i64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected f32\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected f64\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected char\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected &str\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected borrowed str\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected bytes\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected borrowed bytes\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected none\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected some\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected newtype struct\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected sequence\"))));",
          "    assert!(matches!(deserializer.deserialize_any(TestVisitor), Err(serde::de::Error::custom(\"Unexpected map\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]