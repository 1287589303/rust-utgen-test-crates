[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl Error for TestError {",
          "        fn custom<T>(_: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct EmptySeed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for EmptySeed {",
          "        type Value = ();",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map_access = FlatMapAccess {",
          "        iter: &mut [].iter(),",
          "        pending_content: None,",
          "        _marker: PhantomData::<TestError>,",
          "    };",
          "    let seed = EmptySeed;",
          "",
          "    let _result = map_access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(TestError));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl Error for TestError {",
          "        fn custom<T>(_: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct EmptySeed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for EmptySeed {",
          "        type Value = ();",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map_access = FlatMapAccess {",
          "        iter: &mut [].iter(),",
          "        pending_content: None,",
          "        _marker: PhantomData::<TestError>,",
          "    };",
          "    let seed = EmptySeed;",
          "",
          "    let _result = map_access.next_value_seed(seed);",
          "    assert_eq!(_result, Err(TestError));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl Error for TestError {",
          "        fn custom<T>(_: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct AlwaysEmptySeed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for AlwaysEmptySeed {",
          "        type Value = ();",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let iter: &[Option<(Content, Content)>] = &[];",
          "    let mut map_access = FlatMapAccess {",
          "        iter: iter.iter(),",
          "        pending_content: None,",
          "        _marker: PhantomData::<TestError>,",
          "    };",
          "",
          "    let seed = AlwaysEmptySeed;",
          "",
          "    let _result = map_access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    map_access.pending_content = None;",
          "    let result = map_access.next_value_seed(seed);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TestError::custom(\"value is missing\")));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl Error for TestError {",
          "        fn custom<T>(_: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct AlwaysEmptySeed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for AlwaysEmptySeed {",
          "        type Value = ();",
          "        fn deserialize<T>(self, _: T) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let iter: &[Option<(Content, Content)>] = &[];",
          "    let mut map_access = FlatMapAccess {",
          "        iter: iter.iter(),",
          "        pending_content: None,",
          "        _marker: PhantomData::<TestError>,",
          "    };",
          "",
          "    let seed = AlwaysEmptySeed;",
          "",
          "    let _result = map_access.next_value_seed(seed);",
          "    map_access.pending_content = None;",
          "    let result = map_access.next_value_seed(seed);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TestError::custom(\"value is missing\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]