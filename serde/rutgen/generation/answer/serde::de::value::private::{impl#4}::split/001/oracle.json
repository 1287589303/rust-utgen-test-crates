[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IntTuple(i32, i32);",
          "    let tuple = IntTuple(1, 1);",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 1));"
        ],
        "code": [
          "{",
          "    struct IntTuple(i32, i32);",
          "    let tuple = IntTuple(1, 1);",
          "    let result = tuple.split();",
          "    assert_eq!(result, (1, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroTuple(i32, i32);",
          "    let tuple = ZeroTuple(0, 0);",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    let tuple = ZeroTuple(0, 0);",
          "    let result = tuple.split();",
          "    assert_eq!(result, (0, 0));"
        ],
        "code": [
          "{",
          "    struct ZeroTuple(i32, i32);",
          "    let tuple = ZeroTuple(0, 0);",
          "    let result = tuple.split();",
          "    let tuple = ZeroTuple(0, 0);",
          "    let result = tuple.split();",
          "    assert_eq!(result, (0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinMaxTuple(i32, i32);",
          "    let tuple = MinMaxTuple(i32::MIN, i32::MAX);",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (i32::MIN, i32::MAX));"
        ],
        "code": [
          "{",
          "    struct MinMaxTuple(i32, i32);",
          "    let tuple = MinMaxTuple(i32::MIN, i32::MAX);",
          "    let result = tuple.split();",
          "    assert_eq!(result, (i32::MIN, i32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinMaxFTuple(f32, f32);",
          "    let tuple = MinMaxFTuple(f32::MIN, f32::MAX);",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, f32::MIN);",
          "    assert_eq!(result.1, f32::MAX);"
        ],
        "code": [
          "{",
          "    struct MinMaxFTuple(f32, f32);",
          "    let tuple = MinMaxFTuple(f32::MIN, f32::MAX);",
          "    let result = tuple.split();",
          "    assert_eq!(result.0, f32::MIN);",
          "    assert_eq!(result.1, f32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CharTuple(char, char);",
          "    let tuple = CharTuple(char::from(0), char::from(255));",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, char::from(0));",
          "    assert_eq!(result.1, char::from(255));"
        ],
        "code": [
          "{",
          "    struct CharTuple(char, char);",
          "    let tuple = CharTuple(char::from(0), char::from(255));",
          "    let result = tuple.split();",
          "    assert_eq!(result.0, char::from(0));",
          "    assert_eq!(result.1, char::from(255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StringTuple(String, String);",
          "    let tuple = StringTuple(String::from(\"first\"), String::from(\"second\"));",
          "    let result = tuple.split();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, String::from(\"first\"));",
          "    assert_eq!(result.1, String::from(\"second\"));",
          "    assert_eq!(result, (\"first\".to_string(), \"second\".to_string()));"
        ],
        "code": [
          "{",
          "    struct StringTuple(String, String);",
          "    let tuple = StringTuple(String::from(\"first\"), String::from(\"second\"));",
          "    let result = tuple.split();",
          "    assert_eq!(result.0, String::from(\"first\"));",
          "    assert_eq!(result.1, String::from(\"second\"));",
          "    assert_eq!(result, (\"first\".to_string(), \"second\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]