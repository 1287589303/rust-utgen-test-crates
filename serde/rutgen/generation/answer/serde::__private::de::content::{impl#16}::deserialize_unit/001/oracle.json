[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(self.invalid_type(&IgnoredVisitor)));"
        ],
        "code": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(self.invalid_type(&IgnoredVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    deserializer.deserialize_unit(IgnoredVisitor).expect_err(\"Expected an error due to invalid type.\");"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    deserializer.deserialize_unit(IgnoredVisitor).expect_err(\"Expected an error due to invalid type.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Tuple(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));"
        ],
        "code": [
          "{",
          "    let content = Content::Tuple(vec![Content::U8(1), Content::U8(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor), Err(deserializer.invalid_type(&IgnoredVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Some(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Some(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert!(deserializer.deserialize_unit(IgnoredVisitor).is_err());"
        ],
        "code": [
          "{",
          "    let content = Content::Some(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    let content = Content::Some(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert!(deserializer.deserialize_unit(IgnoredVisitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.deserialize_unit(IgnoredVisitor).is_err());",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor).unwrap_err(), deserializer.invalid_type(&IgnoredVisitor));"
        ],
        "code": [
          "{",
          "    let content = Content::Newtype(Box::new(Content::U8(1)));",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    deserializer.deserialize_unit(IgnoredVisitor);",
          "    assert!(deserializer.deserialize_unit(IgnoredVisitor).is_err());",
          "    assert_eq!(deserializer.deserialize_unit(IgnoredVisitor).unwrap_err(), deserializer.invalid_type(&IgnoredVisitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]