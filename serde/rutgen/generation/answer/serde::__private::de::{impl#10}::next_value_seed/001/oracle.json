[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = BoolSeed;",
          "    let _ = access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Bool(true);",
          "    let mut access = FlatStructAccess { iter: &mut [].iter_mut(), pending_content: Some(content), fields: &[], _marker: PhantomData };",
          "    let seed = BoolSeed;",
          "    let result = access.next_value_seed(seed);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), true);"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = BoolSeed;",
          "    let _ = access.next_value_seed(seed);",
          "    let content = Content::Bool(true);",
          "    let mut access = FlatStructAccess { iter: &mut [].iter_mut(), pending_content: Some(content), fields: &[], _marker: PhantomData };",
          "    let seed = BoolSeed;",
          "    let result = access.next_value_seed(seed);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U8(255);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = U8Seed;",
          "    let _ = access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(access.pending_content, None));",
          "    assert_eq!(access.next_value_seed(seed).unwrap(), 255);",
          "    assert!(matches!(access.pending_content, None));"
        ],
        "code": [
          "{",
          "    let content = Content::U8(255);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = U8Seed;",
          "    let _ = access.next_value_seed(seed);",
          "    assert!(matches!(access.pending_content, None));",
          "    assert_eq!(access.next_value_seed(seed).unwrap(), 255);",
          "    assert!(matches!(access.pending_content, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = StringSeed;",
          "    let _ = access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(access.pending_content.is_none());",
          "    assert_eq!(_?.value, \"test\");",
          "    assert!(access.iter.as_slice().is_empty());"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"test\"));",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = StringSeed;",
          "    let _ = access.next_value_seed(seed);",
          "    assert!(access.pending_content.is_none());",
          "    assert_eq!(_?.value, \"test\");",
          "    assert!(access.iter.as_slice().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = SeqSeed;",
          "    let _ = access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(access.pending_content.is_none());",
          "    let result = access.next_value_seed(seed);",
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_eq!(value, Content::Seq(vec![Content::U8(1), Content::U8(2)]));"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::U8(1), Content::U8(2)]);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = SeqSeed;",
          "    let _ = access.next_value_seed(seed);",
          "    assert!(access.pending_content.is_none());",
          "    let result = access.next_value_seed(seed);",
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_eq!(value, Content::Seq(vec![Content::U8(1), Content::U8(2)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Map(vec![",
          "        (Content::String(String::from(\"key1\")), Content::U32(123)),",
          "        (Content::String(String::from(\"key2\")), Content::U32(456)),",
          "    ]);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = MapSeed;",
          "    let _ = access.next_value_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(access.pending_content.is_none(), true);",
          "    assert!(matches!(_ , Ok(T::Value)));"
        ],
        "code": [
          "{",
          "    let content = Content::Map(vec![",
          "        (Content::String(String::from(\"key1\")), Content::U32(123)),",
          "        (Content::String(String::from(\"key2\")), Content::U32(456)),",
          "    ]);",
          "    let mut access = FlatStructAccess {",
          "        iter: &mut [].iter_mut(),",
          "        pending_content: Some(content),",
          "        fields: &[],",
          "        _marker: PhantomData,",
          "    };",
          "    let seed = MapSeed;",
          "    let _ = access.next_value_seed(seed);",
          "    assert_eq!(access.pending_content.is_none(), true);",
          "    assert!(matches!(_ , Ok(T::Value)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]