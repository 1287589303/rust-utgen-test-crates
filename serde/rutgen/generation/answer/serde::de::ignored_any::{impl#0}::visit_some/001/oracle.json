[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyDeserializer;",
          "    impl<'de> Deserializer<'de> for EmptyDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = EmptyDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_some(EmptyDeserializer), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    struct EmptyDeserializer;",
          "    impl<'de> Deserializer<'de> for EmptyDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = EmptyDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "    assert_eq!(IgnoredAny.visit_some(EmptyDeserializer), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonEmptyDeserializer;",
          "    impl<'de> Deserializer<'de> for NonEmptyDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = NonEmptyDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_some(NonEmptyDeserializer).is_ok(), true);",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).is_ok());",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).unwrap() == IgnoredAny);",
          "    assert!(matches!(IgnoredAny.visit_some(NonEmptyDeserializer), Ok(IgnoredAny)));",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).unwrap_or_else(|_| unreachable!()) == IgnoredAny);"
        ],
        "code": [
          "{",
          "    struct NonEmptyDeserializer;",
          "    impl<'de> Deserializer<'de> for NonEmptyDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = NonEmptyDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "    assert_eq!(IgnoredAny.visit_some(NonEmptyDeserializer).is_ok(), true);",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).is_ok());",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).unwrap() == IgnoredAny);",
          "    assert!(matches!(IgnoredAny.visit_some(NonEmptyDeserializer), Ok(IgnoredAny)));",
          "    assert!(IgnoredAny.visit_some(NonEmptyDeserializer).unwrap_or_else(|_| unreachable!()) == IgnoredAny);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinValueDeserializer;",
          "    impl<'de> Deserializer<'de> for MinValueDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = MinValueDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "}"
        ],
        "oracle": [
          "    IgnoredAny.visit_some(MinValueDeserializer).is_ok();",
          "    assert_eq!(IgnoredAny.visit_some(MinValueDeserializer), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    struct MinValueDeserializer;",
          "    impl<'de> Deserializer<'de> for MinValueDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = MinValueDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "    IgnoredAny.visit_some(MinValueDeserializer).is_ok();",
          "    assert_eq!(IgnoredAny.visit_some(MinValueDeserializer), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MaxValueDeserializer;",
          "    impl<'de> Deserializer<'de> for MaxValueDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = MaxValueDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(IgnoredAny.visit_some(MaxValueDeserializer), Ok(IgnoredAny));"
        ],
        "code": [
          "{",
          "    struct MaxValueDeserializer;",
          "    impl<'de> Deserializer<'de> for MaxValueDeserializer {",
          "        type Error = ();",
          "        fn deserialize<D>(self) -> Result<(), D::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = MaxValueDeserializer;",
          "    let _ = IgnoredAny.visit_some(deserializer);",
          "    assert_eq!(IgnoredAny.visit_some(MaxValueDeserializer), Ok(IgnoredAny));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]