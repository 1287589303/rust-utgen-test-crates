[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 0;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    addr.serialize(&serializer).unwrap() is_ok_result();",
          "    serializer.is_human_readable() == false;",
          "    addr.ip() == net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    (port == 0);"
        ],
        "code": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 0;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "    addr.serialize(&serializer).unwrap() is_ok_result();",
          "    serializer.is_human_readable() == false;",
          "    addr.ip() == net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    (port == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 65535;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.is_human_readable(), false);",
          "    assert_eq!(addr.ip(), net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]));",
          "    assert_eq!(port, 65535);",
          "    assert!(addr.serialize(&serializer).is_ok());",
          "    assert!(serializer.serialize_tuple(2).is_ok());"
        ],
        "code": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 65535;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "    assert_eq!(serializer.is_human_readable(), false);",
          "    assert_eq!(addr.ip(), net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]));",
          "    assert_eq!(port, 65535);",
          "    assert!(addr.serialize(&serializer).is_ok());",
          "    assert!(serializer.serialize_tuple(2).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 12345;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    let addr = net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    let port = 12345;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    assert_eq!(addr.serialize(&serializer).is_ok(), true);",
          "    assert_eq!(addr.ip(), [0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    assert_eq!(port, 12345);"
        ],
        "code": [
          "{",
          "    struct DummySerializer {",
          "        human_readable: bool,",
          "    }",
          "",
          "    impl Serializer for DummySerializer {",
          "        type Ok = ();",
          "        type Error = ();",
          "        fn serialize_tuple(self, len: usize) -> Result<Self::Ok, Self::Error> {",
          "            // dummy implementation",
          "            Ok(())",
          "        }",
          "        fn is_human_readable(&self) -> bool {",
          "            self.human_readable",
          "        }",
          "    }",
          "",
          "    let addr = net::Ipv6Addr::from([",
          "        0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01,",
          "    ]);",
          "    let port = 12345;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    addr.serialize(&serializer).unwrap();",
          "    let addr = net::Ipv6Addr::from([0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    let port = 12345;",
          "    let serializer = DummySerializer { human_readable: false };",
          "    assert_eq!(addr.serialize(&serializer).is_ok(), true);",
          "    assert_eq!(addr.ip(), [0x20, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01]);",
          "    assert_eq!(port, 12345);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]