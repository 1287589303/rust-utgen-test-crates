[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        tag: &'static str,",
          "        content: &'static str,",
          "    }",
          "",
          "    let visitor = TestVisitor {",
          "        tag: \"tag_field\",",
          "        content: \"content_field\",",
          "    };",
          "",
          "    let field: &[u8] = b\"content_field\";",
          "    let result = visitor.visit_bytes(field);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagContentOtherField::Content));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        tag: &'static str,",
          "        content: &'static str,",
          "    }",
          "",
          "    let visitor = TestVisitor {",
          "        tag: \"tag_field\",",
          "        content: \"content_field\",",
          "    };",
          "",
          "    let field: &[u8] = b\"content_field\";",
          "    let result = visitor.visit_bytes(field);",
          "    assert_eq!(result, Ok(TagContentOtherField::Content));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        tag: &'static str,",
          "        content: &'static str,",
          "    }",
          "",
          "    let visitor = TestVisitor {",
          "        tag: \"different_tag\",",
          "        content: \"content_field\",",
          "    };",
          "",
          "    let field: &[u8] = b\"content_field\";",
          "    let result = visitor.visit_bytes(field);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagContentOtherField::Content));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        tag: &'static str,",
          "        content: &'static str,",
          "    }",
          "",
          "    let visitor = TestVisitor {",
          "        tag: \"different_tag\",",
          "        content: \"content_field\",",
          "    };",
          "",
          "    let field: &[u8] = b\"content_field\";",
          "    let result = visitor.visit_bytes(field);",
          "    assert_eq!(result, Ok(TagContentOtherField::Content));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]