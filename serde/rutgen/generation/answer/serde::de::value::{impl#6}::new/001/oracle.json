[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer: UnitDeserializer<value::Error> = UnitDeserializer::new();",
          "}"
        ],
        "oracle": [
          "    let deserializer: UnitDeserializer<value::Error> = UnitDeserializer::new();",
          "    assert_eq!(std::mem::size_of_val(&deserializer.marker), std::mem::size_of::<PhantomData<value::Error>>());"
        ],
        "code": [
          "{",
          "    let deserializer: UnitDeserializer<value::Error> = UnitDeserializer::new();",
          "    let deserializer: UnitDeserializer<value::Error> = UnitDeserializer::new();",
          "    assert_eq!(std::mem::size_of_val(&deserializer.marker), std::mem::size_of::<PhantomData<value::Error>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(any(feature = \"std\", feature = \"alloc\"))]"
        ],
        "prefix": [
          "{",
          "    let deserializer: UnitDeserializer<Box<str>> = UnitDeserializer::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.marker, PhantomData);",
          "    assert!(deserializer.is_human_readable());",
          "    let _: UnitDeserializer<Box<str>> = UnitDeserializer::new();",
          "    assert_eq!(std::mem::size_of_val(&deserializer), std::mem::size_of::<UnitDeserializer<Box<str>>>());",
          "    assert!(matches!(deserializer, UnitDeserializer { .. }));"
        ],
        "code": [
          "{",
          "    let deserializer: UnitDeserializer<Box<str>> = UnitDeserializer::new();",
          "    assert_eq!(deserializer.marker, PhantomData);",
          "    assert!(deserializer.is_human_readable());",
          "    let _: UnitDeserializer<Box<str>> = UnitDeserializer::new();",
          "    assert_eq!(std::mem::size_of_val(&deserializer), std::mem::size_of::<UnitDeserializer<Box<str>>>());",
          "    assert!(matches!(deserializer, UnitDeserializer { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(any(feature = \"std\", feature = \"alloc\")))]"
        ],
        "prefix": [
          "{",
          "    let deserializer: UnitDeserializer<()> = UnitDeserializer::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.marker, PhantomData);"
        ],
        "code": [
          "{",
          "    let deserializer: UnitDeserializer<()> = UnitDeserializer::new();",
          "    assert_eq!(deserializer.marker, PhantomData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomError;",
          "    impl std::fmt::Debug for CustomError {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"CustomError\")",
          "        }",
          "    }",
          "",
          "    impl Error for CustomError {}",
          "",
          "    let deserializer: UnitDeserializer<CustomError> = UnitDeserializer::new();",
          "}"
        ],
        "oracle": [
          "    let deserializer: UnitDeserializer<CustomError> = UnitDeserializer::new();",
          "    assert_eq!(deserializer.marker, PhantomData);"
        ],
        "code": [
          "{",
          "    struct CustomError;",
          "    impl std::fmt::Debug for CustomError {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"CustomError\")",
          "        }",
          "    }",
          "",
          "    impl Error for CustomError {}",
          "",
          "    let deserializer: UnitDeserializer<CustomError> = UnitDeserializer::new();",
          "    let deserializer: UnitDeserializer<CustomError> = UnitDeserializer::new();",
          "    assert_eq!(deserializer.marker, PhantomData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]