[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 0;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let value: u16 = 0;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 1;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let value: u16 = 1;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 32768;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(32768), Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let value: u16 = 32768;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(32768), Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 65534;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(65534), Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let value: u16 = 65534;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(65534), Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 65535;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    let value: u16 = 65535;",
          "    let mut map: Vec<(&str,())> = Vec::new();",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]