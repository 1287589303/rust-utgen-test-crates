[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &str = \"test string\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "}"
        ],
        "oracle": [
          "    let input: &str = \"test string\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, \"test string\");",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));"
        ],
        "code": [
          "{",
          "    let input: &str = \"test string\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    let input: &str = \"test string\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, \"test string\");",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &str = \"\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "}"
        ],
        "oracle": [
          "    let input: &str = \"\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "    ",
          "    let input: &str = \"test\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "    ",
          "    let input: &str = \" \";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));"
        ],
        "code": [
          "{",
          "    let input: &str = \"\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    let input: &str = \"\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "    ",
          "    let input: &str = \"test\";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "    ",
          "    let input: &str = \" \";",
          "    let deserializer: StrDeserializer<Error> = input.from();",
          "    assert_eq!(deserializer.value, input);",
          "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]