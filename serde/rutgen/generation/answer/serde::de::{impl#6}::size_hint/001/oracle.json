[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(0)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.size_hint(), Some(0));",
          "    assert!(seq.size_hint().is_some());",
          "    assert!(seq.size_hint().unwrap() >= 0);"
        ],
        "code": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(0)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "    assert_eq!(seq.size_hint(), Some(0));",
          "    assert!(seq.size_hint().is_some());",
          "    assert!(seq.size_hint().unwrap() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(1)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.size_hint(), Some(1));"
        ],
        "code": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(1)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "    assert_eq!(seq.size_hint(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(10)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.size_hint(), Some(10));"
        ],
        "code": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(10)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "    assert_eq!(seq.size_hint(), Some(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(usize::MAX)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.size_hint(), Some(usize::MAX));"
        ],
        "code": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            Some(usize::MAX)",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "    assert_eq!(seq.size_hint(), Some(usize::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            None",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.size_hint(), None);"
        ],
        "code": [
          "{",
          "    struct TestSeqAccess;",
          "",
          "    impl<'de> SeqAccess<'de> for TestSeqAccess {",
          "        type Error = Error;",
          "",
          "        fn next_element_seed<T>(&mut self, _seed: T) -> Result<Option<T::Value>, Self::Error>",
          "        where",
          "            T: DeserializeSeed<'de>,",
          "        {",
          "            Ok(None)",
          "        }",
          "",
          "        fn size_hint(&self) -> Option<usize> {",
          "            None",
          "        }",
          "    }",
          "    ",
          "    let mut seq = TestSeqAccess;",
          "    let _ = seq.size_hint();",
          "    assert_eq!(seq.size_hint(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]