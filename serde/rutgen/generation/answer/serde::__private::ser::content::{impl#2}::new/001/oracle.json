[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_zero_len\";",
          "    let len = 0;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), 0);"
        ],
        "code": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_zero_len\";",
          "    let len = 0;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_non_zero_len\";",
          "    let len = 5;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);"
        ],
        "code": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_non_zero_len\";",
          "    let len = 5;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_zero_len_integer\";",
          "    let len = 0;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert!(result.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_zero_len_integer\";",
          "    let len = 0;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert!(result.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_non_zero_len_integer\";",
          "    let len = 3;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "    assert!(result.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"test_non_zero_len_integer\";",
          "    let len = 3;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "    assert!(result.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"\";",
          "    let len = 2;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "}"
        ],
        "oracle": [
          "    let map = MyMap;",
          "    let name = \"\";",
          "    let len = 2;",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);"
        ],
        "code": [
          "{",
          "    struct MyMap;",
          "",
          "    let map = MyMap;",
          "    let name = \"\";",
          "    let len = 2;",
          "",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    let map = MyMap;",
          "    let name = \"\";",
          "    let len = 2;",
          "    let result = SerializeStructVariantAsMapValue::new(map, name, len);",
          "    assert_eq!(result.map, map);",
          "    assert_eq!(result.name, name);",
          "    assert_eq!(result.fields.capacity(), len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]