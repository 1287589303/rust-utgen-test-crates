[
  {
    "uses": [
      "use super::*;"
    ],
    "has_test_mod": true,
    "common": [
      "    struct TestMapAccess;",
      "",
      "    impl<'de> MapAccess<'de> for TestMapAccess {",
      "        type Error = ();",
      "",
      "        fn next_key_seed<K>(&mut self, _seed: K) -> Result<Option<K::Value>, Self::Error>",
      "        where",
      "            K: DeserializeSeed<'de>,",
      "        {",
      "            Ok(None)",
      "        }",
      "",
      "        fn next_value_seed<V>(&mut self, _seed: V) -> Result<V::Value, Self::Error>",
      "        where",
      "            V: DeserializeSeed<'de>,",
      "        {",
      "            Err(())",
      "        }",
      "    }"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map_access = TestMapAccess;",
          "    let result = map_access.size_hint();",
          "}"
        ],
        "oracle": [
          "    let map_access = TestMapAccess;",
          "    let result = map_access.size_hint();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let map_access = TestMapAccess;",
          "    let result = map_access.size_hint();",
          "    let map_access = TestMapAccess;",
          "    let result = map_access.size_hint();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]