[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(0.0f32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestVisitor.visit_f32(0.0f32), Err(Error::invalid_type(Unexpected::Float(0.0), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(1.5f32), Err(Error::invalid_type(Unexpected::Float(1.5), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(-3.14f32), Err(Error::invalid_type(Unexpected::Float(-3.14), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MAX), Err(Error::invalid_type(Unexpected::Float(f32::MAX), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MIN), Err(Error::invalid_type(Unexpected::Float(f32::MIN), &TestVisitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(0.0f32);",
          "    assert_eq!(TestVisitor.visit_f32(0.0f32), Err(Error::invalid_type(Unexpected::Float(0.0), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(1.5f32), Err(Error::invalid_type(Unexpected::Float(1.5), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(-3.14f32), Err(Error::invalid_type(Unexpected::Float(-3.14), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MAX), Err(Error::invalid_type(Unexpected::Float(f32::MAX), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MIN), Err(Error::invalid_type(Unexpected::Float(f32::MIN), &TestVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0f32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestVisitor.visit_f32(1.0f32), Ok(TagOrContent::Content(Content::F32(1.0))));",
          "    assert!(TestVisitor.visit_f32(f32::NAN).is_err());",
          "    assert!(TestVisitor.visit_f32(f32::INFINITY).is_err());",
          "    assert!(TestVisitor.visit_f32(f32::NEG_INFINITY).is_err());",
          "    assert_eq!(TestVisitor.visit_f32(0.0f32), Ok(TagOrContent::Content(Content::F32(0.0))));",
          "    assert_eq!(TestVisitor.visit_f32(-1.0f32), Ok(TagOrContent::Content(Content::F32(-1.0))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0f32);",
          "    assert_eq!(TestVisitor.visit_f32(1.0f32), Ok(TagOrContent::Content(Content::F32(1.0))));",
          "    assert!(TestVisitor.visit_f32(f32::NAN).is_err());",
          "    assert!(TestVisitor.visit_f32(f32::INFINITY).is_err());",
          "    assert!(TestVisitor.visit_f32(f32::NEG_INFINITY).is_err());",
          "    assert_eq!(TestVisitor.visit_f32(0.0f32), Ok(TagOrContent::Content(Content::F32(0.0))));",
          "    assert_eq!(TestVisitor.visit_f32(-1.0f32), Ok(TagOrContent::Content(Content::F32(-1.0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(-1.0f32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestVisitor.visit_f32(-1.0f32), Err(Error::invalid_type(Unexpected::Float(-1.0f32), &TestVisitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(-1.0f32);",
          "    assert_eq!(TestVisitor.visit_f32(-1.0f32), Err(Error::invalid_type(Unexpected::Float(-1.0f32), &TestVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0e10f32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestVisitor.visit_f32(1.0e10f32), Ok(TagOrContent::Content(Content::F32(1.0e10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::INFINITY), Ok(TagOrContent::Content(Content::F32(f32::INFINITY))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NEG_INFINITY), Ok(TagOrContent::Content(Content::F32(f32::NEG_INFINITY))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NAN), Ok(TagOrContent::Content(Content::F32(f32::NAN))));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0e10f32);",
          "    assert_eq!(TestVisitor.visit_f32(1.0e10f32), Ok(TagOrContent::Content(Content::F32(1.0e10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::INFINITY), Ok(TagOrContent::Content(Content::F32(f32::INFINITY))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NEG_INFINITY), Ok(TagOrContent::Content(Content::F32(f32::NEG_INFINITY))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NAN), Ok(TagOrContent::Content(Content::F32(f32::NAN))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0e-10f32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestVisitor.visit_f32(1.0e-10f32), Ok(TagOrContent::Content(Content::F32(1.0e-10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MIN), Ok(TagOrContent::Content(Content::F32(f32::MIN))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MAX), Ok(TagOrContent::Content(Content::F32(f32::MAX))));",
          "    assert_eq!(TestVisitor.visit_f32(0.0), Ok(TagOrContent::Content(Content::F32(0.0))));",
          "    assert_eq!(TestVisitor.visit_f32(-1.0e-10f32), Ok(TagOrContent::Content(Content::F32(-1.0e-10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NAN), Err(de::Error::invalid_type(Unexpected::Float(f32::NAN), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::INFINITY), Err(de::Error::invalid_type(Unexpected::Float(f32::INFINITY), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NEG_INFINITY), Err(de::Error::invalid_type(Unexpected::Float(f32::NEG_INFINITY), &TestVisitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(1.0e-10f32);",
          "    assert_eq!(TestVisitor.visit_f32(1.0e-10f32), Ok(TagOrContent::Content(Content::F32(1.0e-10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MIN), Ok(TagOrContent::Content(Content::F32(f32::MIN))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::MAX), Ok(TagOrContent::Content(Content::F32(f32::MAX))));",
          "    assert_eq!(TestVisitor.visit_f32(0.0), Ok(TagOrContent::Content(Content::F32(0.0))));",
          "    assert_eq!(TestVisitor.visit_f32(-1.0e-10f32), Ok(TagOrContent::Content(Content::F32(-1.0e-10f32))));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NAN), Err(de::Error::invalid_type(Unexpected::Float(f32::NAN), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::INFINITY), Err(de::Error::invalid_type(Unexpected::Float(f32::INFINITY), &TestVisitor)));",
          "    assert_eq!(TestVisitor.visit_f32(f32::NEG_INFINITY), Err(de::Error::invalid_type(Unexpected::Float(f32::NEG_INFINITY), &TestVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(TestVisitor.visit_f32(f32::NAN), Err(_)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::NAN);",
          "    assert!(matches!(TestVisitor.visit_f32(f32::NAN), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(TestVisitor.visit_f32(f32::INFINITY), Err(_)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::INFINITY);",
          "    assert!(matches!(TestVisitor.visit_f32(f32::INFINITY), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::NEG_INFINITY);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::INFINITY);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::NAN);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "    let _ = TestVisitor.visit_f32(f32::NEG_INFINITY);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::NEG_INFINITY);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::INFINITY);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = TestVisitor.visit_f32(f32::NAN);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]