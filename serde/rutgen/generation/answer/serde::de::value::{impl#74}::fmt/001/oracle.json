[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct ExpectedInMap(usize);",
          "",
          "    let mut formatter = TestFormatter {};",
          "    ",
          "    let test_cases = vec![2, 3, 10, 100];",
          "",
          "    for &count in &test_cases {",
          "        let element = ExpectedInMap(count);",
          "        let _ = element.fmt(&mut formatter);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"2 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"3 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"10 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"100 elements in map\"), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct ExpectedInMap(usize);",
          "",
          "    let mut formatter = TestFormatter {};",
          "    ",
          "    let test_cases = vec![2, 3, 10, 100];",
          "",
          "    for &count in &test_cases {",
          "        let element = ExpectedInMap(count);",
          "        let _ = element.fmt(&mut formatter);",
          "    }",
          "    assert_eq!(formatter.write_str(\"2 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"3 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"10 elements in map\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"100 elements in map\"), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct ExpectedInMap(usize);",
          "",
          "    let mut formatter = TestFormatter {};",
          "    ",
          "    let test_cases = vec![1000, 5000, 10000, 100000];",
          "",
          "    for &count in &test_cases {",
          "        let element = ExpectedInMap(count);",
          "        let _ = element.fmt(&mut formatter);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"1 element in map\"), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 1000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 5000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 10000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 100000), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct ExpectedInMap(usize);",
          "",
          "    let mut formatter = TestFormatter {};",
          "    ",
          "    let test_cases = vec![1000, 5000, 10000, 100000];",
          "",
          "    for &count in &test_cases {",
          "        let element = ExpectedInMap(count);",
          "        let _ = element.fmt(&mut formatter);",
          "    }",
          "    assert_eq!(formatter.write_str(\"1 element in map\"), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 1000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 5000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 10000), Ok(()));",
          "    assert_eq!(write!(formatter, \"{} elements in map\", 100000), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]