[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "    ",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_bool\", &true).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_field(\"field_bool\", &true).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], (\"field_bool\", Content::Bool(true)));",
          "    serializer.serialize_field(\"field_u8\", &8u8).unwrap();",
          "    assert_eq!(serializer.fields.len(), 2);",
          "    assert_eq!(serializer.fields[1], (\"field_u8\", Content::U8(8)));",
          "    serializer.serialize_field(\"field_string\", &String::from(\"test\")).unwrap();",
          "    assert_eq!(serializer.fields.len(), 3);",
          "    assert_eq!(serializer.fields[2], (\"field_string\", Content::String(String::from(\"test\"))));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "    ",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_bool\", &true).unwrap();",
          "    serializer.serialize_field(\"field_bool\", &true).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], (\"field_bool\", Content::Bool(true)));",
          "    serializer.serialize_field(\"field_u8\", &8u8).unwrap();",
          "    assert_eq!(serializer.fields.len(), 2);",
          "    assert_eq!(serializer.fields[1], (\"field_u8\", Content::U8(8)));",
          "    serializer.serialize_field(\"field_string\", &String::from(\"test\")).unwrap();",
          "    assert_eq!(serializer.fields.len(), 3);",
          "    assert_eq!(serializer.fields[2], (\"field_string\", Content::String(String::from(\"test\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_u8\", &u8::MAX).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_u8\");",
          "    assert_eq!(serializer.fields[0].1, Content::U8(u8::MAX));",
          "    assert!(serializer.serialize_field(\"field_u8\", &u8::MAX).is_ok());",
          "    assert!(serializer.serialize_field(\"field_u16\", &u16::MAX).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_u8\", &u8::MAX).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_u8\");",
          "    assert_eq!(serializer.fields[0].1, Content::U8(u8::MAX));",
          "    assert!(serializer.serialize_field(\"field_u8\", &u8::MAX).is_ok());",
          "    assert!(serializer.serialize_field(\"field_u16\", &u16::MAX).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_i32\", &i32::MIN).unwrap();",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_field(\"field_i32\", &i32::MIN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_i32\");",
          "    assert_eq!(serializer.fields[0].1, Content::I32(i32::MIN));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_i32\", &i32::MIN).unwrap();",
          "    let result = serializer.serialize_field(\"field_i32\", &i32::MIN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_i32\");",
          "    assert_eq!(serializer.fields[0].1, Content::I32(i32::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_f32_nan\", &f32::NAN).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_f32_nan\");",
          "    assert!(matches!(serializer.fields[0].1, Content::F32(_)));",
          "    assert!(matches!(serializer.fields[0].1, Content::F32(val) if val.is_nan()));",
          "    assert!(serializer.serialize_field(\"field_f32_inf\", &f32::INFINITY).is_ok());",
          "    assert!(serializer.serialize_field(\"field_f32_neg_inf\", &f32::NEG_INFINITY).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_f32_nan\", &f32::NAN).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_f32_nan\");",
          "    assert!(matches!(serializer.fields[0].1, Content::F32(_)));",
          "    assert!(matches!(serializer.fields[0].1, Content::F32(val) if val.is_nan()));",
          "    assert!(serializer.serialize_field(\"field_f32_inf\", &f32::INFINITY).is_ok());",
          "    assert!(serializer.serialize_field(\"field_f32_neg_inf\", &f32::NEG_INFINITY).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_empty_string\", &String::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_field(\"field_empty_string\", &String::new()).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_empty_string\");",
          "    assert_eq!(serializer.fields[0].1, Content::String(String::new()));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_empty_string\", &String::new()).unwrap();",
          "    serializer.serialize_field(\"field_empty_string\", &String::new()).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_empty_string\");",
          "    assert_eq!(serializer.fields[0].1, Content::String(String::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_vec\", &vec![1, 2, 3]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_vec\");",
          "    assert_eq!(serializer.fields[0].1, Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(serializer.serialize_field(\"invalid_field\", &\"test\").is_ok());",
          "    assert_eq!(serializer.fields.len(), 2);"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_vec\", &vec![1, 2, 3]).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_vec\");",
          "    assert_eq!(serializer.fields[0].1, Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]));",
          "    assert!(serializer.serialize_field(\"invalid_field\", &\"test\").is_ok());",
          "    assert_eq!(serializer.fields.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_unit\", &()).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_field(\"field_unit\", &()).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_unit\");",
          "    assert_eq!(serializer.fields[0].1, Content::Unit);",
          "    assert!(serializer.fields[0].1.is_unit());"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_unit\", &()).unwrap();",
          "    serializer.serialize_field(\"field_unit\", &()).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_unit\");",
          "    assert_eq!(serializer.fields[0].1, Content::Unit);",
          "    assert!(serializer.fields[0].1.is_unit());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_some\", &Some(42)).unwrap();",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_field(\"field_some\", &Some(42));",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_some\");",
          "    assert_matches!(serializer.fields[0].1, Content::Some(_));",
          "    let some_content = if let Content::Some(boxed) = &serializer.fields[0].1 { *boxed.clone() } else { unreachable!() };",
          "    assert_eq!(some_content, Content::I32(42));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_some\", &Some(42)).unwrap();",
          "    let result = serializer.serialize_field(\"field_some\", &Some(42));",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_some\");",
          "    assert_matches!(serializer.fields[0].1, Content::Some(_));",
          "    let some_content = if let Content::Some(boxed) = &serializer.fields[0].1 { *boxed.clone() } else { unreachable!() };",
          "    assert_eq!(some_content, Content::I32(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_none\", &None::<i32>).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_none\");",
          "    assert!(matches!(serializer.fields[0].1, Content::None));",
          "    assert!(serializer.serialize_field(\"field_some\", &Some(42i32)).is_ok());",
          "    assert_eq!(serializer.fields.len(), 2);",
          "    assert_eq!(serializer.fields[1].0, \"field_some\");",
          "    assert!(matches!(serializer.fields[1].1, Content::Some(_)));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "    impl ser::Error for TestError {}",
          "",
          "    let mut serializer = SerializeStruct::<TestError> {",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "        error: PhantomData,",
          "    };",
          "    serializer.serialize_field(\"field_none\", &None::<i32>).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0].0, \"field_none\");",
          "    assert!(matches!(serializer.fields[0].1, Content::None));",
          "    assert!(serializer.serialize_field(\"field_some\", &Some(42i32)).is_ok());",
          "    assert_eq!(serializer.fields.len(), 2);",
          "    assert_eq!(serializer.fields[1].0, \"field_some\");",
          "    assert!(matches!(serializer.fields[1].1, Content::Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]