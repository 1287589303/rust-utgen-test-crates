[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", 0);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_tuple_struct(\"TestStruct\", 0).unwrap_err();",
          "    assert_eq!(serializer.serialize_tuple_struct(\"TestStruct\", 0), Err(serializer.bad_type(Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", 0);",
          "    serializer.serialize_tuple_struct(\"TestStruct\", 0).unwrap_err();",
          "    assert_eq!(serializer.serialize_tuple_struct(\"TestStruct\", 0), Err(serializer.bad_type(Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", 1);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_tuple_struct(\"TestStruct\", 1).unwrap_err();",
          "    assert_eq!(serializer.serialize_tuple_struct(\"TestStruct\", 1).err(), Some(Self::bad_type(Unsupported::TupleStruct)));",
          "    assert!(matches!(serializer.serialize_tuple_struct(\"TestStruct\", 1), Err(Self::bad_type(Unsupported::TupleStruct))));",
          "    assert!(serializer.serialize_tuple_struct(\"TestStruct\", 100).is_err());",
          "    assert!(serializer.serialize_tuple_struct(\"AnotherStruct\", 0).is_err());",
          "    assert_eq!(serializer.serialize_tuple_struct(\"AnyStruct\", 5), Err(Self::bad_type(Unsupported::TupleStruct)));"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", 1);",
          "    serializer.serialize_tuple_struct(\"TestStruct\", 1).unwrap_err();",
          "    assert_eq!(serializer.serialize_tuple_struct(\"TestStruct\", 1).err(), Some(Self::bad_type(Unsupported::TupleStruct)));",
          "    assert!(matches!(serializer.serialize_tuple_struct(\"TestStruct\", 1), Err(Self::bad_type(Unsupported::TupleStruct))));",
          "    assert!(serializer.serialize_tuple_struct(\"TestStruct\", 100).is_err());",
          "    assert!(serializer.serialize_tuple_struct(\"AnotherStruct\", 0).is_err());",
          "    assert_eq!(serializer.serialize_tuple_struct(\"AnyStruct\", 5), Err(Self::bad_type(Unsupported::TupleStruct)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX).unwrap_err();",
          "    assert_eq!(serializer.bad_type(Unsupported::TupleStruct), serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX).unwrap_err());"
        ],
        "code": [
          "{",
          "    struct TestMap;",
          "",
          "    impl SerializeMap for TestMap {",
          "        type Ok = ();",
          "        type Error = ();",
          "        ",
          "        fn serialize_entry<K, V>(&mut self, key: K, value: V) -> Result<(), Self::Error> ",
          "        where",
          "            K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_key<K>(&mut self, key: K) -> Result<(), Self::Error> ",
          "        where ",
          "            K: Serialize {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = TestMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX);",
          "    serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX).unwrap_err();",
          "    assert_eq!(serializer.bad_type(Unsupported::TupleStruct), serializer.serialize_tuple_struct(\"TestStruct\", std::usize::MAX).unwrap_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]