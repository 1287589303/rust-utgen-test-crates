[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, \"unit variant TestType::TestVariant\");"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "    assert_eq!(buf, \"unit variant TestType::TestVariant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"AnotherType\",",
          "        variant_name: \"AnotherVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, \"unit variant AnotherType::AnotherVariant\");"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"AnotherType\",",
          "        variant_name: \"AnotherVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "    assert_eq!(buf, \"unit variant AnotherType::AnotherVariant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"EdgeType\",",
          "        variant_name: \"EdgeVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, \"unit variant EdgeType::EdgeVariant\");"
        ],
        "code": [
          "{",
          "    let mut buf = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buf);",
          "    let visitor = UntaggedUnitVisitor {",
          "        type_name: \"EdgeType\",",
          "        variant_name: \"EdgeVariant\",",
          "    };",
          "    visitor.expecting(formatter).unwrap();",
          "    assert_eq!(buf, \"unit variant EdgeType::EdgeVariant\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]