[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = true;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::Bool(true)));",
          "    assert!(serializer.serialize_field(&\"test\").is_ok());",
          "    assert!(serializer.fields.len() == 2);",
          "    assert!(matches!(serializer.fields[1], Content::String(ref s) if s == \"test\"));",
          "    assert!(serializer.serialize_field(&42u8).is_ok());",
          "    assert!(serializer.fields.len() == 3);",
          "    assert!(matches!(serializer.fields[2], Content::U8(42)));"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = true;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::Bool(true)));",
          "    assert!(serializer.serialize_field(&\"test\").is_ok());",
          "    assert!(serializer.fields.len() == 2);",
          "    assert!(matches!(serializer.fields[1], Content::String(ref s) if s == \"test\"));",
          "    assert!(serializer.serialize_field(&42u8).is_ok());",
          "    assert!(serializer.fields.len() == 3);",
          "    assert!(matches!(serializer.fields[2], Content::U8(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 255u8;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::U8(255)));",
          "    assert!(serializer.end().is_ok());",
          "    assert!(serializer.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 255u8;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::U8(255)));",
          "    assert!(serializer.end().is_ok());",
          "    assert!(serializer.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 42i32;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> { map: MapMock, name: \"test\", fields: Vec::new() };",
          "    let value = 42i32;",
          "    assert_eq!(serializer.serialize_field(&value), Ok(()));",
          "    assert!(!serializer.fields.is_empty());",
          "    let serialized_value = serializer.fields.get(0).unwrap();",
          "    assert_eq!(serialized_value, &Content::I32(42));"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 42i32;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> { map: MapMock, name: \"test\", fields: Vec::new() };",
          "    let value = 42i32;",
          "    assert_eq!(serializer.serialize_field(&value), Ok(()));",
          "    assert!(!serializer.fields.is_empty());",
          "    let serialized_value = serializer.fields.get(0).unwrap();",
          "    assert_eq!(serialized_value, &Content::I32(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 3.14f64;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::F64(3.14)));",
          "    assert!(serializer.end().is_ok());",
          "    assert!(serializer.fields.is_empty());"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = 3.14f64;",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::F64(3.14)));",
          "    assert!(serializer.end().is_ok());",
          "    assert!(serializer.fields.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = String::from(\"some string\");",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::String(ref s) if s == \"some string\"));",
          "    let result = serializer.end();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "    let result2 = serializer.serialize_field(&value);",
          "    assert!(result2.is_ok());",
          "    assert_eq!(serializer.fields.len(), 1);"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = String::from(\"some string\");",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert!(matches!(serializer.fields[0], Content::String(ref s) if s == \"some string\"));",
          "    let result = serializer.end();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "    let result2 = serializer.serialize_field(&value);",
          "    assert!(result2.is_ok());",
          "    assert_eq!(serializer.fields.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = vec![1, 2, 3];",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "}"
        ],
        "oracle": [
          "    let value = Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]);",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "    map: MapMock,",
          "    name: \"test\",",
          "    fields: Vec::new(),",
          "    };",
          "    assert_eq!(serializer.serialize_field(&value), Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], value);"
        ],
        "code": [
          "{",
          "    struct MapMock;",
          "    impl ser::SerializeMap for MapMock {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<(), Self::Error> where K: Serialize, V: Serialize {",
          "            Ok(())",
          "        }",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "        map: MapMock,",
          "        name: \"test\",",
          "        fields: Vec::new(),",
          "    };",
          "    let value = vec![1, 2, 3];",
          "    let _ = serializer.serialize_field(&value).unwrap();",
          "    let value = Content::Seq(vec![Content::U8(1), Content::U8(2), Content::U8(3)]);",
          "    let mut serializer = SerializeTupleVariantAsMapValue::<MapMock> {",
          "    map: MapMock,",
          "    name: \"test\",",
          "    fields: Vec::new(),",
          "    };",
          "    assert_eq!(serializer.serialize_field(&value), Ok(()));",
          "    assert_eq!(serializer.fields.len(), 1);",
          "    assert_eq!(serializer.fields[0], value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]