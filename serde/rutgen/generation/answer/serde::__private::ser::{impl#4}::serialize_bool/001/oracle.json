[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockMap;",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "            V: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_bool(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_bool(true), Err(serializer.bad_type(Unsupported::Boolean)));"
        ],
        "code": [
          "{",
          "    struct MockMap;",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "            V: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_bool(true);",
          "    assert_eq!(serializer.serialize_bool(true), Err(serializer.bad_type(Unsupported::Boolean)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockMap;",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "            V: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_bool(false);",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_bool(false).unwrap_err(); // expected: Err(Self::bad_type(Unsupported::Boolean))"
        ],
        "code": [
          "{",
          "    struct MockMap;",
          "",
          "    impl SerializeMap for MockMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "",
          "        fn serialize_key<K>(&mut self, _: K) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_entry<K, V>(&mut self, _: K, _: V) -> Result<(), Self::Error>",
          "        where",
          "            K: Serialize,",
          "            V: Serialize,",
          "        {",
          "            Ok(())",
          "        }",
          "",
          "        fn end(self) -> Result<Self::Ok, Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut map = MockMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let _ = serializer.serialize_bool(false);",
          "    serializer.serialize_bool(false).unwrap_err(); // expected: Err(Self::bad_type(Unsupported::Boolean))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]