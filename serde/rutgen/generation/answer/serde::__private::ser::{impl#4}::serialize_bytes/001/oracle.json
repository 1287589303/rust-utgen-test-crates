[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MySerializeMap;",
      "",
      "impl SerializeMap for MySerializeMap {",
      "    type Ok = ();",
      "    type Error = Error;",
      "",
      "    fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error>",
      "    where",
      "        K: Serialize,",
      "        V: Serialize,",
      "    {",
      "        Err(Error)",
      "    }",
      "",
      "    fn end(self) -> Result<Self::Ok, Self::Error> {",
      "        Ok(())",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::ByteArray)));"
        ],
        "code": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[]);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::ByteArray)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1]);",
          "}"
        ],
        "oracle": [
          "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1]);",
          "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
          "}"
        ],
        "oracle": [
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
          "    assert_eq!(result, Err(Self::bad_type(Unsupported::ByteArray)));"
        ],
        "code": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
          "    assert_eq!(result, Err(Self::bad_type(Unsupported::ByteArray)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[0; 1024]);",
          "}"
        ],
        "oracle": [
          "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[0; 1024]);",
          "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
          "    assert_eq!(result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[255, 128, 64]);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_bytes(&[255, 128, 64]); assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::ByteArray)));"
        ],
        "code": [
          "{",
          "    let mut map = MySerializeMap {};",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_bytes(&[255, 128, 64]);",
          "    let result = serializer.serialize_bytes(&[255, 128, 64]); assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::ByteArray)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]