[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::U32(42)));",
          "    let recognized = [\"recognized_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::U32(42))));",
          "    assert!(entry.is_none());"
        ],
        "code": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::U32(42)));",
          "    let recognized = [\"recognized_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::U32(42))));",
          "    assert!(entry.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
          "    let recognized = [\"recognized_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
          "    assert!(entry.is_none());"
        ],
        "code": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
          "    let recognized = [\"recognized_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
          "    assert!(entry.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
          "    let recognized = [\"recognized_key\", \"another_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "}"
        ],
        "oracle": [
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
          "    let recognized = [\"recognized_key\", \"another_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::I32(10))));",
          "    assert!(entry.is_none());"
        ],
        "code": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
          "    let recognized = [\"recognized_key\", \"another_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
          "    let recognized = [\"recognized_key\", \"another_key\"];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::I32(10))));",
          "    assert!(entry.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
          "    let recognized: [&str; 0] = [];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "}"
        ],
        "oracle": [
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
          "    let recognized: [&str; 0] = [];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert_eq!(result, None);",
          "    assert_eq!(entry, Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5))));"
        ],
        "code": [
          "{",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
          "    let recognized: [&str; 0] = [];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
          "    let recognized: [&str; 0] = [];",
          "    let result = flat_map_take_entry(&mut entry, &recognized);",
          "    assert_eq!(result, None);",
          "    assert_eq!(entry, Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]