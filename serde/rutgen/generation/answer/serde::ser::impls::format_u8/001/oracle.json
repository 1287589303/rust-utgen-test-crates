[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(100, &mut out);",
          "}"
        ],
        "oracle": [
          "    out[0] == b'1'",
          "    out[1] == b'0'",
          "    out[2] == b'0'",
          "    result == 3"
        ],
        "code": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(100, &mut out);",
          "    out[0] == b'1'",
          "    out[1] == b'0'",
          "    out[2] == b'0'",
          "    result == 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(101, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0; 3];",
          "    let result = format_u8(100, &mut out);",
          "    assert_eq!(result, 3);",
          "    assert_eq!(out[0], b'1');",
          "    assert_eq!(out[1], b'0');",
          "    assert_eq!(out[2], b'0');"
        ],
        "code": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(101, &mut out);",
          "    let mut out = [0; 3];",
          "    let result = format_u8(100, &mut out);",
          "    assert_eq!(result, 3);",
          "    assert_eq!(out[0], b'1');",
          "    assert_eq!(out[1], b'0');",
          "    assert_eq!(out[2], b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(255, &mut out);",
          "}"
        ],
        "oracle": [
          "    out[0] == b'2'",
          "    out[1] == b'5'",
          "    out[2] == b'5'",
          "    result == 3"
        ],
        "code": [
          "{",
          "    let mut out = [0; 3];",
          "    let result = format_u8(255, &mut out);",
          "    out[0] == b'2'",
          "    out[1] == b'5'",
          "    out[2] == b'5'",
          "    result == 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]