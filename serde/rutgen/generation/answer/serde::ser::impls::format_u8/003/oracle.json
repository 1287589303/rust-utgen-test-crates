[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(0, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(0, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0');"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(0, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(0, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(1, &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 1);",
          "    assert_eq!(out[1], 0);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(1, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 1);",
          "    assert_eq!(out[1], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(2, &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 2);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(2, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(3, &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(out, [b'3']);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(3, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out, [b'3']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(4, &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 4);",
          "    assert_eq!(out[1], 0);   // Verify that out[1] is not written to since n < 10",
          "    assert_eq!(out[2], 0);   // Verify that out[2] is not written to since n < 10"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(4, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 4);",
          "    assert_eq!(out[1], 0);   // Verify that out[1] is not written to since n < 10",
          "    assert_eq!(out[2], 0);   // Verify that out[2] is not written to since n < 10",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(5, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(5, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 5);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(5, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(5, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(6, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(6, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'6');"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(6, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(6, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'6');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(7, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(7, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out, [b'0' + 7]);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(7, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(7, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out, [b'0' + 7]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(8, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(8, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 8);"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(8, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(8, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'0' + 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(9, &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(9, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'9');"
        ],
        "code": [
          "{",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(9, &mut out);",
          "    let mut out = [0u8; 1];",
          "    let result = format_u8(9, &mut out);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(out[0], b'9');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]