[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(-128);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_i8(-128);",
          "    assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(-128);",
          "    let result = serializer.serialize_i8(-128);",
          "    assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(0);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(127);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));"
        ],
        "code": [
          "{",
          "    struct DummyMap;",
          "    impl SerializeMap for DummyMap {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize, V: Serialize { Err(Error) }",
          "        fn serialize_key<K>(&mut self, _key: K) -> Result<Self::Ok, Self::Error> ",
          "        where K: Serialize { Err(Error) }",
          "    }",
          "",
          "    let mut map = DummyMap;",
          "    let serializer = FlatMapSerializer(&mut map);",
          "    let result = serializer.serialize_i8(127);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Integer)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]