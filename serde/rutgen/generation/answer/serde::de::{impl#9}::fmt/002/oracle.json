[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = WithDecimalPoint(5.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.0.is_finite(), true);",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert!(writer.has_decimal_point);",
          "    assert_eq!(value.fmt(&mut formatter).unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let value = WithDecimalPoint(5.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "    assert_eq!(value.0.is_finite(), true);",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert!(writer.has_decimal_point);",
          "    assert_eq!(value.fmt(&mut formatter).unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = WithDecimalPoint(-2.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-2.0\");",
          "    assert!(formatter.has_decimal_point());",
          "    assert!(value.0.is_finite());",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));"
        ],
        "code": [
          "{",
          "    let value = WithDecimalPoint(-2.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), \"-2.0\");",
          "    assert!(formatter.has_decimal_point());",
          "    assert!(value.0.is_finite());",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = WithDecimalPoint(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert!(formatter.write_str(\"0\").is_ok());",
          "    assert!(formatter.write_char('.').is_ok());",
          "    assert!(formatter.write_char('0').is_ok());",
          "    assert!(!writer.has_decimal_point);",
          "    assert!(self.0.is_finite());",
          "    assert_eq!(formatter.to_string(), \"0.0\");"
        ],
        "code": [
          "{",
          "    let value = WithDecimalPoint(0.0);",
          "    let mut formatter = std::fmt::Formatter::new();",
          "    value.fmt(&mut formatter).unwrap();",
          "    assert_eq!(value.fmt(&mut formatter), Ok(()));",
          "    assert!(formatter.write_str(\".0\").is_ok());",
          "    assert!(formatter.write_str(\"0\").is_ok());",
          "    assert!(formatter.write_char('.').is_ok());",
          "    assert!(formatter.write_char('0').is_ok());",
          "    assert!(!writer.has_decimal_point);",
          "    assert!(self.0.is_finite());",
          "    assert_eq!(formatter.to_string(), \"0.0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]