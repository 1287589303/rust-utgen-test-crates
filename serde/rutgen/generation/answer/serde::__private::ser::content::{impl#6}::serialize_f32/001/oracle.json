[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-3.4028235e38);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.0));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::MAX);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::MAX));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::MIN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::MIN));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.0));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::MAX);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::MAX));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::MIN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::F32(-1.0)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-1.0);",
          "    assert_eq!(result, Ok(Content::F32(-1.0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::F32(0.0)));",
          "    let result = serializer.serialize_f32(1.0);",
          "    assert_eq!(result, Ok(Content::F32(1.0)));",
          "    let result = serializer.serialize_f32(-1.0);",
          "    assert_eq!(result, Ok(Content::F32(-1.0)));",
          "    let result = serializer.serialize_f32(f32::MAX);",
          "    assert_eq!(result, Ok(Content::F32(f32::MAX)));",
          "    let result = serializer.serialize_f32(f32::MIN);",
          "    assert_eq!(result, Ok(Content::F32(f32::MIN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert_eq!(result, Ok(Content::F32(0.0)));",
          "    let result = serializer.serialize_f32(1.0);",
          "    assert_eq!(result, Ok(Content::F32(1.0)));",
          "    let result = serializer.serialize_f32(-1.0);",
          "    assert_eq!(result, Ok(Content::F32(-1.0)));",
          "    let result = serializer.serialize_f32(f32::MAX);",
          "    assert_eq!(result, Ok(Content::F32(f32::MAX)));",
          "    let result = serializer.serialize_f32(f32::MIN);",
          "    assert_eq!(result, Ok(Content::F32(f32::MIN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(1.0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(1.0));",
          "    ",
          "    let result = serializer.serialize_f32(0.5);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.5));",
          "    ",
          "    let result = serializer.serialize_f32(-1.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-1.0));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(1.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(1.0));",
          "    ",
          "    let result = serializer.serialize_f32(0.5);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.5));",
          "    ",
          "    let result = serializer.serialize_f32(-1.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(3.4028235e38);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.0));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::NAN));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::INFINITY));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::NEG_INFINITY));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-3.4028235e38);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(-3.4028235e38));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(0.0));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::NAN));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::INFINITY));",
          "    ",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::NEG_INFINITY));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::F32(f32::NAN)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NAN);",
          "    assert_eq!(result, Ok(Content::F32(f32::NAN)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::INFINITY));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Content::F32(f32::INFINITY));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::F32(f32::NEG_INFINITY)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    assert_eq!(result, Ok(Content::F32(f32::INFINITY)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert_eq!(result, Ok(Content::F32(0.0)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(1.5);",
          "    assert_eq!(result, Ok(Content::F32(1.5)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-1.5);",
          "    assert_eq!(result, Ok(Content::F32(-1.5)));"
        ],
        "code": [
          "{",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Content::F32(f32::NEG_INFINITY)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(f32::INFINITY);",
          "    assert_eq!(result, Ok(Content::F32(f32::INFINITY)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(0.0);",
          "    assert_eq!(result, Ok(Content::F32(0.0)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(1.5);",
          "    assert_eq!(result, Ok(Content::F32(1.5)));",
          "    let serializer = ContentSerializer::<()>::default();",
          "    let result = serializer.serialize_f32(-1.5);",
          "    assert_eq!(result, Ok(Content::F32(-1.5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]