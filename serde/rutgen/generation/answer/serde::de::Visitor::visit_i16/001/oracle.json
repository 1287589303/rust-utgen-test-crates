[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(-1), visitor.visit_i64(-1));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-1);",
          "    assert_eq!(visitor.visit_i16(-1), visitor.visit_i64(-1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(0), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(0);",
          "    assert_eq!(visitor.visit_i16(0), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(1).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(-1).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(i16::MAX).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(i16::MIN).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(0).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(1);",
          "    assert_eq!(visitor.visit_i16(1).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(-1).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(i16::MAX).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(i16::MIN).is_ok(), true);",
          "    assert_eq!(visitor.visit_i16(0).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-32768);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    let visitor = TestVisitor;",
          "    let result = visitor.visit_i16(-32768);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-32768);",
          "    plaintext",
          "    let visitor = TestVisitor;",
          "    let result = visitor.visit_i16(-32768);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(32767);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(32767), Err(Error::invalid_type(Unexpected::Signed(32767), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(32767);",
          "    assert_eq!(visitor.visit_i16(32767), Err(Error::invalid_type(Unexpected::Signed(32767), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-32769);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(-32769).is_err(), true);",
          "    assert_eq!(visitor.visit_i16(32768).is_err(), true);",
          "    assert_eq!(visitor.visit_i16(-32768).is_ok(), false);",
          "    assert_eq!(visitor.visit_i16(0).is_ok(), false);",
          "    assert_eq!(visitor.visit_i16(32767).is_ok(), false);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(-32769);",
          "    assert_eq!(visitor.visit_i16(-32769).is_err(), true);",
          "    assert_eq!(visitor.visit_i16(32768).is_err(), true);",
          "    assert_eq!(visitor.visit_i16(-32768).is_ok(), false);",
          "    assert_eq!(visitor.visit_i16(0).is_ok(), false);",
          "    assert_eq!(visitor.visit_i16(32767).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(32768);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_i16(32768).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let _ = visitor.visit_i16(32768);",
          "    assert_eq!(visitor.visit_i16(32768).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]