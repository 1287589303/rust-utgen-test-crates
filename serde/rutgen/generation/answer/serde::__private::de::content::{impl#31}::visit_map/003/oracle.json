[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for EmptyMapAccess {",
          "        type Error = ();",
          "        fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "            Ok(None)",
          "        }",
          "    }",
          "",
          "    let access = EmptyMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "",
          "    let _ = visitor.visit_map(access);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    assert!(matches!(access.next_entry::<IgnoredAny, IgnoredAny>(), Ok(None)));",
          "    assert!(tri!(access.next_entry::<IgnoredAny, IgnoredAny>()).is_none());",
          "    let result = visitor.visit_map(access);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());"
        ],
        "code": [
          "{",
          "    struct EmptyMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for EmptyMapAccess {",
          "        type Error = ();",
          "        fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "            Ok(None)",
          "        }",
          "    }",
          "",
          "    let access = EmptyMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "",
          "    let _ = visitor.visit_map(access);",
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    assert!(matches!(access.next_entry::<IgnoredAny, IgnoredAny>(), Ok(None)));",
          "    assert!(tri!(access.next_entry::<IgnoredAny, IgnoredAny>()).is_none());",
          "    let result = visitor.visit_map(access);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for ErrorMapAccess {",
          "        type Error = ();",
          "        fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let access = ErrorMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "",
          "    let _ = visitor.visit_map(access);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    struct TestMapAccess;",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "    type Error = ();",
          "    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "    Ok(Some((IgnoredAny, IgnoredAny)))",
          "    }",
          "    }",
          "    let access = TestMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "    type_name: \"TestType\",",
          "    variant_name: \"TestVariant\",",
          "    };",
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    struct EmptyMapAccess;",
          "    impl<'de> MapAccess<'de> for EmptyMapAccess {",
          "    type Error = ();",
          "    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "    Ok(None)",
          "    }",
          "    }",
          "    let access = EmptyMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "    type_name: \"TestType\",",
          "    variant_name: \"TestVariant\",",
          "    };",
          "    assert_eq!(visitor.visit_map(access), Ok(()));"
        ],
        "code": [
          "{",
          "    struct ErrorMapAccess;",
          "",
          "    impl<'de> MapAccess<'de> for ErrorMapAccess {",
          "        type Error = ();",
          "        fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "            Err(())",
          "        }",
          "    }",
          "",
          "    let access = ErrorMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "        type_name: \"TestType\",",
          "        variant_name: \"TestVariant\",",
          "    };",
          "",
          "    let _ = visitor.visit_map(access);",
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    struct TestMapAccess;",
          "    impl<'de> MapAccess<'de> for TestMapAccess {",
          "    type Error = ();",
          "    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "    Ok(Some((IgnoredAny, IgnoredAny)))",
          "    }",
          "    }",
          "    let access = TestMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "    type_name: \"TestType\",",
          "    variant_name: \"TestVariant\",",
          "    };",
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "    struct EmptyMapAccess;",
          "    impl<'de> MapAccess<'de> for EmptyMapAccess {",
          "    type Error = ();",
          "    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error> {",
          "    Ok(None)",
          "    }",
          "    }",
          "    let access = EmptyMapAccess;",
          "    let visitor = InternallyTaggedUnitVisitor {",
          "    type_name: \"TestType\",",
          "    variant_name: \"TestVariant\",",
          "    };",
          "    assert_eq!(visitor.visit_map(access), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]