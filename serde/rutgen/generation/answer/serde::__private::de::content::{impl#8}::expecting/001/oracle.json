[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { name: \"test_name\" };",
          "    let mut buffer = String::new();",
          "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
          "    let _ = visitor.expecting(fmt);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"a type tag `test_name` or any other value\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { name: \"test_name\" };",
          "    let mut buffer = String::new();",
          "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
          "    let _ = visitor.expecting(fmt);",
          "    assert_eq!(buffer, \"a type tag `test_name` or any other value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { name: \"\" };",
          "    let mut buffer = String::new();",
          "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
          "    let _ = visitor.expecting(fmt);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"a type tag `` or any other value\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor { name: \"\" };",
          "    let mut buffer = String::new();",
          "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
          "    let _ = visitor.expecting(fmt);",
          "    assert_eq!(buffer, \"a type tag `` or any other value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]