[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError;",
          "",
          "    impl de::Error for TestError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct TestSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for TestSeed {",
          "        type Value = ();",
          "        fn deserialize<DE: de::Deserializer<'de>>(self, _deserializer: DE) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantRefDeserializer {",
          "        value: None,",
          "        err: PhantomData::<TestError>,",
          "    };",
          "",
          "    let result: Result<(), TestError> = deserializer.newtype_variant_seed(TestSeed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TestError));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"newtype variant\"))));",
          "    assert_eq!(matches!(result, Err(de::Error::invalid_type(_, _))), true);",
          "    assert!(result.unwrap_err().custom(\"test error\"));"
        ],
        "code": [
          "{",
          "    struct TestError;",
          "",
          "    impl de::Error for TestError {",
          "        fn custom<T>(_msg: T) -> Self {",
          "            TestError",
          "        }",
          "    }",
          "",
          "    struct TestSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for TestSeed {",
          "        type Value = ();",
          "        fn deserialize<DE: de::Deserializer<'de>>(self, _deserializer: DE) -> Result<Self::Value, TestError> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantRefDeserializer {",
          "        value: None,",
          "        err: PhantomData::<TestError>,",
          "    };",
          "",
          "    let result: Result<(), TestError> = deserializer.newtype_variant_seed(TestSeed);",
          "    assert_eq!(result, Err(TestError));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(de::Error::invalid_type(de::Unexpected::UnitVariant, &\"newtype variant\"))));",
          "    assert_eq!(matches!(result, Err(de::Error::invalid_type(_, _))), true);",
          "    assert!(result.unwrap_err().custom(\"test error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]