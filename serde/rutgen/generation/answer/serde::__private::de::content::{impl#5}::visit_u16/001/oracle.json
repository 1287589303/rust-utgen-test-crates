[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::U16(0)));",
          "    result = visitor.visit_u16(1);",
          "    assert_eq!(result, Ok(Content::U16(1)));",
          "    result = visitor.visit_u16(u16::MAX);",
          "    assert_eq!(result, Ok(Content::U16(u16::MAX)));",
          "    result = visitor.visit_u16(u16::MIN);",
          "    assert_eq!(result, Ok(Content::U16(u16::MIN)));",
          "    result = visitor.visit_u16(12345);",
          "    assert_eq!(result, Ok(Content::U16(12345)));",
          "    result = visitor.visit_u16(65535);",
          "    assert_eq!(result, Ok(Content::U16(65535)));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(0);",
          "    assert_eq!(result, Ok(Content::U16(0)));",
          "    result = visitor.visit_u16(1);",
          "    assert_eq!(result, Ok(Content::U16(1)));",
          "    result = visitor.visit_u16(u16::MAX);",
          "    assert_eq!(result, Ok(Content::U16(u16::MAX)));",
          "    result = visitor.visit_u16(u16::MIN);",
          "    assert_eq!(result, Ok(Content::U16(u16::MIN)));",
          "    result = visitor.visit_u16(12345);",
          "    assert_eq!(result, Ok(Content::U16(12345)));",
          "    result = visitor.visit_u16(65535);",
          "    assert_eq!(result, Ok(Content::U16(65535)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(32768);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::U16(32768)));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(32768);",
          "    assert_eq!(result, Ok(Content::U16(32768)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(65535);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Content::U16(65535)));"
        ],
        "code": [
          "{",
          "    let visitor = ContentVisitor { value: PhantomData };",
          "    let result: Result<Content, _> = visitor.visit_u16(65535);",
          "    assert_eq!(result, Ok(Content::U16(65535)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]