[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "",
          "    impl<'de> Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { Ok(()) }",
          "    }",
          "",
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "",
          "    let _ = deserializer.deserialize_float(visitor);",
          "}"
        ],
        "oracle": [
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "    let result = deserializer.deserialize_float(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type for visitor\");"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "",
          "    impl<'de> Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { Ok(()) }",
          "    }",
          "",
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "",
          "    let _ = deserializer.deserialize_float(visitor);",
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "    let result = deserializer.deserialize_float(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type for visitor\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "",
          "    impl<'de> Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { Ok(()) }",
          "    }",
          "",
          "    let content = Content::I8(127);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "",
          "    let _ = deserializer.deserialize_float(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));",
          "    ",
          "    let content = Content::I16(32000);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));",
          "    ",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Ok(()));",
          "    ",
          "    let content = Content::F64(2.718);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Ok(()));",
          "    ",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "",
          "    impl<'de> Visitor<'de> for DummyVisitor {",
          "        type Value = ();",
          "",
          "        fn visit_f32(self, _: f32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_f64(self, _: f64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u8(self, _: u8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u16(self, _: u16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u32(self, _: u32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_u64(self, _: u64) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i8(self, _: i8) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i16(self, _: i16) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i32(self, _: i32) -> Result<Self::Value, E> { Ok(()) }",
          "        fn visit_i64(self, _: i64) -> Result<Self::Value, E> { Ok(()) }",
          "    }",
          "",
          "    let content = Content::I8(127);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let visitor = DummyVisitor;",
          "",
          "    let _ = deserializer.deserialize_float(visitor);",
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));",
          "    ",
          "    let content = Content::I16(32000);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));",
          "    ",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Ok(()));",
          "    ",
          "    let content = Content::F64(2.718);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Ok(()));",
          "    ",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    assert_eq!(deserializer.deserialize_float(visitor), Err(deserializer.invalid_type(&visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]