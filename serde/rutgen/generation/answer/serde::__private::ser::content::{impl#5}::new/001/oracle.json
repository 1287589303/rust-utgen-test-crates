[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer: ContentSerializer<()> = ContentSerializer::new();",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.is_human_readable() == true);",
          "    assert_eq!(std::mem::size_of::<ContentSerializer<()>>(), expected_size);",
          "    assert!(serializer.error == PhantomData);",
          "    assert!(serializer.serialize_bool(true).is_ok());",
          "    assert!(serializer.serialize_i8(127).is_ok());",
          "    assert!(serializer.serialize_u8(255).is_ok());",
          "    assert!(serializer.serialize_i16(-32768).is_ok());",
          "    assert!(serializer.serialize_u16(65535).is_ok());",
          "    assert!(serializer.serialize_i32(-2147483648).is_ok());",
          "    assert!(serializer.serialize_u32(4294967295).is_ok());",
          "    assert!(serializer.serialize_f32(3.14).is_ok());",
          "    assert!(serializer.serialize_str(\"test\").is_ok());",
          "    assert!(serializer.serialize_none().is_ok());",
          "    assert!(serializer.serialize_unit().is_ok());",
          "    assert!(serializer.serialize_unit_struct(\"UnitStruct\").is_ok());",
          "    assert!(serializer.serialize_unit_variant(\"EnumName\", 0, \"VariantName\").is_ok());",
          "    assert!(serializer.serialize_newtype_struct(\"Newtype\", &1).is_ok());",
          "    assert!(serializer.serialize_seq(None).is_ok());",
          "    assert!(serializer.serialize_map(None).is_ok());"
        ],
        "code": [
          "{",
          "    let serializer: ContentSerializer<()> = ContentSerializer::new();",
          "    assert!(serializer.is_human_readable() == true);",
          "    assert_eq!(std::mem::size_of::<ContentSerializer<()>>(), expected_size);",
          "    assert!(serializer.error == PhantomData);",
          "    assert!(serializer.serialize_bool(true).is_ok());",
          "    assert!(serializer.serialize_i8(127).is_ok());",
          "    assert!(serializer.serialize_u8(255).is_ok());",
          "    assert!(serializer.serialize_i16(-32768).is_ok());",
          "    assert!(serializer.serialize_u16(65535).is_ok());",
          "    assert!(serializer.serialize_i32(-2147483648).is_ok());",
          "    assert!(serializer.serialize_u32(4294967295).is_ok());",
          "    assert!(serializer.serialize_f32(3.14).is_ok());",
          "    assert!(serializer.serialize_str(\"test\").is_ok());",
          "    assert!(serializer.serialize_none().is_ok());",
          "    assert!(serializer.serialize_unit().is_ok());",
          "    assert!(serializer.serialize_unit_struct(\"UnitStruct\").is_ok());",
          "    assert!(serializer.serialize_unit_variant(\"EnumName\", 0, \"VariantName\").is_ok());",
          "    assert!(serializer.serialize_newtype_struct(\"Newtype\", &1).is_ok());",
          "    assert!(serializer.serialize_seq(None).is_ok());",
          "    assert!(serializer.serialize_map(None).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyError;",
          "    let serializer: ContentSerializer<DummyError> = ContentSerializer::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.error, PhantomData);",
          "    assert!(std::mem::size_of::<ContentSerializer<DummyError>>() > 0);",
          "    assert!(std::any::TypeId::of::<ContentSerializer<DummyError>>() == std::any::TypeId::of::<ContentSerializer<_>>());",
          "    assert!(std::any::TypeId::of::<DummyError>() == std::any::TypeId::of::<DummyError>());"
        ],
        "code": [
          "{",
          "    struct DummyError;",
          "    let serializer: ContentSerializer<DummyError> = ContentSerializer::new();",
          "    assert_eq!(serializer.error, PhantomData);",
          "    assert!(std::mem::size_of::<ContentSerializer<DummyError>>() > 0);",
          "    assert!(std::any::TypeId::of::<ContentSerializer<DummyError>>() == std::any::TypeId::of::<ContentSerializer<_>>());",
          "    assert!(std::any::TypeId::of::<DummyError>() == std::any::TypeId::of::<DummyError>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]