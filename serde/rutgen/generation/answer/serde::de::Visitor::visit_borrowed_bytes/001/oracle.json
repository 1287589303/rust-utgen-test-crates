[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[]; // empty byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[]; // empty byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[1, 2, 3, 4, 5]; // non-empty byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor))); // empty byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[42]), Err(Error::invalid_type(Unexpected::Bytes(&[42]), &visitor))); // single byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3]), &visitor))); // multiple byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[255, 0]), Err(Error::invalid_type(Unexpected::Bytes(&[255, 0]), &visitor))); // bytes with boundary values",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3, 4, 5]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3, 4, 5]), &visitor))); // specific non-empty byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[42, 69, 173]), Err(Error::invalid_type(Unexpected::Bytes(&[42, 69, 173]), &visitor))); // non-empty byte slice with arbitrary values"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[1, 2, 3, 4, 5]; // non-empty byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor))); // empty byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[42]), Err(Error::invalid_type(Unexpected::Bytes(&[42]), &visitor))); // single byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3]), &visitor))); // multiple byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[255, 0]), Err(Error::invalid_type(Unexpected::Bytes(&[255, 0]), &visitor))); // bytes with boundary values",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3, 4, 5]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3, 4, 5]), &visitor))); // specific non-empty byte slice",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[42, 69, 173]), Err(Error::invalid_type(Unexpected::Bytes(&[42, 69, 173]), &visitor))); // non-empty byte slice with arbitrary values",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[0u8; 1024]; // maximum size byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[255]), Err(Error::invalid_type(Unexpected::Bytes(&[255]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[0u8; 512]), Err(Error::invalid_type(Unexpected::Bytes(&[0u8; 512]), &visitor)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &[u8] = &[0u8; 1024]; // maximum size byte slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[]), Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[1, 2, 3]), Err(Error::invalid_type(Unexpected::Bytes(&[1, 2, 3]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[255]), Err(Error::invalid_type(Unexpected::Bytes(&[255]), &visitor)));",
          "    assert_eq!(visitor.visit_borrowed_bytes(&[0u8; 512]), Err(Error::invalid_type(Unexpected::Bytes(&[0u8; 512]), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &'static [u8] = std::mem::transmute::<&[u8], &'static [u8]>(std::ptr::null()); // NULL slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_borrowed_bytes(b\"valid bytes\"), Ok(()));",
          "    assert!(visitor.visit_borrowed_bytes(std::ptr::null()).is_err());",
          "    assert!(visitor.visit_borrowed_bytes(&[]).is_ok());",
          "    assert_eq!(visitor.visit_borrowed_bytes(b\"another valid\"), Ok(()));",
          "    assert!(visitor.visit_borrowed_bytes(b\"\\u{FF}\").is_ok());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let visitor = TestVisitor;",
          "    let bytes: &'static [u8] = std::mem::transmute::<&[u8], &'static [u8]>(std::ptr::null()); // NULL slice",
          "    let _ = visitor.visit_borrowed_bytes(bytes);",
          "    assert_eq!(visitor.visit_borrowed_bytes(b\"valid bytes\"), Ok(()));",
          "    assert!(visitor.visit_borrowed_bytes(std::ptr::null()).is_err());",
          "    assert!(visitor.visit_borrowed_bytes(&[]).is_ok());",
          "    assert_eq!(visitor.visit_borrowed_bytes(b\"another valid\"), Ok(()));",
          "    assert!(visitor.visit_borrowed_bytes(b\"\\u{FF}\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]