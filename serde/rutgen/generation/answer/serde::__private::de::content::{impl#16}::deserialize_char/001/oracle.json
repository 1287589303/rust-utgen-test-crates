[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::I32(42);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor::new();",
          "    let content = Content::I32(42);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().unexpected(), Unexpected::Other);",
          "    assert_eq!(result.err().unwrap().expected(), &Expected::Char);"
        ],
        "code": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::I32(42);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::I32(42);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().unexpected(), Unexpected::Other);",
          "    assert_eq!(result.err().unwrap().expected(), &Expected::Char);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor::new();",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer {",
          "    content,",
          "    err: PhantomData,",
          "    };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(deserializer.invalid_type(&visitor)));"
        ],
        "code": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentDeserializer {",
          "    content,",
          "    err: PhantomData,",
          "    };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(deserializer.invalid_type(&visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Seq(vec![Content::I32(1), Content::I32(2)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Seq(vec![Content::I32(1), Content::I32(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().expected(), visitor);"
        ],
        "code": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Seq(vec![Content::I32(1), Content::I32(2)]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Seq(vec![Content::I32(1), Content::I32(2)]);",
          "    let deserializer = ContentDeserializer { content, err: PhantomData };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().expected(), visitor);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::I32(2))]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::I32(2))]);",
          "    let deserializer = ContentDeserializer {",
          "    content,",
          "    err: PhantomData,",
          "    };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), deserializer.invalid_type(&visitor));"
        ],
        "code": [
          "{",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::I32(2))]);",
          "    let deserializer = ContentDeserializer {",
          "        content,",
          "        err: PhantomData,",
          "    };",
          "    let _ = deserializer.deserialize_char(visitor);",
          "    let visitor = MockVisitor::new();",
          "    let content = Content::Map(vec![(Content::Str(\"key\"), Content::I32(2))]);",
          "    let deserializer = ContentDeserializer {",
          "    content,",
          "    err: PhantomData,",
          "    };",
          "    let result = deserializer.deserialize_char(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), deserializer.invalid_type(&visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]