[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"test_name\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test_name\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Tag));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"test_name\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test_name\");",
          "    assert_eq!(result, Ok(TagOrContent::Tag));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"test@name!\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test@name!\");",
          "}"
        ],
        "oracle": [
          "    let visitor = TestVisitor { name: \"test@name!\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test@name!\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), TagOrContent::Tag);"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"test@name!\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test@name!\");",
          "    let visitor = TestVisitor { name: \"test@name!\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"test@name!\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), TagOrContent::Tag);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Tag));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"\");",
          "    assert_eq!(result, Ok(TagOrContent::Tag));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"12345\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"12345\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(TagOrContent::Tag));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        name: &'static str,",
          "    }",
          "    ",
          "    let visitor = TestVisitor { name: \"12345\" };",
          "    let result: Result<TagOrContent, _> = visitor.visit_borrowed_str(\"12345\");",
          "    assert_eq!(result, Ok(TagOrContent::Tag));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]