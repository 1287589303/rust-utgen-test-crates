[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let err = Error;",
          "    // The function `description` is unimplemented, so we're only calling it.",
          "    err.description();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let err = Error;",
          "    err.description();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let err = Error;",
          "    // The function `description` is unimplemented, so we're only calling it.",
          "    err.description();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let err = Error;",
          "    err.description();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"std\")]"
        ],
        "prefix": [
          "{",
          "    let err = Error;",
          "    // The function `description` is unimplemented, so we're only calling it.",
          "    err.description();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| err.description()).is_err(), true);"
        ],
        "code": [
          "{",
          "    let err = Error;",
          "    // The function `description` is unimplemented, so we're only calling it.",
          "    err.description();",
          "    assert_eq!(std::panic::catch_unwind(|| err.description()).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]