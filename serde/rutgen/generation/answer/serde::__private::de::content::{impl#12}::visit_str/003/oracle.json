[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"tag_field\", content: \"content_field\" };",
          "    let result = visitor.visit_str(\"invalid_field\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(de::Error::invalid_value(Unexpected::Str(\"invalid_field\"), &visitor)));"
        ],
        "code": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"tag_field\", content: \"content_field\" };",
          "    let result = visitor.visit_str(\"invalid_field\");",
          "    assert_eq!(result, Err(de::Error::invalid_value(Unexpected::Str(\"invalid_field\"), &visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"test_tag\", content: \"test_content\" };",
          "    let result = visitor.visit_str(\"another_invalid_field\");",
          "}"
        ],
        "oracle": [
          "    let visitor = TagOrContentFieldVisitor { tag: \"test_tag\", content: \"test_content\" };",
          "    let result = visitor.visit_str(\"another_invalid_field\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), de::Error::invalid_value(Unexpected::Str(\"another_invalid_field\"), &visitor));"
        ],
        "code": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"test_tag\", content: \"test_content\" };",
          "    let result = visitor.visit_str(\"another_invalid_field\");",
          "    let visitor = TagOrContentFieldVisitor { tag: \"test_tag\", content: \"test_content\" };",
          "    let result = visitor.visit_str(\"another_invalid_field\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), de::Error::invalid_value(Unexpected::Str(\"another_invalid_field\"), &visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"some_tag\", content: \"some_content\" };",
          "    let result = visitor.visit_str(\"different_invalid_field\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_value(Unexpected::Str(\"different_invalid_field\"), &visitor));"
        ],
        "code": [
          "{",
          "    let visitor = TagOrContentFieldVisitor { tag: \"some_tag\", content: \"some_content\" };",
          "    let result = visitor.visit_str(\"different_invalid_field\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), de::Error::invalid_value(Unexpected::Str(\"different_invalid_field\"), &visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]