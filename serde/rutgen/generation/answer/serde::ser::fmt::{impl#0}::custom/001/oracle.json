[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = fmt::Error::custom(\"test string\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, fmt::Error);"
        ],
        "code": [
          "{",
          "    let error = fmt::Error::custom(\"test string\");",
          "    assert_eq!(error, fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = fmt::Error::custom(123);",
          "}"
        ],
        "oracle": [
          "    let error = fmt::Error::custom(123);",
          "    assert_eq!(error, fmt::Error);"
        ],
        "code": [
          "{",
          "    let error = fmt::Error::custom(123);",
          "    let error = fmt::Error::custom(123);",
          "    assert_eq!(error, fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = fmt::Error::custom(\"\");",
          "}"
        ],
        "oracle": [
          "    let error = fmt::Error::custom(\"\");",
          "    assert_eq!(error, fmt::Error);"
        ],
        "code": [
          "{",
          "    let error = fmt::Error::custom(\"\");",
          "    let error = fmt::Error::custom(\"\");",
          "    assert_eq!(error, fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyStruct;",
          "    impl std::fmt::Display for MyStruct {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"MyStruct display\");",
          "        }",
          "    }",
          "",
          "    let my_struct = MyStruct;",
          "    let error = fmt::Error::custom(my_struct);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error, fmt::Error);"
        ],
        "code": [
          "{",
          "    struct MyStruct;",
          "    impl std::fmt::Display for MyStruct {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"MyStruct display\");",
          "        }",
          "    }",
          "",
          "    let my_struct = MyStruct;",
          "    let error = fmt::Error::custom(my_struct);",
          "    assert_eq!(error, fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]