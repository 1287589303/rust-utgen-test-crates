[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(-32768)));",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap(), MyVisitor.visit_i16(-32768).unwrap());",
          "    let content = Content::I16(32767);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(32767)));",
          "    let content = Content::Bool(true);",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    let content = Content::String(String::from(\"not an i16\"));",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());"
        ],
        "code": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(-32768)));",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap(), MyVisitor.visit_i16(-32768).unwrap());",
          "    let content = Content::I16(32767);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(32767)));",
          "    let content = Content::Bool(true);",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    let content = Content::String(String::from(\"not an i16\"));",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I16(32767);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(32767)));"
        ],
        "code": [
          "{",
          "    let content = Content::I16(32767);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Ok(MyVisitor.visit_i16(32767)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"not an i16\"));",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).is_err(), true);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap_err().to_string(), \"invalid type: string \\\"not an i16\\\", expected i16\");"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"not an i16\"));",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).is_err(), true);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap_err().to_string(), \"invalid type: string \\\"not an i16\\\", expected i16\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::I16(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap(), 42);",
          "    let content = Content::U16(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::String(\"test\".to_string());",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::Seq(vec![Content::I16(1), Content::I16(2)]);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::I16(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_ok());",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor).unwrap(), 42);",
          "    let content = Content::U16(42);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::String(\"test\".to_string());",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "    let content = Content::Seq(vec![Content::I16(1), Content::I16(2)]);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    assert!(deserializer.deserialize_i16(MyVisitor).is_err());",
          "    assert!(matches!(deserializer.deserialize_i16(MyVisitor), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U16(100);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Err(deserializer.invalid_type(&MyVisitor)));"
        ],
        "code": [
          "{",
          "    let content = Content::U16(100);",
          "    let deserializer = ContentRefDeserializer { content: &content, err: PhantomData };",
          "    // Assume `MyVisitor` is a concrete implementation of `Visitor`.",
          "    deserializer.deserialize_i16(MyVisitor);",
          "    assert_eq!(deserializer.deserialize_i16(MyVisitor), Err(deserializer.invalid_type(&MyVisitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]