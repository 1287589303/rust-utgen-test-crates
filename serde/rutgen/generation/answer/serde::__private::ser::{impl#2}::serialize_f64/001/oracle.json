[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "// DummySerializer implementation",
      "struct DummySerializer;",
      "",
      "impl Serializer for DummySerializer {",
      "    type Ok = ();",
      "    type Error = Error;",
      "    type SerializeSeq = Impossible<(), Error>;",
      "    type SerializeTuple = Impossible<(), Error>;",
      "    type SerializeTupleStruct = Impossible<(), Error>;",
      "    type SerializeMap = Impossible<(), Error>;",
      "    type SerializeStruct = Impossible<(), Error>;",
      "    type SerializeTupleVariant = Impossible<(), Error>;",
      "    type SerializeStructVariant = Impossible<(), Error>;",
      "",
      "    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
      "        Err(Error)",
      "    }",
      "",
      "    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
      "        Err(Error)",
      "    }",
      "",
      "    fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> {",
      "        Err(Error)",
      "    }",
      "    ",
      "    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {",
      "        Err(Error)",
      "    }",
      "",
      "    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
      "        Err(Error)",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::NAN);",
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NEG_INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(1.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(-1.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(2.718281828459045), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::MAX), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::MIN), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(12345.6789), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(-12345.6789), Err(_)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::INFINITY);",
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NEG_INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(1.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(-1.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(2.718281828459045), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::MAX), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::MIN), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(12345.6789), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(-12345.6789), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(0.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(-1.0), Err(serializer.bad_type(Unsupported::Float)));",
          "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(1.234);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_f64(1.234);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(1.234);",
          "    let result = serializer.serialize_f64(1.234);",
          "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Float)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(-1.234);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(serializer.serialize_f64(-1.234), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(3.14159), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(1.0e10), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Err(_)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(-1.234);",
          "    assert!(matches!(serializer.serialize_f64(-1.234), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(0.0), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(3.14159), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(1.0e10), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::INFINITY), Err(_)));",
          "    assert!(matches!(serializer.serialize_f64(f64::NAN), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(1_000_000_000.0);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(",
          "    serializer.serialize_f64(1_000_000_000.0),",
          "    Err(ref e) if e == &serializer.bad_type(Unsupported::Float)",
          "    ));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(1_000_000_000.0);",
          "    assert!(matches!(",
          "    serializer.serialize_f64(1_000_000_000.0),",
          "    Err(ref e) if e == &serializer.bad_type(Unsupported::Float)",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(-1_000_000_000.0);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(serializer.serialize_f64(-1_000_000_000.0), Err(Error)));"
        ],
        "code": [
          "{",
          "    let serializer = TaggedSerializer {",
          "        type_ident: \"TestType\",",
          "        variant_ident: \"TestVariant\",",
          "        tag: \"test_tag\",",
          "        variant_name: \"test_variant_name\",",
          "        delegate: DummySerializer,",
          "    };",
          "    let _ = serializer.serialize_f64(-1_000_000_000.0);",
          "    assert!(matches!(serializer.serialize_f64(-1_000_000_000.0), Err(Error)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]