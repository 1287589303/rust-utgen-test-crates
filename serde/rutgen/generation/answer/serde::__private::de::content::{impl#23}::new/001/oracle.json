[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Bool(true));",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "    assert!(matches!(deserializer.content, Content::Bool(_)));",
          "    assert!(deserializer.content.is_some());"
        ],
        "code": [
          "{",
          "    let content = Content::Bool(true);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::Bool(true));",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "    assert!(matches!(deserializer.content, Content::Bool(_)));",
          "    assert!(deserializer.content.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::U8(255));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::U8(_)));",
          "    assert!(matches!(deserializer.content, Content::U8(255)));",
          "    assert_eq!(std::mem::size_of::<ContentRefDeserializer>(), size_of_content_ref_deserializer());",
          "    assert!(std::mem::align_of::<ContentRefDeserializer>() > 0);"
        ],
        "code": [
          "{",
          "    let content = Content::U8(255);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::U8(255));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "    assert!(matches!(deserializer.content, Content::U8(_)));",
          "    assert!(matches!(deserializer.content, Content::U8(255)));",
          "    assert_eq!(std::mem::size_of::<ContentRefDeserializer>(), size_of_content_ref_deserializer());",
          "    assert!(std::mem::align_of::<ContentRefDeserializer>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U16(65535);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_phantom());"
        ],
        "code": [
          "{",
          "    let content = Content::U16(65535);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_phantom());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U32(4294967295);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::U32(4294967295));",
          "    assert!(deserializer.err.is::<PhantomData<E>>());"
        ],
        "code": [
          "{",
          "    let content = Content::U32(4294967295);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::U32(4294967295));",
          "    assert!(deserializer.err.is::<PhantomData<E>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "    assert!(matches!(deserializer.content, Content::U64(_)));"
        ],
        "code": [
          "{",
          "    let content = Content::U64(18446744073709551615);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "    assert!(matches!(deserializer.content, Content::U64(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.content == &content);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());"
        ],
        "code": [
          "{",
          "    let content = Content::I8(-128);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert!(deserializer.content == &content);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::I16(-32768));",
          "    assert!(deserializer.err.is_some());"
        ],
        "code": [
          "{",
          "    let content = Content::I16(-32768);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::I16(-32768));",
          "    assert!(deserializer.err.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I32(-2147483648);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.content, &Content::I32(-2147483648)));",
          "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));"
        ],
        "code": [
          "{",
          "    let content = Content::I32(-2147483648);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert!(matches!(deserializer.content, &Content::I32(-2147483648)));",
          "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_none());"
        ],
        "code": [
          "{",
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    let content = Content::I64(-9223372036854775808);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::F32(3.14));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());"
        ],
        "code": [
          "{",
          "    let content = Content::F32(3.14);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::F32(3.14));",
          "    assert!(deserializer.err.is::<PhantomData<_>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::F64(3.141592653589793);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::F64(3.141592653589793));",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());"
        ],
        "code": [
          "{",
          "    let content = Content::F64(3.141592653589793);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::F64(3.141592653589793));",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Char('c');",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.content == &content);",
          "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));",
          "    assert!(matches!(deserializer.content, Content::Char('c')));"
        ],
        "code": [
          "{",
          "    let content = Content::Char('c');",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert!(deserializer.content == &content);",
          "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));",
          "    assert!(matches!(deserializer.content, Content::Char('c')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::String(String::from(\"hello\"));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_some());",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer>() == std::any::TypeId::of::<ContentRefDeserializer<'_, _>>());"
        ],
        "code": [
          "{",
          "    let content = Content::String(String::from(\"hello\"));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(deserializer.err.is_some());",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer>() == std::any::TypeId::of::<ContentRefDeserializer<'_, _>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Bytes(b\"hello\");",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    let content = Content::Bytes(b\"hello\");",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);"
        ],
        "code": [
          "{",
          "    let content = Content::Bytes(b\"hello\");",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    let content = Content::Bytes(b\"hello\");",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Seq(vec![Content::Bool(true), Content::U8(255)]);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer::<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer::<&Content<'_>, ()>>());",
          "    assert!(std::any::TypeId::of::<Content<'_>>() == std::any::TypeId::of::<Content>());"
        ],
        "code": [
          "{",
          "    let content = Content::Seq(vec![Content::Bool(true), Content::U8(255)]);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::any::TypeId::of::<ContentRefDeserializer::<_, _>>() == std::any::TypeId::of::<ContentRefDeserializer::<&Content<'_>, ()>>());",
          "    assert!(std::any::TypeId::of::<Content<'_>>() == std::any::TypeId::of::<Content>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::Struct(\"my_struct\", vec![(\"field1\", Content::I32(42))]);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::Struct(\"my_struct\", vec![(\"field1\", Content::I32(42))]));",
          "    assert!(deserializer.err.is::<PhantomData<E>>());"
        ],
        "code": [
          "{",
          "    let content = Content::Struct(\"my_struct\", vec![(\"field1\", Content::I32(42))]);",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::Struct(\"my_struct\", vec![(\"field1\", Content::I32(42))]));",
          "    assert!(deserializer.err.is::<PhantomData<E>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.content, &Content::None);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());"
        ],
        "code": [
          "{",
          "    let content = Content::None;",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &Content::None);",
          "    assert!(deserializer.err.is::<PhantomData<()>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner_content = Content::Bool(true);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "}"
        ],
        "oracle": [
          "    let inner_content = Content::Bool(true);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);"
        ],
        "code": [
          "{",
          "    let inner_content = Content::Bool(true);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    let inner_content = Content::Bool(true);",
          "    let content = Content::Some(Box::new(inner_content));",
          "    let deserializer = ContentRefDeserializer::new(&content);",
          "    assert_eq!(deserializer.content, &content);",
          "    assert!(std::mem::size_of_val(&deserializer.err) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]