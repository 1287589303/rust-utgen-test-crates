{
  "name": "serde::__private::ser::{impl#4}::serialize_bytes",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1073:5:1075:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::ByteArray))\n"
      ],
      "input_infer": "input: any byte array input, expected output: Result::Err(Self::bad_type(Unsupported::ByteArray))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "struct MySerializeMap;",
            "",
            "impl SerializeMap for MySerializeMap {",
            "    type Ok = ();",
            "    type Error = Error;",
            "",
            "    fn serialize_entry<K, V>(&mut self, _key: K, _value: V) -> Result<Self::Ok, Self::Error>",
            "    where",
            "        K: Serialize,",
            "        V: Serialize,",
            "    {",
            "        Err(Error)",
            "    }",
            "",
            "    fn end(self) -> Result<Self::Ok, Self::Error> {",
            "        Ok(())",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::ByteArray)));"
              ],
              "code": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[]);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::ByteArray)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1]);",
                "}"
              ],
              "oracle": [
                "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
                "    assert_eq!(result, Err(expected_error));"
              ],
              "code": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1]);",
                "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
                "    assert_eq!(result, Err(expected_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
                "}"
              ],
              "oracle": [
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
                "    assert_eq!(result, Err(Self::bad_type(Unsupported::ByteArray)));"
              ],
              "code": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[1, 2, 3]);",
                "    assert_eq!(result, Err(Self::bad_type(Unsupported::ByteArray)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[0; 1024]);",
                "}"
              ],
              "oracle": [
                "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
                "    assert_eq!(result, Err(expected_error));"
              ],
              "code": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[0; 1024]);",
                "    let expected_error = serializer.bad_type(Unsupported::ByteArray);",
                "    assert_eq!(result, Err(expected_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[255, 128, 64]);",
                "}"
              ],
              "oracle": [
                "    let result = serializer.serialize_bytes(&[255, 128, 64]); assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::ByteArray)));"
              ],
              "code": [
                "{",
                "    let mut map = MySerializeMap {};",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let result = serializer.serialize_bytes(&[255, 128, 64]);",
                "    let result = serializer.serialize_bytes(&[255, 128, 64]); assert_eq!(result, Err(FlatMapSerializer::bad_type(Unsupported::ByteArray)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}