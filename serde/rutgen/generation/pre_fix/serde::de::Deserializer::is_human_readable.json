{
  "name": "serde::de::Deserializer::is_human_readable",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1222:5:1224:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: true\n"
      ],
      "input_infer": "self: Any instance of a type implementing the Deserializer trait\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for CustomDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i8<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i16<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u8<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u16<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_f32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_f64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_char<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_str<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bytes<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_byte_buf<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_option<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_unit<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_unit_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_newtype_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_seq<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_tuple<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_tuple_struct<V>(self, _name: &'static str, _len: usize, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_map<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_struct<V>(self, _name: &'static str, _fields: &'static [&'static str], _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_enum<V>(self, _name: &'static str, _variants: &'static [&'static str], _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_identifier<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_ignored_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        ",
                "        fn is_human_readable(&self) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let deserializer = CustomDeserializer;",
                "    let _ = deserializer.is_human_readable();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.is_human_readable(), true);"
              ],
              "code": [
                "{",
                "    struct CustomDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for CustomDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i8<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i16<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_i64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u8<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u16<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_u64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_f32<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_f64<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_char<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_str<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bytes<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_byte_buf<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_option<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_unit<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_unit_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_newtype_struct<V>(self, _name: &'static str, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_seq<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_tuple<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_tuple_struct<V>(self, _name: &'static str, _len: usize, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_map<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_struct<V>(self, _name: &'static str, _fields: &'static [&'static str], _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_enum<V>(self, _name: &'static str, _variants: &'static [&'static str], _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_identifier<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_ignored_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        ",
                "        fn is_human_readable(&self) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let deserializer = CustomDeserializer;",
                "    let _ = deserializer.is_human_readable();",
                "    assert_eq!(deserializer.is_human_readable(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherCustomDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for AnotherCustomDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        ",
                "        fn is_human_readable(&self) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let deserializer = AnotherCustomDeserializer;",
                "    let _ = deserializer.is_human_readable();",
                "}"
              ],
              "oracle": [
                "    assert!(deserializer.is_human_readable() == true);"
              ],
              "code": [
                "{",
                "    struct AnotherCustomDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for AnotherCustomDeserializer {",
                "        type Error = serde::de::value::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_bool<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        fn deserialize_string<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> { unimplemented!() }",
                "        ",
                "        fn is_human_readable(&self) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let deserializer = AnotherCustomDeserializer;",
                "    let _ = deserializer.is_human_readable();",
                "    assert!(deserializer.is_human_readable() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}