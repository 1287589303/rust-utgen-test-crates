{
  "name": "serde::ser::impls::format_u8",
  "mod_info": {
    "name": "ser::impls",
    "loc": "serde/src/ser/mod.rs:113:1:113:11"
  },
  "visible": false,
  "loc": "serde/src/ser/impls.rs:767:1:784:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: n >= 100 at line 768 is true, with bound n == 100\n",
        "expected return value/type: 3\n"
      ],
      "input_infer": "n = 0 to 255, out = array of length 3 for n >= 100, array of length 2 for n >= 10, array of length 1 for n < 10\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(100, &mut out);",
                "}"
              ],
              "oracle": [
                "    out[0] == b'1'",
                "    out[1] == b'0'",
                "    out[2] == b'0'",
                "    result == 3"
              ],
              "code": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(100, &mut out);",
                "    out[0] == b'1'",
                "    out[1] == b'0'",
                "    out[2] == b'0'",
                "    result == 3",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(101, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0; 3];",
                "    let result = format_u8(100, &mut out);",
                "    assert_eq!(result, 3);",
                "    assert_eq!(out[0], b'1');",
                "    assert_eq!(out[1], b'0');",
                "    assert_eq!(out[2], b'0');"
              ],
              "code": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(101, &mut out);",
                "    let mut out = [0; 3];",
                "    let result = format_u8(100, &mut out);",
                "    assert_eq!(result, 3);",
                "    assert_eq!(out[0], b'1');",
                "    assert_eq!(out[1], b'0');",
                "    assert_eq!(out[2], b'0');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(255, &mut out);",
                "}"
              ],
              "oracle": [
                "    out[0] == b'2'",
                "    out[1] == b'5'",
                "    out[2] == b'5'",
                "    result == 3"
              ],
              "code": [
                "{",
                "    let mut out = [0; 3];",
                "    let result = format_u8(255, &mut out);",
                "    out[0] == b'2'",
                "    out[1] == b'5'",
                "    out[2] == b'5'",
                "    result == 3",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: n >= 100 at line 768 is false\n",
        "precondition: n >= 10 at line 775 is true, with bound n == 10\n",
        "expected return value/type: 2\n"
      ],
      "input_infer": "n = 10 to 99, out is a mutable byte array with at least 2 elements\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(10, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);",
                "    assert_eq!(out, [b'1', b'0']);"
              ],
              "code": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(10, &mut out);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(out, [b'1', b'0']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(11, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);",
                "    assert_eq!(out, [b'1', b'1']);"
              ],
              "code": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(11, &mut out);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(out, [b'1', b'1']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(50, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);",
                "    assert_eq!(out[0], b'5');",
                "    assert_eq!(out[1], b'0');"
              ],
              "code": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(50, &mut out);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(out[0], b'5');",
                "    assert_eq!(out[1], b'0');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(99, &mut out);",
                "}"
              ],
              "oracle": [
                "    out[0] == b'9'",
                "    out[1] == b'9'",
                "    result == 2"
              ],
              "code": [
                "{",
                "    let mut out: [u8; 2] = [0; 2];",
                "    let result = format_u8(99, &mut out);",
                "    out[0] == b'9'",
                "    out[1] == b'9'",
                "    result == 2",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: n >= 100 at line 768 is false\n",
        "precondition: n >= 10 at line 775 is false\n",
        "expected return value/type: 1\n"
      ],
      "input_infer": "n = 0 to 9, out = any mutable byte array of at least length 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(0, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(0, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0');"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(0, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(0, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(1, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 1);",
                "    assert_eq!(out[1], 0);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(1, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 1);",
                "    assert_eq!(out[1], 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(2, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 2);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(2, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(3, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(out, [b'3']);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(3, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out, [b'3']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(4, &mut out);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 4);",
                "    assert_eq!(out[1], 0);   // Verify that out[1] is not written to since n < 10",
                "    assert_eq!(out[2], 0);   // Verify that out[2] is not written to since n < 10"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(4, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 4);",
                "    assert_eq!(out[1], 0);   // Verify that out[1] is not written to since n < 10",
                "    assert_eq!(out[2], 0);   // Verify that out[2] is not written to since n < 10",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(5, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(5, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 5);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(5, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(5, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(6, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(6, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'6');"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(6, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(6, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'6');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(7, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(7, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out, [b'0' + 7]);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(7, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(7, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out, [b'0' + 7]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(8, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(8, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 8);"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(8, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(8, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'0' + 8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(9, &mut out);",
                "}"
              ],
              "oracle": [
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(9, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'9');"
              ],
              "code": [
                "{",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(9, &mut out);",
                "    let mut out = [0u8; 1];",
                "    let result = format_u8(9, &mut out);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(out[0], b'9');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}