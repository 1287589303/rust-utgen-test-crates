{
  "name": "serde::de::Visitor::visit_bytes",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1553:5:1558:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Bytes(v), &self))\n"
      ],
      "input_infer": "Test input conditions or ranges: test with various byte arrays including empty array, single byte arrays (e.g., &[0]), and large byte arrays (e.g., &[255; 1024]), including edge cases where input is null or not provided.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[]);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(&[]), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[0]);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bytes(&[0]), &visitor));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[0]);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::invalid_type(Unexpected::Bytes(&[0]), &visitor));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[255; 1024]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(&[255; 1024]), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(&[255; 1024]);",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(&[255; 1024]), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(std::ptr::null());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(std::ptr::null()), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(formatter, \"expected a byte array\")",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_bytes(std::ptr::null());",
                "    assert_eq!(result, Err(Error::invalid_type(Unexpected::Bytes(std::ptr::null()), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}