{
  "name": "serde::__private::ser::{impl#2}::serialize_i64",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:131:5:133:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(self.bad_type(Unsupported::Integer))\n"
      ],
      "input_infer": "Test input conditions or ranges: any valid i64 value (including boundary cases -9223372036854775808 and 9223372036854775807)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "struct MockSerializer;",
            "",
            "impl Serializer for MockSerializer {",
            "    type Ok = ();",
            "    type Error = Error;",
            "    type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
            "    type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
            "    type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
            "    type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
            "    type SerializeMap = Impossible<Self::Ok, Self::Error>;",
            "    type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
            "",
            "    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_some<T>(self, _: &T) -> Result<Self::Ok, Self::Error>",
            "    where",
            "        T: ?Sized + Serialize,",
            "    {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_unit_variant(",
            "        self,",
            "        _: &'static str,",
            "        _: u32,",
            "        _: &'static str,",
            "    ) -> Result<Self::Ok, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_newtype_struct<T>(",
            "        self,",
            "        _: &'static str,",
            "        _: &T,",
            "    ) -> Result<Self::Ok, Self::Error>",
            "    where",
            "        T: ?Sized + Serialize,",
            "    {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_newtype_variant<T>(",
            "        self,",
            "        _: &'static str,",
            "        _: u32,",
            "        _: &'static str,",
            "        _: &T,",
            "    ) -> Result<Self::Ok, Self::Error>",
            "    where",
            "        T: ?Sized + Serialize,",
            "    {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_tuple_struct(",
            "        self,",
            "        _: &'static str,",
            "        _: usize,",
            "    ) -> Result<Self::SerializeTupleStruct, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "    fn serialize_struct(",
            "        self,",
            "        _: &'static str,",
            "        _: usize,",
            "    ) -> Result<Self::SerializeStruct, Self::Error> {",
            "        unimplemented!()",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(-9223372036854775808);",
                "}"
              ],
              "oracle": [
                "    Err(self.bad_type(Unsupported::Integer))"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(-9223372036854775808);",
                "    Err(self.bad_type(Unsupported::Integer))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(0);",
                "}"
              ],
              "oracle": [
                "    let serializer = TaggedSerializer {",
                "    type_ident: \"TestType\",",
                "    variant_ident: \"TestVariant\",",
                "    tag: \"tag\",",
                "    variant_name: \"variant_name\",",
                "    delegate: MockSerializer,",
                "    };",
                "    let result = serializer.serialize_i64(0);",
                "    assert!(result.is_err());",
                "    match result {",
                "    Err(e) => {",
                "    assert_eq!(e.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
                "    },",
                "    _ => {}",
                "    }"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(0);",
                "    let serializer = TaggedSerializer {",
                "    type_ident: \"TestType\",",
                "    variant_ident: \"TestVariant\",",
                "    tag: \"tag\",",
                "    variant_name: \"variant_name\",",
                "    delegate: MockSerializer,",
                "    };",
                "    let result = serializer.serialize_i64(0);",
                "    assert!(result.is_err());",
                "    match result {",
                "    Err(e) => {",
                "    assert_eq!(e.to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Integer\");",
                "    },",
                "    _ => {}",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(9223372036854775807);",
                "}"
              ],
              "oracle": [
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "    let _ = serializer.serialize_i64(9223372036854775807);",
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), serializer.bad_type(Unsupported::Integer));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}