{
  "name": "serde::__private::de::{impl#7}::deserialize_other",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": false,
  "loc": "serde/src/private/de.rs:2502:5:2504:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::custom(\"can only flatten structs and maps\"))\n"
      ],
      "input_infer": "input must be a type that is not a struct or map and should trigger the error, e.g., primitive types like i32, f64, bool, or an unsupported type like an enum, or an empty variant representation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_any::<SomeVisitor>(), Err(Error::custom(\"can only flatten structs and maps\")));"
              ],
              "code": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "    assert_eq!(deserializer.deserialize_any::<SomeVisitor>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_any::<Content>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "    assert!(matches!(deserializer.deserialize_any::<Content>(), Err(Error::custom(\"can only flatten structs and maps\"))));",
                "    let result: Result<Content, serde::de::Error> = deserializer.deserialize_any();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::custom(\"can only flatten structs and maps\"));",
                "    assert!(deserializer.deserialize_any::<()>().is_err());"
              ],
              "code": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "    assert_eq!(deserializer.deserialize_any::<Content>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "    assert!(matches!(deserializer.deserialize_any::<Content>(), Err(Error::custom(\"can only flatten structs and maps\"))));",
                "    let result: Result<Content, serde::de::Error> = deserializer.deserialize_any();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::custom(\"can only flatten structs and maps\"));",
                "    assert!(deserializer.deserialize_any::<()>().is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_other::<()>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "    assert!(deserializer.is_human_readable());",
                "    assert!(deserializer.deserialize_any::<()>().is_err());",
                "    assert_eq!(deserializer.deserialize_any::<()>().unwrap_err(), Error::custom(\"can only flatten structs and maps\"));"
              ],
              "code": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "    assert_eq!(deserializer.deserialize_other::<()>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "    assert!(deserializer.is_human_readable());",
                "    assert!(deserializer.deserialize_any::<()>().is_err());",
                "    assert_eq!(deserializer.deserialize_any::<()>().unwrap_err(), Error::custom(\"can only flatten structs and maps\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_other::<()>(), Err(Error::custom(\"can only flatten structs and maps\")));"
              ],
              "code": [
                "{",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        type Error = serde::de::Error;",
                "",
                "        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error> where V: Visitor<'de> {",
                "            self.deserialize_other::<V>()",
                "        }",
                "",
                "        fn is_human_readable(&self) -> bool { true }",
                "",
                "        fn deserialize_other<V>() -> Result<V, Self::Error> {",
                "            Err(Error::custom(\"can only flatten structs and maps\"))",
                "        }",
                "    }",
                "",
                "    let deserializer = TestDeserializer;",
                "    let _ = deserializer.deserialize_any();",
                "    assert_eq!(deserializer.deserialize_other::<()>(), Err(Error::custom(\"can only flatten structs and maps\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}