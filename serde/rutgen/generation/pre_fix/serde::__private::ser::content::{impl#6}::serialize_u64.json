{
  "name": "serde::__private::ser::content::{impl#6}::serialize_u64",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:604:9:606:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::U64(v))\n"
      ],
      "input_infer": "v: u64 in the range [0, 2^64-1]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u64(0), Ok(Content::U64(0)));",
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));",
                "    assert_eq!(serializer.serialize_u64(u64::MAX), Ok(Content::U64(u64::MAX)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(0);",
                "    assert_eq!(serializer.serialize_u64(0), Ok(Content::U64(0)));",
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));",
                "    assert_eq!(serializer.serialize_u64(u64::MAX), Ok(Content::U64(u64::MAX)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(1);",
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(u64::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u64(u64::MAX), Ok(Content::U64(u64::MAX)));",
                "    assert_eq!(serializer.serialize_u64(0), Ok(Content::U64(0)));",
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));",
                "    assert_eq!(serializer.serialize_u64(123456789), Ok(Content::U64(123456789)));",
                "    assert_eq!(serializer.serialize_u64(999999999999999999), Ok(Content::U64(999999999999999999)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(u64::MAX);",
                "    assert_eq!(serializer.serialize_u64(u64::MAX), Ok(Content::U64(u64::MAX)));",
                "    assert_eq!(serializer.serialize_u64(0), Ok(Content::U64(0)));",
                "    assert_eq!(serializer.serialize_u64(1), Ok(Content::U64(1)));",
                "    assert_eq!(serializer.serialize_u64(123456789), Ok(Content::U64(123456789)));",
                "    assert_eq!(serializer.serialize_u64(999999999999999999), Ok(Content::U64(999999999999999999)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(123456789);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u64(123456789), Ok(Content::U64(123456789)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(123456789);",
                "    assert_eq!(serializer.serialize_u64(123456789), Ok(Content::U64(123456789)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(9876543210);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u64(9876543210), Ok(Content::U64(9876543210)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_u64(9876543210);",
                "    assert_eq!(serializer.serialize_u64(9876543210), Ok(Content::U64(9876543210)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}