{
  "name": "serde::__private::ser::content::{impl#6}::serialize_bool",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:572:9:574:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Bool(v))\n"
      ],
      "input_infer": "test input conditions: bool values including true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _result = serializer.serialize_bool(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(Content::Bool(true)));",
                "    assert!(matches!(_result, Ok(Content::Bool(v)) if v == true));",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.as_ref().unwrap().is_bool(), true);",
                "    assert!(matches!(_result, Ok(Content::Bool(_))));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _result = serializer.serialize_bool(true);",
                "    assert_eq!(_result, Ok(Content::Bool(true)));",
                "    assert!(matches!(_result, Ok(Content::Bool(v)) if v == true));",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.as_ref().unwrap().is_bool(), true);",
                "    assert!(matches!(_result, Ok(Content::Bool(_))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _result = serializer.serialize_bool(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(Content::Bool(false)));",
                "    assert!(!matches!(_result, Err(_)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _result = serializer.serialize_bool(false);",
                "    assert_eq!(_result, Ok(Content::Bool(false)));",
                "    assert!(!matches!(_result, Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}