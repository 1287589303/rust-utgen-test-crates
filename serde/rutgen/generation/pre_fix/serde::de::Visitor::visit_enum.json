{
  "name": "serde::de::Visitor::visit_enum",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1671:5:1677:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::Enum, &self))\n"
      ],
      "input_infer": "Input condition: A must implement EnumAccess<'de> and raise an error upon visit_enum invocation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "    struct DummyEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for DummyEnumAccess {",
                "        type Variant = DummyVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct DummyVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = DummyVisitor;",
                "    let enum_access = DummyEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Enum, &visitor))"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "    struct DummyEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for DummyEnumAccess {",
                "        type Variant = DummyVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct DummyVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = DummyVisitor;",
                "    let enum_access = DummyEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "    Err(Error::invalid_type(Unexpected::Enum, &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct UnexpectedVisitor;",
                "    struct UnexpectedEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for UnexpectedEnumAccess {",
                "        type Variant = UnexpectedVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct UnexpectedVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for UnexpectedVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"unexpected visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = UnexpectedVisitor;",
                "    let enum_access = UnexpectedEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "}"
              ],
              "oracle": [
                "    Err(Error::invalid_type(Unexpected::Enum, &visitor))"
              ],
              "code": [
                "{",
                "    struct UnexpectedVisitor;",
                "    struct UnexpectedEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for UnexpectedEnumAccess {",
                "        type Variant = UnexpectedVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct UnexpectedVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for UnexpectedVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"unexpected visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = UnexpectedVisitor;",
                "    let enum_access = UnexpectedEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "    Err(Error::invalid_type(Unexpected::Enum, &visitor))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyEnumVisitor;",
                "    struct EmptyEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for EmptyEnumAccess {",
                "        type Variant = EmptyVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct EmptyVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for EmptyEnumVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"empty enum visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = EmptyEnumVisitor;",
                "    let enum_access = EmptyEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_enum(enum_access), Err(Error::invalid_type(Unexpected::Enum, &visitor)));"
              ],
              "code": [
                "{",
                "    struct EmptyEnumVisitor;",
                "    struct EmptyEnumAccess;",
                "",
                "    impl<'de> EnumAccess<'de> for EmptyEnumAccess {",
                "        type Variant = EmptyVariantAccess;",
                "",
                "        fn variant(self) -> Result<(Self::Variant, &'de str), Self::Error> {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    struct EmptyVariantAccess;",
                "",
                "    impl<'de> Visitor<'de> for EmptyEnumVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"empty enum visitor\")",
                "        }",
                "    }",
                "",
                "    let visitor = EmptyEnumVisitor;",
                "    let enum_access = EmptyEnumAccess;",
                "    let _ = visitor.visit_enum(enum_access);",
                "    assert_eq!(visitor.visit_enum(enum_access), Err(Error::invalid_type(Unexpected::Enum, &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}