{
  "name": "serde::__private::de::content::{impl#8}::expecting",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:578:9:580:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.name: non-empty string, fmt: mutable reference to a fmt::Formatter, expected return fmt::Result\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor {",
                "        name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { name: \"test_name\" };",
                "    let mut buffer = String::new();",
                "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
                "    let _ = visitor.expecting(fmt);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, \"a type tag `test_name` or any other value\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor {",
                "        name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { name: \"test_name\" };",
                "    let mut buffer = String::new();",
                "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
                "    let _ = visitor.expecting(fmt);",
                "    assert_eq!(buffer, \"a type tag `test_name` or any other value\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor {",
                "        name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { name: \"\" };",
                "    let mut buffer = String::new();",
                "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
                "    let _ = visitor.expecting(fmt);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, \"a type tag `` or any other value\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor {",
                "        name: &'static str,",
                "    }",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(fmt, \"a type tag `{}` or any other value\", self.name)",
                "        }",
                "    }",
                "",
                "    let visitor = TestVisitor { name: \"\" };",
                "    let mut buffer = String::new();",
                "    let fmt = &mut std::fmt::Formatter::new(&mut buffer);",
                "    let _ = visitor.expecting(fmt);",
                "    assert_eq!(buffer, \"a type tag `` or any other value\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}