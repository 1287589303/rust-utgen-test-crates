{
  "name": "serde::__private::de::content::{impl#5}::visit_f32",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:409:9:414:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::F32(value))\n"
      ],
      "input_infer": "f32 values in the range -3.40282347e+38 to 3.40282347e+38, including special cases such as NaN, Infinity, and -Infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(1.23_f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F32(1.23_f32)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(1.23_f32);",
                "    assert_eq!(result, Ok(Content::F32(1.23_f32)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-1.23_f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F32(-1.23_f32)));",
                "    let result_zero = visitor.visit_f32(0.0_f32);",
                "    assert_eq!(result_zero, Ok(Content::F32(0.0_f32)));",
                "    let result_positive = visitor.visit_f32(1.23_f32);",
                "    assert_eq!(result_positive, Ok(Content::F32(1.23_f32)));",
                "    let result_large = visitor.visit_f32(3.4028235e38_f32);",
                "    assert_eq!(result_large, Ok(Content::F32(3.4028235e38_f32)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-1.23_f32);",
                "    assert_eq!(result, Ok(Content::F32(-1.23_f32)));",
                "    let result_zero = visitor.visit_f32(0.0_f32);",
                "    assert_eq!(result_zero, Ok(Content::F32(0.0_f32)));",
                "    let result_positive = visitor.visit_f32(1.23_f32);",
                "    assert_eq!(result_positive, Ok(Content::F32(1.23_f32)));",
                "    let result_large = visitor.visit_f32(3.4028235e38_f32);",
                "    assert_eq!(result_large, Ok(Content::F32(3.4028235e38_f32)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(0.0_f32);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F32(0.0_f32)));",
                "    let result = visitor.visit_f32(-1.5_f32);",
                "    assert_eq!(result, Ok(Content::F32(-1.5_f32)));",
                "    let result = visitor.visit_f32(3.14_f32);",
                "    assert_eq!(result, Ok(Content::F32(3.14_f32)));",
                "    let result = visitor.visit_f32(f32::MAX);",
                "    assert_eq!(result, Ok(Content::F32(f32::MAX)));",
                "    let result = visitor.visit_f32(f32::MIN);",
                "    assert_eq!(result, Ok(Content::F32(f32::MIN)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(0.0_f32);",
                "    assert_eq!(result, Ok(Content::F32(0.0_f32)));",
                "    let result = visitor.visit_f32(-1.5_f32);",
                "    assert_eq!(result, Ok(Content::F32(-1.5_f32)));",
                "    let result = visitor.visit_f32(3.14_f32);",
                "    assert_eq!(result, Ok(Content::F32(3.14_f32)));",
                "    let result = visitor.visit_f32(f32::MAX);",
                "    assert_eq!(result, Ok(Content::F32(f32::MAX)));",
                "    let result = visitor.visit_f32(f32::MIN);",
                "    assert_eq!(result, Ok(Content::F32(f32::MIN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(std::f32::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NEG_INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(0.0));",
                "    ",
                "    let result = visitor.visit_f32(1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(1.0));",
                "    ",
                "    let result = visitor.visit_f32(-1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(-1.0));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(std::f32::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NEG_INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(0.0));",
                "    ",
                "    let result = visitor.visit_f32(1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(1.0));",
                "    ",
                "    let result = visitor.visit_f32(-1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(-1.0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NEG_INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(std::f32::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(0.0));",
                "    ",
                "    let result = visitor.visit_f32(-1.5);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(-1.5));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NEG_INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(std::f32::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::INFINITY));",
                "    ",
                "    let result = visitor.visit_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(0.0));",
                "    ",
                "    let result = visitor.visit_f32(-1.5);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(-1.5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NAN));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(std::f32::NAN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Content::F32(std::f32::NAN));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(3.40282347e+38);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::F32(3.40282347e+38)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(3.40282347e+38);",
                "    assert_eq!(result, Ok(Content::F32(3.40282347e+38)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-3.40282347e+38);",
                "}"
              ],
              "oracle": [
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-3.40282347e+38);",
                "    assert_eq!(result, Ok(Content::F32(-3.40282347e+38)));",
                "    let result = visitor.visit_f32(0.0);",
                "    assert_eq!(result, Ok(Content::F32(0.0)));",
                "    let result = visitor.visit_f32(3.40282347e+38);",
                "    assert_eq!(result, Ok(Content::F32(3.40282347e+38)));",
                "    let result = visitor.visit_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Content::F32(f32::NAN)));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-3.40282347e+38);",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_f32(-3.40282347e+38);",
                "    assert_eq!(result, Ok(Content::F32(-3.40282347e+38)));",
                "    let result = visitor.visit_f32(0.0);",
                "    assert_eq!(result, Ok(Content::F32(0.0)));",
                "    let result = visitor.visit_f32(3.40282347e+38);",
                "    assert_eq!(result, Ok(Content::F32(3.40282347e+38)));",
                "    let result = visitor.visit_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Content::F32(f32::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}