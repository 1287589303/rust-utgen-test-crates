{
  "name": "serde::ser::fmt::{impl#1}::serialize_seq",
  "mod_info": {
    "name": "ser::fmt",
    "loc": "serde/src/ser/mod.rs:112:1:112:9"
  },
  "visible": true,
  "loc": "serde/src/ser/fmt.rs:116:5:118:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(fmt::Error)\n"
      ],
      "input_infer": "_len: None, _len: Some(0), _len: Some(usize::MAX), _len: Some(1), _len: Some(100), _len: Some(usize::MAX - 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(None);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(serializer.serialize_seq(None), Err(fmt::Error)));"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(None);",
                "    assert!(matches!(serializer.serialize_seq(None), Err(fmt::Error)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_seq(Some(0)), Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(0));",
                "    assert_eq!(serializer.serialize_seq(Some(0)), Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(usize::MAX));",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.serialize_seq(Some(usize::MAX)).is_err());",
                "    assert_eq!(serializer.serialize_seq(Some(usize::MAX)).unwrap_err(), fmt::Error);",
                "    assert!(serializer.serialize_seq(None).is_err());",
                "    assert_eq!(serializer.serialize_seq(None).unwrap_err(), fmt::Error);"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(usize::MAX));",
                "    assert!(serializer.serialize_seq(Some(usize::MAX)).is_err());",
                "    assert_eq!(serializer.serialize_seq(Some(usize::MAX)).unwrap_err(), fmt::Error);",
                "    assert!(serializer.serialize_seq(None).is_err());",
                "    assert_eq!(serializer.serialize_seq(None).unwrap_err(), fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_seq(Some(1)), Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(1));",
                "    assert_eq!(serializer.serialize_seq(Some(1)), Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(100));",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.serialize_seq(Some(100)).is_err());",
                "    assert_eq!(serializer.serialize_seq(Some(100)).unwrap_err(), fmt::Error);"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(100));",
                "    assert!(serializer.serialize_seq(Some(100)).is_err());",
                "    assert_eq!(serializer.serialize_seq(Some(100)).unwrap_err(), fmt::Error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(usize::MAX - 1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_seq(Some(usize::MAX - 1)), Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let serializer: &mut fmt::Formatter = &mut fmt::Formatter::new();",
                "    let _ = serializer.serialize_seq(Some(usize::MAX - 1));",
                "    assert_eq!(serializer.serialize_seq(Some(usize::MAX - 1)), Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}