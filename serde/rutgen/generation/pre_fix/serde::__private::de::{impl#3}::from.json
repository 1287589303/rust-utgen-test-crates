{
  "name": "serde::__private::de::{impl#3}::from",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:2447:5:2452:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StrDeserializer {\n            value: self,\n            marker: PhantomData,\n        }\n"
      ],
      "input_infer": "self must be a non-empty string slice &str, as well as an empty string, to ensure all edge cases are covered.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &str = \"test string\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "}"
              ],
              "oracle": [
                "    let input: &str = \"test string\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, \"test string\");",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));"
              ],
              "code": [
                "{",
                "    let input: &str = \"test string\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    let input: &str = \"test string\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, \"test string\");",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &str = \"\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "}"
              ],
              "oracle": [
                "    let input: &str = \"\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "    ",
                "    let input: &str = \"test\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "    ",
                "    let input: &str = \" \";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));"
              ],
              "code": [
                "{",
                "    let input: &str = \"\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    let input: &str = \"\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "    ",
                "    let input: &str = \"test\";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "    ",
                "    let input: &str = \" \";",
                "    let deserializer: StrDeserializer<Error> = input.from();",
                "    assert_eq!(deserializer.value, input);",
                "    assert!(std::mem::discriminant(&deserializer.marker) == std::mem::discriminant(&PhantomData::<Error>));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}