{
  "name": "serde::__private::ser::{impl#5}::serialize_key",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1194:5:1199:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "T must implement the Serialize trait, and self.0 must be a valid instance of a type that also implements the SerializeMap trait; expect a successful Result<(), Self::Error> for valid inputs or an error for types that do not implement Serialize.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    flat_map.serialize_key(&\"valid_string\").unwrap();",
                "}"
              ],
              "oracle": [
                "    flat_map.serialize_key(&\"valid_string\").unwrap();",
                "    flat_map.serialize_key(&123).unwrap();",
                "    flat_map.serialize_key(&true).unwrap();",
                "    flat_map.serialize_key(&vec![1, 2, 3]).unwrap();",
                "    flat_map.serialize_key(&None).unwrap();",
                "    flat_map.serialize_key(&Some(\"optional\")).unwrap();"
              ],
              "code": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    flat_map.serialize_key(&\"valid_string\").unwrap();",
                "    flat_map.serialize_key(&\"valid_string\").unwrap();",
                "    flat_map.serialize_key(&123).unwrap();",
                "    flat_map.serialize_key(&true).unwrap();",
                "    flat_map.serialize_key(&vec![1, 2, 3]).unwrap();",
                "    flat_map.serialize_key(&None).unwrap();",
                "    flat_map.serialize_key(&Some(\"optional\")).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    flat_map.serialize_key(&42).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(flat_map.serialize_key(&42).is_ok());",
                "    assert!(flat_map.serialize_key(&\"test\").is_ok());",
                "    assert!(flat_map.serialize_key(&Some(3.14)).is_ok());",
                "    assert!(flat_map.serialize_key(&vec![1, 2, 3]).is_ok());",
                "    assert!(flat_map.serialize_key(&()).is_ok());"
              ],
              "code": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Ok(())",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    flat_map.serialize_key(&42).unwrap();",
                "    assert!(flat_map.serialize_key(&42).is_ok());",
                "    assert!(flat_map.serialize_key(&\"test\").is_ok());",
                "    assert!(flat_map.serialize_key(&Some(3.14)).is_ok());",
                "    assert!(flat_map.serialize_key(&vec![1, 2, 3]).is_ok());",
                "    assert!(flat_map.serialize_key(&()).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Err(Error {})",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    let result = flat_map.serialize_key(&std::ptr::null());",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    let result = flat_map.serialize_key(&std::ptr::null());",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error {});"
              ],
              "code": [
                "{",
                "    struct MockSerializeMap;",
                "",
                "    impl SerializeMap for MockSerializeMap {",
                "        type Ok = ();",
                "        type Error = Error;",
                "",
                "        fn serialize_key<T>(&mut self, _key: &T) -> Result<(), Self::Error>",
                "        where",
                "            T: ?Sized + Serialize,",
                "        {",
                "            Err(Error {})",
                "        }",
                "",
                "        fn serialize_value<T>(&mut self, _value: &T) -> Result<(), Self::Error> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end(self) -> Result<Self::Ok, Self::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    let result = flat_map.serialize_key(&std::ptr::null());",
                "    assert!(result.is_err());",
                "    let mut mock = MockSerializeMap;",
                "    let mut flat_map = FlatMapSerializeMap(&mut mock);",
                "    let result = flat_map.serialize_key(&std::ptr::null());",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error {});",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}