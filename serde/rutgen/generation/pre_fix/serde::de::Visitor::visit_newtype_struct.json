{
  "name": "serde::de::Visitor::visit_newtype_struct",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1638:5:1644:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Error::invalid_type(Unexpected::NewtypeStruct, &self))\n"
      ],
      "input_infer": "Input type: Any `Deserializer` containing a newtype struct, ensuring it triggers an invalid type error with Unexpected::NewtypeStruct.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"test visitor\")",
                "        }",
                "    }",
                "",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = TestDeserializer {};",
                "    let visitor = TestVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "}"
              ],
              "oracle": [
                "    visitor.visit_newtype_struct(deserializer).unwrap_err();",
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));",
                "    assert!(matches!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, _))));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"test visitor\")",
                "        }",
                "    }",
                "",
                "    struct TestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for TestDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = TestDeserializer {};",
                "    let visitor = TestVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "    visitor.visit_newtype_struct(deserializer).unwrap_err();",
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));",
                "    assert!(matches!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, _))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherTestVisitor;",
                "    impl<'de> Visitor<'de> for AnotherTestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"another test visitor\")",
                "        }",
                "    }",
                "",
                "    struct AnotherTestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for AnotherTestDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = AnotherTestDeserializer {};",
                "    let visitor = AnotherTestVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));"
              ],
              "code": [
                "{",
                "    struct AnotherTestVisitor;",
                "    impl<'de> Visitor<'de> for AnotherTestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"another test visitor\")",
                "        }",
                "    }",
                "",
                "    struct AnotherTestDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for AnotherTestDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = AnotherTestDeserializer {};",
                "    let visitor = AnotherTestVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyVisitor;",
                "    impl<'de> Visitor<'de> for EmptyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"empty visitor\")",
                "        }",
                "    }",
                "",
                "    struct EmptyDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for EmptyDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = EmptyDeserializer {};",
                "    let visitor = EmptyVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));"
              ],
              "code": [
                "{",
                "    struct EmptyVisitor;",
                "    impl<'de> Visitor<'de> for EmptyVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            formatter.write_str(\"empty visitor\")",
                "        }",
                "    }",
                "",
                "    struct EmptyDeserializer;",
                "",
                "    impl<'de> Deserializer<'de> for EmptyDeserializer {",
                "        // Implementation details are not required for the test",
                "    }",
                "",
                "    let deserializer = EmptyDeserializer {};",
                "    let visitor = EmptyVisitor {};",
                "    let _ = visitor.visit_newtype_struct(deserializer);",
                "    assert_eq!(visitor.visit_newtype_struct(deserializer), Err(Error::invalid_type(Unexpected::NewtypeStruct, &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}