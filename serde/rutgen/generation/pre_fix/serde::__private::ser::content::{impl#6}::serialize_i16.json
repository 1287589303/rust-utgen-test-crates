{
  "name": "serde::__private::ser::content::{impl#6}::serialize_i16",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:580:9:582:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::I16(v))\n"
      ],
      "input_infer": "Test input conditions or ranges:  minimum value -32768, maximum value 32767, and test with boundary values -32768 and 32767 for i16 type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(-32768);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(-32768)));",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = serializer.serialize_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(-32768);",
                "    assert_eq!(result, Ok(Content::I16(-32768)));",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = serializer.serialize_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(Content::I16(1)));",
                "    let result = serializer.serialize_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "    let result = serializer.serialize_i16(-32768);",
                "    assert_eq!(result, Ok(Content::I16(-32768)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(Content::I16(0)));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(Content::I16(-1)));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(Content::I16(1)));",
                "    let result = serializer.serialize_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "    let result = serializer.serialize_i16(-32768);",
                "    assert_eq!(result, Ok(Content::I16(-32768)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(32767);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::I16(32767)));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let result = serializer.serialize_i16(32767);",
                "    assert_eq!(result, Ok(Content::I16(32767)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}