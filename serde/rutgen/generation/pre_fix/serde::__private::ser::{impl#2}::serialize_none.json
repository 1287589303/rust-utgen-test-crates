{
  "name": "serde::__private::ser::{impl#2}::serialize_none",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:171:5:173:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(self.bad_type(Unsupported::Optional))\n"
      ],
      "input_infer": "self: TaggedSerializer<S> where S: Serializer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSerializer;",
                "",
                "    impl Serializer for MockSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<(), Error>;",
                "        type SerializeTuple = Impossible<(), Error>;",
                "        type SerializeTupleStruct = Impossible<(), Error>;",
                "        type SerializeTupleVariant = Impossible<(), Error>;",
                "        type SerializeMap = Impossible<(), Error>;",
                "        type SerializeStruct = Impossible<(), Error>;",
                "        type SerializeStructVariant = Impossible<(), Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Other required methods can be added here",
                "    }",
                "",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"Type\",",
                "        variant_ident: \"Variant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "",
                "    let result = serializer.serialize_none();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Optional)));"
              ],
              "code": [
                "{",
                "    struct MockSerializer;",
                "",
                "    impl Serializer for MockSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<(), Error>;",
                "        type SerializeTuple = Impossible<(), Error>;",
                "        type SerializeTupleStruct = Impossible<(), Error>;",
                "        type SerializeTupleVariant = Impossible<(), Error>;",
                "        type SerializeMap = Impossible<(), Error>;",
                "        type SerializeStruct = Impossible<(), Error>;",
                "        type SerializeStructVariant = Impossible<(), Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Other required methods can be added here",
                "    }",
                "",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"Type\",",
                "        variant_ident: \"Variant\",",
                "        tag: \"tag\",",
                "        variant_name: \"variant_name\",",
                "        delegate: MockSerializer,",
                "    };",
                "",
                "    let result = serializer.serialize_none();",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::Optional)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherMockSerializer;",
                "",
                "    impl Serializer for AnotherMockSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<(), Error>;",
                "        type SerializeTuple = Impossible<(), Error>;",
                "        type SerializeTupleStruct = Impossible<(), Error>;",
                "        type SerializeTupleVariant = Impossible<(), Error>;",
                "        type SerializeMap = Impossible<(), Error>;",
                "        type SerializeStruct = Impossible<(), Error>;",
                "        type SerializeStructVariant = Impossible<(), Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Other required methods can also be added here",
                "    }",
                "",
                "    let another_serializer = TaggedSerializer {",
                "        type_ident: \"AnotherType\",",
                "        variant_ident: \"AnotherVariant\",",
                "        tag: \"another_tag\",",
                "        variant_name: \"another_variant_name\",",
                "        delegate: AnotherMockSerializer,",
                "    };",
                "",
                "    let another_result = another_serializer.serialize_none();",
                "}"
              ],
              "oracle": [
                "    assert!(another_result.is_err());",
                "    assert_eq!(another_result.unwrap_err().to_string(), \"cannot serialize tagged newtype variant AnotherType::AnotherVariant containing Optional\");"
              ],
              "code": [
                "{",
                "    struct AnotherMockSerializer;",
                "",
                "    impl Serializer for AnotherMockSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<(), Error>;",
                "        type SerializeTuple = Impossible<(), Error>;",
                "        type SerializeTupleStruct = Impossible<(), Error>;",
                "        type SerializeTupleVariant = Impossible<(), Error>;",
                "        type SerializeMap = Impossible<(), Error>;",
                "        type SerializeStruct = Impossible<(), Error>;",
                "        type SerializeStructVariant = Impossible<(), Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn serialize_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeStruct, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Other required methods can also be added here",
                "    }",
                "",
                "    let another_serializer = TaggedSerializer {",
                "        type_ident: \"AnotherType\",",
                "        variant_ident: \"AnotherVariant\",",
                "        tag: \"another_tag\",",
                "        variant_name: \"another_variant_name\",",
                "        delegate: AnotherMockSerializer,",
                "    };",
                "",
                "    let another_result = another_serializer.serialize_none();",
                "    assert!(another_result.is_err());",
                "    assert_eq!(another_result.unwrap_err().to_string(), \"cannot serialize tagged newtype variant AnotherType::AnotherVariant containing Optional\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}