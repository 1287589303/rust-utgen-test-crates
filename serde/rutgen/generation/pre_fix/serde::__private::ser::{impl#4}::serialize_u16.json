{
  "name": "serde::__private::ser::{impl#4}::serialize_u16",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1045:5:1047:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Integer))\n"
      ],
      "input_infer": "u16 values in the range [0, 65535] should be tested, specifically the values at the boundaries (0, 65535) as well as some values in between (1, 32768, 65534).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 0;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let value: u16 = 0;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 1;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let value: u16 = 1;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 32768;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(32768), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let value: u16 = 32768;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(32768), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 65534;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(65534), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let value: u16 = 65534;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(65534), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 65535;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));"
              ],
              "code": [
                "{",
                "    let value: u16 = 65535;",
                "    let mut map: Vec<(&str,())> = Vec::new();",
                "    let serializer = FlatMapSerializer(&mut map);",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(value), Err(serializer.bad_type(Unsupported::Integer)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}