{
  "name": "serde::__private::de::content::{impl#8}::visit_u16",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:636:9:643:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid ranges for u16 input: 0 to 65535; test for minimum (0), maximum (65535), and values just below (65534) and just above (65536) the valid range.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(0u16);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(0))));",
                "    let result = visitor.visit_u16(65535u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(65535))));",
                "    let result = visitor.visit_u16(12345u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(12345))));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(0u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(0))));",
                "    let result = visitor.visit_u16(65535u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(65535))));",
                "    let result = visitor.visit_u16(12345u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(12345))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65535u16);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(65535))));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65535u16);",
                "    assert_eq!(result, Ok(TagOrContent::Content(Content::U16(65535))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65534u16);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert!(matches!(result.unwrap(), TagOrContent::Content(Content::U16(65534))));",
                "    assert!(matches!(result.unwrap(), TagOrContent::Content(_)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65534u16);",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result.unwrap(), TagOrContent::Content(Content::U16(65534))));",
                "    assert!(matches!(result.unwrap(), TagOrContent::Content(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65536u16);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.unwrap_err().to_string().contains(\"invalid type\"));",
                "    assert!(result.unwrap_err().to_string().contains(\"Unexpected::Unsigned(65536)\"));",
                "    assert!(result.unwrap_err().to_string().contains(\"TagOrContentVisitor\"));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = TagOrContent<'de>;",
                "        fn expecting(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    let visitor = TestVisitor;",
                "    let result = visitor.visit_u16(65536u16);",
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.unwrap_err().to_string().contains(\"invalid type\"));",
                "    assert!(result.unwrap_err().to_string().contains(\"Unexpected::Unsigned(65536)\"));",
                "    assert!(result.unwrap_err().to_string().contains(\"TagOrContentVisitor\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}