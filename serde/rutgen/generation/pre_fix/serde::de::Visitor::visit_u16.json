{
  "name": "serde::de::Visitor::visit_u16",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1401:5:1406:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid input range for u16: 0 to 65535, including boundary values (0, 65535) and typical values (e.g., 1, 12345, 65536 for invalid case).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_u16(0), Ok(()));",
                "    assert!(visitor.visit_u16(u16::MAX).is_ok());",
                "    assert!(visitor.visit_u16(1).is_ok());",
                "    assert!(visitor.visit_u16(100).is_ok());",
                "    assert!(visitor.visit_u16(u16::MIN).is_ok());",
                "    assert!(visitor.visit_u16(10_000).is_ok());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(0);",
                "    assert_eq!(visitor.visit_u16(0), Ok(()));",
                "    assert!(visitor.visit_u16(u16::MAX).is_ok());",
                "    assert!(visitor.visit_u16(1).is_ok());",
                "    assert!(visitor.visit_u16(100).is_ok());",
                "    assert!(visitor.visit_u16(u16::MIN).is_ok());",
                "    assert!(visitor.visit_u16(10_000).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(12345);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_u16(12345).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(u16::MAX).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(0).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(1).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65535).is_ok(), true);"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(12345);",
                "    assert_eq!(visitor.visit_u16(12345).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(u16::MAX).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(0).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(1).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65535).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(65535);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(visitor.visit_u16(0).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(1).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(32767).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65535).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65536).is_err(), true);"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(65535);",
                "    assert_eq!(visitor.visit_u16(0).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(1).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(32767).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65535).is_ok(), true);",
                "    assert_eq!(visitor.visit_u16(65536).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(65536);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(visitor.visit_u16(65536), Err(Error::invalid_type(Unexpected::Unsigned(65536), &visitor)));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = ();",
                "        fn expecting(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let visitor = TestVisitor;",
                "    let _ = visitor.visit_u16(65536);",
                "    assert!(matches!(visitor.visit_u16(65536), Err(Error::invalid_type(Unexpected::Unsigned(65536), &visitor)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}