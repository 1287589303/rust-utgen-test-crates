{
  "name": "serde::__private::de::content::{impl#5}::visit_borrowed_bytes",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:458:9:463:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Bytes(value))\n"
      ],
      "input_infer": "Valid byte slices of varying lengths, including empty slice: &[u8]; for example: &[], &[1, 2, 3], &[255]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "}"
              ],
              "oracle": [
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "    assert_eq!(result, Ok(Content::Bytes(Vec::new())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"test\");",
                "    assert_eq!(result, Ok(Content::Bytes(b\"test\".to_vec())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"\");",
                "    assert_eq!(result, Ok(Content::Bytes(Vec::new())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"some bytes\");",
                "    assert_eq!(result, Ok(Content::Bytes(b\"some bytes\".to_vec())));",
                "    ",
                "    let input: &[u8] = b\"\\xFF\\xFE\\xFD\";",
                "    let result = visitor.visit_borrowed_bytes(input);",
                "    assert_eq!(result, Ok(Content::Bytes(input.to_vec())));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "    assert_eq!(result, Ok(Content::Bytes(Vec::new())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"test\");",
                "    assert_eq!(result, Ok(Content::Bytes(b\"test\".to_vec())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"\");",
                "    assert_eq!(result, Ok(Content::Bytes(Vec::new())));",
                "    ",
                "    let result = visitor.visit_borrowed_bytes(b\"some bytes\");",
                "    assert_eq!(result, Ok(Content::Bytes(b\"some bytes\".to_vec())));",
                "    ",
                "    let input: &[u8] = b\"\\xFF\\xFE\\xFD\";",
                "    let result = visitor.visit_borrowed_bytes(input);",
                "    assert_eq!(result, Ok(Content::Bytes(input.to_vec())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Content::Bytes(vec![1])));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![1])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1, 2, 3]);",
                "}"
              ],
              "oracle": [
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1, 2, 3]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![1, 2, 3])));",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![])));",
                "    let result = visitor.visit_borrowed_bytes(&[255, 0, 128]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![255, 0, 128])));",
                "    let result = visitor.visit_borrowed_bytes(&b\"hello world\"[..]);",
                "    assert_eq!(result, Ok(Content::Bytes(b\"hello world\".to_vec())));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1, 2, 3]);",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[1, 2, 3]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![1, 2, 3])));",
                "    let result = visitor.visit_borrowed_bytes(&[]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![])));",
                "    let result = visitor.visit_borrowed_bytes(&[255, 0, 128]);",
                "    assert_eq!(result, Ok(Content::Bytes(vec![255, 0, 128])));",
                "    let result = visitor.visit_borrowed_bytes(&b\"hello world\"[..]);",
                "    assert_eq!(result, Ok(Content::Bytes(b\"hello world\".to_vec())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[255]);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(Content::Bytes(ref bytes)) if bytes == &[255]));"
              ],
              "code": [
                "{",
                "    let visitor = ContentVisitor { value: PhantomData };",
                "    let result = visitor.visit_borrowed_bytes(&[255]);",
                "    assert!(matches!(result, Ok(Content::Bytes(ref bytes)) if bytes == &[255]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}