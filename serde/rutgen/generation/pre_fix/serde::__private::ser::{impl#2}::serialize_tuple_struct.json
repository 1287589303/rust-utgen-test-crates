{
  "name": "serde::__private::ser::{impl#2}::serialize_tuple_struct",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:241:5:247:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(self.bad_type(Unsupported::TupleStruct))\n"
      ],
      "input_infer": "serialize_tuple_struct(self, \"example_struct\", 0) and serialize_tuple_struct(self, \"example_struct\", 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummySerializer;",
                "",
                "    impl Serializer for DummySerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Implement other required methods as no-ops...",
                "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
                "            Err(Error)",
                "        }",
                "    }",
                "",
                "    let serializer = DummySerializer {};",
                "    let result = serializer.serialize_tuple_struct(\"example_struct\", 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));"
              ],
              "code": [
                "{",
                "    struct DummySerializer;",
                "",
                "    impl Serializer for DummySerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Implement other required methods as no-ops...",
                "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
                "            Err(Error)",
                "        }",
                "    }",
                "",
                "    let serializer = DummySerializer {};",
                "    let result = serializer.serialize_tuple_struct(\"example_struct\", 0);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummySerializer;",
                "",
                "    impl Serializer for DummySerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Implement other required methods as no-ops...",
                "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
                "            Err(Error)",
                "        }",
                "    }",
                "",
                "    let serializer = DummySerializer {};",
                "    let result = serializer.serialize_tuple_struct(\"example_struct\", 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));"
              ],
              "code": [
                "{",
                "    struct DummySerializer;",
                "",
                "    impl Serializer for DummySerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {",
                "            unimplemented!()",
                "        }",
                "",
                "        // Implement other required methods as no-ops...",
                "        fn serialize_tuple_struct(self, _: &'static str, _: usize) -> Result<Self::SerializeTupleStruct, Self::Error> {",
                "            Err(Error)",
                "        }",
                "    }",
                "",
                "    let serializer = DummySerializer {};",
                "    let result = serializer.serialize_tuple_struct(\"example_struct\", 1);",
                "    assert_eq!(result, Err(serializer.bad_type(Unsupported::TupleStruct)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}