{
  "name": "serde::__private::de::flat_map_take_entry",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": false,
  "loc": "serde/src/private/de.rs:2735:1:2752:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: entry matches Some((k, _v)) at line 2742 is true\n",
        "precondition: is_recognized at line 2747 is true\n"
      ],
      "input_infer": "entry: Some((Content::String(\"recognized_key\".to_string()), Content::U32(42))), recognized: [\"recognized_key\"]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::U32(42)));",
                "    let recognized = [\"recognized_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::U32(42))));",
                "    assert!(entry.is_none());"
              ],
              "code": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::U32(42)));",
                "    let recognized = [\"recognized_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::U32(42))));",
                "    assert!(entry.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
                "    let recognized = [\"recognized_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
                "    assert!(entry.is_none());"
              ],
              "code": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
                "    let recognized = [\"recognized_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (Content::String(\"recognized_key\".to_string()), Content::F64(3.14)));",
                "    assert!(entry.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
                "    let recognized = [\"recognized_key\", \"another_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
                "    let recognized = [\"recognized_key\", \"another_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::I32(10))));",
                "    assert!(entry.is_none());"
              ],
              "code": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
                "    let recognized = [\"recognized_key\", \"another_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I32(10)));",
                "    let recognized = [\"recognized_key\", \"another_key\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, Some((Content::String(\"recognized_key\".to_string()), Content::I32(10))));",
                "    assert!(entry.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "    assert_eq!(entry, Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5))));"
              ],
              "code": [
                "{",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    let mut entry = Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5)));",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "    assert_eq!(entry, Some((Content::String(\"recognized_key\".to_string()), Content::I8(-5))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: entry matches None at line 2742 is true\n",
        "precondition: entry matches None at line 2742 is true\n",
        "precondition: is_recognized at line 2747 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "entry = None, recognized = any array of strings\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let entry = None;",
                "    let recognized = [\"key1\", \"key2\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let entry = None;",
                "    let recognized = [\"key1\", \"key2\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let entry = None;",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    let entry = None;",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let entry = None;",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    let entry = None;",
                "    let recognized: [&str; 0] = [];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let entry = None;",
                "    let recognized = [\"key3\", \"key4\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "}"
              ],
              "oracle": [
                "    let entry = None;",
                "    let recognized = [\"key3\", \"key4\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "    assert!(entry.is_none());"
              ],
              "code": [
                "{",
                "    let entry = None;",
                "    let recognized = [\"key3\", \"key4\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    let entry = None;",
                "    let recognized = [\"key3\", \"key4\"];",
                "    let result = flat_map_take_entry(&mut entry, &recognized);",
                "    assert_eq!(result, None);",
                "    assert!(entry.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}