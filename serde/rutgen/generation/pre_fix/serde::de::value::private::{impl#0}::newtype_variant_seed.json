{
  "name": "serde::de::value::private::{impl#0}::newtype_variant_seed",
  "mod_info": {
    "name": "de::value::private",
    "loc": "serde/src/de/value.rs:1730:1:1894:2"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1760:9:1768:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(de::Error::invalid_type(\n                Unexpected::UnitVariant,\n                &\"newtype variant\",\n            ))\n"
      ],
      "input_infer": "Test input conditions or ranges: Any type T that implements de::DeserializeSeed<'de> where T is not associated with a newtype variant or an empty input to trigger the error case for invalid type with Unexpected::UnitVariant.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Seed;",
                "",
                "    impl<'de> de::DeserializeSeed<'de> for Seed {",
                "        type Value = ();",
                "    }",
                "",
                "    let unit_only: UnitOnly<()> = UnitOnly {",
                "        marker: PhantomData,",
                "    };",
                "    let _ = unit_only.newtype_variant_seed(Seed);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(unit_only.newtype_variant_seed(Seed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))));"
              ],
              "code": [
                "{",
                "    struct Seed;",
                "",
                "    impl<'de> de::DeserializeSeed<'de> for Seed {",
                "        type Value = ();",
                "    }",
                "",
                "    let unit_only: UnitOnly<()> = UnitOnly {",
                "        marker: PhantomData,",
                "    };",
                "    let _ = unit_only.newtype_variant_seed(Seed);",
                "    assert!(matches!(unit_only.newtype_variant_seed(Seed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptySeed;",
                "",
                "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
                "        type Value = ();",
                "    }",
                "",
                "    let unit_only: UnitOnly<()> = UnitOnly {",
                "        marker: PhantomData,",
                "    };",
                "    let _ = unit_only.newtype_variant_seed(EmptySeed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit_only.newtype_variant_seed(EmptySeed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));"
              ],
              "code": [
                "{",
                "    struct EmptySeed;",
                "",
                "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
                "        type Value = ();",
                "    }",
                "",
                "    let unit_only: UnitOnly<()> = UnitOnly {",
                "        marker: PhantomData,",
                "    };",
                "    let _ = unit_only.newtype_variant_seed(EmptySeed);",
                "    assert_eq!(unit_only.newtype_variant_seed(EmptySeed), Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}