{
  "name": "serde::__private::de::content::{impl#18}::new",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:1537:9:1543:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: EnumDeserializer {\n                variant,\n                value,\n                err: PhantomData,\n            }\n"
      ],
      "input_infer": "variant: any valid Content type; value: any valid Content type or None; err: PhantomData<E> where E implements de::Error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let variant = Content::Bool(true);",
                "    let value = Some(Content::U8(5));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "}"
              ],
              "oracle": [
                "    let variant = Content::Bool(true);",
                "    let value = Some(Content::U8(5));",
                "    let deserializer = EnumDeserializer::new(variant, value);",
                "    assert_eq!(deserializer.variant, Content::Bool(true));",
                "    assert_eq!(deserializer.value, Some(Content::U8(5)));",
                "    assert!(std::mem::size_of_val(&deserializer.err) > 0);"
              ],
              "code": [
                "{",
                "    let variant = Content::Bool(true);",
                "    let value = Some(Content::U8(5));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "    let variant = Content::Bool(true);",
                "    let value = Some(Content::U8(5));",
                "    let deserializer = EnumDeserializer::new(variant, value);",
                "    assert_eq!(deserializer.variant, Content::Bool(true));",
                "    assert_eq!(deserializer.value, Some(Content::U8(5)));",
                "    assert!(std::mem::size_of_val(&deserializer.err) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let variant = Content::U32(10);",
                "    let value = Some(Content::None);",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(variant, Content::U32(10));",
                "    assert_eq!(value, Some(Content::None));",
                "    let deserializer = EnumDeserializer::new(variant, value);",
                "    assert!(std::mem::discriminant(&deserializer.variant) == std::mem::discriminant(&Content::U32(10)));",
                "    assert!(deserializer.value == Some(Content::None));",
                "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));"
              ],
              "code": [
                "{",
                "    let variant = Content::U32(10);",
                "    let value = Some(Content::None);",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "    assert_eq!(variant, Content::U32(10));",
                "    assert_eq!(value, Some(Content::None));",
                "    let deserializer = EnumDeserializer::new(variant, value);",
                "    assert!(std::mem::discriminant(&deserializer.variant) == std::mem::discriminant(&Content::U32(10)));",
                "    assert!(deserializer.value == Some(Content::None));",
                "    assert!(std::mem::discriminant(&deserializer.err) == std::mem::discriminant(&PhantomData));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let variant = Content::String(\"test\".to_string());",
                "    let value = Some(Content::Str(\"inner\"));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "}"
              ],
              "oracle": [
                "    let variant = Content::String(\"test\".to_string());",
                "    let value = Some(Content::Str(\"inner\"));",
                "    let enum_deserializer = EnumDeserializer::new(variant.clone(), value.clone());",
                "    assert_eq!(enum_deserializer.variant, variant);",
                "    assert_eq!(enum_deserializer.value, value);",
                "    assert_eq!(enum_deserializer.err.is::<PhantomData<_>>(), true);"
              ],
              "code": [
                "{",
                "    let variant = Content::String(\"test\".to_string());",
                "    let value = Some(Content::Str(\"inner\"));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "    let variant = Content::String(\"test\".to_string());",
                "    let value = Some(Content::Str(\"inner\"));",
                "    let enum_deserializer = EnumDeserializer::new(variant.clone(), value.clone());",
                "    assert_eq!(enum_deserializer.variant, variant);",
                "    assert_eq!(enum_deserializer.value, value);",
                "    assert_eq!(enum_deserializer.err.is::<PhantomData<_>>(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let variant = Content::Unit;",
                "    let value = None;",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "}"
              ],
              "oracle": [
                "    let variant = Content::Unit;",
                "    let value = None;",
                "    let result = EnumDeserializer::new(variant, value);",
                "    assert_eq!(result.variant, Content::Unit);",
                "    assert_eq!(result.value, None);",
                "    assert!(std::mem::discriminant(&result.err) == std::mem::discriminant(&PhantomData));"
              ],
              "code": [
                "{",
                "    let variant = Content::Unit;",
                "    let value = None;",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "    let variant = Content::Unit;",
                "    let value = None;",
                "    let result = EnumDeserializer::new(variant, value);",
                "    assert_eq!(result.variant, Content::Unit);",
                "    assert_eq!(result.value, None);",
                "    assert!(std::mem::discriminant(&result.err) == std::mem::discriminant(&PhantomData));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let variant = Content::Newtype(Box::new(Content::F32(3.14)));",
                "    let value = Some(Content::Seq(vec![Content::I64(1), Content::I64(2)]));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "}"
              ],
              "oracle": [
                "    EnumDeserializer::new(Content::Newtype(Box::new(Content::F32(3.14))), Some(Content::Seq(vec![Content::I64(1), Content::I64(2)])));",
                "    assert_eq!(result.variant, Content::Newtype(Box::new(Content::F32(3.14))));",
                "    assert_eq!(result.value, Some(Content::Seq(vec![Content::I64(1), Content::I64(2)])));",
                "    assert!(result.err.is::<PhantomData<>()>);"
              ],
              "code": [
                "{",
                "    let variant = Content::Newtype(Box::new(Content::F32(3.14)));",
                "    let value = Some(Content::Seq(vec![Content::I64(1), Content::I64(2)]));",
                "    let _: EnumDeserializer<'_, _> = EnumDeserializer::new(variant, value);",
                "    EnumDeserializer::new(Content::Newtype(Box::new(Content::F32(3.14))), Some(Content::Seq(vec![Content::I64(1), Content::I64(2)])));",
                "    assert_eq!(result.variant, Content::Newtype(Box::new(Content::F32(3.14))));",
                "    assert_eq!(result.value, Some(Content::Seq(vec![Content::I64(1), Content::I64(2)])));",
                "    assert!(result.err.is::<PhantomData<>()>);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}