{
  "name": "serde::__private::doc::{impl#0}::custom",
  "mod_info": {
    "name": "__private::doc",
    "loc": "serde/src/private/mod.rs:7:1:7:13"
  },
  "visible": true,
  "loc": "serde/src/private/doc.rs:12:5:17:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "T must implement the Display trait to invoke the custom function, thus test input conditions should include various types that implement Display, such as strings, integers, and custom structs, as well as edge cases where T does not implement Display to check for compile-time errors.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_custom_with_non_display() {",
            "    struct NonDisplay;",
            "    let err = Error::custom(NonDisplay);",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = Error::custom(\"test string\");",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err());",
                "    assert!(matches!(Error::custom(\"test string\"), Error));"
              ],
              "code": [
                "{",
                "    let err = Error::custom(\"test string\");",
                "    assert!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err());",
                "    assert!(matches!(Error::custom(\"test string\"), Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let err = Error::custom(42);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(42)).is_err(), false);"
              ],
              "code": [
                "{",
                "    let err = Error::custom(42);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(42)).is_err(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomDisplay;",
                "    impl std::fmt::Display for CustomDisplay {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"CustomDisplay structure\")",
                "        }",
                "    }",
                "    let err = Error::custom(CustomDisplay);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(CustomDisplay)).is_ok(), true);"
              ],
              "code": [
                "{",
                "    struct CustomDisplay;",
                "    impl std::fmt::Display for CustomDisplay {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"CustomDisplay structure\")",
                "        }",
                "    }",
                "    let err = Error::custom(CustomDisplay);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(NonDisplay)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| Error::custom(CustomDisplay)).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}