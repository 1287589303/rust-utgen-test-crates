{
  "name": "serde::__private::ser::content::{impl#6}::serialize_unit",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:639:9:641:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Content::Unit)\n"
      ],
      "input_infer": "self: Any instance of a type implementing the `Serializer` trait\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_unit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_unit(), Ok(Content::Unit));"
              ],
              "code": [
                "{",
                "    let serializer = ContentSerializer::<()>::default();",
                "    let _ = serializer.serialize_unit();",
                "    assert_eq!(serializer.serialize_unit(), Ok(Content::Unit));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomError;",
                "    impl ser::Error for CustomError {}",
                "",
                "    let serializer = ContentSerializer::<CustomError>::default();",
                "    let _ = serializer.serialize_unit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_unit().unwrap(), Content::Unit);"
              ],
              "code": [
                "{",
                "    struct CustomError;",
                "    impl ser::Error for CustomError {}",
                "",
                "    let serializer = ContentSerializer::<CustomError>::default();",
                "    let _ = serializer.serialize_unit();",
                "    assert_eq!(serializer.serialize_unit().unwrap(), Content::Unit);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}