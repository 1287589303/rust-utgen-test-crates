{
  "name": "serde::__private::ser::{impl#2}::serialize_char",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:159:5:161:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(self.bad_type(Unsupported::Char))\n"
      ],
      "input_infer": "char input values: any character, including boundary cases like Unicode characters and escape sequences, but asserting the return value will always be Err(self.bad_type(Unsupported::Char)) regardless of the input character.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('a');",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.serialize_char('a').is_err());",
                "    assert_eq!(serializer.serialize_char('a').unwrap_err().to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('a');",
                "    assert!(serializer.serialize_char('a').is_err());",
                "    assert_eq!(serializer.serialize_char('a').unwrap_err().to_string(), \"cannot serialize tagged newtype variant TestType::TestVariant containing Char\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('é');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('é'), Err(serializer.bad_type(Unsupported::Char)));"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('é');",
                "    assert_eq!(serializer.serialize_char('é'), Err(serializer.bad_type(Unsupported::Char)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('\\n');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('\\n'), Err(serializer.bad_type(Unsupported::Char)));"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('\\n');",
                "    assert_eq!(serializer.serialize_char('\\n'), Err(serializer.bad_type(Unsupported::Char)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('\\\\');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('\\\\'), Err(serializer.bad_type(Unsupported::Char)));"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('\\\\');",
                "    assert_eq!(serializer.serialize_char('\\\\'), Err(serializer.bad_type(Unsupported::Char)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('中');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_char('中'), Err(serializer.bad_type(Unsupported::Char)));"
              ],
              "code": [
                "{",
                "    let serializer = TaggedSerializer {",
                "        type_ident: \"TestType\",",
                "        variant_ident: \"TestVariant\",",
                "        tag: \"test_tag\",",
                "        variant_name: \"test_variant_name\",",
                "        delegate: SomeDelegateType {},",
                "    };",
                "    let _ = serializer.serialize_char('中');",
                "    assert_eq!(serializer.serialize_char('中'), Err(serializer.bad_type(Unsupported::Char)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}