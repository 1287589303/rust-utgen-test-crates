{
  "name": "serde::de::value::{impl#10}::into_deserializer",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:357:5:359:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "the input must be a valid u32 value within the range [0, 4294967295] to construct a U32Deserializer instance successfully\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 0 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.value, 0);",
                "    assert!(matches!(_deserializer, U32Deserializer::<Error>));",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 0 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert_eq!(input.value, 0);",
                "    assert!(matches!(_deserializer, U32Deserializer::<Error>));",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 4294967295 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let input = TestStruct { value: 4294967295 };",
                "    assert_eq!(_deserializer.value, 4294967295);",
                "    assert!(_deserializer.marker.is_some());",
                "    let deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert!(matches!(deserializer, U32Deserializer { value: 4294967295, .. }));",
                "    assert_eq!(std::mem::size_of::<U32Deserializer<Error>>(), std::mem::size_of::<u32>());"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 4294967295 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    let input = TestStruct { value: 4294967295 };",
                "    assert_eq!(_deserializer.value, 4294967295);",
                "    assert!(_deserializer.marker.is_some());",
                "    let deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert!(matches!(deserializer, U32Deserializer { value: 4294967295, .. }));",
                "    assert_eq!(std::mem::size_of::<U32Deserializer<Error>>(), std::mem::size_of::<u32>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 2147483648 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_deserializer.value, 2147483648);",
                "    assert!(err.is_err());",
                "    assert!(matches!(err, Error::custom(\"value is out of bounds\")));",
                "    assert_eq!(std::mem::size_of_val(&_deserializer), std::mem::size_of::<U32Deserializer<Error>>());",
                "    assert!(u32::MIN <= _deserializer.value && _deserializer.value <= u32::MAX);",
                "    assert_eq!(_deserializer.marker, PhantomData::<Error>::default());",
                "    assert!(std::any::TypeId::of::<U32Deserializer<Error>>() == std::any::TypeId::of::<U32Deserializer<Error>>());",
                "    assert!(std::convert::identity(_deserializer).value == input.value);"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 2147483648 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert_eq!(_deserializer.value, 2147483648);",
                "    assert!(err.is_err());",
                "    assert!(matches!(err, Error::custom(\"value is out of bounds\")));",
                "    assert_eq!(std::mem::size_of_val(&_deserializer), std::mem::size_of::<U32Deserializer<Error>>());",
                "    assert!(u32::MIN <= _deserializer.value && _deserializer.value <= u32::MAX);",
                "    assert_eq!(_deserializer.marker, PhantomData::<Error>::default());",
                "    assert!(std::any::TypeId::of::<U32Deserializer<Error>>() == std::any::TypeId::of::<U32Deserializer<Error>>());",
                "    assert!(std::convert::identity(_deserializer).value == input.value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 1 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_deserializer.value, 1);",
                "    assert!(!std::mem::size_of::<U32Deserializer<Error>>() == 0);",
                "    assert_eq!(std::any::TypeId::of::<U32Deserializer<Error>>(), std::any::TypeId::of::<U32Deserializer<Error>>());",
                "    assert!(std::any::TypeId::of::<U32Deserializer<Error>>() != std::any::TypeId::of::<u32>());",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() >= std::mem::size_of::<u32>());",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 1 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert_eq!(_deserializer.value, 1);",
                "    assert!(!std::mem::size_of::<U32Deserializer<Error>>() == 0);",
                "    assert_eq!(std::any::TypeId::of::<U32Deserializer<Error>>(), std::any::TypeId::of::<U32Deserializer<Error>>());",
                "    assert!(std::any::TypeId::of::<U32Deserializer<Error>>() != std::any::TypeId::of::<u32>());",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() >= std::mem::size_of::<u32>());",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 3000000000 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.value, 3000000000);",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(matches!(_deserializer.value, 3000000000));",
                "    assert!(matches!(_deserializer.marker, std::marker::PhantomData::<Error>));",
                "    assert_eq!(<std::any::TypeId as std::any::Any>::type_id(), std::any::TypeId::of::<u32>());",
                "    assert!(std::any::type_name::<U32Deserializer<Error>>() == \"serde::U32Deserializer<Error>\");",
                "    assert!(std::ptr::addr_of!(_deserializer) != std::ptr::null());",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(std::mem::discriminant(&_deserializer) != std::mem::discriminant(&U32Deserializer::new(0)));"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: u32,",
                "    }",
                "    let input = TestStruct { value: 3000000000 };",
                "    let _deserializer: U32Deserializer<Error> = input.into_deserializer();",
                "    assert_eq!(input.value, 3000000000);",
                "    assert!(std::mem::size_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(matches!(_deserializer.value, 3000000000));",
                "    assert!(matches!(_deserializer.marker, std::marker::PhantomData::<Error>));",
                "    assert_eq!(<std::any::TypeId as std::any::Any>::type_id(), std::any::TypeId::of::<u32>());",
                "    assert!(std::any::type_name::<U32Deserializer<Error>>() == \"serde::U32Deserializer<Error>\");",
                "    assert!(std::ptr::addr_of!(_deserializer) != std::ptr::null());",
                "    assert!(std::mem::align_of::<U32Deserializer<Error>>() > 0);",
                "    assert!(std::mem::discriminant(&_deserializer) != std::mem::discriminant(&U32Deserializer::new(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}