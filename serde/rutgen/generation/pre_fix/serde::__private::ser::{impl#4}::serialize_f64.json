{
  "name": "serde::__private::ser::{impl#4}::serialize_f64",
  "mod_info": {
    "name": "__private::ser",
    "loc": "serde/src/private/mod.rs:4:1:4:13"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:1061:5:1063:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(Self::bad_type(Unsupported::Float))\n"
      ],
      "input_infer": "f64 values including NaN, positive infinity, negative infinity, and valid finite numbers across the range of f64.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    let serializer = TestSerializer;",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(-1.0), Err(TestSerializer::bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::NAN);",
                "    let serializer = TestSerializer;",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(-1.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.23), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(3.14), Err(TestSerializer::bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::INFINITY);",
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.23), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(3.14), Err(TestSerializer::bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(f64::NEG_INFINITY);",
                "    assert_eq!(serializer.serialize_f64(f64::NEG_INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::NAN), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(f64::INFINITY), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(0.0), Err(serializer.bad_type(Unsupported::Float)));",
                "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(1.0);",
                "    assert_eq!(serializer.serialize_f64(1.0), Err(serializer.bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(-1.0);",
                "}"
              ],
              "oracle": [
                "    let result = serializer.serialize_f64(-1.0);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    ",
                "    let result = serializer.serialize_f64(0.0);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    ",
                "    let result = serializer.serialize_f64(3.14);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    impl Serializer for TestSerializer {",
                "        type Ok = ();",
                "        type Error = Error;",
                "        type SerializeSeq = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTuple = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeMap = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStruct = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeTupleVariant = Impossible<Self::Ok, Self::Error>;",
                "        type SerializeStructVariant = Impossible<Self::Ok, Self::Error>;",
                "",
                "        fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {",
                "            Err(Self::bad_type(Unsupported::Float))",
                "        }",
                "",
                "        fn bad_type(_: Unsupported) -> Self::Error {",
                "            Error",
                "        }",
                "    }",
                "",
                "    let serializer = TestSerializer;",
                "    let _ = serializer.serialize_f64(-1.0);",
                "    let result = serializer.serialize_f64(-1.0);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    ",
                "    let result = serializer.serialize_f64(0.0);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));",
                "    ",
                "    let result = serializer.serialize_f64(3.14);",
                "    assert_eq!(result, Err(TestSerializer::bad_type(Unsupported::Float)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}