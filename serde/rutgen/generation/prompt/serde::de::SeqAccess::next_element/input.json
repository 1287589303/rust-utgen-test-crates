{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\npub trait SeqAccess<'de> {\n    type Error: Error;\n    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>\n    where\n        T: DeserializeSeed<'de>;\n    #[inline]\n    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n    where\n        T: Deserialize<'de>,\n    {\n        self.next_element_seed(PhantomData)\n    }\n    #[inline]\n    fn size_hint(&self) -> Option<usize>;\n}\npub struct T;\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This returns `Ok(Some(value))` for the next value in the sequence, or\n/// `Ok(None)` if there are no more remaining items.\n///\n/// This method exists as a convenience for `Deserialize` implementations.\n/// `SeqAccess` implementations should not override the default behavior.\n1730 fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n1731 where\n1732     T: Deserialize<'de>,\n1733 {\n1734     self.next_element_seed(PhantomData)\n1735 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}