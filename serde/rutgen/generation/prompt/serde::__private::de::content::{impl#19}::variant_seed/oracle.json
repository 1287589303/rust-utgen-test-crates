{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\npub trait EnumAccess<'de>: Sized {\n    type Error: Error;\n    type Variant: VariantAccess<'de, Error = Self::Error>;\n    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>\n    where\n        V: DeserializeSeed<'de>;\n    #[inline]\n    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>\n    where\n        V: Deserialize<'de>,\n    {\n        self.variant_seed(PhantomData)\n    }\n}\npub struct EnumDeserializer<'de, E>\nwhere\n    E: de::Error,\n{\n    variant: Content<'de>,\n    value: Option<Content<'de>>,\n    err: PhantomData<E>,\n}\npub struct ContentDeserializer<'de, E> {\n    content: Content<'de>,\n    err: PhantomData<E>,\n}\npub struct VariantDeserializer<'de, E>\nwhere\n    E: de::Error,\n{\n    value: Option<Content<'de>>,\n    err: PhantomData<E>,\n}\n#[derive(Debug)]\npub struct Error;\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<'de, E> de::EnumAccess<'de> for EnumDeserializer<'de, E>\nwhere\n    E: de::Error,\n{\n    type Error = E;\n    type Variant = VariantDeserializer<'de, Self::Error>;\n    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>\n    where\n        V: de::DeserializeSeed<'de>,\n    {\n        let visitor = VariantDeserializer {\n            value: self.value,\n            err: PhantomData,\n        };\n        seed.deserialize(ContentDeserializer::new(self.variant)).map(|v| (v, visitor))\n    }\n}\nimpl<'de, E> ContentDeserializer<'de, E> {\n    pub fn new(content: Content<'de>) -> Self {\n        ContentDeserializer {\n            content,\n            err: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1553 fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>\n1554 where\n1555     V: de::DeserializeSeed<'de>,\n1556 {\n1557     let visitor = VariantDeserializer {\n1558         value: self.value,\n1559         err: PhantomData,\n1560     };\n1561     seed.deserialize(ContentDeserializer::new(self.variant))\n1562         .map(|v| (v, visitor))\n1563 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}