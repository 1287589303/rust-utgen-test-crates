{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Serialize, Serializer};\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub struct SerializeMap<E> {\n    entries: Vec<(Content, Content)>,\n    key: Option<Content>,\n    error: PhantomData<E>,\n}\npub struct ContentSerializer<E> {\n    error: PhantomData<E>,\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<E> ser::SerializeMap for SerializeMap<E>\nwhere\n    E: ser::Error,\n{\n    type Ok = Content;\n    type Error = E;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), E>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), E>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn end(self) -> Result<Content, E> {}\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), E>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        let key = tri!(key.serialize(ContentSerializer::< E >::new()));\n        let value = tri!(value.serialize(ContentSerializer::< E >::new()));\n        self.entries.push((key, value));\n        Ok(())\n    }\n}\nimpl<E> ContentSerializer<E> {\n    pub fn new() -> Self {\n        ContentSerializer {\n            error: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n915 fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), E>\n916 where\n917     K: ?Sized + Serialize,\n918     V: ?Sized + Serialize,\n919 {\n920     let key = tri!(key.serialize(ContentSerializer::<E>::new()));\n921     let value = tri!(value.serialize(ContentSerializer::<E>::new()));\n922     self.entries.push((key, value));\n923     Ok(())\n924 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}