{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserializes a value into `self` from the given Deserializer.\n///\n/// The purpose of this method is to allow the deserializer to reuse\n/// resources and avoid copies. As such, if this method returns an error,\n/// `self` will be in an indeterminate state where some parts of the struct\n/// have been overwritten. Although whatever state that is will be\n/// memory-safe.\n///\n/// This is generally useful when repeatedly deserializing values that\n/// are processed one at a time, where the value of `self` doesn't matter\n/// when the next deserialization occurs.\n///\n/// If you manually implement this, your recursive deserializations should\n/// use `deserialize_in_place`.\n///\n/// This method is stable and an official public API, but hidden from the\n/// documentation because it is almost never what newbies are looking for.\n/// Showing it in rustdoc would cause it to be featured more prominently\n/// than it deserves.\n572 fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n573 where\n574     D: Deserializer<'de>,\n575 {\n576     // Default implementation just delegates to `deserialize` impl.\n577     *place = tri!(Deserialize::deserialize(deserializer));\n578     Ok(())\n579 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}