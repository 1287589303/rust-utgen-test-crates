{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\npub trait Deserializer<'de>: Sized {\n    type Error: Error;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i128<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let _ = visitor;\n        Err(Error::custom(\"i128 is not supported\"))\n    }\n    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u128<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let _ = visitor;\n        Err(Error::custom(\"u128 is not supported\"))\n    }\n    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_unit_struct<V>(\n        self,\n        name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_newtype_struct<V>(\n        self,\n        name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_tuple<V>(\n        self,\n        len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_tuple_struct<V>(\n        self,\n        name: &'static str,\n        len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_struct<V>(\n        self,\n        name: &'static str,\n        fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_enum<V>(\n        self,\n        name: &'static str,\n        variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    #[inline]\n    fn is_human_readable(&self) -> bool {\n        true\n    }\n    #[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]\n    fn __deserialize_content<V>(\n        self,\n        _: crate::actually_private::T,\n        visitor: V,\n    ) -> Result<crate::__private::de::Content<'de>, Self::Error>\n    where\n        V: Visitor<'de, Value = crate::__private::de::Content<'de>>,\n    {\n        self.deserialize_any(visitor)\n    }\n}\npub trait IntoDeserializer<'de, E: Error = value::Error> {\n    type Deserializer: Deserializer<'de, Error = E>;\n    fn into_deserializer(self) -> Self::Deserializer;\n}\npub struct ContentRefDeserializer<'a, 'de: 'a, E> {\n    content: &'a Content<'de>,\n    err: PhantomData<E>,\n}\nstruct EnumRefDeserializer<'a, 'de: 'a, E>\nwhere\n    E: de::Error,\n{\n    variant: &'a Content<'de>,\n    value: Option<&'a Content<'de>>,\n    err: PhantomData<E>,\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\n#[derive(Copy, Clone, PartialEq, Debug)]\npub enum Unexpected<'a> {\n    /// The input contained a boolean value that was not expected.\n    Bool(bool),\n    /// The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\n    /// was not expected.\n    Unsigned(u64),\n    /// The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\n    /// was not expected.\n    Signed(i64),\n    /// The input contained a floating point `f32` or `f64` that was not\n    /// expected.\n    Float(f64),\n    /// The input contained a `char` that was not expected.\n    Char(char),\n    /// The input contained a `&str` or `String` that was not expected.\n    Str(&'a str),\n    /// The input contained a `&[u8]` or `Vec<u8>` that was not expected.\n    Bytes(&'a [u8]),\n    /// The input contained a unit `()` that was not expected.\n    Unit,\n    /// The input contained an `Option<T>` that was not expected.\n    Option,\n    /// The input contained a newtype struct that was not expected.\n    NewtypeStruct,\n    /// The input contained a sequence that was not expected.\n    Seq,\n    /// The input contained a map that was not expected.\n    Map,\n    /// The input contained an enum that was not expected.\n    Enum,\n    /// The input contained a unit variant that was not expected.\n    UnitVariant,\n    /// The input contained a newtype variant that was not expected.\n    NewtypeVariant,\n    /// The input contained a tuple variant that was not expected.\n    TupleVariant,\n    /// The input contained a struct variant that was not expected.\n    StructVariant,\n    /// A message stating what uncategorized thing the input contained that was\n    /// not expected.\n    ///\n    /// The message should be a noun or noun phrase, not capitalized and without\n    /// a period. An example message is \"unoriginal superhero\".\n    Other(&'a str),\n}\nimpl<'de, 'a, E> Deserializer<'de> for ContentRefDeserializer<'a, 'de, E>\nwhere\n    E: de::Error,\n{\n    type Error = E;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, E>\n    where\n        V: Visitor<'de>,\n    {}\n    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Bool(v) => visitor.visit_bool(v),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_integer(visitor)\n    }\n    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_float(visitor)\n    }\n    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_float(visitor)\n    }\n    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Char(v) => visitor.visit_char(v),\n            Content::String(ref v) => visitor.visit_str(v),\n            Content::Str(v) => visitor.visit_borrowed_str(v),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::String(ref v) => visitor.visit_str(v),\n            Content::Str(v) => visitor.visit_borrowed_str(v),\n            Content::ByteBuf(ref v) => visitor.visit_bytes(v),\n            Content::Bytes(v) => visitor.visit_borrowed_bytes(v),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_str(visitor)\n    }\n    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::String(ref v) => visitor.visit_str(v),\n            Content::Str(v) => visitor.visit_borrowed_str(v),\n            Content::ByteBuf(ref v) => visitor.visit_bytes(v),\n            Content::Bytes(v) => visitor.visit_borrowed_bytes(v),\n            Content::Seq(ref v) => visit_content_seq_ref(v, visitor),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_bytes(visitor)\n    }\n    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>\n    where\n        V: Visitor<'de>,\n    {}\n    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Unit => visitor.visit_unit(),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_unit_struct<V>(\n        self,\n        _name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_unit(visitor)\n    }\n    fn deserialize_newtype_struct<V>(\n        self,\n        _name: &str,\n        visitor: V,\n    ) -> Result<V::Value, E>\n    where\n        V: Visitor<'de>,\n    {}\n    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Seq(ref v) => visit_content_seq_ref(v, visitor),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_tuple<V>(\n        self,\n        _len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_seq(visitor)\n    }\n    fn deserialize_tuple_struct<V>(\n        self,\n        _name: &'static str,\n        _len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        self.deserialize_seq(visitor)\n    }\n    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Map(ref v) => visit_content_map_ref(v, visitor),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_struct<V>(\n        self,\n        _name: &'static str,\n        _fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::Seq(ref v) => visit_content_seq_ref(v, visitor),\n            Content::Map(ref v) => visit_content_map_ref(v, visitor),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_enum<V>(\n        self,\n        _name: &str,\n        _variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let (variant, value) = match *self.content {\n            Content::Map(ref value) => {\n                let mut iter = value.iter();\n                let (variant, value) = match iter.next() {\n                    Some(v) => v,\n                    None => {\n                        return Err(\n                            de::Error::invalid_value(\n                                de::Unexpected::Map,\n                                &\"map with a single key\",\n                            ),\n                        );\n                    }\n                };\n                if iter.next().is_some() {\n                    return Err(\n                        de::Error::invalid_value(\n                            de::Unexpected::Map,\n                            &\"map with a single key\",\n                        ),\n                    );\n                }\n                (variant, Some(value))\n            }\n            ref s @ Content::String(_) | ref s @ Content::Str(_) => (s, None),\n            ref other => {\n                return Err(\n                    de::Error::invalid_type(other.unexpected(), &\"string or map\"),\n                );\n            }\n        };\n        visitor\n            .visit_enum(EnumRefDeserializer {\n                variant,\n                value,\n                err: PhantomData,\n            })\n    }\n    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        match *self.content {\n            Content::String(ref v) => visitor.visit_str(v),\n            Content::Str(v) => visitor.visit_borrowed_str(v),\n            Content::ByteBuf(ref v) => visitor.visit_bytes(v),\n            Content::Bytes(v) => visitor.visit_borrowed_bytes(v),\n            Content::U8(v) => visitor.visit_u8(v),\n            Content::U64(v) => visitor.visit_u64(v),\n            _ => Err(self.invalid_type(&visitor)),\n        }\n    }\n    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        visitor.visit_unit()\n    }\n    fn __deserialize_content<V>(\n        self,\n        _: actually_private::T,\n        visitor: V,\n    ) -> Result<Content<'de>, Self::Error>\n    where\n        V: Visitor<'de, Value = Content<'de>>,\n    {\n        let _ = visitor;\n        Ok(self.content.clone())\n    }\n}\nimpl<'de> Content<'de> {\n    pub fn as_str(&self) -> Option<&str> {}\n    #[cold]\n    fn unexpected(&self) -> Unexpected {\n        match *self {\n            Content::Bool(b) => Unexpected::Bool(b),\n            Content::U8(n) => Unexpected::Unsigned(n as u64),\n            Content::U16(n) => Unexpected::Unsigned(n as u64),\n            Content::U32(n) => Unexpected::Unsigned(n as u64),\n            Content::U64(n) => Unexpected::Unsigned(n),\n            Content::I8(n) => Unexpected::Signed(n as i64),\n            Content::I16(n) => Unexpected::Signed(n as i64),\n            Content::I32(n) => Unexpected::Signed(n as i64),\n            Content::I64(n) => Unexpected::Signed(n),\n            Content::F32(f) => Unexpected::Float(f as f64),\n            Content::F64(f) => Unexpected::Float(f),\n            Content::Char(c) => Unexpected::Char(c),\n            Content::String(ref s) => Unexpected::Str(s),\n            Content::Str(s) => Unexpected::Str(s),\n            Content::ByteBuf(ref b) => Unexpected::Bytes(b),\n            Content::Bytes(b) => Unexpected::Bytes(b),\n            Content::None | Content::Some(_) => Unexpected::Option,\n            Content::Unit => Unexpected::Unit,\n            Content::Newtype(_) => Unexpected::NewtypeStruct,\n            Content::Seq(_) => Unexpected::Seq,\n            Content::Map(_) => Unexpected::Map,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2026 fn deserialize_enum<V>(\n2027     self,\n2028     _name: &str,\n2029     _variants: &'static [&'static str],\n2030     visitor: V,\n2031 ) -> Result<V::Value, Self::Error>\n2032 where\n2033     V: Visitor<'de>,\n2034 {\n2035     let (variant, value) = match *self.content {\n2036         Content::Map(ref value) => {\n2037             let mut iter = value.iter();\n2038             let (variant, value) = match iter.next() {\n2039                 Some(v) => v,\n2040                 None => {\n2041                     return Err(de::Error::invalid_value(\n2042                         de::Unexpected::Map,\n2043                         &\"map with a single key\",\n2044                     ));\n2045                 }\n2046             };\n2047             // enums are encoded in json as maps with a single key:value pair\n2048             if iter.next().is_some() {\n2049                 return Err(de::Error::invalid_value(\n2050                     de::Unexpected::Map,\n2051                     &\"map with a single key\",\n2052                 ));\n2053             }\n2054             (variant, Some(value))\n2055         }\n2056         ref s @ Content::String(_) | ref s @ Content::Str(_) => (s, None),\n2057         ref other => {\n2058             return Err(de::Error::invalid_type(\n2059                 other.unexpected(),\n2060                 &\"string or map\",\n2061             ));\n2062         }\n2063     };\n2064 \n2065     visitor.visit_enum(EnumRefDeserializer {\n2066         variant,\n2067         value,\n2068         err: PhantomData,\n2069     })\n2070 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}