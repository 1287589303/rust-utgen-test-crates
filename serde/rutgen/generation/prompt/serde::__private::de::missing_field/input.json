{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\nstruct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\npub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\nwhere\n    V: Deserialize<'de>,\n    E: Error,\n{\n    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\n    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>\n    where\n        E: Error,\n    {\n        type Error = E;\n        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>\n        where\n            V: Visitor<'de>,\n        {\n            Err(Error::missing_field(self.0))\n        }\n        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>\n        where\n            V: Visitor<'de>,\n        {\n            visitor.visit_none()\n        }\n        forward_to_deserialize_any! {\n            bool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string bytes\n            byte_buf unit unit_struct newtype_struct seq tuple tuple_struct map struct\n            enum identifier ignored_any\n        }\n    }\n    let deserializer = MissingFieldDeserializer(field, PhantomData);\n    Deserialize::deserialize(deserializer)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// If the missing field is of type `Option<T>` then treat is as `None`,\n/// otherwise it is an error.\n23 pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n24 where\n25     V: Deserialize<'de>,\n26     E: Error,\n27 {\n28     struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\n29 \n30     impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>\n31     where\n32         E: Error,\n33     {\n34         type Error = E;\n35 \n36         fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>\n37         where\n38             V: Visitor<'de>,\n39         {\n40             Err(Error::missing_field(self.0))\n41         }\n42 \n43         fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>\n44         where\n45             V: Visitor<'de>,\n46         {\n47             visitor.visit_none()\n48         }\n49 \n50         forward_to_deserialize_any! {\n51             bool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n52             bytes byte_buf unit unit_struct newtype_struct seq tuple\n53             tuple_struct map struct enum identifier ignored_any\n54         }\n55     }\n56 \n57     let deserializer = MissingFieldDeserializer(field, PhantomData);\n58     Deserialize::deserialize(deserializer)\n59 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}