{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\nstruct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\npub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\nwhere\n    V: Deserialize<'de>,\n    E: Error,\n{\n    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\n    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>\n    where\n        E: Error,\n    {\n        type Error = E;\n        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>\n        where\n            V: Visitor<'de>,\n        {\n            Err(Error::missing_field(self.0))\n        }\n        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>\n        where\n            V: Visitor<'de>,\n        {\n            visitor.visit_none()\n        }\n        forward_to_deserialize_any! {\n            bool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string bytes\n            byte_buf unit unit_struct newtype_struct seq tuple tuple_struct map struct\n            enum identifier ignored_any\n        }\n    }\n    let deserializer = MissingFieldDeserializer(field, PhantomData);\n    Deserialize::deserialize(deserializer)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// If the missing field is of type `Option<T>` then treat is as `None`,\n/// otherwise it is an error.\n23 pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\n24 where\n25     V: Deserialize<'de>,\n26     E: Error,\n27 {\n28     struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);\n29 \n30     impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>\n31     where\n32         E: Error,\n33     {\n34         type Error = E;\n35 \n36         fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>\n37         where\n38             V: Visitor<'de>,\n39         {\n40             Err(Error::missing_field(self.0))\n41         }\n42 \n43         fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>\n44         where\n45             V: Visitor<'de>,\n46         {\n47             visitor.visit_none()\n48         }\n49 \n50         forward_to_deserialize_any! {\n51             bool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n52             bytes byte_buf unit unit_struct newtype_struct seq tuple\n53             tuple_struct map struct enum identifier ignored_any\n54         }\n55     }\n56 \n57     let deserializer = MissingFieldDeserializer(field, PhantomData);\n58     Deserialize::deserialize(deserializer)\n59 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}