{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{Deserialize, Deserializer, Error, MapAccess, SeqAccess, Visitor};\npub const FIELDS: &[&str] = &[\"start\"];\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\nenum Field {\n    Start,\n}\nimpl<'de> Deserialize<'de> for Field {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct FieldVisitor;\n        impl<'de> Visitor<'de> for FieldVisitor {\n            type Value = Field;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`start`\")\n            }\n            fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    \"start\" => Ok(Field::Start),\n                    _ => Err(Error::unknown_field(value, FIELDS)),\n                }\n            }\n            fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    b\"start\" => Ok(Field::Start),\n                    _ => {\n                        let value = crate::__private::from_utf8_lossy(value);\n                        Err(Error::unknown_field(&*value, FIELDS))\n                    }\n                }\n            }\n        }\n        deserializer.deserialize_identifier(FieldVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2638 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2639 where\n2640     D: Deserializer<'de>,\n2641 {\n2642     struct FieldVisitor;\n2643 \n2644     impl<'de> Visitor<'de> for FieldVisitor {\n2645         type Value = Field;\n2646 \n2647         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2648             formatter.write_str(\"`start`\")\n2649         }\n2650 \n2651         fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n2652         where\n2653             E: Error,\n2654         {\n2655             match value {\n2656                 \"start\" => Ok(Field::Start),\n2657                 _ => Err(Error::unknown_field(value, FIELDS)),\n2658             }\n2659         }\n2660 \n2661         fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n2662         where\n2663             E: Error,\n2664         {\n2665             match value {\n2666                 b\"start\" => Ok(Field::Start),\n2667                 _ => {\n2668                     let value = crate::__private::from_utf8_lossy(value);\n2669                     Err(Error::unknown_field(&*value, FIELDS))\n2670                 }\n2671             }\n2672         }\n2673     }\n2674 \n2675     deserializer.deserialize_identifier(FieldVisitor)\n2676 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}