{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{Deserialize, Deserializer, Error, MapAccess, SeqAccess, Visitor};\npub const FIELDS: &[&str] = &[\"start\"];\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\nenum Field {\n    Start,\n}\nimpl<'de> Deserialize<'de> for Field {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct FieldVisitor;\n        impl<'de> Visitor<'de> for FieldVisitor {\n            type Value = Field;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`start`\")\n            }\n            fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    \"start\" => Ok(Field::Start),\n                    _ => Err(Error::unknown_field(value, FIELDS)),\n                }\n            }\n            fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    b\"start\" => Ok(Field::Start),\n                    _ => {\n                        let value = crate::__private::from_utf8_lossy(value);\n                        Err(Error::unknown_field(&*value, FIELDS))\n                    }\n                }\n            }\n        }\n        deserializer.deserialize_identifier(FieldVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2638 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2639 where\n2640     D: Deserializer<'de>,\n2641 {\n2642     struct FieldVisitor;\n2643 \n2644     impl<'de> Visitor<'de> for FieldVisitor {\n2645         type Value = Field;\n2646 \n2647         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2648             formatter.write_str(\"`start`\")\n2649         }\n2650 \n2651         fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n2652         where\n2653             E: Error,\n2654         {\n2655             match value {\n2656                 \"start\" => Ok(Field::Start),\n2657                 _ => Err(Error::unknown_field(value, FIELDS)),\n2658             }\n2659         }\n2660 \n2661         fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n2662         where\n2663             E: Error,\n2664         {\n2665             match value {\n2666                 b\"start\" => Ok(Field::Start),\n2667                 _ => {\n2668                     let value = crate::__private::from_utf8_lossy(value);\n2669                     Err(Error::unknown_field(&*value, FIELDS))\n2670                 }\n2671             }\n2672         }\n2673     }\n2674 \n2675     deserializer.deserialize_identifier(FieldVisitor)\n2676 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}