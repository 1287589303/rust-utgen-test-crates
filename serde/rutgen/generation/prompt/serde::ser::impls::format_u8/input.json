{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{Error, Serialize, SerializeTuple, Serializer};\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nconst DEC_DIGITS_LUT: &[u8] = b\"\\\n      0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\";\n#[cfg(any(feature = \"std\", not(no_core_net)))]\n#[inline]\nfn format_u8(mut n: u8, out: &mut [u8]) -> usize {\n    if n >= 100 {\n        let d1 = ((n % 100) << 1) as usize;\n        n /= 100;\n        out[0] = b'0' + n;\n        out[1] = DEC_DIGITS_LUT[d1];\n        out[2] = DEC_DIGITS_LUT[d1 + 1];\n        3\n    } else if n >= 10 {\n        let d1 = (n << 1) as usize;\n        out[0] = DEC_DIGITS_LUT[d1];\n        out[1] = DEC_DIGITS_LUT[d1 + 1];\n        2\n    } else {\n        out[0] = b'0' + n;\n        1\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n767 fn format_u8(mut n: u8, out: &mut [u8]) -> usize {\n768     if n >= 100 {\n769         let d1 = ((n % 100) << 1) as usize;\n770         n /= 100;\n771         out[0] = b'0' + n;\n772         out[1] = DEC_DIGITS_LUT[d1];\n773         out[2] = DEC_DIGITS_LUT[d1 + 1];\n774         3\n775     } else if n >= 10 {\n776         let d1 = (n << 1) as usize;\n777         out[0] = DEC_DIGITS_LUT[d1];\n778         out[1] = DEC_DIGITS_LUT[d1 + 1];\n779         2\n780     } else {\n781         out[0] = b'0' + n;\n782         1\n783     }\n784 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}