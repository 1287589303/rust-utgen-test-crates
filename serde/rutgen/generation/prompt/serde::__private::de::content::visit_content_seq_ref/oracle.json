{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\nfn visit_content_seq_ref<'a, 'de, V, E>(\n    content: &'a [Content<'de>],\n    visitor: V,\n) -> Result<V::Value, E>\nwhere\n    V: Visitor<'de>,\n    E: de::Error,\n{\n    let mut seq_visitor = SeqDeserializer::new(content.iter());\n    let value = tri!(visitor.visit_seq(& mut seq_visitor));\n    tri!(seq_visitor.end());\n    Ok(value)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1698 fn visit_content_seq_ref<'a, 'de, V, E>(\n1699     content: &'a [Content<'de>],\n1700     visitor: V,\n1701 ) -> Result<V::Value, E>\n1702 where\n1703     V: Visitor<'de>,\n1704     E: de::Error,\n1705 {\n1706     let mut seq_visitor = SeqDeserializer::new(content.iter());\n1707     let value = tri!(visitor.visit_seq(&mut seq_visitor));\n1708     tri!(seq_visitor.end());\n1709     Ok(value)\n1710 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}