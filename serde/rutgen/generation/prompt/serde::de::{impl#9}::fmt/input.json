{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\nstruct WithDecimalPoint(f64);\nimpl Display for WithDecimalPoint {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        struct LookForDecimalPoint<'f, 'a> {\n            formatter: &'f mut fmt::Formatter<'a>,\n            has_decimal_point: bool,\n        }\n        impl<'f, 'a> fmt::Write for LookForDecimalPoint<'f, 'a> {\n            fn write_str(&mut self, fragment: &str) -> fmt::Result {\n                self.has_decimal_point |= fragment.contains('.');\n                self.formatter.write_str(fragment)\n            }\n            fn write_char(&mut self, ch: char) -> fmt::Result {\n                self.has_decimal_point |= ch == '.';\n                self.formatter.write_char(ch)\n            }\n        }\n        if self.0.is_finite() {\n            let mut writer = LookForDecimalPoint {\n                formatter,\n                has_decimal_point: false,\n            };\n            tri!(write!(writer, \"{}\", self.0));\n            if !writer.has_decimal_point {\n                tri!(formatter.write_str(\".0\"));\n            }\n        } else {\n            tri!(write!(formatter, \"{}\", self.0));\n        }\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2303 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2304     struct LookForDecimalPoint<'f, 'a> {\n2305         formatter: &'f mut fmt::Formatter<'a>,\n2306         has_decimal_point: bool,\n2307     }\n2308 \n2309     impl<'f, 'a> fmt::Write for LookForDecimalPoint<'f, 'a> {\n2310         fn write_str(&mut self, fragment: &str) -> fmt::Result {\n2311             self.has_decimal_point |= fragment.contains('.');\n2312             self.formatter.write_str(fragment)\n2313         }\n2314 \n2315         fn write_char(&mut self, ch: char) -> fmt::Result {\n2316             self.has_decimal_point |= ch == '.';\n2317             self.formatter.write_char(ch)\n2318         }\n2319     }\n2320 \n2321     if self.0.is_finite() {\n2322         let mut writer = LookForDecimalPoint {\n2323             formatter,\n2324             has_decimal_point: false,\n2325         };\n2326         tri!(write!(writer, \"{}\", self.0));\n2327         if !writer.has_decimal_point {\n2328             tri!(formatter.write_str(\".0\"));\n2329         }\n2330     } else {\n2331         tri!(write!(formatter, \"{}\", self.0));\n2332     }\n2333     Ok(())\n2334 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}