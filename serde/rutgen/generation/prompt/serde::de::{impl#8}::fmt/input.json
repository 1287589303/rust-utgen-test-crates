{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\nstruct OneOf {\n    names: &'static [&'static str],\n}\nimpl Display for OneOf {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        match self.names.len() {\n            0 => panic!(),\n            1 => write!(formatter, \"`{}`\", self.names[0]),\n            2 => write!(formatter, \"`{}` or `{}`\", self.names[0], self.names[1]),\n            _ => {\n                tri!(formatter.write_str(\"one of \"));\n                for (i, alt) in self.names.iter().enumerate() {\n                    if i > 0 {\n                        tri!(formatter.write_str(\", \"));\n                    }\n                    tri!(write!(formatter, \"`{}`\", alt));\n                }\n                Ok(())\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2281 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2282     match self.names.len() {\n2283         0 => panic!(), // special case elsewhere\n2284         1 => write!(formatter, \"`{}`\", self.names[0]),\n2285         2 => write!(formatter, \"`{}` or `{}`\", self.names[0], self.names[1]),\n2286         _ => {\n2287             tri!(formatter.write_str(\"one of \"));\n2288             for (i, alt) in self.names.iter().enumerate() {\n2289                 if i > 0 {\n2290                     tri!(formatter.write_str(\", \"));\n2291                 }\n2292                 tri!(write!(formatter, \"`{}`\", alt));\n2293             }\n2294             Ok(())\n2295         }\n2296     }\n2297 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}