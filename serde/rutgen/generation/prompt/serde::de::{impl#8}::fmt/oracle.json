{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\nstruct OneOf {\n    names: &'static [&'static str],\n}\nimpl Display for OneOf {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        match self.names.len() {\n            0 => panic!(),\n            1 => write!(formatter, \"`{}`\", self.names[0]),\n            2 => write!(formatter, \"`{}` or `{}`\", self.names[0], self.names[1]),\n            _ => {\n                tri!(formatter.write_str(\"one of \"));\n                for (i, alt) in self.names.iter().enumerate() {\n                    if i > 0 {\n                        tri!(formatter.write_str(\", \"));\n                    }\n                    tri!(write!(formatter, \"`{}`\", alt));\n                }\n                Ok(())\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2281 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2282     match self.names.len() {\n2283         0 => panic!(), // special case elsewhere\n2284         1 => write!(formatter, \"`{}`\", self.names[0]),\n2285         2 => write!(formatter, \"`{}` or `{}`\", self.names[0], self.names[1]),\n2286         _ => {\n2287             tri!(formatter.write_str(\"one of \"));\n2288             for (i, alt) in self.names.iter().enumerate() {\n2289                 if i > 0 {\n2290                     tri!(formatter.write_str(\", \"));\n2291                 }\n2292                 tri!(write!(formatter, \"`{}`\", alt));\n2293             }\n2294             Ok(())\n2295         }\n2296     }\n2297 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}