{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Serialize, Serializer};\npub trait Serializer: Sized {\n    type Ok;\n    type Error: Error;\n    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleVariant: SerializeTupleVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStructVariant: SerializeStructVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i128(self, v: i128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"i128 is not supported\"))\n    }\n    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u128(self, v: u128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"u128 is not supported\"))\n    }\n    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;\n    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;\n    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_some<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n    ) -> Result<Self::Ok, Self::Error>;\n    fn serialize_newtype_struct<T>(\n        self,\n        name: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_newtype_variant<T>(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_seq(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeSeq, Self::Error>;\n    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;\n    fn serialize_tuple_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleStruct, Self::Error>;\n    fn serialize_tuple_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleVariant, Self::Error>;\n    fn serialize_map(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeMap, Self::Error>;\n    fn serialize_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStruct, Self::Error>;\n    fn serialize_struct_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStructVariant, Self::Error>;\n    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        I: IntoIterator,\n        <I as IntoIterator>::Item: Serialize,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(& iter)));\n        tri!(iter.try_for_each(| item | serializer.serialize_element(& item)));\n        serializer.end()\n    }\n    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        K: Serialize,\n        V: Serialize,\n        I: IntoIterator<Item = (K, V)>,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_map(iterator_len_hint(& iter)));\n        tri!(\n            iter.try_for_each(| (key, value) | serializer.serialize_entry(& key, &\n            value))\n        );\n        serializer.end()\n    }\n    #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display,\n    {\n        self.serialize_str(&value.to_string())\n    }\n    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display;\n    #[inline]\n    fn is_human_readable(&self) -> bool {\n        true\n    }\n}\npub trait SerializeStructVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTupleVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTupleStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTuple {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeSeq {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub struct ContentSerializer<E> {\n    error: PhantomData<E>,\n}\npub struct SerializeTupleStruct<E> {\n    name: &'static str,\n    fields: Vec<Content>,\n    error: PhantomData<E>,\n}\npub struct SerializeStruct<E> {\n    name: &'static str,\n    fields: Vec<(&'static str, Content)>,\n    error: PhantomData<E>,\n}\npub struct SerializeSeq<E> {\n    elements: Vec<Content>,\n    error: PhantomData<E>,\n}\npub struct SerializeMap<E> {\n    entries: Vec<(Content, Content)>,\n    key: Option<Content>,\n    error: PhantomData<E>,\n}\npub struct SerializeTuple<E> {\n    elements: Vec<Content>,\n    error: PhantomData<E>,\n}\npub struct SerializeTupleVariant<E> {\n    name: &'static str,\n    variant_index: u32,\n    variant: &'static str,\n    fields: Vec<Content>,\n    error: PhantomData<E>,\n}\npub struct SerializeStructVariant<E> {\n    name: &'static str,\n    variant_index: u32,\n    variant: &'static str,\n    fields: Vec<(&'static str, Content)>,\n    error: PhantomData<E>,\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\nimpl<E> Serializer for ContentSerializer<E>\nwhere\n    E: ser::Error,\n{\n    type Ok = Content;\n    type Error = E;\n    type SerializeSeq = SerializeSeq<E>;\n    type SerializeTuple = SerializeTuple<E>;\n    type SerializeTupleStruct = SerializeTupleStruct<E>;\n    type SerializeTupleVariant = SerializeTupleVariant<E>;\n    type SerializeMap = SerializeMap<E>;\n    type SerializeStruct = SerializeStruct<E>;\n    type SerializeStructVariant = SerializeStructVariant<E>;\n    fn serialize_bool(self, v: bool) -> Result<Content, E> {}\n    fn serialize_i8(self, v: i8) -> Result<Content, E> {}\n    fn serialize_i16(self, v: i16) -> Result<Content, E> {}\n    fn serialize_i32(self, v: i32) -> Result<Content, E> {}\n    fn serialize_i64(self, v: i64) -> Result<Content, E> {}\n    fn serialize_u8(self, v: u8) -> Result<Content, E> {}\n    fn serialize_u16(self, v: u16) -> Result<Content, E> {}\n    fn serialize_u32(self, v: u32) -> Result<Content, E> {}\n    fn serialize_u64(self, v: u64) -> Result<Content, E> {}\n    fn serialize_f32(self, v: f32) -> Result<Content, E> {}\n    fn serialize_f64(self, v: f64) -> Result<Content, E> {\n        Ok(Content::F64(v))\n    }\n    fn serialize_char(self, v: char) -> Result<Content, E> {}\n    fn serialize_str(self, value: &str) -> Result<Content, E> {}\n    fn serialize_bytes(self, value: &[u8]) -> Result<Content, E> {}\n    fn serialize_none(self) -> Result<Content, E> {}\n    fn serialize_some<T>(self, value: &T) -> Result<Content, E>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_unit(self) -> Result<Content, E> {}\n    fn serialize_unit_struct(self, name: &'static str) -> Result<Content, E> {}\n    fn serialize_unit_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n    ) -> Result<Content, E> {}\n    fn serialize_newtype_struct<T>(\n        self,\n        name: &'static str,\n        value: &T,\n    ) -> Result<Content, E>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_newtype_variant<T>(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        value: &T,\n    ) -> Result<Content, E>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, E> {\n        Ok(SerializeSeq {\n            elements: Vec::with_capacity(len.unwrap_or(0)),\n            error: PhantomData,\n        })\n    }\n    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, E> {\n        Ok(SerializeTuple {\n            elements: Vec::with_capacity(len),\n            error: PhantomData,\n        })\n    }\n    fn serialize_tuple_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleStruct, E> {\n        Ok(SerializeTupleStruct {\n            name,\n            fields: Vec::with_capacity(len),\n            error: PhantomData,\n        })\n    }\n    fn serialize_tuple_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleVariant, E> {\n        Ok(SerializeTupleVariant {\n            name,\n            variant_index,\n            variant,\n            fields: Vec::with_capacity(len),\n            error: PhantomData,\n        })\n    }\n    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, E> {\n        Ok(SerializeMap {\n            entries: Vec::with_capacity(len.unwrap_or(0)),\n            key: None,\n            error: PhantomData,\n        })\n    }\n    fn serialize_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStruct, E> {\n        Ok(SerializeStruct {\n            name,\n            fields: Vec::with_capacity(len),\n            error: PhantomData,\n        })\n    }\n    fn serialize_struct_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStructVariant, E> {\n        Ok(SerializeStructVariant {\n            name,\n            variant_index,\n            variant,\n            fields: Vec::with_capacity(len),\n            error: PhantomData,\n        })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n612 fn serialize_f64(self, v: f64) -> Result<Content, E> {\n613     Ok(Content::F64(v))\n614 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}