{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::impossible::Impossible;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\npub trait Serializer: Sized {\n    type Ok;\n    type Error: Error;\n    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleVariant: SerializeTupleVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStructVariant: SerializeStructVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i128(self, v: i128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"i128 is not supported\"))\n    }\n    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u128(self, v: u128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"u128 is not supported\"))\n    }\n    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;\n    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;\n    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_some<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n    ) -> Result<Self::Ok, Self::Error>;\n    fn serialize_newtype_struct<T>(\n        self,\n        name: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_newtype_variant<T>(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_seq(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeSeq, Self::Error>;\n    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;\n    fn serialize_tuple_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleStruct, Self::Error>;\n    fn serialize_tuple_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleVariant, Self::Error>;\n    fn serialize_map(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeMap, Self::Error>;\n    fn serialize_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStruct, Self::Error>;\n    fn serialize_struct_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStructVariant, Self::Error>;\n    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        I: IntoIterator,\n        <I as IntoIterator>::Item: Serialize,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(& iter)));\n        tri!(iter.try_for_each(| item | serializer.serialize_element(& item)));\n        serializer.end()\n    }\n    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        K: Serialize,\n        V: Serialize,\n        I: IntoIterator<Item = (K, V)>,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_map(iterator_len_hint(& iter)));\n        tri!(\n            iter.try_for_each(| (key, value) | serializer.serialize_entry(& key, &\n            value))\n        );\n        serializer.end()\n    }\n    #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display,\n    {\n        self.serialize_str(&value.to_string())\n    }\n    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display;\n    #[inline]\n    fn is_human_readable(&self) -> bool;\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Serialize an `i128` value.\n///\n/// ```edition2021\n/// # use serde::Serializer;\n/// #\n/// # serde::__private_serialize!();\n/// #\n/// impl Serialize for i128 {\n///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n///     where\n///         S: Serializer,\n///     {\n///         serializer.serialize_i128(*self)\n///     }\n/// }\n/// ```\n///\n/// The default behavior unconditionally returns an error.\n516 fn serialize_i128(self, v: i128) -> Result<Self::Ok, Self::Error> {\n517     let _ = v;\n518     Err(Error::custom(\"i128 is not supported\"))\n519 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}