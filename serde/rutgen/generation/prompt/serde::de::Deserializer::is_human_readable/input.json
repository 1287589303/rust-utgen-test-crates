{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\npub trait Deserializer<'de>: Sized {\n    type Error: Error;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_i128<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let _ = visitor;\n        Err(Error::custom(\"i128 is not supported\"))\n    }\n    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_u128<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let _ = visitor;\n        Err(Error::custom(\"u128 is not supported\"))\n    }\n    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_unit_struct<V>(\n        self,\n        name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_newtype_struct<V>(\n        self,\n        name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_tuple<V>(\n        self,\n        len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_tuple_struct<V>(\n        self,\n        name: &'static str,\n        len: usize,\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_struct<V>(\n        self,\n        name: &'static str,\n        fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_enum<V>(\n        self,\n        name: &'static str,\n        variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    #[inline]\n    fn is_human_readable(&self) -> bool {\n        true\n    }\n    #[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]\n    fn __deserialize_content<V>(\n        self,\n        _: crate::actually_private::T,\n        visitor: V,\n    ) -> Result<crate::__private::de::Content<'de>, Self::Error>\n    where\n        V: Visitor<'de, Value = crate::__private::de::Content<'de>>,\n    {\n        self.deserialize_any(visitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Determine whether `Deserialize` implementations should expect to\n/// deserialize their human-readable form.\n///\n/// Some types have a human-readable form that may be somewhat expensive to\n/// construct, as well as a binary form that is compact and efficient.\n/// Generally text-based formats like JSON and YAML will prefer to use the\n/// human-readable one and binary formats like Postcard will prefer the\n/// compact one.\n///\n/// ```edition2021\n/// # use std::ops::Add;\n/// # use std::str::FromStr;\n/// #\n/// # struct Timestamp;\n/// #\n/// # impl Timestamp {\n/// #     const EPOCH: Timestamp = Timestamp;\n/// # }\n/// #\n/// # impl FromStr for Timestamp {\n/// #     type Err = String;\n/// #     fn from_str(_: &str) -> Result<Self, Self::Err> {\n/// #         unimplemented!()\n/// #     }\n/// # }\n/// #\n/// # struct Duration;\n/// #\n/// # impl Duration {\n/// #     fn seconds(_: u64) -> Self { unimplemented!() }\n/// # }\n/// #\n/// # impl Add<Duration> for Timestamp {\n/// #     type Output = Timestamp;\n/// #     fn add(self, _: Duration) -> Self::Output {\n/// #         unimplemented!()\n/// #     }\n/// # }\n/// #\n/// use serde::de::{self, Deserialize, Deserializer};\n///\n/// impl<'de> Deserialize<'de> for Timestamp {\n///     fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n///     where\n///         D: Deserializer<'de>,\n///     {\n///         if deserializer.is_human_readable() {\n///             // Deserialize from a human-readable string like \"2015-05-15T17:01:00Z\".\n///             let s = String::deserialize(deserializer)?;\n///             Timestamp::from_str(&s).map_err(de::Error::custom)\n///         } else {\n///             // Deserialize from a compact binary representation, seconds since\n///             // the Unix epoch.\n///             let n = u64::deserialize(deserializer)?;\n///             Ok(Timestamp::EPOCH + Duration::seconds(n))\n///         }\n///     }\n/// }\n/// ```\n///\n/// The default implementation of this method returns `true`. Data formats\n/// may override this to `false` to request a compact form for types that\n/// support one. Note that modifying this method to change a format from\n/// human-readable to compact or vice versa should be regarded as a breaking\n/// change, as a value serialized in human-readable mode is not required to\n/// deserialize from the same data in compact mode.\n1222 fn is_human_readable(&self) -> bool {\n1223     true\n1224 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}