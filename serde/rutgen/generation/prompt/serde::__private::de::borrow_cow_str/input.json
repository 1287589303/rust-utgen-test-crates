{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\nstruct CowStrVisitor;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub fn borrow_cow_str<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\nwhere\n    D: Deserializer<'de>,\n    R: From<Cow<'a, str>>,\n{\n    struct CowStrVisitor;\n    impl<'a> Visitor<'a> for CowStrVisitor {\n        type Value = Cow<'a, str>;\n        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n            formatter.write_str(\"a string\")\n        }\n        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.to_owned()))\n        }\n        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Borrowed(v))\n        }\n        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v))\n        }\n        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            match str::from_utf8(v) {\n                Ok(s) => Ok(Cow::Owned(s.to_owned())),\n                Err(_) => Err(Error::invalid_value(Unexpected::Bytes(v), &self)),\n            }\n        }\n        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            match str::from_utf8(v) {\n                Ok(s) => Ok(Cow::Borrowed(s)),\n                Err(_) => Err(Error::invalid_value(Unexpected::Bytes(v), &self)),\n            }\n        }\n        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            match String::from_utf8(v) {\n                Ok(s) => Ok(Cow::Owned(s)),\n                Err(e) => {\n                    Err(Error::invalid_value(Unexpected::Bytes(&e.into_bytes()), &self))\n                }\n            }\n        }\n    }\n    deserializer.deserialize_str(CowStrVisitor).map(From::from)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 62 pub fn borrow_cow_str<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\n 63 where\n 64     D: Deserializer<'de>,\n 65     R: From<Cow<'a, str>>,\n 66 {\n 67     struct CowStrVisitor;\n 68 \n 69     impl<'a> Visitor<'a> for CowStrVisitor {\n 70         type Value = Cow<'a, str>;\n 71 \n 72         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n 73             formatter.write_str(\"a string\")\n 74         }\n 75 \n 76         fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n 77         where\n 78             E: Error,\n 79         {\n 80             Ok(Cow::Owned(v.to_owned()))\n 81         }\n 82 \n 83         fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n 84         where\n 85             E: Error,\n 86         {\n 87             Ok(Cow::Borrowed(v))\n 88         }\n 89 \n 90         fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n 91         where\n 92             E: Error,\n 93         {\n 94             Ok(Cow::Owned(v))\n 95         }\n 96 \n 97         fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n 98         where\n 99             E: Error,\n100         {\n101             match str::from_utf8(v) {\n102                 Ok(s) => Ok(Cow::Owned(s.to_owned())),\n103                 Err(_) => Err(Error::invalid_value(Unexpected::Bytes(v), &self)),\n104             }\n105         }\n106 \n107         fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n108         where\n109             E: Error,\n110         {\n111             match str::from_utf8(v) {\n112                 Ok(s) => Ok(Cow::Borrowed(s)),\n113                 Err(_) => Err(Error::invalid_value(Unexpected::Bytes(v), &self)),\n114             }\n115         }\n116 \n117         fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n118         where\n119             E: Error,\n120         {\n121             match String::from_utf8(v) {\n122                 Ok(s) => Ok(Cow::Owned(s)),\n123                 Err(e) => Err(Error::invalid_value(\n124                     Unexpected::Bytes(&e.into_bytes()),\n125                     &self,\n126                 )),\n127             }\n128         }\n129     }\n130 \n131     deserializer.deserialize_str(CowStrVisitor).map(From::from)\n132 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}