{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{Deserialize, Deserializer, Error, MapAccess, SeqAccess, Visitor};\npub const FIELDS: &[&str] = &[\"start\", \"end\"];\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\nenum Field {\n    Start,\n    End,\n}\nimpl<'de> Deserialize<'de> for Field {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct FieldVisitor;\n        impl<'de> Visitor<'de> for FieldVisitor {\n            type Value = Field;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`start` or `end`\")\n            }\n            fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    \"start\" => Ok(Field::Start),\n                    \"end\" => Ok(Field::End),\n                    _ => Err(Error::unknown_field(value, FIELDS)),\n                }\n            }\n            fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    b\"start\" => Ok(Field::Start),\n                    b\"end\" => Ok(Field::End),\n                    _ => {\n                        let value = crate::__private::from_utf8_lossy(value);\n                        Err(Error::unknown_field(&*value, FIELDS))\n                    }\n                }\n            }\n        }\n        deserializer.deserialize_identifier(FieldVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2481 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2482 where\n2483     D: Deserializer<'de>,\n2484 {\n2485     struct FieldVisitor;\n2486 \n2487     impl<'de> Visitor<'de> for FieldVisitor {\n2488         type Value = Field;\n2489 \n2490         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2491             formatter.write_str(\"`start` or `end`\")\n2492         }\n2493 \n2494         fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n2495         where\n2496             E: Error,\n2497         {\n2498             match value {\n2499                 \"start\" => Ok(Field::Start),\n2500                 \"end\" => Ok(Field::End),\n2501                 _ => Err(Error::unknown_field(value, FIELDS)),\n2502             }\n2503         }\n2504 \n2505         fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n2506         where\n2507             E: Error,\n2508         {\n2509             match value {\n2510                 b\"start\" => Ok(Field::Start),\n2511                 b\"end\" => Ok(Field::End),\n2512                 _ => {\n2513                     let value = crate::__private::from_utf8_lossy(value);\n2514                     Err(Error::unknown_field(&*value, FIELDS))\n2515                 }\n2516             }\n2517         }\n2518     }\n2519 \n2520     deserializer.deserialize_identifier(FieldVisitor)\n2521 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}