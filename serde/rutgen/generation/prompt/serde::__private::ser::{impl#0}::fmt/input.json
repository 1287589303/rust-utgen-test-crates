{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\nenum Unsupported {\n    Boolean,\n    Integer,\n    Float,\n    Char,\n    String,\n    ByteArray,\n    Optional,\n    Sequence,\n    Tuple,\n    TupleStruct,\n    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n    Enum,\n}\nimpl Display for Unsupported {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            Unsupported::Boolean => formatter.write_str(\"a boolean\"),\n            Unsupported::Integer => formatter.write_str(\"an integer\"),\n            Unsupported::Float => formatter.write_str(\"a float\"),\n            Unsupported::Char => formatter.write_str(\"a char\"),\n            Unsupported::String => formatter.write_str(\"a string\"),\n            Unsupported::ByteArray => formatter.write_str(\"a byte array\"),\n            Unsupported::Optional => formatter.write_str(\"an optional\"),\n            Unsupported::Sequence => formatter.write_str(\"a sequence\"),\n            Unsupported::Tuple => formatter.write_str(\"a tuple\"),\n            Unsupported::TupleStruct => formatter.write_str(\"a tuple struct\"),\n            #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n            Unsupported::Enum => formatter.write_str(\"an enum\"),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n62 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n63     match *self {\n64         Unsupported::Boolean => formatter.write_str(\"a boolean\"),\n65         Unsupported::Integer => formatter.write_str(\"an integer\"),\n66         Unsupported::Float => formatter.write_str(\"a float\"),\n67         Unsupported::Char => formatter.write_str(\"a char\"),\n68         Unsupported::String => formatter.write_str(\"a string\"),\n69         Unsupported::ByteArray => formatter.write_str(\"a byte array\"),\n70         Unsupported::Optional => formatter.write_str(\"an optional\"),\n71         Unsupported::Sequence => formatter.write_str(\"a sequence\"),\n72         Unsupported::Tuple => formatter.write_str(\"a tuple\"),\n73         Unsupported::TupleStruct => formatter.write_str(\"a tuple struct\"),\n74         #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n75         Unsupported::Enum => formatter.write_str(\"an enum\"),\n76     }\n77 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}