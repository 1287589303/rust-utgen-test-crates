{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{Error, Serialize, SerializeTuple, Serializer};\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nconst DEC_DIGITS_LUT: &[u8] = b\"\\\n      0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\";\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Serialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Serialize {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer;\n}\npub(super) struct Buf<'a> {\n    bytes: &'a mut [u8],\n    offset: usize,\n}\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nimpl Serialize for net::Ipv4Addr {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer,\n    {\n        if serializer.is_human_readable() {\n            const MAX_LEN: usize = 15;\n            debug_assert_eq!(MAX_LEN, \"101.102.103.104\".len());\n            let mut buf = [b'.'; MAX_LEN];\n            let mut written = format_u8(self.octets()[0], &mut buf);\n            for oct in &self.octets()[1..] {\n                written += format_u8(*oct, &mut buf[written + 1..]) + 1;\n            }\n            let buf = unsafe { str::from_utf8_unchecked(&buf[..written]) };\n            serializer.serialize_str(buf)\n        } else {\n            self.octets().serialize(serializer)\n        }\n    }\n}\nimpl<'a> Buf<'a> {\n    pub fn new(bytes: &'a mut [u8]) -> Self {\n        Buf { bytes, offset: 0 }\n    }\n    pub fn as_str(&self) -> &str {\n        let slice = &self.bytes[..self.offset];\n        unsafe { str::from_utf8_unchecked(slice) }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n869 fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n870 where\n871     S: Serializer,\n872 {\n873     if serializer.is_human_readable() {\n874         const MAX_LEN: usize = 21;\n875         debug_assert_eq!(MAX_LEN, \"101.102.103.104:65000\".len());\n876         serialize_display_bounded_length!(self, MAX_LEN, serializer)\n877     } else {\n878         (self.ip(), self.port()).serialize(serializer)\n879     }\n880 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}