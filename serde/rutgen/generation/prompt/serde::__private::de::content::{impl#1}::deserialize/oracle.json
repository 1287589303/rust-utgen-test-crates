{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\npub trait IntoDeserializer<'de, E: Error = value::Error> {\n    type Deserializer: Deserializer<'de, Error = E>;\n    fn into_deserializer(self) -> Self::Deserializer;\n}\nstruct ContentVisitor<'de> {\n    value: PhantomData<Content<'de>>,\n}\npub struct T;\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<'de> Deserialize<'de> for Content<'de> {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        let visitor = ContentVisitor {\n            value: PhantomData,\n        };\n        deserializer.__deserialize_content(actually_private::T, visitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n294 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n295 where\n296     D: Deserializer<'de>,\n297 {\n298     // Untagged and internally tagged enums are only supported in\n299     // self-describing formats.\n300     let visitor = ContentVisitor { value: PhantomData };\n301     deserializer.__deserialize_content(actually_private::T, visitor)\n302 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}