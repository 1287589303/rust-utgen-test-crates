{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Serialize, Serializer};\npub trait SerializeStructVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub struct SerializeStructVariantAsMapValue<M> {\n    map: M,\n    name: &'static str,\n    fields: Vec<(&'static str, Content)>,\n}\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\npub struct T;\n#[derive(Debug)]\npub struct Error;\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\nimpl<M> ser::SerializeStructVariant for SerializeStructVariantAsMapValue<M>\nwhere\n    M: ser::SerializeMap,\n{\n    type Ok = M::Ok;\n    type Error = M::Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), M::Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        let value = tri!(value.serialize(ContentSerializer::< M::Error >::new()));\n        self.fields.push((key, value));\n        Ok(())\n    }\n    fn end(mut self) -> Result<M::Ok, M::Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n405 fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), M::Error>\n406 where\n407     T: ?Sized + Serialize,\n408 {\n409     let value = tri!(value.serialize(ContentSerializer::<M::Error>::new()));\n410     self.fields.push((key, value));\n411     Ok(())\n412 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}