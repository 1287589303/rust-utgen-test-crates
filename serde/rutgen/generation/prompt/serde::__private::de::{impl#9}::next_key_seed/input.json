{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\npub trait MapAccess<'de> {\n    type Error: Error;\n    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>\n    where\n        K: DeserializeSeed<'de>;\n    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>\n    where\n        V: DeserializeSeed<'de>;\n    #[inline]\n    fn next_entry_seed<K, V>(\n        &mut self,\n        kseed: K,\n        vseed: V,\n    ) -> Result<Option<(K::Value, V::Value)>, Self::Error>\n    where\n        K: DeserializeSeed<'de>,\n        V: DeserializeSeed<'de>,\n    {\n        match tri!(self.next_key_seed(kseed)) {\n            Some(key) => {\n                let value = tri!(self.next_value_seed(vseed));\n                Ok(Some((key, value)))\n            }\n            None => Ok(None),\n        }\n    }\n    #[inline]\n    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>\n    where\n        K: Deserialize<'de>,\n    {\n        self.next_key_seed(PhantomData)\n    }\n    #[inline]\n    fn next_value<V>(&mut self) -> Result<V, Self::Error>\n    where\n        V: Deserialize<'de>,\n    {\n        self.next_value_seed(PhantomData)\n    }\n    #[inline]\n    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>\n    where\n        K: Deserialize<'de>,\n        V: Deserialize<'de>,\n    {\n        self.next_entry_seed(PhantomData, PhantomData)\n    }\n    #[inline]\n    fn size_hint(&self) -> Option<usize> {\n        None\n    }\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nstruct FlatMapAccess<'a, 'de: 'a, E> {\n    iter: slice::Iter<'a, Option<(Content<'de>, Content<'de>)>>,\n    pending_content: Option<&'a Content<'de>>,\n    _marker: PhantomData<E>,\n}\npub struct ContentRefDeserializer<'a, 'de: 'a, E> {\n    content: &'a Content<'de>,\n    err: PhantomData<E>,\n}\npub struct T;\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nimpl<'a, 'de, E> MapAccess<'de> for FlatMapAccess<'a, 'de, E>\nwhere\n    E: Error,\n{\n    type Error = E;\n    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>\n    where\n        T: DeserializeSeed<'de>,\n    {\n        for item in &mut self.iter {\n            if let Some((ref key, ref content)) = *item {\n                self.pending_content = Some(content);\n                return seed.deserialize(ContentRefDeserializer::new(key)).map(Some);\n            }\n        }\n        Ok(None)\n    }\n    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>\n    where\n        T: DeserializeSeed<'de>,\n    {\n        match self.pending_content.take() {\n            Some(value) => seed.deserialize(ContentRefDeserializer::new(value)),\n            None => Err(Error::custom(\"value is missing\")),\n        }\n    }\n}\nimpl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {\n    pub fn new(content: &'a Content<'de>) -> Self {\n        ContentRefDeserializer {\n            content,\n            err: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2664 fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>\n2665 where\n2666     T: DeserializeSeed<'de>,\n2667 {\n2668     for item in &mut self.iter {\n2669         // Items in the vector are nulled out when used by a struct.\n2670         if let Some((ref key, ref content)) = *item {\n2671             // Do not take(), instead borrow this entry. The internally tagged\n2672             // enum does its own buffering so we can't tell whether this entry\n2673             // is going to be consumed. Borrowing here leaves the entry\n2674             // available for later flattened fields.\n2675             self.pending_content = Some(content);\n2676             return seed.deserialize(ContentRefDeserializer::new(key)).map(Some);\n2677         }\n2678     }\n2679     Ok(None)\n2680 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}