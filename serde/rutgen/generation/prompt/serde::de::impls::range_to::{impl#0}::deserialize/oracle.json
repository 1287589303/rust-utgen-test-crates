{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{Deserialize, Deserializer, Error, MapAccess, SeqAccess, Visitor};\npub const FIELDS: &[&str] = &[\"end\"];\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\nenum Field {\n    End,\n}\nimpl<'de> Deserialize<'de> for Field {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct FieldVisitor;\n        impl<'de> Visitor<'de> for FieldVisitor {\n            type Value = Field;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"`end`\")\n            }\n            fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    \"end\" => Ok(Field::End),\n                    _ => Err(Error::unknown_field(value, FIELDS)),\n                }\n            }\n            fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                match value {\n                    b\"end\" => Ok(Field::End),\n                    _ => {\n                        let value = crate::__private::from_utf8_lossy(value);\n                        Err(Error::unknown_field(&*value, FIELDS))\n                    }\n                }\n            }\n        }\n        deserializer.deserialize_identifier(FieldVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2776 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2777 where\n2778     D: Deserializer<'de>,\n2779 {\n2780     struct FieldVisitor;\n2781 \n2782     impl<'de> Visitor<'de> for FieldVisitor {\n2783         type Value = Field;\n2784 \n2785         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2786             formatter.write_str(\"`end`\")\n2787         }\n2788 \n2789         fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n2790         where\n2791             E: Error,\n2792         {\n2793             match value {\n2794                 \"end\" => Ok(Field::End),\n2795                 _ => Err(Error::unknown_field(value, FIELDS)),\n2796             }\n2797         }\n2798 \n2799         fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n2800         where\n2801             E: Error,\n2802         {\n2803             match value {\n2804                 b\"end\" => Ok(Field::End),\n2805                 _ => {\n2806                     let value = crate::__private::from_utf8_lossy(value);\n2807                     Err(Error::unknown_field(&*value, FIELDS))\n2808                 }\n2809             }\n2810         }\n2811     }\n2812 \n2813     deserializer.deserialize_identifier(FieldVisitor)\n2814 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}