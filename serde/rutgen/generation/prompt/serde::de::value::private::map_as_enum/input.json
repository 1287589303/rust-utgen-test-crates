{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/value.rs\n// crate name is serde\npub type First<T> = <T as Pair>::First;\npub type Second<T> = <T as Pair>::Second;\nuse crate::lib::*;\nuse crate::de::{\n    self, DeserializeSeed, Deserializer, MapAccess, Unexpected, VariantAccess, Visitor,\n};\npub struct MapAsEnum<A> {\n    map: A,\n}\npub fn map_as_enum<A>(map: A) -> MapAsEnum<A> {\n    MapAsEnum { map }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1799 pub fn map_as_enum<A>(map: A) -> MapAsEnum<A> {\n1800     MapAsEnum { map }\n1801 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}