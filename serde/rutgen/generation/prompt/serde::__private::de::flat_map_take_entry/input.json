{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\nimpl<'de> Content<'de> {\n    pub fn as_str(&self) -> Option<&str> {\n        match *self {\n            Content::Str(x) => Some(x),\n            Content::String(ref x) => Some(x),\n            Content::Bytes(x) => str::from_utf8(x).ok(),\n            Content::ByteBuf(ref x) => str::from_utf8(x).ok(),\n            _ => None,\n        }\n    }\n    #[cold]\n    fn unexpected(&self) -> Unexpected {}\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nfn flat_map_take_entry<'de>(\n    entry: &mut Option<(Content<'de>, Content<'de>)>,\n    recognized: &[&str],\n) -> Option<(Content<'de>, Content<'de>)> {\n    let is_recognized = match entry {\n        None => false,\n        Some((k, _v)) => k.as_str().map_or(false, |name| recognized.contains(&name)),\n    };\n    if is_recognized { entry.take() } else { None }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Claims one key-value pair from a FlatMapDeserializer's field buffer if the\n/// field name matches any of the recognized ones.\n2735 fn flat_map_take_entry<'de>(\n2736     entry: &mut Option<(Content<'de>, Content<'de>)>,\n2737     recognized: &[&str],\n2738 ) -> Option<(Content<'de>, Content<'de>)> {\n2739     // Entries in the FlatMapDeserializer buffer are nulled out as they get\n2740     // claimed for deserialization. We only use an entry if it is still present\n2741     // and if the field is one recognized by the current data structure.\n2742     let is_recognized = match entry {\n2743         None => false,\n2744         Some((k, _v)) => k.as_str().map_or(false, |name| recognized.contains(&name)),\n2745     };\n2746 \n2747     if is_recognized {\n2748         entry.take()\n2749     } else {\n2750         None\n2751     }\n2752 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}