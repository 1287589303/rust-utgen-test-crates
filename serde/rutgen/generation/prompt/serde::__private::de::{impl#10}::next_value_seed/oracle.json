{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\npub trait MapAccess<'de> {\n    type Error: Error;\n    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>\n    where\n        K: DeserializeSeed<'de>;\n    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>\n    where\n        V: DeserializeSeed<'de>;\n    #[inline]\n    fn next_entry_seed<K, V>(\n        &mut self,\n        kseed: K,\n        vseed: V,\n    ) -> Result<Option<(K::Value, V::Value)>, Self::Error>\n    where\n        K: DeserializeSeed<'de>,\n        V: DeserializeSeed<'de>,\n    {\n        match tri!(self.next_key_seed(kseed)) {\n            Some(key) => {\n                let value = tri!(self.next_value_seed(vseed));\n                Ok(Some((key, value)))\n            }\n            None => Ok(None),\n        }\n    }\n    #[inline]\n    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>\n    where\n        K: Deserialize<'de>,\n    {\n        self.next_key_seed(PhantomData)\n    }\n    #[inline]\n    fn next_value<V>(&mut self) -> Result<V, Self::Error>\n    where\n        V: Deserialize<'de>,\n    {\n        self.next_value_seed(PhantomData)\n    }\n    #[inline]\n    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>\n    where\n        K: Deserialize<'de>,\n        V: Deserialize<'de>,\n    {\n        self.next_entry_seed(PhantomData, PhantomData)\n    }\n    #[inline]\n    fn size_hint(&self) -> Option<usize> {\n        None\n    }\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nstruct FlatStructAccess<'a, 'de: 'a, E> {\n    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,\n    pending_content: Option<Content<'de>>,\n    fields: &'static [&'static str],\n    _marker: PhantomData<E>,\n}\npub struct ContentDeserializer<'de, E> {\n    content: Content<'de>,\n    err: PhantomData<E>,\n}\npub struct T;\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nimpl<'a, 'de, E> MapAccess<'de> for FlatStructAccess<'a, 'de, E>\nwhere\n    E: Error,\n{\n    type Error = E;\n    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>\n    where\n        T: DeserializeSeed<'de>,\n    {\n        for entry in self.iter.by_ref() {\n            if let Some((key, content)) = flat_map_take_entry(entry, self.fields) {\n                self.pending_content = Some(content);\n                return seed.deserialize(ContentDeserializer::new(key)).map(Some);\n            }\n        }\n        Ok(None)\n    }\n    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>\n    where\n        T: DeserializeSeed<'de>,\n    {\n        match self.pending_content.take() {\n            Some(value) => seed.deserialize(ContentDeserializer::new(value)),\n            None => Err(Error::custom(\"value is missing\")),\n        }\n    }\n}\nimpl<'de, E> ContentDeserializer<'de, E> {\n    pub fn new(content: Content<'de>) -> Self {\n        ContentDeserializer {\n            content,\n            err: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2721 fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>\n2722 where\n2723     T: DeserializeSeed<'de>,\n2724 {\n2725     match self.pending_content.take() {\n2726         Some(value) => seed.deserialize(ContentDeserializer::new(value)),\n2727         None => Err(Error::custom(\"value is missing\")),\n2728     }\n2729 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}