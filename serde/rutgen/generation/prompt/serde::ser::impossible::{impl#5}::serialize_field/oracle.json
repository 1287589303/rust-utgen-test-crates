{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/impossible.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{\n    self, Serialize, SerializeMap, SerializeSeq, SerializeStruct, SerializeStructVariant,\n    SerializeTuple, SerializeTupleStruct, SerializeTupleVariant,\n};\npub trait SerializeStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeStructVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTuple {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTupleVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTupleStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeSeq {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub struct Impossible<Ok, Error> {\n    void: Void,\n    ok: PhantomData<Ok>,\n    error: PhantomData<Error>,\n}\npub struct T;\n#[derive(Debug)]\npub struct Error;\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\nenum Void {}\nimpl<Ok, Error> SerializeStruct for Impossible<Ok, Error>\nwhere\n    Error: ser::Error,\n{\n    type Ok = Ok;\n    type Error = Error;\n    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        let _ = key;\n        let _ = value;\n        match self.void {}\n    }\n    fn end(self) -> Result<Ok, Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n183 fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Error>\n184 where\n185     T: ?Sized + Serialize,\n186 {\n187     let _ = key;\n188     let _ = value;\n189     match self.void {}\n190 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}