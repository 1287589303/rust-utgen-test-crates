{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Serialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Serialize {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer;\n}\npub struct AdjacentlyTaggedEnumVariant {\n    pub enum_name: &'static str,\n    pub variant_index: u32,\n    pub variant_name: &'static str,\n}\nimpl Serialize for AdjacentlyTaggedEnumVariant {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer,\n    {\n        serializer\n            .serialize_unit_variant(\n                self.enum_name,\n                self.variant_index,\n                self.variant_name,\n            )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1343 fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n1344 where\n1345     S: Serializer,\n1346 {\n1347     serializer.serialize_unit_variant(self.enum_name, self.variant_index, self.variant_name)\n1348 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}