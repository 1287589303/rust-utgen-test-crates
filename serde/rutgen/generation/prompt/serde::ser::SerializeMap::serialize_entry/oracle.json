{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::impossible::Impossible;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Serialize a map entry consisting of a key and a value.\n///\n/// Some [`Serialize`] types are not able to hold a key and value in memory\n/// at the same time so `SerializeMap` implementations are required to\n/// support [`serialize_key`] and [`serialize_value`] individually. The\n/// `serialize_entry` method allows serializers to optimize for the case\n/// where key and value are both available. [`Serialize`] implementations\n/// are encouraged to use `serialize_entry` if possible.\n///\n/// The default implementation delegates to [`serialize_key`] and\n/// [`serialize_value`]. This is appropriate for serializers that do not\n/// care about performance or are not able to optimize `serialize_entry` any\n/// better than this.\n///\n/// [`Serialize`]: crate::Serialize\n/// [`serialize_key`]: Self::serialize_key\n/// [`serialize_value`]: Self::serialize_value\n1810 fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n1811 where\n1812     K: ?Sized + Serialize,\n1813     V: ?Sized + Serialize,\n1814 {\n1815     tri!(self.serialize_key(key));\n1816     self.serialize_value(value)\n1817 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}