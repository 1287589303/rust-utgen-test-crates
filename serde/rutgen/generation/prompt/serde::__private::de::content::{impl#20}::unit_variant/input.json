{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\npub trait VariantAccess<'de>: Sized {\n    type Error: Error;\n    fn unit_variant(self) -> Result<(), Self::Error>;\n    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>\n    where\n        T: DeserializeSeed<'de>;\n    #[inline]\n    fn newtype_variant<T>(self) -> Result<T, Self::Error>\n    where\n        T: Deserialize<'de>,\n    {\n        self.newtype_variant_seed(PhantomData)\n    }\n    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn struct_variant<V>(\n        self,\n        fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n}\npub struct VariantDeserializer<'de, E>\nwhere\n    E: de::Error,\n{\n    value: Option<Content<'de>>,\n    err: PhantomData<E>,\n}\npub struct ContentDeserializer<'de, E> {\n    content: Content<'de>,\n    err: PhantomData<E>,\n}\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<'de, E> de::VariantAccess<'de> for VariantDeserializer<'de, E>\nwhere\n    E: de::Error,\n{\n    type Error = E;\n    fn unit_variant(self) -> Result<(), E> {\n        match self.value {\n            Some(value) => de::Deserialize::deserialize(ContentDeserializer::new(value)),\n            None => Ok(()),\n        }\n    }\n    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, E>\n    where\n        T: de::DeserializeSeed<'de>,\n    {}\n    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        match self.value {\n            Some(Content::Seq(v)) => {\n                de::Deserializer::deserialize_any(\n                    SeqDeserializer::new(v.into_iter()),\n                    visitor,\n                )\n            }\n            Some(other) => {\n                Err(de::Error::invalid_type(other.unexpected(), &\"tuple variant\"))\n            }\n            None => {\n                Err(\n                    de::Error::invalid_type(\n                        de::Unexpected::UnitVariant,\n                        &\"tuple variant\",\n                    ),\n                )\n            }\n        }\n    }\n    fn struct_variant<V>(\n        self,\n        _fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        match self.value {\n            Some(Content::Map(v)) => {\n                de::Deserializer::deserialize_any(\n                    MapDeserializer::new(v.into_iter()),\n                    visitor,\n                )\n            }\n            Some(Content::Seq(v)) => {\n                de::Deserializer::deserialize_any(\n                    SeqDeserializer::new(v.into_iter()),\n                    visitor,\n                )\n            }\n            Some(other) => {\n                Err(de::Error::invalid_type(other.unexpected(), &\"struct variant\"))\n            }\n            None => {\n                Err(\n                    de::Error::invalid_type(\n                        de::Unexpected::UnitVariant,\n                        &\"struct variant\",\n                    ),\n                )\n            }\n        }\n    }\n}\nimpl<'de, E> ContentDeserializer<'de, E> {\n    pub fn new(content: Content<'de>) -> Self {\n        ContentDeserializer {\n            content,\n            err: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1580 fn unit_variant(self) -> Result<(), E> {\n1581     match self.value {\n1582         Some(value) => de::Deserialize::deserialize(ContentDeserializer::new(value)),\n1583         None => Ok(()),\n1584     }\n1585 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}