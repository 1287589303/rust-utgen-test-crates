{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\npub trait SerializeStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub struct FlatMapSerializeStruct<'a, M: 'a>(&'a mut M);\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\n#[derive(Debug)]\npub struct Error;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nimpl<'a, M> ser::SerializeStruct for FlatMapSerializeStruct<'a, M>\nwhere\n    M: SerializeMap + 'a,\n{\n    type Ok = ();\n    type Error = M::Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        self.0.serialize_entry(key, value)\n    }\n    fn end(self) -> Result<(), Self::Error> {\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1239 fn end(self) -> Result<(), Self::Error> {\n1240     Ok(())\n1241 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}