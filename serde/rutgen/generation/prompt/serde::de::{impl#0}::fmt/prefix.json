{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/mod.rs\n// crate name is serde\nuse crate::lib::*;\npub use self::ignored_any::IgnoredAny;\n#[cfg(all(not(feature = \"std\"), no_core_error))]\npub use crate::std_error::Error as StdError;\n#[cfg(not(any(feature = \"std\", no_core_error)))]\npub use core::error::Error as StdError;\n#[cfg(feature = \"std\")]\npub use std::error::Error as StdError;\nstruct WithDecimalPoint(f64);\n#[derive(Copy, Clone, PartialEq, Debug)]\npub enum Unexpected<'a> {\n    /// The input contained a boolean value that was not expected.\n    Bool(bool),\n    /// The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\n    /// was not expected.\n    Unsigned(u64),\n    /// The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\n    /// was not expected.\n    Signed(i64),\n    /// The input contained a floating point `f32` or `f64` that was not\n    /// expected.\n    Float(f64),\n    /// The input contained a `char` that was not expected.\n    Char(char),\n    /// The input contained a `&str` or `String` that was not expected.\n    Str(&'a str),\n    /// The input contained a `&[u8]` or `Vec<u8>` that was not expected.\n    Bytes(&'a [u8]),\n    /// The input contained a unit `()` that was not expected.\n    Unit,\n    /// The input contained an `Option<T>` that was not expected.\n    Option,\n    /// The input contained a newtype struct that was not expected.\n    NewtypeStruct,\n    /// The input contained a sequence that was not expected.\n    Seq,\n    /// The input contained a map that was not expected.\n    Map,\n    /// The input contained an enum that was not expected.\n    Enum,\n    /// The input contained a unit variant that was not expected.\n    UnitVariant,\n    /// The input contained a newtype variant that was not expected.\n    NewtypeVariant,\n    /// The input contained a tuple variant that was not expected.\n    TupleVariant,\n    /// The input contained a struct variant that was not expected.\n    StructVariant,\n    /// A message stating what uncategorized thing the input contained that was\n    /// not expected.\n    ///\n    /// The message should be a noun or noun phrase, not capitalized and without\n    /// a period. An example message is \"unoriginal superhero\".\n    Other(&'a str),\n}\nimpl<'a> fmt::Display for Unexpected<'a> {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        use self::Unexpected::*;\n        match *self {\n            Bool(b) => write!(formatter, \"boolean `{}`\", b),\n            Unsigned(i) => write!(formatter, \"integer `{}`\", i),\n            Signed(i) => write!(formatter, \"integer `{}`\", i),\n            Float(f) => write!(formatter, \"floating point `{}`\", WithDecimalPoint(f)),\n            Char(c) => write!(formatter, \"character `{}`\", c),\n            Str(s) => write!(formatter, \"string {:?}\", s),\n            Bytes(_) => formatter.write_str(\"byte array\"),\n            Unit => formatter.write_str(\"unit value\"),\n            Option => formatter.write_str(\"Option value\"),\n            NewtypeStruct => formatter.write_str(\"newtype struct\"),\n            Seq => formatter.write_str(\"sequence\"),\n            Map => formatter.write_str(\"map\"),\n            Enum => formatter.write_str(\"enum\"),\n            UnitVariant => formatter.write_str(\"unit variant\"),\n            NewtypeVariant => formatter.write_str(\"newtype variant\"),\n            TupleVariant => formatter.write_str(\"tuple variant\"),\n            StructVariant => formatter.write_str(\"struct variant\"),\n            Other(other) => formatter.write_str(other),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n398 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n399     use self::Unexpected::*;\n400     match *self {\n401         Bool(b) => write!(formatter, \"boolean `{}`\", b),\n402         Unsigned(i) => write!(formatter, \"integer `{}`\", i),\n403         Signed(i) => write!(formatter, \"integer `{}`\", i),\n404         Float(f) => write!(formatter, \"floating point `{}`\", WithDecimalPoint(f)),\n405         Char(c) => write!(formatter, \"character `{}`\", c),\n406         Str(s) => write!(formatter, \"string {:?}\", s),\n407         Bytes(_) => formatter.write_str(\"byte array\"),\n408         Unit => formatter.write_str(\"unit value\"),\n409         Option => formatter.write_str(\"Option value\"),\n410         NewtypeStruct => formatter.write_str(\"newtype struct\"),\n411         Seq => formatter.write_str(\"sequence\"),\n412         Map => formatter.write_str(\"map\"),\n413         Enum => formatter.write_str(\"enum\"),\n414         UnitVariant => formatter.write_str(\"unit variant\"),\n415         NewtypeVariant => formatter.write_str(\"newtype variant\"),\n416         TupleVariant => formatter.write_str(\"tuple variant\"),\n417         StructVariant => formatter.write_str(\"struct variant\"),\n418         Other(other) => formatter.write_str(other),\n419     }\n420 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}