{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\npub trait DeserializeSeed<'de>: Sized {\n    type Value;\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>;\n}\npub struct AdjacentlyTaggedEnumVariantSeed<F> {\n    pub enum_name: &'static str,\n    pub variants: &'static [&'static str],\n    pub fields_enum: PhantomData<F>,\n}\npub struct AdjacentlyTaggedEnumVariantVisitor<F> {\n    enum_name: &'static str,\n    fields_enum: PhantomData<F>,\n}\nimpl<'de, F> DeserializeSeed<'de> for AdjacentlyTaggedEnumVariantSeed<F>\nwhere\n    F: Deserialize<'de>,\n{\n    type Value = F;\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        deserializer\n            .deserialize_enum(\n                self.enum_name,\n                self.variants,\n                AdjacentlyTaggedEnumVariantVisitor {\n                    enum_name: self.enum_name,\n                    fields_enum: PhantomData,\n                },\n            )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2791 fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n2792 where\n2793     D: Deserializer<'de>,\n2794 {\n2795     deserializer.deserialize_enum(\n2796         self.enum_name,\n2797         self.variants,\n2798         AdjacentlyTaggedEnumVariantVisitor {\n2799             enum_name: self.enum_name,\n2800             fields_enum: PhantomData,\n2801         },\n2802     )\n2803 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}