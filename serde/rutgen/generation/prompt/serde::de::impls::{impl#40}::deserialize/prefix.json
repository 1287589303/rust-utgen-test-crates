{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{\n    Deserialize, Deserializer, EnumAccess, Error, MapAccess, SeqAccess, Unexpected,\n    VariantAccess, Visitor,\n};\nuse crate::seed::InPlaceSeed;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::size_hint;\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\npub trait IntoDeserializer<'de, E: Error = value::Error> {\n    type Deserializer: Deserializer<'de, Error = E>;\n    fn into_deserializer(self) -> Self::Deserializer;\n}\npub trait Serializer: Sized {\n    type Ok;\n    type Error: Error;\n    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeTupleVariant: SerializeTupleVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;\n    type SerializeStructVariant: SerializeStructVariant<\n            Ok = Self::Ok,\n            Error = Self::Error,\n        >;\n    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_i128(self, v: i128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"i128 is not supported\"))\n    }\n    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_u128(self, v: u128) -> Result<Self::Ok, Self::Error> {\n        let _ = v;\n        Err(Error::custom(\"u128 is not supported\"))\n    }\n    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;\n    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;\n    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;\n    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;\n    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_some<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;\n    fn serialize_unit_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n    ) -> Result<Self::Ok, Self::Error>;\n    fn serialize_newtype_struct<T>(\n        self,\n        name: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_newtype_variant<T>(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        value: &T,\n    ) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_seq(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeSeq, Self::Error>;\n    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;\n    fn serialize_tuple_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleStruct, Self::Error>;\n    fn serialize_tuple_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleVariant, Self::Error>;\n    fn serialize_map(\n        self,\n        len: Option<usize>,\n    ) -> Result<Self::SerializeMap, Self::Error>;\n    fn serialize_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStruct, Self::Error>;\n    fn serialize_struct_variant(\n        self,\n        name: &'static str,\n        variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStructVariant, Self::Error>;\n    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        I: IntoIterator,\n        <I as IntoIterator>::Item: Serialize,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(& iter)));\n        tri!(iter.try_for_each(| item | serializer.serialize_element(& item)));\n        serializer.end()\n    }\n    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>\n    where\n        K: Serialize,\n        V: Serialize,\n        I: IntoIterator<Item = (K, V)>,\n    {\n        let mut iter = iter.into_iter();\n        let mut serializer = tri!(self.serialize_map(iterator_len_hint(& iter)));\n        tri!(\n            iter.try_for_each(| (key, value) | serializer.serialize_entry(& key, &\n            value))\n        );\n        serializer.end()\n    }\n    #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display,\n    {\n        self.serialize_str(&value.to_string())\n    }\n    #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n    fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    where\n        T: ?Sized + Display;\n    #[inline]\n    fn is_human_readable(&self) -> bool;\n}\npub trait MapAccess<'de> {\n    type Error: Error;\n    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>\n    where\n        K: DeserializeSeed<'de>;\n    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>\n    where\n        V: DeserializeSeed<'de>;\n    #[inline]\n    fn next_entry_seed<K, V>(\n        &mut self,\n        kseed: K,\n        vseed: V,\n    ) -> Result<Option<(K::Value, V::Value)>, Self::Error>\n    where\n        K: DeserializeSeed<'de>,\n        V: DeserializeSeed<'de>,\n    {\n        match tri!(self.next_key_seed(kseed)) {\n            Some(key) => {\n                let value = tri!(self.next_value_seed(vseed));\n                Ok(Some((key, value)))\n            }\n            None => Ok(None),\n        }\n    }\n    #[inline]\n    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>\n    where\n        K: Deserialize<'de>,\n    {\n        self.next_key_seed(PhantomData)\n    }\n    #[inline]\n    fn next_value<V>(&mut self) -> Result<V, Self::Error>\n    where\n        V: Deserialize<'de>,\n    {\n        self.next_value_seed(PhantomData)\n    }\n    #[inline]\n    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>\n    where\n        K: Deserialize<'de>,\n        V: Deserialize<'de>,\n    {\n        self.next_entry_seed(PhantomData, PhantomData)\n    }\n    #[inline]\n    fn size_hint(&self) -> Option<usize>;\n}\npub trait IdentifierDeserializer<'de, E: Error> {\n    type Deserializer: Deserializer<'de, Error = E>;\n    fn from(self) -> Self::Deserializer;\n}\npub trait SeqAccess<'de> {\n    type Error: Error;\n    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>\n    where\n        T: DeserializeSeed<'de>;\n    #[inline]\n    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\n    where\n        T: Deserialize<'de>,\n    {\n        self.next_element_seed(PhantomData)\n    }\n    #[inline]\n    fn size_hint(&self) -> Option<usize>;\n}\npub trait DeserializeSeed<'de>: Sized {\n    type Value;\n    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>;\n}\npub trait Expected {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n}\npub trait Pair {\n    type First;\n    type Second;\n    fn split(self) -> (Self::First, Self::Second);\n}\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Serialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Serialize {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer;\n}\npub struct T;\nimpl<'de, T> Deserialize<'de> for Wrapping<T>\nwhere\n    T: Deserialize<'de>,\n{\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        Deserialize::deserialize(deserializer).map(Wrapping)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2875 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2876 where\n2877     D: Deserializer<'de>,\n2878 {\n2879     enum Field {\n2880         Unbounded,\n2881         Included,\n2882         Excluded,\n2883     }\n2884 \n2885     impl<'de> Deserialize<'de> for Field {\n2886         #[inline]\n2887         fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n2888         where\n2889             D: Deserializer<'de>,\n2890         {\n2891             struct FieldVisitor;\n2892 \n2893             impl<'de> Visitor<'de> for FieldVisitor {\n2894                 type Value = Field;\n2895 \n2896                 fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2897                     formatter.write_str(\"`Unbounded`, `Included` or `Excluded`\")\n2898                 }\n2899 \n2900                 fn visit_u64<E>(self, value: u64) -> Result<Self::Value, E>\n2901                 where\n2902                     E: Error,\n2903                 {\n2904                     match value {\n2905                         0 => Ok(Field::Unbounded),\n2906                         1 => Ok(Field::Included),\n2907                         2 => Ok(Field::Excluded),\n2908                         _ => Err(Error::invalid_value(Unexpected::Unsigned(value), &self)),\n2909                     }\n2910                 }\n2911 \n2912                 fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n2913                 where\n2914                     E: Error,\n2915                 {\n2916                     match value {\n2917                         \"Unbounded\" => Ok(Field::Unbounded),\n2918                         \"Included\" => Ok(Field::Included),\n2919                         \"Excluded\" => Ok(Field::Excluded),\n2920                         _ => Err(Error::unknown_variant(value, VARIANTS)),\n2921                     }\n2922                 }\n2923 \n2924                 fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>\n2925                 where\n2926                     E: Error,\n2927                 {\n2928                     match value {\n2929                         b\"Unbounded\" => Ok(Field::Unbounded),\n2930                         b\"Included\" => Ok(Field::Included),\n2931                         b\"Excluded\" => Ok(Field::Excluded),\n2932                         _ => match str::from_utf8(value) {\n2933                             Ok(value) => Err(Error::unknown_variant(value, VARIANTS)),\n2934                             Err(_) => {\n2935                                 Err(Error::invalid_value(Unexpected::Bytes(value), &self))\n2936                             }\n2937                         },\n2938                     }\n2939                 }\n2940             }\n2941 \n2942             deserializer.deserialize_identifier(FieldVisitor)\n2943         }\n2944     }\n2945 \n2946     struct BoundVisitor<T>(PhantomData<Bound<T>>);\n2947 \n2948     impl<'de, T> Visitor<'de> for BoundVisitor<T>\n2949     where\n2950         T: Deserialize<'de>,\n2951     {\n2952         type Value = Bound<T>;\n2953 \n2954         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n2955             formatter.write_str(\"enum Bound\")\n2956         }\n2957 \n2958         fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>\n2959         where\n2960             A: EnumAccess<'de>,\n2961         {\n2962             match tri!(data.variant()) {\n2963                 (Field::Unbounded, v) => v.unit_variant().map(|()| Bound::Unbounded),\n2964                 (Field::Included, v) => v.newtype_variant().map(Bound::Included),\n2965                 (Field::Excluded, v) => v.newtype_variant().map(Bound::Excluded),\n2966             }\n2967         }\n2968     }\n2969 \n2970     const VARIANTS: &[&str] = &[\"Unbounded\", \"Included\", \"Excluded\"];\n2971 \n2972     deserializer.deserialize_enum(\"Bound\", VARIANTS, BoundVisitor(PhantomData))\n2973 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}