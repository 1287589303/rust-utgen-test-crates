{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/value.rs\n// crate name is serde\npub type First<T> = <T as Pair>::First;\npub type Second<T> = <T as Pair>::Second;\nuse crate::lib::*;\nuse crate::de::{\n    self, DeserializeSeed, Deserializer, MapAccess, Unexpected, VariantAccess, Visitor,\n};\npub trait VariantAccess<'de>: Sized {\n    type Error: Error;\n    fn unit_variant(self) -> Result<(), Self::Error>;\n    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>\n    where\n        T: DeserializeSeed<'de>;\n    #[inline]\n    fn newtype_variant<T>(self) -> Result<T, Self::Error>\n    where\n        T: Deserialize<'de>,\n    {\n        self.newtype_variant_seed(PhantomData)\n    }\n    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n    fn struct_variant<V>(\n        self,\n        fields: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>;\n}\npub struct UnitOnly<E> {\n    marker: PhantomData<E>,\n}\npub struct T;\n#[derive(Copy, Clone, PartialEq, Debug)]\npub enum Unexpected<'a> {\n    /// The input contained a boolean value that was not expected.\n    Bool(bool),\n    /// The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\n    /// was not expected.\n    Unsigned(u64),\n    /// The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\n    /// was not expected.\n    Signed(i64),\n    /// The input contained a floating point `f32` or `f64` that was not\n    /// expected.\n    Float(f64),\n    /// The input contained a `char` that was not expected.\n    Char(char),\n    /// The input contained a `&str` or `String` that was not expected.\n    Str(&'a str),\n    /// The input contained a `&[u8]` or `Vec<u8>` that was not expected.\n    Bytes(&'a [u8]),\n    /// The input contained a unit `()` that was not expected.\n    Unit,\n    /// The input contained an `Option<T>` that was not expected.\n    Option,\n    /// The input contained a newtype struct that was not expected.\n    NewtypeStruct,\n    /// The input contained a sequence that was not expected.\n    Seq,\n    /// The input contained a map that was not expected.\n    Map,\n    /// The input contained an enum that was not expected.\n    Enum,\n    /// The input contained a unit variant that was not expected.\n    UnitVariant,\n    /// The input contained a newtype variant that was not expected.\n    NewtypeVariant,\n    /// The input contained a tuple variant that was not expected.\n    TupleVariant,\n    /// The input contained a struct variant that was not expected.\n    StructVariant,\n    /// A message stating what uncategorized thing the input contained that was\n    /// not expected.\n    ///\n    /// The message should be a noun or noun phrase, not capitalized and without\n    /// a period. An example message is \"unoriginal superhero\".\n    Other(&'a str),\n}\nimpl<'de, E> de::VariantAccess<'de> for UnitOnly<E>\nwhere\n    E: de::Error,\n{\n    type Error = E;\n    fn unit_variant(self) -> Result<(), Self::Error> {\n        Ok(())\n    }\n    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>\n    where\n        T: de::DeserializeSeed<'de>,\n    {\n        Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))\n    }\n    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"))\n    }\n    fn struct_variant<V>(\n        self,\n        _fields: &'static [&'static str],\n        _visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1760 fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>\n1761 where\n1762     T: de::DeserializeSeed<'de>,\n1763 {\n1764     Err(de::Error::invalid_type(\n1765         Unexpected::UnitVariant,\n1766         &\"newtype variant\",\n1767     ))\n1768 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}