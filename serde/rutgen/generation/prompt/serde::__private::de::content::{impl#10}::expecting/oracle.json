{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\npub trait Visitor<'de>: Sized {\n    type Value;\n    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Bool(v), &self))\n    }\n    fn visit_i8<E>(self, v: i8) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_i64(v as i64)\n    }\n    fn visit_i16<E>(self, v: i16) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_i64(v as i64)\n    }\n    fn visit_i32<E>(self, v: i32) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_i64(v as i64)\n    }\n    fn visit_i64<E>(self, v: i64) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Signed(v), &self))\n    }\n    fn visit_i128<E>(self, v: i128) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        let mut buf = [0u8; 58];\n        let mut writer = crate::format::Buf::new(&mut buf);\n        fmt::Write::write_fmt(&mut writer, format_args!(\"integer `{}` as i128\", v))\n            .unwrap();\n        Err(Error::invalid_type(Unexpected::Other(writer.as_str()), &self))\n    }\n    fn visit_u8<E>(self, v: u8) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_u64(v as u64)\n    }\n    fn visit_u16<E>(self, v: u16) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_u64(v as u64)\n    }\n    fn visit_u32<E>(self, v: u32) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_u64(v as u64)\n    }\n    fn visit_u64<E>(self, v: u64) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Unsigned(v), &self))\n    }\n    fn visit_u128<E>(self, v: u128) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        let mut buf = [0u8; 57];\n        let mut writer = crate::format::Buf::new(&mut buf);\n        fmt::Write::write_fmt(&mut writer, format_args!(\"integer `{}` as u128\", v))\n            .unwrap();\n        Err(Error::invalid_type(Unexpected::Other(writer.as_str()), &self))\n    }\n    fn visit_f32<E>(self, v: f32) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_f64(v as f64)\n    }\n    fn visit_f64<E>(self, v: f64) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Float(v), &self))\n    }\n    #[inline]\n    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_str(v.encode_utf8(&mut [0u8; 4]))\n    }\n    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Str(v), &self))\n    }\n    #[inline]\n    fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_str(v)\n    }\n    #[inline]\n    #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    #[cfg_attr(docsrs, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\n    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_str(&v)\n    }\n    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Bytes(v), &self))\n    }\n    #[inline]\n    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_bytes(v)\n    }\n    #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n    #[cfg_attr(docsrs, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\n    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        self.visit_bytes(&v)\n    }\n    fn visit_none<E>(self) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Option, &self))\n    }\n    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        let _ = deserializer;\n        Err(Error::invalid_type(Unexpected::Option, &self))\n    }\n    fn visit_unit<E>(self) -> Result<Self::Value, E>\n    where\n        E: Error,\n    {\n        Err(Error::invalid_type(Unexpected::Unit, &self))\n    }\n    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        let _ = deserializer;\n        Err(Error::invalid_type(Unexpected::NewtypeStruct, &self))\n    }\n    fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>\n    where\n        A: SeqAccess<'de>,\n    {\n        let _ = seq;\n        Err(Error::invalid_type(Unexpected::Seq, &self))\n    }\n    fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>\n    where\n        A: MapAccess<'de>,\n    {\n        let _ = map;\n        Err(Error::invalid_type(Unexpected::Map, &self))\n    }\n    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>\n    where\n        A: EnumAccess<'de>,\n    {\n        let _ = data;\n        Err(Error::invalid_type(Unexpected::Enum, &self))\n    }\n    fn __private_visit_untagged_option<D>(self, _: D) -> Result<Self::Value, ()>\n    where\n        D: Deserializer<'de>,\n    {\n        Err(())\n    }\n}\npub struct TaggedContentVisitor<T> {\n    tag_name: &'static str,\n    expecting: &'static str,\n    value: PhantomData<T>,\n}\npub struct T;\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<'de, T> Visitor<'de> for TaggedContentVisitor<T>\nwhere\n    T: Deserialize<'de>,\n{\n    type Value = (T, Content<'de>);\n    fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n        fmt.write_str(self.expecting)\n    }\n    fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>\n    where\n        S: SeqAccess<'de>,\n    {\n        let tag = match tri!(seq.next_element()) {\n            Some(tag) => tag,\n            None => {\n                return Err(de::Error::missing_field(self.tag_name));\n            }\n        };\n        let rest = de::value::SeqAccessDeserializer::new(seq);\n        Ok((tag, tri!(Content::deserialize(rest))))\n    }\n    fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>\n    where\n        M: MapAccess<'de>,\n    {\n        let mut tag = None;\n        let mut vec = Vec::<\n            (Content, Content),\n        >::with_capacity(size_hint::cautious::<(Content, Content)>(map.size_hint()));\n        while let Some(k) = tri!(\n            map.next_key_seed(TagOrContentVisitor::new(self.tag_name))\n        ) {\n            match k {\n                TagOrContent::Tag => {\n                    if tag.is_some() {\n                        return Err(de::Error::duplicate_field(self.tag_name));\n                    }\n                    tag = Some(tri!(map.next_value()));\n                }\n                TagOrContent::Content(k) => {\n                    let v = tri!(map.next_value());\n                    vec.push((k, v));\n                }\n            }\n        }\n        match tag {\n            None => Err(de::Error::missing_field(self.tag_name)),\n            Some(tag) => Ok((tag, Content::Map(vec))),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n862 fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n863     fmt.write_str(self.expecting)\n864 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}