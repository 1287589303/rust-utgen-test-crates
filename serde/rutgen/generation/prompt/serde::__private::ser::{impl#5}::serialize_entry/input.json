{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub struct FlatMapSerializeMap<'a, M: 'a>(&'a mut M);\n#[derive(Debug)]\npub struct Error;\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nimpl<'a, M> ser::SerializeMap for FlatMapSerializeMap<'a, M>\nwhere\n    M: SerializeMap + 'a,\n{\n    type Ok = ();\n    type Error = M::Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        self.0.serialize_key(key)\n    }\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        self.0.serialize_value(value)\n    }\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        self.0.serialize_entry(key, value)\n    }\n    fn end(self) -> Result<(), Self::Error> {\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1208 fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n1209 where\n1210     K: ?Sized + Serialize,\n1211     V: ?Sized + Serialize,\n1212 {\n1213     self.0.serialize_entry(key, value)\n1214 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}