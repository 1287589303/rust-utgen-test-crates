{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\nstruct CowBytesVisitor;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\nwhere\n    D: Deserializer<'de>,\n    R: From<Cow<'a, [u8]>>,\n{\n    struct CowBytesVisitor;\n    impl<'a> Visitor<'a> for CowBytesVisitor {\n        type Value = Cow<'a, [u8]>;\n        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n            formatter.write_str(\"a byte array\")\n        }\n        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.as_bytes().to_vec()))\n        }\n        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Borrowed(v.as_bytes()))\n        }\n        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.into_bytes()))\n        }\n        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.to_vec()))\n        }\n        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Borrowed(v))\n        }\n        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v))\n        }\n    }\n    deserializer.deserialize_bytes(CowBytesVisitor).map(From::from)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n135 pub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\n136 where\n137     D: Deserializer<'de>,\n138     R: From<Cow<'a, [u8]>>,\n139 {\n140     struct CowBytesVisitor;\n141 \n142     impl<'a> Visitor<'a> for CowBytesVisitor {\n143         type Value = Cow<'a, [u8]>;\n144 \n145         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n146             formatter.write_str(\"a byte array\")\n147         }\n148 \n149         fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n150         where\n151             E: Error,\n152         {\n153             Ok(Cow::Owned(v.as_bytes().to_vec()))\n154         }\n155 \n156         fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n157         where\n158             E: Error,\n159         {\n160             Ok(Cow::Borrowed(v.as_bytes()))\n161         }\n162 \n163         fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n164         where\n165             E: Error,\n166         {\n167             Ok(Cow::Owned(v.into_bytes()))\n168         }\n169 \n170         fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n171         where\n172             E: Error,\n173         {\n174             Ok(Cow::Owned(v.to_vec()))\n175         }\n176 \n177         fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n178         where\n179             E: Error,\n180         {\n181             Ok(Cow::Borrowed(v))\n182         }\n183 \n184         fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n185         where\n186             E: Error,\n187         {\n188             Ok(Cow::Owned(v))\n189         }\n190     }\n191 \n192     deserializer\n193         .deserialize_bytes(CowBytesVisitor)\n194         .map(From::from)\n195 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}