{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::value::{BorrowedBytesDeserializer, BytesDeserializer};\nuse crate::de::{\n    Deserialize, DeserializeSeed, Deserializer, EnumAccess, Error, IntoDeserializer,\n    VariantAccess, Visitor,\n};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::{MapAccess, Unexpected};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub use self::content::{\n    Content, ContentDeserializer, ContentRefDeserializer, EnumDeserializer,\n    InternallyTaggedUnitVisitor, TagContentOtherField, TagContentOtherFieldVisitor,\n    TagOrContentField, TagOrContentFieldVisitor, TaggedContentVisitor,\n    UntaggedUnitVisitor,\n};\npub use crate::seed::InPlaceSeed;\nstruct CowBytesVisitor;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\npub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\nwhere\n    D: Deserializer<'de>,\n    R: From<Cow<'a, [u8]>>,\n{\n    struct CowBytesVisitor;\n    impl<'a> Visitor<'a> for CowBytesVisitor {\n        type Value = Cow<'a, [u8]>;\n        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n            formatter.write_str(\"a byte array\")\n        }\n        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.as_bytes().to_vec()))\n        }\n        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Borrowed(v.as_bytes()))\n        }\n        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.into_bytes()))\n        }\n        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v.to_vec()))\n        }\n        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Borrowed(v))\n        }\n        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n        where\n            E: Error,\n        {\n            Ok(Cow::Owned(v))\n        }\n    }\n    deserializer.deserialize_bytes(CowBytesVisitor).map(From::from)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n135 pub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>\n136 where\n137     D: Deserializer<'de>,\n138     R: From<Cow<'a, [u8]>>,\n139 {\n140     struct CowBytesVisitor;\n141 \n142     impl<'a> Visitor<'a> for CowBytesVisitor {\n143         type Value = Cow<'a, [u8]>;\n144 \n145         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n146             formatter.write_str(\"a byte array\")\n147         }\n148 \n149         fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n150         where\n151             E: Error,\n152         {\n153             Ok(Cow::Owned(v.as_bytes().to_vec()))\n154         }\n155 \n156         fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>\n157         where\n158             E: Error,\n159         {\n160             Ok(Cow::Borrowed(v.as_bytes()))\n161         }\n162 \n163         fn visit_string<E>(self, v: String) -> Result<Self::Value, E>\n164         where\n165             E: Error,\n166         {\n167             Ok(Cow::Owned(v.into_bytes()))\n168         }\n169 \n170         fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>\n171         where\n172             E: Error,\n173         {\n174             Ok(Cow::Owned(v.to_vec()))\n175         }\n176 \n177         fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>\n178         where\n179             E: Error,\n180         {\n181             Ok(Cow::Borrowed(v))\n182         }\n183 \n184         fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>\n185         where\n186             E: Error,\n187         {\n188             Ok(Cow::Owned(v))\n189         }\n190     }\n191 \n192     deserializer\n193         .deserialize_bytes(CowBytesVisitor)\n194         .map(From::from)\n195 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}