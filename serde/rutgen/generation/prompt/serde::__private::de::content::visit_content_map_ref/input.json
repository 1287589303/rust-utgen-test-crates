{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\nfn visit_content_map_ref<'a, 'de, V, E>(\n    content: &'a [(Content<'de>, Content<'de>)],\n    visitor: V,\n) -> Result<V::Value, E>\nwhere\n    V: Visitor<'de>,\n    E: de::Error,\n{\n    fn content_ref_deserializer_pair<'a, 'de>(\n        (k, v): &'a (Content<'de>, Content<'de>),\n    ) -> (&'a Content<'de>, &'a Content<'de>) {\n        (k, v)\n    }\n    let map = content.iter().map(content_ref_deserializer_pair);\n    let mut map_visitor = MapDeserializer::new(map);\n    let value = tri!(visitor.visit_map(& mut map_visitor));\n    tri!(map_visitor.end());\n    Ok(value)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1712 fn visit_content_map_ref<'a, 'de, V, E>(\n1713     content: &'a [(Content<'de>, Content<'de>)],\n1714     visitor: V,\n1715 ) -> Result<V::Value, E>\n1716 where\n1717     V: Visitor<'de>,\n1718     E: de::Error,\n1719 {\n1720     fn content_ref_deserializer_pair<'a, 'de>(\n1721         (k, v): &'a (Content<'de>, Content<'de>),\n1722     ) -> (&'a Content<'de>, &'a Content<'de>) {\n1723         (k, v)\n1724     }\n1725 \n1726     let map = content.iter().map(content_ref_deserializer_pair);\n1727     let mut map_visitor = MapDeserializer::new(map);\n1728     let value = tri!(visitor.visit_map(&mut map_visitor));\n1729     tri!(map_visitor.end());\n1730     Ok(value)\n1731 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}