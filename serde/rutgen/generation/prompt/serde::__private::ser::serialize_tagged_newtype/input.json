{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\nstruct TaggedSerializer<S> {\n    type_ident: &'static str,\n    variant_ident: &'static str,\n    tag: &'static str,\n    variant_name: &'static str,\n    delegate: S,\n}\npub struct T;\npub fn serialize_tagged_newtype<S, T>(\n    serializer: S,\n    type_ident: &'static str,\n    variant_ident: &'static str,\n    tag: &'static str,\n    variant_name: &'static str,\n    value: &T,\n) -> Result<S::Ok, S::Error>\nwhere\n    S: Serializer,\n    T: Serialize,\n{\n    value\n        .serialize(TaggedSerializer {\n            type_ident,\n            variant_ident,\n            tag,\n            variant_name,\n            delegate: serializer,\n        })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Not public API.\n17 pub fn serialize_tagged_newtype<S, T>(\n18     serializer: S,\n19     type_ident: &'static str,\n20     variant_ident: &'static str,\n21     tag: &'static str,\n22     variant_name: &'static str,\n23     value: &T,\n24 ) -> Result<S::Ok, S::Error>\n25 where\n26     S: Serializer,\n27     T: Serialize,\n28 {\n29     value.serialize(TaggedSerializer {\n30         type_ident,\n31         variant_ident,\n32         tag,\n33         variant_name,\n34         delegate: serializer,\n35     })\n36 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}