{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/ser.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{self, Impossible, Serialize, SerializeMap, SerializeStruct, Serializer};\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse self::content::{\n    Content, ContentSerializer, SerializeStructVariantAsMapValue,\n    SerializeTupleVariantAsMapValue,\n};\nstruct TaggedSerializer<S> {\n    type_ident: &'static str,\n    variant_ident: &'static str,\n    tag: &'static str,\n    variant_name: &'static str,\n    delegate: S,\n}\npub struct T;\npub fn serialize_tagged_newtype<S, T>(\n    serializer: S,\n    type_ident: &'static str,\n    variant_ident: &'static str,\n    tag: &'static str,\n    variant_name: &'static str,\n    value: &T,\n) -> Result<S::Ok, S::Error>\nwhere\n    S: Serializer,\n    T: Serialize,\n{\n    value\n        .serialize(TaggedSerializer {\n            type_ident,\n            variant_ident,\n            tag,\n            variant_name,\n            delegate: serializer,\n        })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Not public API.\n17 pub fn serialize_tagged_newtype<S, T>(\n18     serializer: S,\n19     type_ident: &'static str,\n20     variant_ident: &'static str,\n21     tag: &'static str,\n22     variant_name: &'static str,\n23     value: &T,\n24 ) -> Result<S::Ok, S::Error>\n25 where\n26     S: Serializer,\n27     T: Serialize,\n28 {\n29     value.serialize(TaggedSerializer {\n30         type_ident,\n31         variant_ident,\n32         tag,\n33         variant_name,\n34         delegate: serializer,\n35     })\n36 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}