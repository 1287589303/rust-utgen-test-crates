{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/private/de.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::actually_private;\nuse crate::de::value::{MapDeserializer, SeqDeserializer};\nuse crate::de::{\n    self, size_hint, Deserialize, DeserializeSeed, Deserializer, EnumAccess, Expected,\n    IgnoredAny, MapAccess, SeqAccess, Unexpected, Visitor,\n};\npub trait EnumAccess<'de>: Sized {\n    type Error: Error;\n    type Variant: VariantAccess<'de, Error = Self::Error>;\n    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>\n    where\n        V: DeserializeSeed<'de>;\n    #[inline]\n    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>\n    where\n        V: Deserialize<'de>,\n    {\n        self.variant_seed(PhantomData)\n    }\n}\nstruct EnumRefDeserializer<'a, 'de: 'a, E>\nwhere\n    E: de::Error,\n{\n    variant: &'a Content<'de>,\n    value: Option<&'a Content<'de>>,\n    err: PhantomData<E>,\n}\npub struct ContentRefDeserializer<'a, 'de: 'a, E> {\n    content: &'a Content<'de>,\n    err: PhantomData<E>,\n}\nstruct VariantRefDeserializer<'a, 'de: 'a, E>\nwhere\n    E: de::Error,\n{\n    value: Option<&'a Content<'de>>,\n    err: PhantomData<E>,\n}\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\n#[derive(Debug)]\npub struct Error;\n#[derive(Debug, Clone)]\npub enum Content<'de> {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Str(&'de str),\n    ByteBuf(Vec<u8>),\n    Bytes(&'de [u8]),\n    None,\n    Some(Box<Content<'de>>),\n    Unit,\n    Newtype(Box<Content<'de>>),\n    Seq(Vec<Content<'de>>),\n    Map(Vec<(Content<'de>, Content<'de>)>),\n}\npub enum Content {\n    Bool(bool),\n    U8(u8),\n    U16(u16),\n    U32(u32),\n    U64(u64),\n    I8(i8),\n    I16(i16),\n    I32(i32),\n    I64(i64),\n    F32(f32),\n    F64(f64),\n    Char(char),\n    String(String),\n    Bytes(Vec<u8>),\n    None,\n    Some(Box<Content>),\n    Unit,\n    UnitStruct(&'static str),\n    UnitVariant(&'static str, u32, &'static str),\n    NewtypeStruct(&'static str, Box<Content>),\n    NewtypeVariant(&'static str, u32, &'static str, Box<Content>),\n    Seq(Vec<Content>),\n    Tuple(Vec<Content>),\n    TupleStruct(&'static str, Vec<Content>),\n    TupleVariant(&'static str, u32, &'static str, Vec<Content>),\n    Map(Vec<(Content, Content)>),\n    Struct(&'static str, Vec<(&'static str, Content)>),\n    StructVariant(&'static str, u32, &'static str, Vec<(&'static str, Content)>),\n}\nimpl<'de, 'a, E> de::EnumAccess<'de> for EnumRefDeserializer<'a, 'de, E>\nwhere\n    E: de::Error,\n{\n    type Error = E;\n    type Variant = VariantRefDeserializer<'a, 'de, Self::Error>;\n    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>\n    where\n        V: de::DeserializeSeed<'de>,\n    {\n        let visitor = VariantRefDeserializer {\n            value: self.value,\n            err: PhantomData,\n        };\n        seed.deserialize(ContentRefDeserializer::new(self.variant)).map(|v| (v, visitor))\n    }\n}\nimpl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {\n    pub fn new(content: &'a Content<'de>) -> Self {\n        ContentRefDeserializer {\n            content,\n            err: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2141 fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>\n2142 where\n2143     V: de::DeserializeSeed<'de>,\n2144 {\n2145     let visitor = VariantRefDeserializer {\n2146         value: self.value,\n2147         err: PhantomData,\n2148     };\n2149     seed.deserialize(ContentRefDeserializer::new(self.variant))\n2150         .map(|v| (v, visitor))\n2151 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}