{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/ser/impossible.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::ser::{\n    self, Serialize, SerializeMap, SerializeSeq, SerializeStruct, SerializeStructVariant,\n    SerializeTuple, SerializeTupleStruct, SerializeTupleVariant,\n};\npub trait SerializeTupleStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeStructVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTuple {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeTupleVariant {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeStruct {\n    type Ok;\n    type Error: Error;\n    fn serialize_field<T>(\n        &mut self,\n        key: &'static str,\n        value: &T,\n    ) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    #[inline]\n    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {\n        let _ = key;\n        Ok(())\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeMap {\n    type Ok;\n    type Error: Error;\n    fn serialize_key<T>(&mut self, key: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_value<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>\n    where\n        K: ?Sized + Serialize,\n        V: ?Sized + Serialize,\n    {\n        tri!(self.serialize_key(key));\n        self.serialize_value(value)\n    }\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub trait SerializeSeq {\n    type Ok;\n    type Error: Error;\n    fn serialize_element<T>(&mut self, value: &T) -> Result<(), Self::Error>\n    where\n        T: ?Sized + Serialize;\n    fn end(self) -> Result<Self::Ok, Self::Error>;\n}\npub struct Impossible<Ok, Error> {\n    void: Void,\n    ok: PhantomData<Ok>,\n    error: PhantomData<Error>,\n}\npub struct T;\n#[derive(Clone, PartialEq)]\npub struct Error {\n    err: ErrorImpl,\n}\n#[derive(Debug)]\npub struct Error;\nenum Void {}\nimpl<Ok, Error> SerializeTupleStruct for Impossible<Ok, Error>\nwhere\n    Error: ser::Error,\n{\n    type Ok = Ok;\n    type Error = Error;\n    fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>\n    where\n        T: ?Sized + Serialize,\n    {\n        let _ = value;\n        match self.void {}\n    }\n    fn end(self) -> Result<Ok, Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n115 fn serialize_field<T>(&mut self, value: &T) -> Result<(), Error>\n116 where\n117     T: ?Sized + Serialize,\n118 {\n119     let _ = value;\n120     match self.void {}\n121 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}