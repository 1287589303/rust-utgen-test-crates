{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// serde/src/de/impls.rs\n// crate name is serde\nuse crate::lib::*;\nuse crate::de::{\n    Deserialize, Deserializer, EnumAccess, Error, MapAccess, SeqAccess, Unexpected,\n    VariantAccess, Visitor,\n};\nuse crate::seed::InPlaceSeed;\n#[cfg(any(feature = \"std\", feature = \"alloc\"))]\nuse crate::de::size_hint;\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Deserialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Deserialize<'de>: Sized {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>;\n    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        *place = tri!(Deserialize::deserialize(deserializer));\n        Ok(())\n    }\n}\n#[cfg_attr(\n    not(no_diagnostic_namespace),\n    diagnostic::on_unimplemented(\n        note = \"for local types consider adding `#[derive(serde::Serialize)]` to your `{Self}` type\",\n        note = \"for types from other crates check whether the crate offers a `serde` feature flag\",\n    )\n)]\npub trait Serialize {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: Serializer;\n}\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nstruct FromStrVisitor<T> {\n    expecting: &'static str,\n    ty: PhantomData<T>,\n}\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nimpl<'de> Deserialize<'de> for net::IpAddr {\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        if deserializer.is_human_readable() {\n            deserializer.deserialize_str(FromStrVisitor::new(\"IP address\"))\n        } else {\n            use crate::lib::net::IpAddr;\n            deserialize_enum! {\n                IpAddr IpAddrKind(V4; b\"V4\"; 0, V6; b\"V6\"; 1) \"`V4` or `V6`\",\n                deserializer\n            }\n        }\n    }\n}\n#[cfg(any(feature = \"std\", not(no_core_net)))]\nimpl<T> FromStrVisitor<T> {\n    fn new(expecting: &'static str) -> Self {\n        FromStrVisitor {\n            expecting,\n            ty: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1754 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n1755 where\n1756     D: Deserializer<'de>,\n1757 {\n1758     if deserializer.is_human_readable() {\n1759         deserializer.deserialize_str(FromStrVisitor::new(\"socket address\"))\n1760     } else {\n1761         use crate::lib::net::SocketAddr;\n1762         deserialize_enum! {\n1763             SocketAddr SocketAddrKind (V4; b\"V4\"; 0, V6; b\"V6\"; 1)\n1764             \"`V4` or `V6`\",\n1765             deserializer\n1766         }\n1767     }\n1768 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}