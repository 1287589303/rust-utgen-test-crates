[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = de::Unexpected::<'_>::UnitVariant,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const "newtype variant",
            _7 = &_8,
            _6 = &(*_7),
            _5 = move _6 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1764:17: 1767:14 (#0),
                    scope: scope[0],
                },
                kind: _3 = <E as de::Error>::invalid_type(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::Err(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1767:14: 1767:15 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1768:9: 1768:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1768:10: 1768:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1768:9: 1768:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1760:9: 1768:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1760:55: 1760:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::value::private::UnitOnly<E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1760:36: 1760:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1760:49: 1760:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1760:42: 1760:47 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1760:42: 1760:47 (#0),
                    },
                ),
            ),
        ),
        ty: T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1760:42: 1760:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1764:17: 1767:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1764:13: 1767:15 (#0),
                },
            ),
        ),
        ty: de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1765:17: 1765:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1764:13: 1767:15 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1766:17: 1766:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1764:13: 1767:15 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1766:17: 1766:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1764:13: 1767:15 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1766:17: 1766:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1764:13: 1767:15 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1766:18: 1766:35 (#0),
            scope: scope[0],
        },
    },
]