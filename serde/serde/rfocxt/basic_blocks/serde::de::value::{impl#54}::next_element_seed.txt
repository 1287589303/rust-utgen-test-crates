[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: std::iter::Fuse<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1093:15: 1093:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::iter::Fuse<I> as std::iter::Iterator>::next(move _4) -> [return: bb1, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1093:9: 1093:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1093:15: 1093:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1094:13: 1094:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = std::option::Option::<<V as de::DeserializeSeed<'_>>::Value>::None,
            _0 = std::result::Result::<std::option::Option<<V as de::DeserializeSeed<'_>>::Value>, E>::Ok(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1098:28: 1098:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_3 as Some).0: T),
            _7 = AddWithOverflow(((*_1).1: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1095:17: 1095:32 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb6, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_7.0: usize),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _2,
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:34: 1096:59 (#0),
                    scope: scope[1],
                },
                kind: _10 = <T as de::IntoDeserializer<'_, E>>::into_deserializer(move _11) -> [return: bb7, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:17: 1096:60 (#0),
                    scope: scope[1],
                },
                kind: _8 = <V as de::DeserializeSeed<'_>>::deserialize::<<T as de::IntoDeserializer<'_, E>>::Deserializer>(move _9, move _10) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:17: 1096:70 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<<V as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<V as de::DeserializeSeed<'_>>::Value>, fn(<V as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<V as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<V as de::DeserializeSeed<'_>>::Value>::Some}>(move _8, std::option::Option::<<V as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1097:13: 1097:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1097:13: 1097:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1098:28: 1098:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1100:5: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1100:5: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1100:6: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:69: 1096:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:59: 1096:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:58: 1096:59 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1096:59: 1096:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1097:13: 1097:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1100:5: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1100:5: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1089:5: 1100:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [V/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1089:52: 1089:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::value::SeqDeserializer<I/#1, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1089:29: 1089:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1089:46: 1089:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1089:40: 1089:44 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1089:40: 1089:44 (#0),
                    },
                ),
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1089:40: 1089:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1093:9: 1099:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1093:15: 1093:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1093:9: 1099:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1093:15: 1093:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1094:13: 1094:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/value.rs:1093:15: 1093:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1094:13: 1094:24 (#0),
                    },
                ),
            ),
        ),
        ty: T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1094:18: 1094:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1095:17: 1095:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1096:17: 1096:70 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1096:17: 1096:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1096:17: 1096:70 (#0),
                },
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1096:17: 1096:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1096:17: 1096:70 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    T/#2,
                    '{erased},
                    E/#3,
                ],
                def_id: DefId(0:1671 ~ serde[cd55]::de::IntoDeserializer::Deserializer),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1096:34: 1096:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1096:17: 1096:70 (#0),
                },
            ),
        ),
        ty: T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1096:34: 1096:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [V/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1098:24: 1098:28 (#0),
            scope: scope[0],
        },
    },
]