[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = std::option::Option::<T>::None,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:888:16: 888:31 (#0),
                    scope: scope[1],
                },
                kind: _6 = <M as de::MapAccess<'_>>::size_hint(move _7) -> [return: bb1, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:885:68: 888:32 (#0),
                    scope: scope[1],
                },
                kind: _5 = de::size_hint::cautious::<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>(move _6) -> [return: bb2, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:885:27: 888:33 (#0),
                    scope: scope[1],
                },
                kind: _4 = std::vec::Vec::<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>::with_capacity(move _5) -> [return: bb3, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _2,
            StorageLive(_13),
            StorageLive(_14),
            _14 = (_1.0: &str),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:56: 889:95 (#0),
                    scope: scope[3],
                },
                kind: _13 = __private::de::content::TagOrContentVisitor::<'_>::new(move _14) -> [return: bb6, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:38: 889:96 (#0),
                    scope: scope[3],
                },
                kind: _11 = <M as de::MapAccess<'_>>::next_key_seed::<__private::de::content::TagOrContentVisitor<'_>>(move _12, move _13) -> [return: bb7, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            PlaceMention(_11),
            _15 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3711),
                    scope: scope[3],
                },
                kind: switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:38: 889:96 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3711),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_11 as Err).0: <M as de::MapAccess<'_>>::Error),
            StorageLive(_19),
            _19 = move _17,
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Err(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3711),
                    scope: scope[5],
                },
                kind: drop(_19) -> [return: bb13, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_11 as Ok).0: std::option::Option<__private::de::content::TagOrContent<'_>>),
            _10 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3711),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb12, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_10),
            _20 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:23: 889:30 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [1: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3711),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb78, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_53),
            _8 = const (),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb55, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:23: 889:30 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_10 as Some).0: __private::de::content::TagOrContent<'_>),
            PlaceMention(_21),
            _22 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:890:17: 890:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _22) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:890:23: 890:24 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:891:21: 891:38 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = move ((_21 as Content).0: __private::de::content::Content<'_>),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:898:38: 898:54 (#0),
                    scope: scope[8],
                },
                kind: _40 = <M as de::MapAccess<'_>>::next_value::<__private::de::content::Content<'_>>(move _41) -> [return: bb38, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:892:28: 892:41 (#0),
                    scope: scope[3],
                },
                kind: _24 = std::option::Option::<T>::is_some(move _25) -> [return: bb21, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:892:28: 892:41 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _24) -> [0: bb25, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_27),
            StorageLive(_28),
            _28 = (_1.0: &str),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:893:40: 893:81 (#0),
                    scope: scope[3],
                },
                kind: _27 = <<M as de::MapAccess<'_>>::Error as de::Error>::duplicate_field(move _28) -> [return: bb23, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Err(move _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:893:81: 893:82 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb24, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = const (),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:41: 895:57 (#0),
                    scope: scope[3],
                },
                kind: _31 = <M as de::MapAccess<'_>>::next_value::<T>(move _32) -> [return: bb26, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            _33 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3712),
                    scope: scope[3],
                },
                kind: switchInt(move _33) -> [0: bb28, 1: bb29, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:41: 895:57 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3712),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = move ((_31 as Err).0: <M as de::MapAccess<'_>>::Error),
            StorageLive(_37),
            _37 = move _35,
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Err(move _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3712),
                    scope: scope[7],
                },
                kind: drop(_37) -> [return: bb32, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = move ((_31 as Ok).0: T),
            _30 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3712),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb31, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _29 = std::option::Option::<T>::Some(move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:58: 895:59 (#0),
                    scope: scope[3],
                },
                kind: drop(_30) -> [return: bb33, unwind: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3712),
                    scope: scope[3],
                },
                kind: drop(_35) -> [return: bb74, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:25: 895:28 (#0),
                    scope: scope[3],
                },
                kind: drop(_3) -> [return: bb34, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:58: 895:59 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb36, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:25: 895:28 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:59: 895:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb37, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:891:42: 896:22 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            _42 = discriminant(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3713),
                    scope: scope[8],
                },
                kind: switchInt(move _42) -> [0: bb40, 1: bb41, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:898:38: 898:54 (#0),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3713),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = move ((_40 as Err).0: <M as de::MapAccess<'_>>::Error),
            StorageLive(_46),
            _46 = move _44,
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Err(move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3713),
                    scope: scope[11],
                },
                kind: drop(_46) -> [return: bb44, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = move ((_40 as Ok).0: __private::de::content::Content<'_>),
            _39 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3713),
                    scope: scope[8],
                },
                kind: drop(_43) -> [return: bb43, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForLet(None), _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:898:55: 898:56 (#0),
                    scope: scope[8],
                },
                kind: drop(_40) -> [return: bb45, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3713),
                    scope: scope[8],
                },
                kind: drop(_44) -> [return: bb71, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut _4,
            StorageLive(_49),
            StorageLive(_50),
            _50 = move _38,
            StorageLive(_51),
            _51 = move _39,
            _49 = (move _50, move _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:899:39: 899:40 (#0),
                    scope: scope[9],
                },
                kind: drop(_51) -> [return: bb46, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:899:39: 899:40 (#0),
                    scope: scope[9],
                },
                kind: drop(_50) -> [return: bb47, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:899:25: 899:41 (#0),
                    scope: scope[9],
                },
                kind: _47 = std::vec::Vec::<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>::push(move _48, move _49) -> [return: bb48, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[8],
                },
                kind: drop(_39) -> [return: bb49, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_38) -> [return: bb50, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb52, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb53, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb54, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:889:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb56, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            PlaceMention(_3),
            _55 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:903:13: 903:22 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _55) -> [0: bb58, 1: bb59, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:903:19: 903:22 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:904:17: 904:21 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb60, imaginary: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            _58 = move ((_3 as Some).0: T),
            StorageLive(_59),
            StorageLive(_60),
            _60 = move _58,
            StorageLive(_61),
            StorageLive(_62),
            _62 = move _4,
            _61 = __private::de::content::Content::<'_>::Map(move _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:55: 905:56 (#0),
                    scope: scope[12],
                },
                kind: drop(_62) -> [return: bb63, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            StorageLive(_57),
            _57 = (_1.0: &str),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:904:29: 904:68 (#0),
                    scope: scope[2],
                },
                kind: _56 = <<M as de::MapAccess<'_>>::Error as de::Error>::missing_field(move _57) -> [return: bb61, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Err(move _56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:904:68: 904:69 (#0),
                    scope: scope[2],
                },
                kind: drop(_56) -> [return: bb62, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:904:68: 904:69 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            _59 = (move _60, move _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:56: 905:57 (#0),
                    scope: scope[12],
                },
                kind: drop(_61) -> [return: bb64, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:56: 905:57 (#0),
                    scope: scope[12],
                },
                kind: drop(_60) -> [return: bb65, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            _0 = std::result::Result::<(T, __private::de::content::Content<'_>), <M as de::MapAccess<'_>>::Error>::Ok(move _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:57: 905:58 (#0),
                    scope: scope[12],
                },
                kind: drop(_59) -> [return: bb66, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:57: 905:58 (#0),
                    scope: scope[2],
                },
                kind: drop(_58) -> [return: bb67, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:57: 905:58 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb69, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb70, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb83, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:898:55: 898:56 (#0),
                    scope: scope[8],
                },
                kind: drop(_40) -> [return: bb72, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_38) -> [return: bb73, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:59: 895:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb75, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb77, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb79, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb80, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb81, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb82, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb83, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:10: 907:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:56: 905:57 (#0),
                    scope: scope[12],
                },
                kind: drop(_60) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:57: 905:58 (#0),
                    scope: scope[12],
                },
                kind: drop(_59) -> [return: bb88, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:56: 905:57 (#0),
                    scope: scope[12],
                },
                kind: drop(_61) -> [return: bb87, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:56: 905:57 (#0),
                    scope: scope[12],
                },
                kind: drop(_60) -> [return: bb88, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:905:57: 905:58 (#0),
                    scope: scope[2],
                },
                kind: drop(_58) -> [return: bb102, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:899:39: 899:40 (#0),
                    scope: scope[9],
                },
                kind: drop(_50) -> [return: bb90, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:899:40: 899:41 (#0),
                    scope: scope[9],
                },
                kind: drop(_49) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[8],
                },
                kind: drop(_39) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3713),
                    scope: scope[8],
                },
                kind: drop(_44) -> [return: bb93, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:898:55: 898:56 (#0),
                    scope: scope[8],
                },
                kind: drop(_40) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:900:21: 900:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_38) -> [return: bb98, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:58: 895:59 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb97, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3712),
                    scope: scope[3],
                },
                kind: drop(_35) -> [return: bb97, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:895:59: 895:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb98, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb99, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb101, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3711),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb101, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:902:13: 902:14 (#4020),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb102, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb103, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb104, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:907:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb105, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:880:9: 907:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(T/#1, __private::de::content::Content<'{erased}>), Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:880:46: 880:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::TaggedContentVisitor<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:880:25: 880:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:880:40: 880:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:880:31: 880:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:880:31: 880:38 (#0),
                    },
                ),
            ),
        ),
        ty: M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:880:31: 880:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:884:27: 884:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:884:17: 884:24 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:884:17: 884:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:885:27: 888:33 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:885:17: 885:24 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:885:17: 885:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:885:68: 888:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:888:16: 888:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:888:16: 888:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:13: 902:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:880:9: 907:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: std::option::Option<__private::de::content::TagOrContent<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3711),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: std::result::Result<std::option::Option<__private::de::content::TagOrContent<'{erased}>>, Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:38: 889:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: &'{erased} mut M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:38: 889:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: __private::de::content::TagOrContentVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:56: 889:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:81: 889:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3711),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                serde/src/private/de.rs:889:38: 889:96 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3711),
                    },
                ),
            ),
        ),
        ty: std::option::Option<__private::de::content::TagOrContent<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3711),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                serde/src/private/de.rs:889:38: 889:96 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3711),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3711),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3711),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3711),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:23: 889:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                serde/src/lib.rs:297:9: 300:10 (#3711),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:889:23: 889:30 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::TagOrContent<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:28: 889:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:891:21: 891:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:892:25: 894:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:892:28: 892:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:892:28: 892:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:892:42: 894:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:893:40: 893:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:893:67: 893:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:895:31: 895:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3712),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<T/#1, Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:895:41: 895:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:895:41: 895:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3712),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                serde/src/private/de.rs:895:41: 895:57 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3712),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3712),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                serde/src/private/de.rs:895:41: 895:57 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3712),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3712),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3712),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3712),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                serde/src/private/de.rs:890:23: 890:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:897:21: 897:45 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:897:43: 897:44 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3713),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:898:29: 898:30 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:898:29: 898:30 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<__private::de::content::Content<'{erased}>, Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:898:38: 898:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:898:38: 898:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3713),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                serde/src/private/de.rs:898:38: 898:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3713),
                    },
                ),
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3713),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                serde/src/private/de.rs:898:38: 898:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3713),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3713),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3713),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3713),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:899:25: 899:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:899:25: 899:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:899:34: 899:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:899:35: 899:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:899:38: 899:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:889:13: 902:14 (#4020),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:13: 902:14 (#4020),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:13: 902:14 (#4020),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:889:13: 902:14 (#4020),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:904:17: 904:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:904:29: 904:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:903:13: 906:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:904:54: 904:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/private/de.rs:903:19: 903:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:905:17: 905:26 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:905:22: 905:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (T/#1, __private::de::content::Content<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:905:33: 905:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:903:13: 906:14 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:905:34: 905:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:903:13: 906:14 (#0),
                },
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:905:39: 905:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:905:52: 905:55 (#0),
            scope: scope[0],
        },
    },
]