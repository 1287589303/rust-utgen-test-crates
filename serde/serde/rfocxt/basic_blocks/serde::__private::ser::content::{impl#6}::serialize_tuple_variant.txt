[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            _9 = _4,
            StorageLive(_10),
            StorageLive(_11),
            _11 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:721:25: 721:48 (#0),
                    scope: scope[0],
                },
                kind: _10 = std::vec::Vec::<__private::ser::content::Content>::with_capacity(move _11) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            _12 = std::marker::PhantomData::<E>,
            _6 = __private::ser::content::SerializeTupleVariant::<E> { name: move _7, variant_index: move _8, variant: move _9, fields: move _10, error: move _12 },
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:723:13: 723:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            _0 = std::result::Result::<__private::ser::content::SerializeTupleVariant<E>, E>::Ok(move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:723:14: 723:15 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:724:10: 724:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:723:14: 723:15 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:710:9: 724:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<__private::ser::content::SerializeTupleVariant<E/#0>, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:716:14: 716:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::content::ContentSerializer<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:711:13: 711:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:712:19: 712:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:712:13: 712:17 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:712:13: 712:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:712:13: 712:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:713:28: 713:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:713:13: 713:26 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:713:13: 713:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:713:13: 713:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:714:22: 714:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:714:13: 714:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:714:13: 714:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:714:13: 714:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:715:18: 715:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:715:13: 715:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:715:13: 715:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:715:13: 715:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: __private::ser::content::SerializeTupleVariant<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:717:16: 723:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:718:17: 718:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:719:17: 719:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:720:17: 720:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:721:25: 721:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:717:13: 723:15 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:721:44: 721:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:722:24: 722:35 (#0),
            scope: scope[0],
        },
    },
]