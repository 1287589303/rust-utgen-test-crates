[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = de::Unexpected::<'_>::Seq,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            _6 = &(*_7),
            _5 = move _6 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1654:13: 1654:56 (#0),
                    scope: scope[1],
                },
                kind: _3 = <<A as de::SeqAccess<'_>>::Error as de::Error>::invalid_type(move _4, move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _0 = std::result::Result::<<Self as de::Visitor<'_>>::Value, <A as de::SeqAccess<'_>>::Error>::Err(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1654:56: 1654:57 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1655:5: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1655:5: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1655:6: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1655:5: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1655:5: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1649:5: 1655:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), Alias(Projection, AliasTy { args: [A/#2, '{erased}], def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1649:38: 1649:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1649:21: 1649:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/mod.rs:1649:32: 1649:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/mod.rs:1649:27: 1649:30 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/mod.rs:1649:27: 1649:30 (#0),
                    },
                ),
            ),
        ),
        ty: A/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1649:27: 1649:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#2,
                    '{erased},
                ],
                def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1654:13: 1654:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1654:9: 1654:57 (#0),
                },
            ),
        ),
        ty: de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1654:33: 1654:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1654:9: 1654:57 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1654:50: 1654:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1654:9: 1654:57 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1654:50: 1654:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1654:9: 1654:57 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1654:50: 1654:55 (#0),
            scope: scope[0],
        },
    },
]