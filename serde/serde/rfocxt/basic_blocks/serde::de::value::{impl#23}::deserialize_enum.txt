[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            PlaceMention(_3),
            StorageLive(_5),
            _5 = move _4,
            StorageLive(_6),
            _6 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:586:9: 586:33 (#0),
                    scope: scope[2],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_enum::<de::value::BorrowedStrDeserializer<'_, E>>(move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:587:6: 587:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:586:32: 586:33 (#0),
                    scope: scope[2],
                },
                kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:575:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:580:10: 580:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::value::BorrowedStrDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:576:9: 576:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:577:15: 577:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:577:9: 577:13 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:577:9: 577:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:577:9: 577:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:578:19: 578:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:578:9: 578:17 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:578:9: 578:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:578:9: 578:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:579:18: 579:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:579:9: 579:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:579:9: 579:16 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:579:9: 579:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:586:9: 586:33 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:586:9: 586:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:586:9: 586:33 (#0),
                },
            ),
        ),
        ty: de::value::BorrowedStrDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:586:28: 586:32 (#0),
            scope: scope[0],
        },
    },
]