[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move (_1.4: S),
            StorageLive(_9),
            _9 = std::option::Option::<usize>::Some(const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:28: 270:64 (#0),
                    scope: scope[0],
                },
                kind: _7 = <S as ser::Serializer>::serialize_map(move _8, move _9) -> [return: bb1, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            PlaceMention(_7),
            _10 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3870),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:28: 270:64 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3870),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_7 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_14),
            _14 = move _12,
            _0 = std::result::Result::<__private::ser::content::SerializeTupleVariantAsMapValue<<S as ser::Serializer>::SerializeMap>, <S as ser::Serializer>::Error>::Err(move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3870),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb7, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_7 as Ok).0: <S as ser::Serializer>::SerializeMap),
            _6 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3870),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb6, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:65: 270:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb8, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3870),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb31, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _6,
            StorageLive(_18),
            _18 = &(*(_1.2: &str)),
            StorageLive(_19),
            _19 = &(*(_1.3: &str)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:271:14: 271:62 (#0),
                    scope: scope[1],
                },
                kind: _16 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::serialize_entry::<str, str>(move _17, move _18, move _19) -> [return: bb9, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            PlaceMention(_16),
            _20 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3871),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:271:14: 271:62 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3871),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_16 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_24),
            _24 = move _22,
            _0 = std::result::Result::<__private::ser::content::SerializeTupleVariantAsMapValue<<S as ser::Serializer>::SerializeMap>, <S as ser::Serializer>::Error>::Err(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3871),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb14, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_16 as Ok).0: ()),
            _15 = _21,
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3871),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb15, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3871),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb28, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut _6,
            StorageLive(_28),
            _28 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:272:14: 272:46 (#0),
                    scope: scope[1],
                },
                kind: _26 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::serialize_key::<str>(move _27, move _28) -> [return: bb16, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            PlaceMention(_26),
            _29 = discriminant(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3872),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:272:14: 272:46 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3872),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_26 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_33),
            _33 = move _31,
            _0 = std::result::Result::<__private::ser::content::SerializeTupleVariantAsMapValue<<S as ser::Serializer>::SerializeMap>, <S as ser::Serializer>::Error>::Err(move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3872),
                    scope: scope[7],
                },
                kind: drop(_33) -> [return: bb21, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = ((_26 as Ok).0: ()),
            _25 = _30,
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3872),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb22, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3872),
                    scope: scope[1],
                },
                kind: drop(_31) -> [return: bb26, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_34),
            StorageLive(_35),
            _35 = move _6,
            StorageLive(_36),
            _36 = _4,
            StorageLive(_37),
            _37 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:273:12: 277:10 (#0),
                    scope: scope[1],
                },
                kind: _34 = __private::ser::content::SerializeTupleVariantAsMapValue::<<S as ser::Serializer>::SerializeMap>::new(move _35, move _36, move _37) -> [return: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            _0 = std::result::Result::<__private::ser::content::SerializeTupleVariantAsMapValue<<S as ser::Serializer>::SerializeMap>, <S as ser::Serializer>::Error>::Ok(move _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:277:10: 277:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_34) -> [return: bb24, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb25, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb34, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3872),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb27, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3871),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb29, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb33, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:65: 270:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb32, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb34, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:6: 278:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:277:9: 277:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_35) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3872),
                    scope: scope[1],
                },
                kind: drop(_31) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3872),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3871),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3871),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3870),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:65: 270:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:270:63: 270:64 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:278:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:263:5: 278:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<__private::ser::content::SerializeTupleVariantAsMapValue<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) })>, Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:269:10: 269:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::TaggedSerializer<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:264:9: 264:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:265:9: 265:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:266:9: 266:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:267:24: 267:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:267:9: 267:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:267:9: 267:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:267:9: 267:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:268:14: 268:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:268:9: 268:12 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:268:9: 268:12 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:268:9: 268:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3870),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:270:13: 270:20 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:270:13: 270:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:270:28: 270:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:270:28: 270:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:270:56: 270:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                serde/src/private/ser.rs:270:28: 270:64 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3870),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                serde/src/private/ser.rs:270:28: 270:64 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3870),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3871),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:271:14: 271:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:271:14: 271:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:271:34: 271:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:271:44: 271:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3871),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/ser.rs:271:14: 271:62 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3871),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3871),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/ser.rs:271:14: 271:62 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3871),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3871),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3871),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3871),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:272:14: 272:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:272:14: 272:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:272:32: 272:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                serde/src/private/ser.rs:272:14: 272:46 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3872),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3872),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                serde/src/private/ser.rs:272:14: 272:46 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3872),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3872),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: __private::ser::content::SerializeTupleVariantAsMapValue<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:273:12: 277:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:273:9: 277:11 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:274:13: 274:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:273:9: 277:11 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:275:13: 275:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:273:9: 277:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:276:13: 276:16 (#0),
            scope: scope[0],
        },
    },
]