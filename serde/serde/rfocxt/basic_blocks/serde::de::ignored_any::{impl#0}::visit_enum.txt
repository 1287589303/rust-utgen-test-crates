[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:226:14: 226:42 (#0),
                    scope: scope[0],
                },
                kind: _5 = <A as de::EnumAccess<'_>>::variant::<de::ignored_any::IgnoredAny>(move _6) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _7 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#1845),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:226:14: 226:42 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#1845),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Err).0: <A as de::EnumAccess<'_>>::Error),
            StorageLive(_11),
            _11 = move _9,
            _0 = std::result::Result::<de::ignored_any::IgnoredAny, <A as de::EnumAccess<'_>>::Error>::Err(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#1845),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_5 as Ok).0: (de::ignored_any::IgnoredAny, <A as de::EnumAccess<'_>>::Variant)),
            _4 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#1845),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _3 = move (_4.1: <A as de::EnumAccess<'_>>::Variant),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = <<A as de::EnumAccess<'_>>::Variant as de::VariantAccess<'_>>::newtype_variant::<de::ignored_any::IgnoredAny>(move _3) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#1845),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:6: 227:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:226:62: 226:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#1845),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:226:41: 226:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:227:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/ignored_any.rs:222:5: 227:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<de::ignored_any::IgnoredAny, Alias(Projection, AliasTy { args: [A/#1, '{erased}], def_id: DefId(0:1650 ~ serde[cd55]::de::EnumAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:222:40: 222:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::ignored_any::IgnoredAny,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:222:22: 222:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/ignored_any.rs:222:34: 222:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/ignored_any.rs:222:28: 222:32 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/ignored_any.rs:222:28: 222:32 (#0),
                    },
                ),
            ),
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:222:28: 222:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#1,
                    '{erased},
                ],
                def_id: DefId(0:1651 ~ serde[cd55]::de::EnumAccess::Variant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:226:9: 226:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                },
            ),
        ),
        ty: (de::ignored_any::IgnoredAny, Alias(Projection, AliasTy { args: [A/#1, '{erased}], def_id: DefId(0:1651 ~ serde[cd55]::de::EnumAccess::Variant) })),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#1845),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                },
            ),
        ),
        ty: std::result::Result<(de::ignored_any::IgnoredAny, Alias(Projection, AliasTy { args: [A/#1, '{erased}], def_id: DefId(0:1651 ~ serde[cd55]::de::EnumAccess::Variant) })), Alias(Projection, AliasTy { args: [A/#1, '{erased}], def_id: DefId(0:1650 ~ serde[cd55]::de::EnumAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:226:14: 226:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                },
            ),
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/ignored_any.rs:226:14: 226:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#1845),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                serde/src/de/ignored_any.rs:226:14: 226:42 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#1845),
                    },
                ),
            ),
        ),
        ty: (de::ignored_any::IgnoredAny, Alias(Projection, AliasTy { args: [A/#1, '{erased}], def_id: DefId(0:1651 ~ serde[cd55]::de::EnumAccess::Variant) })),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#1845),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                serde/src/de/ignored_any.rs:226:14: 226:42 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#1845),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#1,
                    '{erased},
                ],
                def_id: DefId(0:1650 ~ serde[cd55]::de::EnumAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#1845),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/ignored_any.rs:226:9: 226:63 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#1845),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#1,
                    '{erased},
                ],
                def_id: DefId(0:1650 ~ serde[cd55]::de::EnumAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#1845),
            scope: scope[0],
        },
    },
]