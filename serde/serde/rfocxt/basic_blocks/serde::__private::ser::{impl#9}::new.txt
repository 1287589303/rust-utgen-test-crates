[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*_1),
            StorageLive(_4),
            _4 = _2,
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1306:21: 1306:31 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::vec::Vec::<(&str, __private::ser::content::Content)>::new() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = __private::ser::FlatMapSerializeStructVariantAsMapValue::<'_, M> { map: move _3, name: move _4, fields: move _5 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1307:9: 1307:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1308:6: 1308:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1302:5: 1308:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::ser::FlatMapSerializeStructVariantAsMapValue<'{erased}, M/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1302:51: 1302:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:1302:17: 1302:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:1302:12: 1302:15 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:1302:12: 1302:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut M/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1302:12: 1302:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:1302:34: 1302:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:1302:28: 1302:32 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:1302:28: 1302:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1302:28: 1302:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut M/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1304:13: 1304:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1305:13: 1305:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1306:21: 1306:31 (#0),
            scope: scope[0],
        },
    },
]