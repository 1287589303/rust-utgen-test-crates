[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            StorageLive(_3),
            _3 = (),
            _0 = std::result::Result::<(), <Self as ser::SerializeStruct>::Error>::Ok(move _3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/mod.rs:1875:6: 1875:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(0:2061 ~ serde[cd55]::ser::SerializeStruct::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/mod.rs:1872:52: 1872:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/mod.rs:1872:19: 1872:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/mod.rs:1872:35: 1872:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/mod.rs:1872:30: 1872:33 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/mod.rs:1872:30: 1872:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/mod.rs:1872:30: 1872:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/mod.rs:1874:12: 1874:14 (#0),
            scope: scope[0],
        },
    },
]