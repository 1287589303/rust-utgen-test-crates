[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: std::option::Option<A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1541:26: 1541:39 (#0),
                    scope: scope[1],
                },
                kind: _3 = std::option::Option::<A>::take(move _4) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1541:16: 1541:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [1: bb2, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1541:16: 1541:23 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_3 as Some).0: A),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _2,
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:30: 1542:51 (#0),
                    scope: scope[1],
                },
                kind: _9 = <A as de::IntoDeserializer<'_, E>>::into_deserializer(move _10) -> [return: bb4, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:13: 1542:52 (#0),
                    scope: scope[1],
                },
                kind: _7 = <T as de::DeserializeSeed<'_>>::deserialize::<<A as de::IntoDeserializer<'_, E>>::Deserializer>(move _8, move _9) -> [return: bb5, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:13: 1542:62 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, fn(<T as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<T as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some}>(move _7, std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb6, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:9: 1543:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).1: std::option::Option<B>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:33: 1543:46 (#0),
                    scope: scope[2],
                },
                kind: _11 = std::option::Option::<B>::take(move _12) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _13 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:23: 1543:30 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [1: bb10, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:23: 1543:30 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_11 as Some).0: B),
            StorageLive(_15),
            StorageLive(_16),
            _16 = move _2,
            StorageLive(_17),
            StorageLive(_18),
            _18 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:30: 1544:51 (#0),
                    scope: scope[2],
                },
                kind: _17 = <B as de::IntoDeserializer<'_, E>>::into_deserializer(move _18) -> [return: bb12, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:13: 1544:52 (#0),
                    scope: scope[2],
                },
                kind: _15 = <T as de::DeserializeSeed<'_>>::deserialize::<<B as de::IntoDeserializer<'_, E>>::Deserializer>(move _16, move _17) -> [return: bb13, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:13: 1544:62 (#0),
                    scope: scope[2],
                },
                kind: _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, fn(<T as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<T as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some}>(move _15, std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb14, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1545:9: 1545:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb16, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::None,
            _0 = std::result::Result::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, E>::Ok(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1546:20: 1546:21 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb17, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:16: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:16: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1547:9: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb19, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1548:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1548:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1548:6: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:61: 1544:62 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:51: 1544:52 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:50: 1544:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1544:51: 1544:52 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1545:9: 1545:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1547:9: 1547:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:61: 1542:62 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:51: 1542:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:50: 1542:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1542:51: 1542:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1543:9: 1543:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1548:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1548:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1537:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [T/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1537:52: 1537:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::value::PairVisitor<A/#1, B/#2, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1537:29: 1537:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1537:46: 1537:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1537:40: 1537:44 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1537:40: 1537:44 (#0),
                    },
                ),
            ),
        ),
        ty: T/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1537:40: 1537:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1541:26: 1541:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1541:26: 1541:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1541:16: 1541:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/value.rs:1541:26: 1541:39 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1541:16: 1541:23 (#0),
                    },
                ),
            ),
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1541:21: 1541:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1542:13: 1542:62 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1542:13: 1542:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1542:13: 1542:62 (#0),
                },
            ),
        ),
        ty: T/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1542:13: 1542:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1542:13: 1542:62 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#1,
                    '{erased},
                    E/#3,
                ],
                def_id: DefId(0:1671 ~ serde[cd55]::de::IntoDeserializer::Deserializer),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1542:30: 1542:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1542:13: 1542:62 (#0),
                },
            ),
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1542:30: 1542:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<B/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1543:33: 1543:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1541:9: 1547:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<B/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1543:33: 1543:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1543:23: 1543:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                serde/src/de/value.rs:1543:33: 1543:46 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1543:23: 1543:30 (#0),
                    },
                ),
            ),
        ),
        ty: B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1543:28: 1543:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1544:13: 1544:62 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1544:13: 1544:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1544:13: 1544:62 (#0),
                },
            ),
        ),
        ty: T/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1544:13: 1544:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1544:13: 1544:62 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    B/#2,
                    '{erased},
                    E/#3,
                ],
                def_id: DefId(0:1671 ~ serde[cd55]::de::IntoDeserializer::Deserializer),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1544:30: 1544:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1544:13: 1544:62 (#0),
                },
            ),
        ),
        ty: B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1544:30: 1544:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [T/#4, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1546:16: 1546:20 (#0),
            scope: scope[0],
        },
    },
]