[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move (_1.1: std::option::Option<__private::de::content::Content<'_>>),
            StorageLive(_5),
            _5 = std::marker::PhantomData::<E>,
            _3 = __private::de::content::VariantDeserializer::<'_, E> { value: move _4, err: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1560:13: 1560:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            StorageLive(_9),
            _9 = move (_1.0: __private::de::content::Content<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:30: 1561:68 (#0),
                    scope: scope[1],
                },
                kind: _8 = __private::de::content::ContentDeserializer::<'_, E>::new(move _9) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:13: 1561:69 (#0),
                    scope: scope[1],
                },
                kind: _6 = <V as de::DeserializeSeed<'_>>::deserialize::<__private::de::content::ContentDeserializer<'_, E>>(move _7, move _8) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_10),
            _10 = {closure@serde/src/private/de.rs:1562:22: 1562:25} { visitor: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<<V as de::DeserializeSeed<'_>>::Value, E>::map::<(<V as de::DeserializeSeed<'_>>::Value, __private::de::content::VariantDeserializer<'_, E>), {closure@serde/src/private/de.rs:1562:22: 1562:25}>(move _6, move _10) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:10: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1562:38: 1562:39 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1562:38: 1562:39 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:68: 1561:69 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:67: 1561:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1561:68: 1561:69 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1563:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1553:9: 1563:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), __private::de::content::VariantDeserializer<'{erased}, E/#1>), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1553:46: 1553:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::EnumDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1553:28: 1553:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:1553:40: 1553:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1553:34: 1553:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1553:34: 1553:38 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1553:34: 1553:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1557:27: 1560:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1557:17: 1557:24 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::VariantDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1557:17: 1557:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<__private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1558:24: 1558:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1559:22: 1559:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1561:13: 1561:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1561:13: 1561:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                },
            ),
        ),
        ty: __private::de::content::ContentDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1561:30: 1561:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                },
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1561:55: 1561:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1561:13: 1562:39 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2533 ~ serde[cd55]::__private::de::content::{impl#19}::variant_seed::{closure#0}),
            [
                '{erased},
                E/#1,
                V/#2,
                i32,
                Binder { value: extern "RustCall" fn((Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }),)) -> (Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), __private::de::content::VariantDeserializer<'{erased}, E/#1>), bound_vars: [] },
                (__private::de::content::VariantDeserializer<'{erased}, E/#1>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1562:22: 1562:38 (#0),
            scope: scope[0],
        },
    },
]