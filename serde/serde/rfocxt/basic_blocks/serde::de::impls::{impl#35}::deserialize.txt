[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = de::impls::<impl de::Deserialize<'de> for std::time::SystemTime>::deserialize::DurationVisitor,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:29: 2407:99 (#0),
                    scope: scope[0],
                },
                kind: _3 = <D as de::Deserializer<'_>>::deserialize_struct::<de::impls::<impl de::Deserialize<'de> for std::time::SystemTime>::deserialize::DurationVisitor>(move _4, const "SystemTime", const de::impls::<impl de::Deserialize<'de> for std::time::SystemTime>::deserialize::FIELDS, move _5) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3259),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:29: 2407:99 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3259),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_3 as Err).0: <D as de::Deserializer<'_>>::Error),
            StorageLive(_10),
            _10 = move _8,
            _0 = std::result::Result::<std::time::SystemTime, <D as de::Deserializer<'_>>::Error>::Err(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3259),
                    scope: scope[3],
                },
                kind: drop(_10) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_3 as Ok).0: std::time::Duration),
            _2 = _7,
            StorageDead(_7),
            FakeRead(ForLet(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:100: 2407:101 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3259),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const std::time::UNIX_EPOCH,
            _12 = &_13,
            StorageLive(_14),
            _14 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2408:9: 2409:35 (#0),
                    scope: scope[1],
                },
                kind: _11 = std::time::SystemTime::checked_add(move _12, move _14) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_15),
            _15 = {closure@serde/src/de/impls.rs:2410:25: 2410:27},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2408:9: 2410:82 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::option::Option::<std::time::SystemTime>::ok_or_else::<<D as de::Deserializer<'_>>::Error, {closure@serde/src/de/impls.rs:2410:25: 2410:27}>(move _11, move _15) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_2),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2411:5: 2411:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:100: 2407:101 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2411:5: 2411:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2411:6: 2411:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3259),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:100: 2407:101 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2407:98: 2407:99 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2411:5: 2411:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2273:5: 2411:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::time::SystemTime, Alias(Projection, AliasTy { args: [D/#1, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2273:43: 2273:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:2273:37: 2273:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:2273:23: 2273:35 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2273:23: 2273:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2273:23: 2273:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3259),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2407:13: 2407:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::time::Duration,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2407:13: 2407:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::time::Duration, Alias(Projection, AliasTy { args: [D/#1, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2407:29: 2407:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2407:29: 2407:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::impls::<impl de::Deserialize<'de> for std::time::SystemTime>::deserialize::DurationVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2407:83: 2407:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/impls.rs:2407:29: 2407:99 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3259),
                    },
                ),
            ),
        ),
        ty: std::time::Duration,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/impls.rs:2407:29: 2407:99 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3259),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    D/#1,
                    '{erased},
                ],
                def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    D/#1,
                    '{erased},
                ],
                def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2408:9: 2410:82 (#0),
                },
            ),
        ),
        ty: std::option::Option<std::time::SystemTime>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2408:9: 2409:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2408:9: 2410:82 (#0),
                },
            ),
        ),
        ty: &'{erased} std::time::SystemTime,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2408:9: 2408:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(1:7169 ~ std[6ba1]::time::UNIX_EPOCH),
            },
        ),
        ty: std::time::SystemTime,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2408:9: 2408:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2408:9: 2410:82 (#0),
                },
            ),
        ),
        ty: std::time::Duration,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2409:26: 2409:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2408:9: 2410:82 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1177 ~ serde[cd55]::de::impls::{impl#35}::deserialize::{closure#0}),
            [
                '{erased},
                D/#1,
                i32,
                Binder { value: extern "RustCall" fn(()) -> Alias(Projection, AliasTy { args: [D/#1, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) }), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2410:25: 2410:81 (#0),
            scope: scope[0],
        },
    },
]