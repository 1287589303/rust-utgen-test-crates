[
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:24: 2310:69 (#0),
                    scope: scope[0],
                },
                kind: _8 = <M as de::MapAccess<'_>>::next_entry::<de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny>(move _9) -> [return: bb3, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _10 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3728),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:24: 2310:69 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3728),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_8 as Err).0: <M as de::MapAccess<'_>>::Error),
            StorageLive(_14),
            _14 = move _12,
            _0 = std::result::Result::<(), <M as de::MapAccess<'_>>::Error>::Err(move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3728),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb8, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_8 as Ok).0: std::option::Option<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>),
            _7 = _11,
            StorageDead(_11),
            _6 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:19: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::option::Option::<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>::is_some(move _6) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3728),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:19: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:79: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:79: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_16),
            _3 = const (),
            StorageDead(_16),
            StorageDead(_5),
            StorageDead(_3),
            StorageLive(_18),
            _18 = (),
            _0 = std::result::Result::<(), <M as de::MapAccess<'_>>::Error>::Ok(move _18),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2312:9: 2312:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:79: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2312:9: 2312:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2312:10: 2312:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3728),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2310:79: 2310:80 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2312:9: 2312:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2306:9: 2312:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2306:49: 2306:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::InternallyTaggedUnitVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2306:25: 2306:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2306:43: 2306:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2306:31: 2306:41 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2306:31: 2306:41 (#0),
                    },
                ),
            ),
        ),
        ty: M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2306:31: 2306:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:13: 2310:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2306:9: 2312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:19: 2310:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: std::option::Option<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: std::result::Result<std::option::Option<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>, Alias(Projection, AliasTy { args: [M/#2, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:24: 2310:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: &'{erased} mut M/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:24: 2310:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                serde/src/private/de.rs:2310:24: 2310:69 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3728),
                    },
                ),
            ),
        ),
        ty: std::option::Option<(de::ignored_any::IgnoredAny, de::ignored_any::IgnoredAny)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                serde/src/private/de.rs:2310:24: 2310:69 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3728),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#2,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2310:13: 2310:83 (#4030),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2311:16: 2311:18 (#0),
            scope: scope[0],
        },
    },
]