[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:739:12: 739:42 (#0),
                    scope: scope[0],
                },
                kind: _3 = <S as ser::Serializer>::is_human_readable(move _4) -> [return: bb1, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:739:12: 739:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb9, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention((*_1)),
            _5 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:740:13: 740:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:740:19: 740:24 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:741:17: 741:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(((*_1) as V6).0: std::net::Ipv6Addr),
            StorageLive(_10),
            _10 = &(*_9),
            StorageLive(_11),
            _11 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:742:43: 742:66 (#0),
                    scope: scope[2],
                },
                kind: _0 = <std::net::Ipv6Addr as ser::Serialize>::serialize::<S>(move _10, move _11) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(((*_1) as V4).0: std::net::Ipv4Addr),
            StorageLive(_7),
            _7 = &(*_6),
            StorageLive(_8),
            _8 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:741:43: 741:66 (#0),
                    scope: scope[1],
                },
                kind: _0 = <std::net::Ipv4Addr as ser::Serialize>::serialize::<S>(move _7, move _8) -> [return: bb7, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:741:65: 741:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:742:65: 742:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention((*_1)),
            _12 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:745:13: 745:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:745:19: 745:24 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:746:17: 746:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &(((*_1) as V6).0: std::net::Ipv6Addr),
            StorageLive(_17),
            _17 = move _2,
            StorageLive(_18),
            _18 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:750:21: 750:79 (#0),
                    scope: scope[4],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::Ipv6Addr>(move _17, const "IpAddr", const 1_u32, const "V6", move _18) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &(((*_1) as V4).0: std::net::Ipv4Addr),
            StorageLive(_14),
            _14 = move _2,
            StorageLive(_15),
            _15 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:747:21: 747:79 (#0),
                    scope: scope[3],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::Ipv4Addr>(move _14, const "IpAddr", const 0_u32, const "V4", move _15) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:748:17: 748:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:751:17: 751:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:754:5: 754:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:754:6: 754:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:750:78: 750:79 (#0),
                    scope: scope[4],
                },
                kind: drop(_17) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:747:78: 747:79 (#0),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:742:65: 742:66 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:741:65: 741:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:754:5: 754:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:735:5: 754:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:735:46: 735:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} std::net::IpAddr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:735:21: 735:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impls.rs:735:40: 735:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impls.rs:735:28: 735:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:735:28: 735:38 (#0),
                    },
                ),
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:735:28: 735:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:739:9: 753:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:739:12: 739:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:739:9: 753:10 (#0),
                },
            ),
        ),
        ty: &'{erased} S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:739:12: 739:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:741:17: 741:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:740:19: 740:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:741:17: 741:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:741:33: 741:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:740:13: 743:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:741:43: 741:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:740:13: 743:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:741:55: 741:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:740:19: 740:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:742:17: 742:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:742:33: 742:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:740:13: 743:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:742:43: 742:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:740:13: 743:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:742:55: 742:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:746:17: 746:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:745:19: 745:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:746:17: 746:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:746:33: 746:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:747:21: 747:79 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:747:21: 747:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:747:21: 747:79 (#0),
                },
            ),
        ),
        ty: &'{erased} std::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:747:77: 747:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:745:19: 745:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:749:17: 749:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:749:33: 749:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:750:21: 750:79 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:750:21: 750:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:750:21: 750:79 (#0),
                },
            ),
        ),
        ty: &'{erased} std::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:750:77: 750:78 (#0),
            scope: scope[0],
        },
    },
]