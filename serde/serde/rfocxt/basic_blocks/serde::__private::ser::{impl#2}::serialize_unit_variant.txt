[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move (_1.4: S),
            StorageLive(_8),
            _8 = std::option::Option::<usize>::Some(const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:28: 200:64 (#0),
                    scope: scope[0],
                },
                kind: _6 = <S as ser::Serializer>::serialize_map(move _7, move _8) -> [return: bb1, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            PlaceMention(_6),
            _9 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3864),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:28: 200:64 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3864),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_6 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_13),
            _13 = move _11,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3864),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb7, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_6 as Ok).0: <S as ser::Serializer>::SerializeMap),
            _5 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3864),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb6, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:65: 200:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3864),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb30, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _5,
            StorageLive(_17),
            _17 = &(*(_1.2: &str)),
            StorageLive(_18),
            _18 = &(*(_1.3: &str)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:201:14: 201:62 (#0),
                    scope: scope[1],
                },
                kind: _15 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::serialize_entry::<str, str>(move _16, move _17, move _18) -> [return: bb9, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            PlaceMention(_15),
            _19 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3865),
                    scope: scope[1],
                },
                kind: switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:201:14: 201:62 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3865),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_15 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_23),
            _23 = move _21,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3865),
                    scope: scope[5],
                },
                kind: drop(_23) -> [return: bb14, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_15 as Ok).0: ()),
            _14 = _20,
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3865),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb15, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3865),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb27, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _5,
            StorageLive(_27),
            _27 = &(*_4),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = (),
            _29 = &_30,
            _28 = &(*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:202:14: 202:53 (#0),
                    scope: scope[1],
                },
                kind: _25 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::serialize_entry::<str, ()>(move _26, move _27, move _28) -> [return: bb16, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            PlaceMention(_25),
            _31 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3866),
                    scope: scope[1],
                },
                kind: switchInt(move _31) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:202:14: 202:53 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3866),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = move ((_25 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_35),
            _35 = move _33,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3866),
                    scope: scope[7],
                },
                kind: drop(_35) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_25 as Ok).0: ()),
            _24 = _32,
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3866),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb22, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3866),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb25, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_36),
            _36 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:203:9: 203:18 (#0),
                    scope: scope[1],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::end(move _36) -> [return: bb23, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb24, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3866),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb26, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3865),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb28, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb32, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:65: 200:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb31, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:6: 204:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:203:17: 203:18 (#0),
                    scope: scope[1],
                },
                kind: drop(_36) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3866),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3866),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3865),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3865),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3864),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:65: 200:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:200:63: 200:64 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:204:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:194:5: 204:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:199:10: 199:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::TaggedSerializer<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:195:9: 195:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:196:9: 196:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:197:9: 197:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:198:24: 198:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:198:9: 198:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:198:9: 198:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:198:9: 198:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3864),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:200:13: 200:20 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:200:13: 200:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:200:28: 200:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:200:28: 200:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:200:56: 200:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3864),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                serde/src/private/ser.rs:200:28: 200:64 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3864),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3864),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                serde/src/private/ser.rs:200:28: 200:64 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3864),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3864),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3864),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3864),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3865),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:201:14: 201:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:201:14: 201:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:201:34: 201:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:201:44: 201:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3865),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde/src/private/ser.rs:201:14: 201:62 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3865),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3865),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde/src/private/ser.rs:201:14: 201:62 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3865),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3865),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3865),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3865),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3866),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:14: 202:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:14: 202:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:34: 202:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:49: 202:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:49: 202:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:202:50: 202:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3866),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde/src/private/ser.rs:202:14: 202:53 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3866),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3866),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde/src/private/ser.rs:202:14: 202:53 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3866),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3866),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3866),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3866),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:203:9: 203:18 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:203:9: 203:12 (#0),
            scope: scope[0],
        },
    },
]