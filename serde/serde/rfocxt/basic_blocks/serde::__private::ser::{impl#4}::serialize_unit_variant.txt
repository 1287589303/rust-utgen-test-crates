[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &mut (*(_1.0: &mut M)),
            StorageLive(_6),
            _6 = &(*_4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = (),
            _8 = &_9,
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                    scope: scope[0],
                },
                kind: _0 = <M as ser::SerializeMap>::serialize_entry::<str, ()>(move _5, move _6, move _7) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1103:6: 1103:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1096:5: 1103:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [M/#1], def_id: DefId(0:2050 ~ serde[cd55]::ser::SerializeMap::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1101:10: 1101:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::FlatMapSerializer<'{erased}, M/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1097:9: 1097:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1098:9: 1098:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1099:9: 1099:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:1100:18: 1100:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:1100:9: 1100:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:1100:9: 1100:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1100:9: 1100:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                },
            ),
        ),
        ty: &'{erased} mut M/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1102:9: 1102:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1102:32: 1102:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                },
            ),
        ),
        ty: &'{erased} (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1102:41: 1102:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                },
            ),
        ),
        ty: &'{erased} (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1102:41: 1102:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1102:9: 1102:45 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1102:42: 1102:44 (#0),
            scope: scope[0],
        },
    },
]