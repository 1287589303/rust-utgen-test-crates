[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1366:15: 1366:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = de::value::MapDeserializer::<'_, I, E>::next_pair(move _4) -> [return: bb1, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1366:9: 1366:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1366:15: 1366:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1367:13: 1367:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::None,
            _0 = std::result::Result::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, E>::Ok(move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1371:28: 1371:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move (((_3 as Some).0: (<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First, <<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second)).0: <<I as std::iter::Iterator>::Item as de::value::private::Pair>::First),
            StorageLive(_7),
            _7 = move (((_3 as Some).0: (<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First, <<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second)).1: <<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _7,
            _8 = std::option::Option::<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>::Some(move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1368:40: 1368:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb6, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1368:17: 1368:27 (#0),
                    scope: scope[1],
                },
                kind: drop(((*_1).1: std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>)) -> [return: bb7, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>) = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1368:40: 1368:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>) = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1368:17: 1368:27 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _2,
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:34: 1369:57 (#0),
                    scope: scope[1],
                },
                kind: _12 = <<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First as de::IntoDeserializer<'_, E>>::into_deserializer(move _13) -> [return: bb10, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:17: 1369:58 (#0),
                    scope: scope[1],
                },
                kind: _10 = <T as de::DeserializeSeed<'_>>::deserialize::<<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First as de::IntoDeserializer<'_, E>>::Deserializer>(move _11, move _12) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:17: 1369:68 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, fn(<T as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<T as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some}>(move _10, std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1370:13: 1370:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1370:13: 1370:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1370:13: 1370:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1371:28: 1371:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1373:5: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1373:5: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1373:6: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:67: 1369:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:57: 1369:58 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:56: 1369:57 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1369:57: 1369:58 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1368:40: 1368:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1370:13: 1370:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1370:13: 1370:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1373:5: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1373:5: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1362:5: 1373:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1362:48: 1362:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1362:25: 1362:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1362:42: 1362:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1362:36: 1362:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1362:36: 1362:40 (#0),
                    },
                ),
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1362:36: 1362:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1366:9: 1372:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<(Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First) }), Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1366:15: 1366:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1366:9: 1372:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1366:15: 1366:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1367:13: 1367:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/value.rs:1366:15: 1366:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1367:13: 1367:31 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Alias(
                        Projection,
                        AliasTy {
                            args: [
                                I/#1,
                            ],
                            def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
                        },
                    ),
                ],
                def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1367:19: 1367:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/value.rs:1366:15: 1366:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1367:13: 1367:31 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Alias(
                        Projection,
                        AliasTy {
                            args: [
                                I/#1,
                            ],
                            def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
                        },
                    ),
                ],
                def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1367:24: 1367:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1368:30: 1368:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Alias(
                        Projection,
                        AliasTy {
                            args: [
                                I/#1,
                            ],
                            def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
                        },
                    ),
                ],
                def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1368:35: 1368:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1369:17: 1369:68 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1369:17: 1369:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1369:17: 1369:68 (#0),
                },
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1369:17: 1369:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1369:17: 1369:68 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Alias(
                        Projection,
                        AliasTy {
                            args: [
                                Alias(
                                    Projection,
                                    AliasTy {
                                        args: [
                                            I/#1,
                                        ],
                                        def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
                                    },
                                ),
                            ],
                            def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First),
                        },
                    ),
                    '{erased},
                    E/#2,
                ],
                def_id: DefId(0:1671 ~ serde[cd55]::de::IntoDeserializer::Deserializer),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1369:34: 1369:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1369:17: 1369:68 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Alias(
                        Projection,
                        AliasTy {
                            args: [
                                I/#1,
                            ],
                            def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
                        },
                    ),
                ],
                def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1369:34: 1369:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1371:24: 1371:28 (#0),
            scope: scope[0],
        },
    },
]