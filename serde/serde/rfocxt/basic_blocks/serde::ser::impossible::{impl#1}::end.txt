[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((_1.0: ser::impossible::Void)),
            FakeRead(ForMatchedPlace(None), (_1.0: ser::impossible::Void)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impossible.rs:104:15: 104:24 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Ok/#0, Error/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:103:21: 103:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: ser::impossible::Impossible<Ok/#0, Error/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:103:12: 103:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impossible.rs:104:9: 104:27 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:104:9: 104:27 (#0),
            scope: scope[0],
        },
    },
]