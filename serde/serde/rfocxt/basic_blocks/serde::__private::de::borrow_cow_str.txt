[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
            StorageLive(_4),
            _4 = __private::de::borrow_cow_str::CowStrVisitor,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:131:5: 131:48 (#0),
                    scope: scope[0],
                },
                kind: _2 = <D as de::Deserializer<'_>>::deserialize_str::<__private::de::borrow_cow_str::CowStrVisitor>(move _3, move _4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:131:5: 131:64 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::result::Result::<std::borrow::Cow<'_, str>, <D as de::Deserializer<'_>>::Error>::map::<R, fn(std::borrow::Cow<'_, str>) -> R {<R as std::convert::From<std::borrow::Cow<'_, str>>>::from}>(move _2, <R as std::convert::From<std::borrow::Cow<'_, str>>>::from) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:132:1: 132:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:132:2: 132:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:131:63: 131:64 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:131:47: 131:48 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:132:1: 132:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:62:1: 132:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<R/#3, Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:62:62: 62:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:62:56: 62:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:62:42: 62:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:62:42: 62:54 (#0),
                    },
                ),
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:62:42: 62:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:131:5: 131:64 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::borrow::Cow<'{erased}, str>, Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:131:5: 131:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:131:5: 131:64 (#0),
                },
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:131:5: 131:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:131:5: 131:64 (#0),
                },
            ),
        ),
        ty: __private::de::borrow_cow_str::CowStrVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:131:34: 131:47 (#0),
            scope: scope[0],
        },
    },
]