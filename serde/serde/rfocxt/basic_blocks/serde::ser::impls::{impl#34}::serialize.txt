[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &((*_1).0: T),
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:988:9: 988:37 (#0),
                    scope: scope[0],
                },
                kind: _0 = <T as ser::Serialize>::serialize::<S>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:989:5: 989:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:989:6: 989:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:988:36: 988:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:989:5: 989:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:984:5: 989:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:984:46: 984:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} std::num::Saturating<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:984:21: 984:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impls.rs:984:40: 984:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impls.rs:984:28: 984:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:984:28: 984:38 (#0),
                    },
                ),
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:984:28: 984:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:988:9: 988:37 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:988:9: 988:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:988:9: 988:37 (#0),
                },
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:988:26: 988:36 (#0),
            scope: scope[0],
        },
    },
]