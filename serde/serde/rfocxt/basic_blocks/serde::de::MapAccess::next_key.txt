[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut (*_1),
            StorageLive(_3),
            _3 = std::marker::PhantomData::<K>,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1856:9: 1856:40 (#0),
                    scope: scope[0],
                },
                kind: _0 = <Self as de::MapAccess<'_>>::next_key_seed::<std::marker::PhantomData<K>>(move _2, move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1857:6: 1857:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1852:5: 1857:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<K/#2>, Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1852:34: 1852:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1852:20: 1852:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1856:9: 1856:40 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1856:9: 1856:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1856:9: 1856:40 (#0),
                },
            ),
        ),
        ty: std::marker::PhantomData<K/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1856:28: 1856:39 (#0),
            scope: scope[0],
        },
    },
]