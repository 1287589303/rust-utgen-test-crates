[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1837:20: 1837:45 (#0),
                    scope: scope[0],
                },
                kind: _5 = <Self as de::MapAccess<'_>>::next_key_seed::<K>(move _6, move _7) -> [return: bb1, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            PlaceMention(_5),
            _8 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3308),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1837:20: 1837:45 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3308),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_5 as Err).0: <Self as de::MapAccess<'_>>::Error),
            StorageLive(_12),
            _12 = move _10,
            _0 = std::result::Result::<std::option::Option<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>, <Self as de::MapAccess<'_>>::Error>::Err(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3308),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb7, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Ok).0: std::option::Option<<K as de::DeserializeSeed<'_>>::Value>),
            _4 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3308),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb6, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_4),
            _13 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 300:10 (#3308),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3308),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb34, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 300:10 (#3308),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1838:13: 1838:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = std::option::Option::<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>::None,
            _0 = std::result::Result::<std::option::Option<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>, <Self as de::MapAccess<'_>>::Error>::Ok(move _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1842:28: 1842:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_28) -> [return: bb26, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_4 as Some).0: <K as de::DeserializeSeed<'_>>::Value),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut (*_1),
            StorageLive(_18),
            _18 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:34: 1839:61 (#0),
                    scope: scope[3],
                },
                kind: _16 = <Self as de::MapAccess<'_>>::next_value_seed::<V>(move _17, move _18) -> [return: bb12, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3309),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:34: 1839:61 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3309),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_16 as Err).0: <Self as de::MapAccess<'_>>::Error),
            StorageLive(_23),
            _23 = move _21,
            _0 = std::result::Result::<std::option::Option<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>, <Self as de::MapAccess<'_>>::Error>::Err(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3309),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb18, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_16 as Ok).0: <V as de::DeserializeSeed<'_>>::Value),
            _15 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3309),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb17, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            FakeRead(ForLet(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:62: 1839:63 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb19, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3309),
                    scope: scope[3],
                },
                kind: drop(_21) -> [return: bb31, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = move _14,
            StorageLive(_27),
            _27 = move _15,
            _25 = (move _26, move _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:36: 1840:37 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb20, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:36: 1840:37 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb21, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _24 = std::option::Option::<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>::Some(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:37: 1840:38 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb22, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _0 = std::result::Result::<std::option::Option<(<K as de::DeserializeSeed<'_>>::Value, <V as de::DeserializeSeed<'_>>::Value)>, <Self as de::MapAccess<'_>>::Error>::Ok(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:38: 1840:39 (#0),
                    scope: scope[4],
                },
                kind: drop(_24) -> [return: bb23, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb24, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb25, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1842:28: 1842:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb28, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb29, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb30, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb38, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:62: 1839:63 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb32, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb33, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb35, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb36, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb37, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb38, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:6: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:38: 1840:39 (#0),
                    scope: scope[4],
                },
                kind: drop(_24) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:36: 1840:37 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1840:37: 1840:38 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3309),
                    scope: scope[3],
                },
                kind: drop(_21) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:62: 1839:63 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1839:60: 1839:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1841:13: 1841:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3308),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1837:44: 1837:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1844:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:1828:5: 1844:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<(Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }))>, Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1832:10: 1832:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1829:9: 1829:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/mod.rs:1830:16: 1830:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/mod.rs:1830:9: 1830:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/mod.rs:1830:9: 1830:14 (#0),
                    },
                ),
            ),
        ),
        ty: K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1830:9: 1830:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/mod.rs:1831:16: 1831:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/mod.rs:1831:9: 1831:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/mod.rs:1831:9: 1831:14 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1831:9: 1831:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1837:9: 1843:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1837:9: 1843:10 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1837:20: 1837:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1837:9: 1843:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1837:20: 1837:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1837:9: 1843:10 (#0),
                },
            ),
        ),
        ty: K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1837:39: 1837:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                serde/src/de/mod.rs:1837:20: 1837:45 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3308),
                    },
                ),
            ),
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                serde/src/de/mod.rs:1837:20: 1837:45 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3308),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1837:9: 1843:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1838:13: 1838:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde/src/lib.rs:297:9: 300:10 (#3308),
                            ),
                        ),
                        pat_span: serde/src/de/mod.rs:1838:13: 1838:22 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    K/#2,
                    '{erased},
                ],
                def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1838:18: 1838:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3309),
                            ),
                        ),
                        pat_span: serde/src/de/mod.rs:1839:21: 1839:26 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1839:21: 1839:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1839:34: 1839:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1839:34: 1839:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1839:55: 1839:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/de/mod.rs:1839:34: 1839:61 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3309),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3309),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/de/mod.rs:1839:34: 1839:61 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3309),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3309),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                    '{erased},
                ],
                def_id: DefId(0:1613 ~ serde[cd55]::de::MapAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3309),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<(Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1840:20: 1840:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1840:25: 1840:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1840:17: 1840:39 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    K/#2,
                    '{erased},
                ],
                def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1840:26: 1840:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:1840:17: 1840:39 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1840:31: 1840:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<(Alias(Projection, AliasTy { args: [K/#2, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:1842:24: 1842:28 (#0),
            scope: scope[0],
        },
    },
]