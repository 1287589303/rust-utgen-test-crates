[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = __private::ser::content::Content::None,
            _0 = std::result::Result::<__private::ser::content::Content, E>::Ok(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:629:29: 629:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:630:10: 630:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:628:9: 630:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<__private::ser::content::Content, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:628:36: 628:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::content::ContentSerializer<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:628:27: 628:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:629:16: 629:29 (#0),
            scope: scope[0],
        },
    },
]