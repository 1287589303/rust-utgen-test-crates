[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
            StorageLive(_4),
            _4 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:440:17: 440:45 (#3599),
                    scope: scope[0],
                },
                kind: _0 = <S as ser::Serializer>::collect_map::<&K, &V, &std::collections::HashMap<K, V, H>>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:441:13: 441:14 (#3599),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:441:14: 441:14 (#3599),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:440:44: 440:45 (#3599),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:441:13: 441:14 (#3599),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:436:13: 441:14 (#3599),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#3], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#3], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:436:54: 436:77 (#3599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} std::collections::HashMap<K/#0, V/#1, H/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:436:29: 436:34 (#3599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impls.rs:436:48: 436:49 (#3599),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impls.rs:436:36: 436:46 (#3599),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:436:36: 436:46 (#3599),
                    },
                ),
            ),
        ),
        ty: S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:436:36: 436:46 (#3599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:440:17: 440:45 (#3599),
                },
            ),
        ),
        ty: S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:440:17: 440:27 (#3599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:440:17: 440:45 (#3599),
                },
            ),
        ),
        ty: &'{erased} std::collections::HashMap<K/#0, V/#1, H/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:440:40: 440:44 (#3599),
            scope: scope[0],
        },
    },
]