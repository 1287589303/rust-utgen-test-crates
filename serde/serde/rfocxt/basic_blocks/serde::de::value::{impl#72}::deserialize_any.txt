[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _1,
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1494:9: 1494:38 (#0),
                    scope: scope[0],
                },
                kind: _0 = <de::value::PairDeserializer<A, B, E> as de::Deserializer<'_>>::deserialize_seq::<V>(move _3, move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1495:5: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1495:5: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1495:6: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1494:37: 1494:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1494:37: 1494:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1495:5: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1495:5: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1490:5: 1495:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#4, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1490:48: 1490:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::value::PairDeserializer<A/#1, B/#2, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1490:27: 1490:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1490:42: 1490:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1490:33: 1490:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1490:33: 1490:40 (#0),
                    },
                ),
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1490:33: 1490:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1494:9: 1494:38 (#0),
                },
            ),
        ),
        ty: de::value::PairDeserializer<A/#1, B/#2, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1494:9: 1494:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1494:9: 1494:38 (#0),
                },
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1494:30: 1494:37 (#0),
            scope: scope[0],
        },
    },
]