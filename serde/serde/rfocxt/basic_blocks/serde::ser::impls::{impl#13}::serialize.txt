[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:325:9: 325:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:325:15: 325:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:326:13: 326:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:327:13: 327:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(((*_1) as Excluded).0: T),
            StorageLive(_9),
            _9 = move _2,
            StorageLive(_10),
            _10 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:331:17: 331:84 (#0),
                    scope: scope[2],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<T>(move _9, const "Bound", const 2_u32, const "Excluded", move _10) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:326:33: 326:91 (#0),
                    scope: scope[0],
                },
                kind: _0 = <S as ser::Serializer>::serialize_unit_variant(move _4, const "Bound", const 0_u32, const "Unbounded") -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:326:90: 326:91 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_1) as Included).0: T),
            StorageLive(_6),
            _6 = move _2,
            StorageLive(_7),
            _7 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:328:17: 328:84 (#0),
                    scope: scope[1],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<T>(move _6, const "Bound", const 1_u32, const "Included", move _7) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:329:13: 329:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:332:13: 332:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:334:5: 334:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:334:6: 334:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:331:83: 331:84 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:328:83: 328:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:326:90: 326:91 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:334:5: 334:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:321:5: 334:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:321:46: 321:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} std::collections::Bound<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:321:21: 321:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impls.rs:321:40: 321:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impls.rs:321:28: 321:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:321:28: 321:38 (#0),
                    },
                ),
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:321:28: 321:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:326:13: 326:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:325:9: 333:10 (#0),
                },
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:326:33: 326:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:325:15: 325:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:327:13: 327:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:327:29: 327:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:328:17: 328:84 (#0),
                },
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:328:17: 328:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:328:17: 328:84 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:328:78: 328:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/ser/impls.rs:325:15: 325:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:330:13: 330:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:330:29: 330:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:331:17: 331:84 (#0),
                },
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:331:17: 331:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:331:17: 331:84 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:331:78: 331:83 (#0),
            scope: scope[0],
        },
    },
]