[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_2),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const "MapDeserializer",
            _12 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1463:9: 1464:45 (#0),
                    scope: scope[0],
                },
                kind: _10 = std::fmt::Formatter::<'_>::debug_struct(move _11, move _12) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut _10,
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_14),
            StorageLive(_15),
            _15 = const "iter",
            _14 = &(*_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &((*_1).0: std::iter::Fuse<I>),
            _17 = &(*_18),
            _16 = move _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1463:9: 1465:39 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::fmt::DebugStruct::<'_, '_>::field(move _9, move _14, move _16) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_8),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_9),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "value",
            _19 = &(*_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &((*_1).1: std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>),
            _22 = &(*_23),
            _21 = move _22 as &dyn std::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1463:9: 1466:41 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::fmt::DebugStruct::<'_, '_>::field(move _7, move _19, move _21) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_7),
            StorageLive(_24),
            StorageLive(_25),
            _25 = const "count",
            _24 = &(*_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &((*_1).2: usize),
            _27 = &(*_28),
            _26 = move _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1463:9: 1467:41 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::fmt::DebugStruct::<'_, '_>::field(move _5, move _24, move _26) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::fmt::DebugStruct::<'_, '_>::finish(move _3) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1469:6: 1469:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1462:5: 1469:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1462:54: 1462:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1462:12: 1462:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1462:30: 1462:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1462:19: 1462:28 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1462:19: 1462:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1462:19: 1462:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1467:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1467:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1466:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1466:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1465:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1465:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1464:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1464:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1463:9: 1463:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1464:27: 1464:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1464:27: 1464:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1465:20: 1465:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1465:20: 1465:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1465:28: 1465:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1465:28: 1465:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1465:28: 1465:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1466:20: 1466:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1466:20: 1466:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1466:29: 1466:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1466:29: 1466:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1466:29: 1466:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1467:20: 1467:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1467:20: 1467:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1467:29: 1467:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1467:29: 1467:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1463:9: 1468:22 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1467:29: 1467:40 (#0),
            scope: scope[0],
        },
    },
]