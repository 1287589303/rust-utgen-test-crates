[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: std::iter::Fuse<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1447:19: 1447:36 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::iter::Fuse<I> as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1448:20: 1448:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::option::Option<<<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second> as std::clone::Clone>::clone(move _5) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = ((*_1).2: usize),
            StorageLive(_7),
            _7 = ((*_1).3: std::marker::PhantomData<&()>),
            StorageLive(_8),
            _8 = ((*_1).4: std::marker::PhantomData<E>),
            _0 = de::value::MapDeserializer::<'_, I, E> { iter: move _2, value: move _4, count: move _6, lifetime: move _7, error: move _8 },
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1452:9: 1452:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1452:9: 1452:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1453:6: 1453:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1452:9: 1452:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1445:5: 1453:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1445:24: 1445:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1445:14: 1445:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1447:19: 1447:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1446:9: 1452:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1447:19: 1447:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1448:20: 1448:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1446:9: 1452:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1448:20: 1448:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1449:20: 1449:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<&'{erased} ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1450:23: 1450:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1451:20: 1451:30 (#0),
            scope: scope[0],
        },
    },
]