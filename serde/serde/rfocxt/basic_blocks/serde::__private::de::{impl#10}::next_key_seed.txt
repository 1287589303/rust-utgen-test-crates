[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: std::slice::IterMut<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:22: 2712:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = <std::slice::IterMut<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::iter::Iterator>::by_ref(move _6) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                    scope: scope[0],
                },
                kind: _4 = <&mut std::slice::IterMut<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_7),
            _7 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _7,
            _11 = &mut (*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                    scope: scope[1],
                },
                kind: _10 = <&mut std::slice::IterMut<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::iter::Iterator>::next(move _11) -> [return: bb5, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _13 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_10 as Some).0: &mut std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut (*_15),
            StorageLive(_18),
            _18 = &(*((*_1).2: &[&str])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2713:43: 2713:82 (#0),
                    scope: scope[3],
                },
                kind: _16 = __private::de::flat_map_take_entry(move _17, move _18) -> [return: bb10, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_29),
            _29 = std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::None,
            _0 = std::result::Result::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, E>::Ok(move _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2718:16: 2718:17 (#0),
                    scope: scope[0],
                },
                kind: drop(_29) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2713:20: 2713:40 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [1: bb11, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2713:20: 2713:40 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move (((_16 as Some).0: (__private::de::content::Content<'_>, __private::de::content::Content<'_>)).0: __private::de::content::Content<'_>),
            StorageLive(_21),
            _21 = move (((_16 as Some).0: (__private::de::content::Content<'_>, __private::de::content::Content<'_>)).1: __private::de::content::Content<'_>),
            StorageLive(_23),
            StorageLive(_24),
            _24 = move _21,
            _23 = std::option::Option::<__private::de::content::Content<'_>>::Some(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2714:52: 2714:53 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb13, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2714:17: 2714:37 (#0),
                    scope: scope[3],
                },
                kind: drop(((*_1).1: std::option::Option<__private::de::content::Content<'_>>)) -> [return: bb14, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: std::option::Option<__private::de::content::Content<'_>>) = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2714:52: 2714:53 (#0),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb16, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: std::option::Option<__private::de::content::Content<'_>>) = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2714:17: 2714:37 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_25),
            StorageLive(_26),
            _26 = move _2,
            StorageLive(_27),
            StorageLive(_28),
            _28 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:41: 2715:70 (#0),
                    scope: scope[3],
                },
                kind: _27 = __private::de::content::ContentDeserializer::<'_, E>::new(move _28) -> [return: bb17, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:24: 2715:71 (#0),
                    scope: scope[3],
                },
                kind: _25 = <T as de::DeserializeSeed<'_>>::deserialize::<__private::de::content::ContentDeserializer<'_, E>>(move _26, move _27) -> [return: bb18, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:24: 2715:81 (#0),
                    scope: scope[3],
                },
                kind: _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, fn(<T as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<T as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some}>(move _25, std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2716:13: 2716:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb23, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2717:9: 2717:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2719:5: 2719:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb26, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2716:13: 2716:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb24, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2717:9: 2717:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb25, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2719:5: 2719:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb26, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2719:6: 2719:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:80: 2715:81 (#0),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:70: 2715:71 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:69: 2715:70 (#0),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2715:70: 2715:71 (#0),
                    scope: scope[3],
                },
                kind: drop(_26) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2714:52: 2714:53 (#0),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2716:13: 2716:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2716:13: 2716:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2717:9: 2717:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2719:5: 2719:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2708:5: 2719:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2708:48: 2708:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut __private::de::FlatStructAccess<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2708:25: 2708:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2708:42: 2708:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2708:36: 2708:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2708:36: 2708:40 (#0),
                    },
                ),
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2708:36: 2708:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2708:5: 2719:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:22: 2712:40 (#4039),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:9: 2717:10 (#4038),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                serde/src/private/de.rs:2712:22: 2712:40 (#4039),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2712:13: 2712:18 (#4040),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2712:13: 2712:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2713:13: 2716:14 (#0),
                },
            ),
        ),
        ty: std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:43: 2713:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2713:13: 2716:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:63: 2713:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2713:13: 2716:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:70: 2713:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:20: 2713:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/de.rs:2713:43: 2713:82 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2713:20: 2713:40 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:26: 2713:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/de.rs:2713:43: 2713:82 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2713:20: 2713:40 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:31: 2713:38 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2713:13: 2716:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2713:83: 2716:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<__private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2714:40: 2714:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2714:45: 2714:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2715:24: 2715:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2715:24: 2715:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::de::content::ContentDeserializer<'{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2715:41: 2715:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2715:66: 2715:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2718:12: 2718:16 (#0),
            scope: scope[0],
        },
    },
]