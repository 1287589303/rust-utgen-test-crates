[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            StorageLive(_3),
            _3 = std::marker::PhantomData::<T>,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2127:9: 2127:47 (#0),
                    scope: scope[0],
                },
                kind: _0 = <Self as de::VariantAccess<'_>>::newtype_variant_seed::<std::marker::PhantomData<T>>(move _2, move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2128:5: 2128:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2128:6: 2128:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2127:46: 2127:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2128:5: 2128:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/mod.rs:2123:5: 2128:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<T/#2, Alias(Projection, AliasTy { args: [Self/#0, '{erased}], def_id: DefId(0:1658 ~ serde[cd55]::de::VariantAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:2123:36: 2123:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:2123:27: 2123:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:2127:9: 2127:47 (#0),
                },
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:2127:9: 2127:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/mod.rs:2127:9: 2127:47 (#0),
                },
            ),
        ),
        ty: std::marker::PhantomData<T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/mod.rs:2127:35: 2127:46 (#0),
            scope: scope[0],
        },
    },
]