[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*((*_1).0: &mut M)),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1205:9: 1205:38 (#0),
                    scope: scope[0],
                },
                kind: _0 = <M as ser::SerializeMap>::serialize_value::<T>(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1206:6: 1206:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1201:5: 1206:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [M/#1], def_id: DefId(0:2050 ~ serde[cd55]::ser::SerializeMap::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1201:52: 1201:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut __private::ser::FlatMapSerializeMap<'{erased}, M/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1201:27: 1201:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:1201:45: 1201:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:1201:38: 1201:43 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:1201:38: 1201:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1201:38: 1201:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1205:9: 1205:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut M/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1205:9: 1205:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:1205:9: 1205:38 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1205:32: 1205:37 (#0),
            scope: scope[0],
        },
    },
]