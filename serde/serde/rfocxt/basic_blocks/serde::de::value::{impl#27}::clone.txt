[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:645:20: 645:38 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::string::String as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = std::marker::PhantomData::<E>,
            _0 = de::value::StringDeserializer::<E> { value: move _2, marker: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:647:9: 647:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:648:6: 648:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:643:5: 648:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::value::StringDeserializer<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:643:24: 643:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} de::value::StringDeserializer<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:643:14: 643:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:645:20: 645:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:644:9: 647:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:645:20: 645:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:646:21: 646:32 (#0),
            scope: scope[0],
        },
    },
]