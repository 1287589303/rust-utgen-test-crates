[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1015:19: 1015:30 (#0),
                    scope: scope[0],
                },
                kind: _2 = <I as std::iter::Iterator>::fuse(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = std::marker::PhantomData::<E>,
            _0 = de::value::SeqDeserializer::<I, E> { iter: move _2, count: const 0_usize, marker: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1018:9: 1018:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1019:5: 1019:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1019:6: 1019:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1015:29: 1015:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1019:5: 1019:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1013:5: 1019:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::value::SeqDeserializer<I/#0, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1013:28: 1013:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:1013:22: 1013:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:1013:16: 1013:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1013:16: 1013:20 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1013:16: 1013:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::iter::Fuse<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1015:19: 1015:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1014:9: 1018:10 (#0),
                },
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1015:19: 1015:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1017:21: 1017:32 (#0),
            scope: scope[0],
        },
    },
]