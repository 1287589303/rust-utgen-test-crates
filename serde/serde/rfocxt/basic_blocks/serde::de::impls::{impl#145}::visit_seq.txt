[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = std::option::Option::<usize>::None,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*(_1.0: &mut [T; 19])),
            StorageLive(_11),
            _11 = std::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:46: 1311:50 (#2255),
                    scope: scope[1],
                },
                kind: _9 = <[T; 19] as std::ops::IndexMut<std::ops::RangeFull>>::index_mut(move _10, move _11) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:61 (#2255),
                    scope: scope[1],
                },
                kind: _7 = core::slice::<impl [T]>::iter_mut(move _8) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:73 (#2255),
                    scope: scope[1],
                },
                kind: _6 = <std::slice::IterMut<'_, T> as std::iter::Iterator>::enumerate(move _7) -> [return: bb3, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                    scope: scope[1],
                },
                kind: _5 = <std::iter::Enumerate<std::slice::IterMut<'_, T>> as std::iter::IntoIterator>::into_iter(move _6) -> [return: bb4, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_12),
            _12 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _12,
            _16 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                    scope: scope[2],
                },
                kind: _15 = <std::iter::Enumerate<std::slice::IterMut<'_, T>> as std::iter::Iterator>::next(move _16) -> [return: bb7, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _18 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                    scope: scope[2],
                },
                kind: switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = (((_15 as Some).0: (usize, &mut T)).0: usize),
            StorageLive(_21),
            _21 = move (((_15 as Some).0: (usize, &mut T)).1: &mut T),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _2,
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut (*_21),
            _27 = seed::InPlaceSeed::<'_, T>(move _28),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:33: 1312:73 (#2255),
                    scope: scope[3],
                },
                kind: _25 = <A as de::SeqAccess<'_>>::next_element_seed::<seed::InPlaceSeed<'_, T>>(move _26, move _27) -> [return: bb12, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            PlaceMention(_25),
            _29 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#2502),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:33: 1312:73 (#2255),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#2502),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_25 as Err).0: <A as de::SeqAccess<'_>>::Error),
            StorageLive(_33),
            _33 = move _31,
            _0 = std::result::Result::<(), <A as de::SeqAccess<'_>>::Error>::Err(move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#2502),
                    scope: scope[5],
                },
                kind: drop(_33) -> [return: bb17, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = ((_25 as Ok).0: std::option::Option<()>),
            _24 = _30,
            StorageDead(_30),
            _23 = &_24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:28: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: _22 = std::option::Option::<()>::is_none(move _23) -> [return: bb18, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#2502),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb29, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:28: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: switchInt(move _22) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:83: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb20, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _20,
            _35 = std::option::Option::<usize>::Some(move _36),
            StorageDead(_36),
            _3 = move _35,
            StorageDead(_35),
            _4 = const (),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:83: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            _14 = const (),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_37),
            PlaceMention(_3),
            _38 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1317:28: 1317:37 (#2255),
                    scope: scope[6],
                },
                kind: switchInt(move _38) -> [1: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = const (),
            StorageDead(_37),
            StorageLive(_46),
            _46 = (),
            _0 = std::result::Result::<(), <A as de::SeqAccess<'_>>::Error>::Ok(move _46),
            StorageDead(_46),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1321:17: 1321:18 (#2255),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb32, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1317:28: 1317:37 (#2255),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = ((_3 as Some).0: usize),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _39,
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &_1,
            _44 = &(*_45),
            _43 = move _44 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1318:36: 1318:69 (#2255),
                    scope: scope[6],
                },
                kind: _41 = <<A as de::SeqAccess<'_>>::Error as de::Error>::invalid_length(move _42, move _43) -> [return: bb27, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _0 = std::result::Result::<(), <A as de::SeqAccess<'_>>::Error>::Err(move _41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1318:69: 1318:70 (#2255),
                    scope: scope[6],
                },
                kind: drop(_41) -> [return: bb28, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_45),
            StorageDead(_39),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:83: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb30, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1321:17: 1321:18 (#2255),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb32, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1321:18: 1321:18 (#2255),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#2502),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1312:83: 1312:84 (#2255),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1321:17: 1321:18 (#2255),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1306:17: 1321:18 (#2255),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [A/#3, '{erased}], def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1306:54: 1306:83 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::impls::ArrayInPlaceVisitor<'{erased}, [T/#2; 19_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1306:33: 1306:37 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:1306:48: 1306:49 (#2255),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1306:39: 1306:46 (#2255),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1306:39: 1306:46 (#2255),
                    },
                ),
            ),
        ),
        ty: A/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1306:39: 1306:46 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1310:40: 1310:44 (#2255),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1310:25: 1310:37 (#2255),
                    },
                ),
            ),
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1310:25: 1310:37 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::IterMut<'{erased}, T/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::IterMut<'{erased}, T/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::IterMut<'{erased}, T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:61 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [T/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:50 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [T/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:46: 1311:50 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [T/#2; 19_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:46 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:47: 1311:49 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::slice::IterMut<'{erased}, T/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1306:17: 1321:18 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, &'{erased} mut T/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::IterMut<'{erased}, T/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::IterMut<'{erased}, T/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:21: 1316:22 (#4358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1311:25: 1311:36 (#4360),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:26: 1311:29 (#2255),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                serde/src/de/impls.rs:1311:40: 1311:73 (#4359),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1311:25: 1311:36 (#4360),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1311:31: 1311:35 (#2255),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:28: 1312:84 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#2502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: std::option::Option<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#2502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: std::result::Result<std::option::Option<()>, Alias(Projection, AliasTy { args: [A/#3, '{erased}], def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:33: 1312:73 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: &'{erased} mut A/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:33: 1312:36 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: seed::InPlaceSeed<'{erased}, T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:55: 1312:72 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:67: 1312:71 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#2502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde/src/de/impls.rs:1312:33: 1312:73 (#2255),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#2502),
                    },
                ),
            ),
        ),
        ty: std::option::Option<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#2502),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                serde/src/de/impls.rs:1312:33: 1312:73 (#2255),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#2502),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#3,
                    '{erased},
                ],
                def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#2502),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#2502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#3,
                    '{erased},
                ],
                def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#2502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/de/impls.rs:1312:25: 1315:26 (#2255),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1312:85: 1315:26 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1313:40: 1313:49 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1313:45: 1313:48 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1317:21: 1319:22 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1317:28: 1317:37 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/impls.rs:1317:40: 1317:48 (#2255),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1317:28: 1317:37 (#2255),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1317:33: 1317:36 (#2255),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1317:49: 1319:22 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    A/#3,
                    '{erased},
                ],
                def_id: DefId(0:1596 ~ serde[cd55]::de::SeqAccess::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1318:36: 1318:69 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1318:58: 1318:61 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1318:63: 1318:68 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} de::impls::ArrayInPlaceVisitor<'{erased}, [T/#2; 19_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1318:63: 1318:68 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} de::impls::ArrayInPlaceVisitor<'{erased}, [T/#2; 19_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1318:63: 1318:68 (#2255),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1320:24: 1320:26 (#2255),
            scope: scope[0],
        },
    },
]