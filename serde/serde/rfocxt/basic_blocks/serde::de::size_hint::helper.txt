[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant((_1.1: std::option::Option<usize>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:26:5: 26:17 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [1: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::option::Option::<usize>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:28:14: 28:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:27:9: 27:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(_1.0: usize),
            StorageLive(_7),
            _7 = &(((_1.1: std::option::Option<usize>) as Some).0: usize),
            _2 = &fake shallow (_1.1: std::option::Option<usize>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = (*_5),
            StorageLive(_10),
            _10 = (*_7),
            _8 = Eq(move _9, move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:27:33: 27:47 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForMatchGuard, _2),
            FakeRead(ForGuardBinding, _5),
            FakeRead(ForGuardBinding, _7),
            StorageLive(_4),
            _4 = (_1.0: usize),
            StorageLive(_6),
            _6 = (((_1.1: std::option::Option<usize>) as Some).0: usize),
            StorageLive(_11),
            _11 = _6,
            _0 = std::option::Option::<usize>::Some(move _11),
            StorageDead(_11),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:27:61: 27:62 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:27:33: 27:47 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/size_hint.rs:30:2: 30:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:25:46: 25:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/size_hint.rs:25:19: 25:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/size_hint.rs:25:11: 25:17 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/size_hint.rs:25:11: 25:17 (#0),
                    },
                ),
            ),
        ),
        ty: (usize, std::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:25:11: 25:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:26:11: 26:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:17: 27:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                serde/src/de/size_hint.rs:26:11: 26:17 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/size_hint.rs:27:9: 27:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:10: 27:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:10: 27:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                serde/src/de/size_hint.rs:26:11: 26:17 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/size_hint.rs:27:9: 27:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:22: 27:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:22: 27:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/size_hint.rs:26:5: 29:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:33: 27:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/size_hint.rs:26:5: 29:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:33: 27:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/size_hint.rs:26:5: 29:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:42: 27:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/size_hint.rs:27:56: 27:61 (#0),
            scope: scope[0],
        },
    },
]