[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1726:19: 1726:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [(__private::de::content::Content<'_>, __private::de::content::Content<'_>)]>::iter(move _5) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1726:19: 1726:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)> as std::iter::Iterator>::map::<(&__private::de::content::Content<'_>, &__private::de::content::Content<'_>), for<'a, 'de> fn(&'a (__private::de::content::Content<'de>, __private::de::content::Content<'de>)) -> (&'a __private::de::content::Content<'de>, &'a __private::de::content::Content<'de>) {__private::de::content::visit_content_map_ref::content_ref_deserializer_pair}>(move _4, __private::de::content::visit_content_map_ref::content_ref_deserializer_pair) -> [return: bb2, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1727:31: 1727:56 (#0),
                    scope: scope[1],
                },
                kind: _6 = de::value::MapDeserializer::<'_, std::iter::Map<std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)>, for<'a, 'de> fn(&'a (__private::de::content::Content<'de>, __private::de::content::Content<'de>)) -> (&'a __private::de::content::Content<'de>, &'a __private::de::content::Content<'de>) {__private::de::content::visit_content_map_ref::content_ref_deserializer_pair}>, E>::new(move _7) -> [return: bb3, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _2,
            StorageLive(_11),
            _11 = &mut _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:26: 1728:61 (#0),
                    scope: scope[2],
                },
                kind: _9 = <V as de::Visitor<'_>>::visit_map::<&mut de::value::MapDeserializer<'_, std::iter::Map<std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)>, for<'a, 'de> fn(&'a (__private::de::content::Content<'de>, __private::de::content::Content<'de>)) -> (&'a __private::de::content::Content<'de>, &'a __private::de::content::Content<'de>) {__private::de::content::visit_content_map_ref::content_ref_deserializer_pair}>, E>>(move _10, move _11) -> [return: bb4, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3724),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:26: 1728:61 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3724),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_9 as Err).0: E),
            StorageLive(_16),
            _16 = move _14,
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Err(move _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3724),
                    scope: scope[5],
                },
                kind: drop(_16) -> [return: bb10, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_9 as Ok).0: <V as de::Visitor<'_>>::Value),
            _8 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3724),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb9, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:62: 1728:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb11, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3724),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb23, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1729:14: 1729:31 (#0),
                    scope: scope[3],
                },
                kind: _18 = de::value::MapDeserializer::<'_, std::iter::Map<std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)>, for<'a, 'de> fn(&'a (__private::de::content::Content<'de>, __private::de::content::Content<'de>)) -> (&'a __private::de::content::Content<'de>, &'a __private::de::content::Content<'de>) {__private::de::content::visit_content_map_ref::content_ref_deserializer_pair}>, E>::end(move _19) -> [return: bb12, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _20 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3725),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1729:14: 1729:31 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3725),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_18 as Err).0: E),
            StorageLive(_24),
            _24 = move _22,
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Err(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3725),
                    scope: scope[7],
                },
                kind: drop(_24) -> [return: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_18 as Ok).0: ()),
            _17 = _21,
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3725),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb18, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3725),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb21, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_25),
            _25 = move _8,
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Ok(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1730:17: 1730:18 (#0),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb19, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb20, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3725),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:62: 1728:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:6: 1731:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3725),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3725),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3724),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:62: 1728:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1728:60: 1728:61 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1731:5: 1731:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1712:5: 1731:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1715:10: 1715:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:1713:18: 1713:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1713:9: 1713:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1713:9: 1713:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1713:9: 1713:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:1714:18: 1714:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1714:9: 1714:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1714:9: 1714:16 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1714:9: 1714:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1726:19: 1726:68 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1726:13: 1726:16 (#0),
                    },
                ),
            ),
        ),
        ty: std::iter::Map<std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, FnDef(DefId(0:2575 ~ serde[cd55]::__private::de::content::visit_content_map_ref::content_ref_deserializer_pair), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1726:13: 1726:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1726:19: 1726:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1726:19: 1726:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1727:31: 1727:56 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1727:13: 1727:28 (#0),
                    },
                ),
            ),
        ),
        ty: de::value::MapDeserializer<'{erased}, std::iter::Map<std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, FnDef(DefId(0:2575 ~ serde[cd55]::__private::de::content::visit_content_map_ref::content_ref_deserializer_pair), [])>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1727:13: 1727:28 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, FnDef(DefId(0:2575 ~ serde[cd55]::__private::de::content::visit_content_map_ref::content_ref_deserializer_pair), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1727:52: 1727:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3724),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1728:13: 1728:18 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1728:13: 1728:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1728:26: 1728:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1728:26: 1728:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::value::MapDeserializer<'{erased}, std::iter::Map<std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, FnDef(DefId(0:2575 ~ serde[cd55]::__private::de::content::visit_content_map_ref::content_ref_deserializer_pair), [])>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1728:44: 1728:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3724),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde/src/private/de.rs:1728:26: 1728:61 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3724),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3724),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde/src/private/de.rs:1728:26: 1728:61 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3724),
                    },
                ),
            ),
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3724),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3724),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3724),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1729:14: 1729:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::value::MapDeserializer<'{erased}, std::iter::Map<std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, FnDef(DefId(0:2575 ~ serde[cd55]::__private::de::content::visit_content_map_ref::content_ref_deserializer_pair), [])>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1729:14: 1729:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                serde/src/private/de.rs:1729:14: 1729:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3725),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3725),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                serde/src/private/de.rs:1729:14: 1729:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3725),
                    },
                ),
            ),
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3725),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1730:12: 1730:17 (#0),
            scope: scope[0],
        },
    },
]