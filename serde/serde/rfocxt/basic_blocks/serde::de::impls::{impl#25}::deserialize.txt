[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1758:12: 1758:44 (#0),
                    scope: scope[0],
                },
                kind: _2 = <D as de::Deserializer<'_>>::is_human_readable(move _3) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1758:12: 1758:44 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb5, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1759:42: 1759:79 (#0),
                    scope: scope[0],
                },
                kind: _5 = de::impls::FromStrVisitor::<std::net::SocketAddr>::new(const "socket address") -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1759:13: 1759:80 (#0),
                    scope: scope[0],
                },
                kind: _0 = <D as de::Deserializer<'_>>::deserialize_str::<de::impls::FromStrVisitor<std::net::SocketAddr>>(move _4, move _5) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1758:9: 1767:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_6),
            _6 = move _1,
            StorageLive(_7),
            StorageLive(_8),
            _8 = const {alloc2: &&[&str]},
            _7 = (*_8),
            StorageLive(_9),
            _9 = de::impls::<impl de::Deserialize<'de> for std::net::SocketAddr>::deserialize::EnumVisitor,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1702:9: 1702:81 (#3217),
                    scope: scope[0],
                },
                kind: _0 = <D as de::Deserializer<'_>>::deserialize_enum::<de::impls::<impl de::Deserialize<'de> for std::net::SocketAddr>::deserialize::EnumVisitor>(move _6, const "SocketAddr", move _7, move _9) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1758:9: 1767:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1768:5: 1768:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1768:6: 1768:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1702:80: 1702:81 (#3217),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1759:79: 1759:80 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1768:5: 1768:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1754:5: 1768:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::net::SocketAddr, Alias(Projection, AliasTy { args: [D/#1, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1754:43: 1754:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:1754:37: 1754:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1754:23: 1754:35 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1754:23: 1754:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1754:23: 1754:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1758:9: 1767:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1758:12: 1758:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1758:9: 1767:10 (#0),
                },
            ),
        ),
        ty: &'{erased} D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1758:12: 1758:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1759:13: 1759:80 (#0),
                },
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1759:13: 1759:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1759:13: 1759:80 (#0),
                },
            ),
        ),
        ty: de::impls::FromStrVisitor<std::net::SocketAddr>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1759:42: 1759:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1702:9: 1702:81 (#3217),
                },
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1765:17: 1765:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1702:9: 1702:81 (#3217),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1702:59: 1702:67 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:8984 ~ serde[cd55]::de::impls::{impl#25}::deserialize::VARIANTS),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1702:59: 1702:67 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1702:9: 1702:81 (#3217),
                },
            ),
        ),
        ty: de::impls::<impl de::Deserialize<'de> for std::net::SocketAddr>::deserialize::EnumVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1702:69: 1702:80 (#3217),
            scope: scope[0],
        },
    },
]