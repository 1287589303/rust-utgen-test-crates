[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: std::iter::Fuse<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1284:15: 1284:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::iter::Fuse<I> as std::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1284:9: 1284:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1284:15: 1284:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1285:13: 1285:21 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::option::Option::<(<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First, <<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1289:21: 1289:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_2 as Some).0: <I as std::iter::Iterator>::Item),
            _6 = AddWithOverflow(((*_1).2: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1286:17: 1286:32 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> [success: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: usize) = move (_6.0: usize),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1287:22: 1287:46 (#0),
                    scope: scope[1],
                },
                kind: _7 = <<I as std::iter::Iterator>::Item as de::value::private::Pair>::split(move _8) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _0 = std::option::Option::<(<<I as std::iter::Iterator>::Item as de::value::private::Pair>::First, <<I as std::iter::Iterator>::Item as de::value::private::Pair>::Second)>::Some(move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1287:46: 1287:47 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1288:13: 1288:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1288:13: 1288:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1291:5: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1291:6: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1287:45: 1287:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1288:13: 1288:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1291:5: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:1283:5: 1291:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First) }), Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1283:32: 1283:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::value::MapDeserializer<'{erased}, I/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1283:18: 1283:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1284:9: 1290:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1284:15: 1284:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1284:9: 1290:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::iter::Fuse<I/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1284:15: 1284:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1285:13: 1285:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                serde/src/de/value.rs:1284:15: 1284:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:1285:13: 1285:21 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#1,
                ],
                def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1285:18: 1285:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1286:17: 1286:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:714 ~ serde[cd55]::de::value::private::Pair::First) }), Alias(Projection, AliasTy { args: [Alias(Projection, AliasTy { args: [I/#1], def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })], def_id: DefId(0:715 ~ serde[cd55]::de::value::private::Pair::Second) })),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1287:22: 1287:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:1287:17: 1287:47 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#1,
                ],
                def_id: DefId(2:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:1287:43: 1287:45 (#0),
            scope: scope[0],
        },
    },
]