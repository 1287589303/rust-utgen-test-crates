[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1862:9: 1862:29 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::string::String::from_utf8(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1862:9: 1863:29 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::result::Result::<std::string::String, std::string::FromUtf8Error>::map::<std::path::PathBuf, fn(std::string::String) -> std::path::PathBuf {<std::path::PathBuf as std::convert::From<std::string::String>>::from}>(move _4, <std::path::PathBuf as std::convert::From<std::string::String>>::from) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            _6 = {closure@serde/src/de/impls.rs:1864:22: 1864:25} { self: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::result::Result::<std::path::PathBuf, std::string::FromUtf8Error>::map_err::<E, {closure@serde/src/de/impls.rs:1864:22: 1864:25}>(move _3, move _6) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1865:5: 1865:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1865:6: 1865:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1864:89: 1864:90 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1863:28: 1863:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1862:28: 1862:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1865:5: 1865:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1858:5: 1865:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::path::PathBuf, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1858:47: 1858:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::impls::PathBufVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1858:26: 1858:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:1858:35: 1858:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1858:32: 1858:33 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1858:32: 1858:33 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1858:32: 1858:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::path::PathBuf, std::string::FromUtf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1862:9: 1863:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::string::String, std::string::FromUtf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1862:9: 1862:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1862:27: 1862:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1073 ~ serde[cd55]::de::impls::{impl#28}::visit_byte_buf::{closure#0}),
            [
                '{erased},
                E/#1,
                i32,
                Binder { value: extern "RustCall" fn((std::string::FromUtf8Error,)) -> E/#1, bound_vars: [] },
                (&'{erased} de::impls::PathBufVisitor,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1864:22: 1864:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1862:9: 1864:90 (#0),
                },
            ),
        ),
        ty: &'{erased} de::impls::PathBufVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1864:22: 1864:89 (#0),
            scope: scope[0],
        },
    },
]