[
    BasicBlockData {
        statements: [
            StorageLive(_7),
            PlaceMention((*(_1.0: &__private::de::content::Content<'_>))),
            _8 = discriminant((*(_1.0: &__private::de::content::Content<'_>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2035:36: 2035:55 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [12: bb3, 13: bb4, 21: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = &(*(_1.0: &__private::de::content::Content<'_>)),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &(*_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2059:25: 2059:43 (#0),
                    scope: scope[7],
                },
                kind: _49 = __private::de::content::Content::<'_>::unexpected(move _50) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2036:17: 2036:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2056:17: 2056:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2056:46: 2056:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(((*(_1.0: &__private::de::content::Content<'_>)) as Map).0: std::vec::Vec<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2037:36: 2037:48 (#0),
                    scope: scope[2],
                },
                kind: _12 = <std::vec::Vec<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)> as std::ops::Deref>::deref(move _13) -> [return: bb6, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2037:36: 2037:48 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::slice::<impl [(__private::de::content::Content<'_>, __private::de::content::Content<'_>)]>::iter(move _11) -> [return: bb7, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2038:50: 2038:61 (#0),
                    scope: scope[3],
                },
                kind: _17 = <std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)> as std::iter::Iterator>::next(move _18) -> [return: bb8, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _19 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2038:44: 2038:61 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2038:50: 2038:61 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2039:25: 2039:32 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            _23 = de::Unexpected::<'_>::Map,
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = const "map with a single key",
            _26 = &_27,
            _25 = &(*_26),
            _24 = move _25 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2041:40: 2044:30 (#0),
                    scope: scope[3],
                },
                kind: _22 = <E as de::Error>::invalid_value(move _23, move _24) -> [return: bb13, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_17 as Some).0: &(__private::de::content::Content<'_>, __private::de::content::Content<'_>)),
            _16 = _20,
            StorageDead(_20),
            PlaceMention(_16),
            StorageLive(_14),
            _14 = &((*_16).0: __private::de::content::Content<'_>),
            StorageLive(_15),
            _15 = &((*_16).1: __private::de::content::Content<'_>),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2048:24: 2048:35 (#0),
                    scope: scope[4],
                },
                kind: _31 = <std::slice::Iter<'_, (__private::de::content::Content<'_>, __private::de::content::Content<'_>)> as std::iter::Iterator>::next(move _32) -> [return: bb15, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Err(move _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2044:30: 2044:31 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb14, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &_31,
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2048:24: 2048:45 (#0),
                    scope: scope[4],
                },
                kind: _29 = std::option::Option::<&(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>::is_some(move _30) -> [return: bb16, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2048:24: 2048:45 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _29) -> [0: bb20, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_34),
            StorageLive(_35),
            _35 = de::Unexpected::<'_>::Map,
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = const "map with a single key",
            _38 = &_39,
            _37 = &(*_38),
            _36 = move _37 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2049:36: 2052:26 (#0),
                    scope: scope[4],
                },
                kind: _34 = <E as de::Error>::invalid_value(move _35, move _36) -> [return: bb18, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Err(move _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2052:26: 2052:27 (#0),
                    scope: scope[4],
                },
                kind: drop(_34) -> [return: bb19, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _28 = const (),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_40),
            _40 = _14,
            StorageLive(_41),
            StorageLive(_42),
            _42 = _15,
            _41 = std::option::Option::<&__private::de::content::Content<'_>>::Some(move _42),
            StorageDead(_42),
            _7 = (move _40, move _41),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2055:17: 2055:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = _43,
            StorageLive(_45),
            _45 = std::option::Option::<&__private::de::content::Content<'_>>::None,
            _7 = (move _44, move _45),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2056:81: 2056:82 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = &(*(_1.0: &__private::de::content::Content<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2035:36: 2063:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = &(*(_1.0: &__private::de::content::Content<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2035:36: 2063:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = const "string or map",
            _53 = &_54,
            _52 = &(*_53),
            _51 = move _52 as &dyn de::Expected (PointerCoercion(Unsize)),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2058:32: 2061:22 (#0),
                    scope: scope[7],
                },
                kind: _48 = <E as de::Error>::invalid_type(move _49, move _51) -> [return: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_49),
            _0 = std::result::Result::<<V as de::Visitor<'_>>::Value, E>::Err(move _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2061:22: 2061:23 (#0),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb26, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_7),
            StorageLive(_5),
            _5 = (_7.0: &__private::de::content::Content<'_>),
            StorageLive(_6),
            _6 = (_7.1: std::option::Option<&__private::de::content::Content<'_>>),
            StorageDead(_7),
            StorageLive(_55),
            _55 = move _4,
            StorageLive(_56),
            StorageLive(_57),
            _57 = &(*_5),
            StorageLive(_58),
            _58 = _6,
            StorageLive(_59),
            _59 = std::marker::PhantomData::<E>,
            _56 = __private::de::content::EnumRefDeserializer::<'_, '_, E> { variant: move _57, value: move _58, err: move _59 },
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2065:13: 2069:15 (#0),
                    scope: scope[1],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_enum::<__private::de::content::EnumRefDeserializer<'_, '_, E>>(move _55, move _56) -> [return: bb28, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2070:9: 2070:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb31, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2070:9: 2070:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb31, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2070:10: 2070:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2069:14: 2069:15 (#0),
                    scope: scope[1],
                },
                kind: drop(_55) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2070:9: 2070:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2026:9: 2070:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2031:14: 2031:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::ContentRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2027:13: 2027:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2028:20: 2028:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2028:13: 2028:18 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2028:13: 2028:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2028:13: 2028:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2029:24: 2029:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2029:13: 2029:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2029:13: 2029:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2029:13: 2029:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2030:22: 2030:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2030:13: 2030:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2030:13: 2030:20 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2030:13: 2030:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                serde/src/private/de.rs:2035:36: 2063:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2035:17: 2035:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2035:18: 2035:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                serde/src/private/de.rs:2035:36: 2063:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2035:17: 2035:33 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2035:27: 2035:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} __private::de::content::Content<'{erased}>, std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2035:36: 2063:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2036:17: 2036:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*(_1.0: &__private::de::content::Content<'_>)),
                                ),
                                serde/src/private/de.rs:2035:42: 2035:55 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2036:17: 2036:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2036:30: 2036:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2037:36: 2037:48 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2037:25: 2037:33 (#0),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2037:25: 2037:33 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2037:36: 2037:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2037:36: 2037:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2037:36: 2037:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/de.rs:2038:44: 2046:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2038:25: 2038:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2038:26: 2038:33 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                serde/src/private/de.rs:2038:44: 2046:22 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2038:25: 2038:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2038:35: 2038:40 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2038:44: 2046:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2038:50: 2038:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2038:50: 2038:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2039:25: 2039:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                serde/src/private/de.rs:2038:50: 2038:61 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2039:25: 2039:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2039:30: 2039:31 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2040:33: 2045:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2041:40: 2044:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2042:33: 2042:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2043:33: 2043:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2043:33: 2043:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2043:33: 2043:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2043:34: 2043:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:21: 2053:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:24: 2048:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<&'{erased} (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:24: 2048:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:24: 2048:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:24: 2048:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2048:46: 2053:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2049:36: 2052:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2050:29: 2050:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2051:29: 2051:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2051:29: 2051:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2051:29: 2051:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2051:30: 2051:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2054:21: 2054:43 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2054:22: 2054:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2054:21: 2054:43 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2054:31: 2054:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2054:36: 2054:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*(_1.0: &__private::de::content::Content<'_>)),
                                ),
                                serde/src/private/de.rs:2035:42: 2035:55 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2056:17: 2056:69 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2056:17: 2056:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2056:74: 2056:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2056:77: 2056:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*(_1.0: &__private::de::content::Content<'_>)),
                                ),
                                serde/src/private/de.rs:2035:42: 2035:55 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2057:17: 2057:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2057:17: 2057:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2057:30: 2062:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: E/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2058:32: 2061:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2059:25: 2059:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2059:25: 2059:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2060:25: 2060:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2060:25: 2060:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2060:25: 2060:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2060:26: 2060:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2065:13: 2069:15 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2065:13: 2065:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2065:13: 2069:15 (#0),
                },
            ),
        ),
        ty: __private::de::content::EnumRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2065:32: 2069:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2066:17: 2066:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2067:17: 2067:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2068:22: 2068:33 (#0),
            scope: scope[0],
        },
    },
]