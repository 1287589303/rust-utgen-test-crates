[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).1: usize),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:26: 22:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::str::<impl str>::len(move _7) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _8 = AddWithOverflow(_5, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:12: 22:33 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_8.0: usize),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*((*_1).0: &mut [u8])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:36: 22:52 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _3 = Gt(move _4, move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:12: 22:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_4),
            StorageLive(_11),
            _11 = std::fmt::Error,
            _0 = std::result::Result::<(), std::fmt::Error>::Err(move _11),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_4),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (*((*_1).0: &mut [u8])),
            StorageLive(_16),
            StorageLive(_17),
            _17 = ((*_1).1: usize),
            StorageLive(_18),
            StorageLive(_19),
            _19 = ((*_1).1: usize),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:25:51: 25:58 (#0),
                    scope: scope[0],
                },
                kind: _20 = core::str::<impl str>::len(move _21) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _22 = AddWithOverflow(_19, _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:25:37: 25:58 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, move _20) -> [success: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_22.0: usize),
            StorageDead(_20),
            StorageDead(_19),
            _16 = std::ops::Range::<usize> { start: move _17, end: move _18 },
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:25:23: 25:59 (#0),
                    scope: scope[0],
                },
                kind: _14 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _15, move _16) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &mut (*_14),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:25:76: 25:88 (#0),
                    scope: scope[0],
                },
                kind: _24 = core::str::<impl str>::as_bytes(move _25) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &(*_24),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:25:13: 25:89 (#0),
                    scope: scope[0],
                },
                kind: _12 = core::slice::<impl [u8]>::copy_from_slice(move _13, move _23) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_13),
            StorageDead(_24),
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:26:28: 26:35 (#0),
                    scope: scope[0],
                },
                kind: _26 = core::str::<impl str>::len(move _27) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _28 = AddWithOverflow(((*_1).1: usize), _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:26:13: 26:35 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _26) -> [success: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_28.0: usize),
            StorageDead(_26),
            StorageLive(_29),
            _29 = (),
            _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _29),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:29:6: 29:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/format.rs:21:5: 29:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:21:41: 21:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut format::Buf<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:21:18: 21:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/format.rs:21:32: 21:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/format.rs:21:29: 21:30 (#0),
                            ),
                        ),
                        pat_span: serde/src/format.rs:21:29: 21:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:21:29: 21:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:12: 22:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:12: 22:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:12: 22:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:26: 22:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:26: 22:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:12: 22:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:36: 22:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/format.rs:22:9: 28:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:22:36: 22:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::fmt::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:23:17: 23:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:13: 25:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:13: 25:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:23: 25:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:13: 25:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:24: 25:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:24: 25:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:37: 25:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:37: 25:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:51: 25:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:51: 25:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:37: 25:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:76: 25:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:76: 25:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:25:76: 25:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:26:28: 26:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:26:28: 26:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:26:13: 26:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/format.rs:27:16: 27:18 (#0),
            scope: scope[0],
        },
    },
]