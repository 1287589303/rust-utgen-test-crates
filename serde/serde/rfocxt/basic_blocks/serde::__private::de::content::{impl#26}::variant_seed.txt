[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = (_1.1: std::option::Option<&__private::de::content::Content<'_>>),
            StorageLive(_5),
            _5 = std::marker::PhantomData::<E>,
            _3 = __private::de::content::VariantRefDeserializer::<'_, '_, E> { value: move _4, err: move _5 },
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*(_1.0: &__private::de::content::Content<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2149:30: 2149:71 (#0),
                    scope: scope[1],
                },
                kind: _8 = __private::de::content::ContentRefDeserializer::<'_, '_, E>::new(move _9) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2149:13: 2149:72 (#0),
                    scope: scope[1],
                },
                kind: _6 = <V as de::DeserializeSeed<'_>>::deserialize::<__private::de::content::ContentRefDeserializer<'_, '_, E>>(move _7, move _8) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_10),
            _10 = {closure@serde/src/private/de.rs:2150:22: 2150:25} { visitor: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<<V as de::DeserializeSeed<'_>>::Value, E>::map::<(<V as de::DeserializeSeed<'_>>::Value, __private::de::content::VariantRefDeserializer<'_, '_, E>), {closure@serde/src/private/de.rs:2150:22: 2150:25}>(move _6, move _10) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2151:9: 2151:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2151:10: 2151:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2150:38: 2150:39 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2149:71: 2149:72 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2151:9: 2151:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2141:9: 2151:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), __private::de::content::VariantRefDeserializer<'{erased}, '{erased}, E/#2>), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2141:46: 2141:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::EnumRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2141:28: 2141:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2141:40: 2141:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2141:34: 2141:38 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2141:34: 2141:38 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2141:34: 2141:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2145:27: 2148:14 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2145:17: 2145:24 (#0),
                    },
                ),
            ),
        ),
        ty: __private::de::content::VariantRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2145:17: 2145:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2146:24: 2146:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2147:22: 2147:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                },
            ),
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2149:13: 2149:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2149:13: 2149:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                },
            ),
        ),
        ty: __private::de::content::ContentRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2149:30: 2149:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2149:58: 2149:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2149:13: 2150:39 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2672 ~ serde[cd55]::__private::de::content::{impl#26}::variant_seed::{closure#0}),
            [
                '{erased},
                '{erased},
                E/#2,
                V/#3,
                i32,
                Binder { value: extern "RustCall" fn((Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }),)) -> (Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), __private::de::content::VariantRefDeserializer<'{erased}, '{erased}, E/#2>), bound_vars: [] },
                (__private::de::content::VariantRefDeserializer<'{erased}, '{erased}, E/#2>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2150:22: 2150:38 (#0),
            scope: scope[0],
        },
    },
]