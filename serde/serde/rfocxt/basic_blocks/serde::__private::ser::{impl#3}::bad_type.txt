[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = [const "can only flatten structs and maps (got ", const ")"],
            _4 = &_5,
            _3 = &(*_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_1,
            _10 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:999:53: 999:55 (#3909),
                    scope: scope[0],
                },
                kind: _9 = core::fmt::rt::Argument::<'_>::new_display::<__private::ser::Unsupported>(move _10) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = [move _9],
            StorageDead(_9),
            _7 = &_8,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:998:28: 1001:10 (#3909),
                    scope: scope[0],
                },
                kind: _2 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(move _3, move _6) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = <<M as ser::SerializeMap>::Error as ser::Error>::custom::<std::fmt::Arguments<'_>>(move _2) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1002:6: 1002:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:997:5: 1002:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    M/#1,
                ],
                def_id: DefId(0:2050 ~ serde[cd55]::ser::SerializeMap::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:997:39: 997:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:997:23: 997:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:997:17: 997:21 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:997:17: 997:21 (#0),
                    },
                ),
            ),
        ),
        ty: __private::ser::Unsupported,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:997:17: 997:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:998:28: 1001:10 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:999:13: 999:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:999:13: 999:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:999:13: 999:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:998:28: 1001:10 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:998:28: 1001:10 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:998:28: 1001:10 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:999:53: 999:55 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::Unsupported,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1000:13: 1000:17 (#3909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:998:9: 1001:11 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::Unsupported,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1000:13: 1000:17 (#3909),
            scope: scope[0],
        },
    },
]