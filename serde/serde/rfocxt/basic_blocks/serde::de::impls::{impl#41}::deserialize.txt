[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            StorageLive(_3),
            StorageLive(_4),
            _4 = std::marker::PhantomData::<std::result::Result<T, E>>,
            _3 = de::impls::<impl de::Deserialize<'de> for std::result::Result<T, E>>::deserialize::ResultVisitor::<T, E>(move _4),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:3080:9: 3080:86 (#0),
                    scope: scope[0],
                },
                kind: _0 = <D as de::Deserializer<'_>>::deserialize_enum::<de::impls::<impl de::Deserialize<'de> for std::result::Result<T, E>>::deserialize::ResultVisitor<T, E>>(move _2, const "Result", const de::impls::<impl de::Deserialize<'de> for std::result::Result<T, E>>::deserialize::VARIANTS, move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:3081:6: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:3080:85: 3080:86 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2983:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::result::Result<T/#1, E/#2>, Alias(Projection, AliasTy { args: [D/#3, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2983:43: 2983:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:2983:37: 2983:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:2983:23: 2983:35 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2983:23: 2983:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2983:23: 2983:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:3080:9: 3080:86 (#0),
                },
            ),
        ),
        ty: D/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:3080:9: 3080:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:3080:9: 3080:86 (#0),
                },
            ),
        ),
        ty: de::impls::<impl de::Deserialize<'de> for std::result::Result<T, E>>::deserialize::ResultVisitor<T/#1, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:3080:59: 3080:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<std::result::Result<T/#1, E/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:3080:73: 3080:84 (#0),
            scope: scope[0],
        },
    },
]