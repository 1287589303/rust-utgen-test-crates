[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*(_1.0: &mut std::vec::Vec<std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2561:19: 2561:32 (#0),
                    scope: scope[0],
                },
                kind: _7 = <std::vec::Vec<std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::ops::Deref>::deref(move _8) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2561:19: 2561:32 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>]>::iter(move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_9),
            _9 = std::option::Option::<&__private::de::content::Content<'_>>::None,
            StorageLive(_10),
            _10 = std::marker::PhantomData::<E>,
            _4 = __private::de::FlatMapAccess::<'_, '_, E> { iter: move _5, pending_content: move _9, _marker: move _10 },
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_map::<__private::de::FlatMapAccess<'_, '_, E>>(move _3, move _4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2565:5: 2565:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2565:6: 2565:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2564:10: 2564:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2565:5: 2565:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2556:5: 2565:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2556:48: 2556:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::FlatMapDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2556:27: 2556:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2556:42: 2556:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2556:33: 2556:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2556:33: 2556:40 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2556:33: 2556:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2560:9: 2560:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                },
            ),
        ),
        ty: __private::de::FlatMapAccess<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2560:27: 2564:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2561:19: 2561:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2561:19: 2561:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2561:19: 2561:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2560:9: 2564:11 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2561:19: 2561:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2562:30: 2562:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2563:22: 2563:33 (#0),
            scope: scope[0],
        },
    },
]