[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*(_1.0: &mut M)),
            _3 = __private::ser::FlatMapSerializeMap::<'_, M>(move _4),
            StorageDead(_4),
            _0 = std::result::Result::<__private::ser::FlatMapSerializeMap<'_, M>, <M as ser::SerializeMap>::Error>::Ok(move _3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:1158:6: 1158:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<__private::ser::FlatMapSerializeMap<'{erased}, M/#1>, Alias(Projection, AliasTy { args: [M/#1], def_id: DefId(0:2050 ~ serde[cd55]::ser::SerializeMap::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1156:49: 1156:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::FlatMapSerializer<'{erased}, M/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1156:22: 1156:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1156:28: 1156:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: __private::ser::FlatMapSerializeMap<'{erased}, M/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1157:12: 1157:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut M/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:1157:32: 1157:38 (#0),
            scope: scope[0],
        },
    },
]