[
    BasicBlockData {
        statements: [
            PlaceMention((_1.0: __private::de::content::Content<'_>)),
            _5 = discriminant((_1.0: __private::de::content::Content<'_>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1346:13: 1346:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [20: bb3, 21: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move _1,
            StorageLive(_17),
            _17 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1363:22: 1363:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = <__private::de::content::ContentDeserializer<'_, E> as de::Deserializer<'_>>::deserialize_any::<V>(move _16, move _17) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:17: 1361:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:17: 1362:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_6),
            _6 = &(((_1.0: __private::de::content::Content<'_>) as Map).0: std::vec::Vec<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>),
            _7 = &_6,
            _4 = &fake shallow (_1.0: __private::de::content::Content<'_>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*(*_7)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:40: 1361:52 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::vec::Vec::<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>::is_empty(move _9) -> [return: bb5, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:40: 1361:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForMatchGuard, _4),
            StorageLive(_10),
            _10 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:56: 1361:76 (#0),
                    scope: scope[1],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_unit::<E>(move _10) -> [return: bb8, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:40: 1361:52 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:75: 1361:76 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_11),
            _11 = &(((_1.0: __private::de::content::Content<'_>) as Seq).0: std::vec::Vec<__private::de::content::Content<'_>>),
            _12 = &_11,
            _4 = &fake shallow (_1.0: __private::de::content::Content<'_>),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*(*_12)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:40: 1362:52 (#0),
                    scope: scope[0],
                },
                kind: _13 = std::vec::Vec::<__private::de::content::Content<'_>>::is_empty(move _14) -> [return: bb10, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:40: 1362:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            FakeRead(ForMatchGuard, _4),
            StorageLive(_15),
            _15 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:56: 1362:76 (#0),
                    scope: scope[2],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_unit::<E>(move _15) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:40: 1362:52 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:75: 1362:76 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1363:50: 1363:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1365:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1365:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1365:10: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1363:50: 1363:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1363:50: 1363:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1362:75: 1362:76 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1361:75: 1361:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1365:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1365:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:1338:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#2, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1342:14: 1342:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::content::ContentDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1339:13: 1339:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:1340:20: 1340:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1340:13: 1340:18 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1340:13: 1340:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1340:13: 1340:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:1341:22: 1341:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:1341:13: 1341:20 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1341:13: 1341:20 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1341:13: 1341:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1346:19: 1346:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:17: 1361:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: __private::de::content::Content<'_>),
                                ),
                                serde/src/private/de.rs:1346:19: 1346:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1361:17: 1361:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:30: 1361:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:30: 1361:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:40: 1361:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:40: 1361:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1361:56: 1361:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: __private::de::content::Content<'_>),
                                ),
                                serde/src/private/de.rs:1346:19: 1346:31 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:1362:17: 1362:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::de::content::Content<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1362:30: 1362:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::vec::Vec<__private::de::content::Content<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1362:30: 1362:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1362:40: 1362:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::de::content::Content<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1362:40: 1362:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1362:56: 1362:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: __private::de::content::ContentDeserializer<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1363:22: 1363:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:1346:13: 1364:14 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:1363:43: 1363:50 (#0),
            scope: scope[0],
        },
    },
]