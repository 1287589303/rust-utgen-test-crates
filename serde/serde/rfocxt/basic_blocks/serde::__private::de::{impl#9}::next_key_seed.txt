[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: std::slice::Iter<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                    scope: scope[0],
                },
                kind: _4 = <&mut std::slice::Iter<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_6),
            _6 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                    scope: scope[1],
                },
                kind: _9 = <&mut std::slice::Iter<'_, std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::iter::Iterator>::next(move _10) -> [return: bb4, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_9 as Some).0: &std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>),
            PlaceMention((*_14)),
            _15 = discriminant((*_14)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2670:20: 2670:48 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _15) -> [1: bb9, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_25),
            _25 = std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::None,
            _0 = std::result::Result::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, E>::Ok(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2679:16: 2679:17 (#0),
                    scope: scope[0],
                },
                kind: drop(_25) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2670:20: 2670:48 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &((((*_14) as Some).0: (__private::de::content::Content<'_>, __private::de::content::Content<'_>)).0: __private::de::content::Content<'_>),
            StorageLive(_17),
            _17 = &((((*_14) as Some).0: (__private::de::content::Content<'_>, __private::de::content::Content<'_>)).1: __private::de::content::Content<'_>),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_17),
            _19 = std::option::Option::<&__private::de::content::Content<'_>>::Some(move _20),
            StorageDead(_20),
            ((*_1).1: std::option::Option<&__private::de::content::Content<'_>>) = move _19,
            StorageDead(_19),
            StorageLive(_21),
            StorageLive(_22),
            _22 = move _2,
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2676:41: 2676:73 (#0),
                    scope: scope[3],
                },
                kind: _23 = __private::de::content::ContentRefDeserializer::<'_, '_, E>::new(move _24) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2676:24: 2676:74 (#0),
                    scope: scope[3],
                },
                kind: _21 = <T as de::DeserializeSeed<'_>>::deserialize::<__private::de::content::ContentRefDeserializer<'_, '_, E>>(move _22, move _23) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2676:24: 2676:84 (#0),
                    scope: scope[3],
                },
                kind: _0 = std::result::Result::<<T as de::DeserializeSeed<'_>>::Value, E>::map::<std::option::Option<<T as de::DeserializeSeed<'_>>::Value>, fn(<T as de::DeserializeSeed<'_>>::Value) -> std::option::Option<<T as de::DeserializeSeed<'_>>::Value> {std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some}>(move _21, std::option::Option::<<T as de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2680:5: 2680:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2680:5: 2680:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2680:6: 2680:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2676:83: 2676:84 (#0),
                    scope: scope[3],
                },
                kind: drop(_21) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2676:73: 2676:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2680:5: 2680:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2664:5: 2680:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2664:48: 2664:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut __private::de::FlatMapAccess<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2664:25: 2664:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2664:42: 2664:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2664:36: 2664:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2664:36: 2664:40 (#0),
                    },
                ),
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2664:36: 2664:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2664:5: 2680:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut std::slice::Iter<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:21: 2668:35 (#4036),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:9: 2678:10 (#4035),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                serde/src/private/de.rs:2668:21: 2668:35 (#4036),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2668:13: 2668:17 (#4037),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2668:13: 2668:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2670:20: 2670:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_14),
                                ),
                                serde/src/private/de.rs:2670:51: 2670:56 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2670:20: 2670:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2670:26: 2670:33 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_14),
                                ),
                                serde/src/private/de.rs:2670:51: 2670:56 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2670:20: 2670:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2670:35: 2670:46 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: serde/src/private/de.rs:2670:13: 2677:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2670:57: 2677:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} __private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2675:40: 2675:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2675:45: 2675:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2676:24: 2676:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2676:24: 2676:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: __private::de::content::ContentRefDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2676:41: 2676:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::de::content::Content<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2676:69: 2676:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(0:1454 ~ serde[cd55]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2679:12: 2679:16 (#0),
            scope: scope[0],
        },
    },
]