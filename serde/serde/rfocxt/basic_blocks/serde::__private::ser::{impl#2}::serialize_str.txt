[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = __private::ser::Unsupported::String,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:164:13: 164:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = __private::ser::TaggedSerializer::<S>::bad_type(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:164:47: 164:48 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:165:5: 165:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:165:6: 165:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:164:46: 164:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:165:5: 165:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:163:5: 165:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:163:40: 163:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::ser::TaggedSerializer<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:163:22: 163:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:163:28: 163:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:164:13: 164:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:164:9: 164:48 (#0),
                },
            ),
        ),
        ty: __private::ser::TaggedSerializer<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:164:13: 164:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:164:9: 164:48 (#0),
                },
            ),
        ),
        ty: __private::ser::Unsupported,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:164:27: 164:46 (#0),
            scope: scope[0],
        },
    },
]