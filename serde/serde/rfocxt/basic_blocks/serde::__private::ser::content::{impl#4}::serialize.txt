[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:470:13: 470:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, 16: bb18, 17: bb19, 18: bb20, 19: bb21, 20: bb22, 21: bb23, 22: bb24, 23: bb25, 24: bb26, 25: bb27, 26: bb28, 27: bb29, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:470:19: 470:24 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:471:17: 471:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:472:17: 472:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:473:17: 473:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:474:17: 474:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:475:17: 475:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:476:17: 476:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:477:17: 477:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:478:17: 478:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:479:17: 479:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb46, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:480:17: 480:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:481:17: 481:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:482:17: 482:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:483:17: 483:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb54, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:484:17: 484:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb57, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:485:17: 485:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb60, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:486:17: 486:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb62, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:487:17: 487:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:488:17: 488:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb66, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:489:17: 489:46 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb68, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:490:17: 490:49 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb70, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:491:17: 491:56 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb72, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:494:17: 494:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb74, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:495:17: 495:45 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb76, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:503:17: 503:52 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb103, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:511:17: 511:59 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb130, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:519:17: 519:42 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb157, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:527:17: 527:47 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb184, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_261),
            _261 = (((*_1) as StructVariant).0: &str),
            StorageLive(_262),
            _262 = (((*_1) as StructVariant).1: u32),
            StorageLive(_263),
            _263 = (((*_1) as StructVariant).2: &str),
            StorageLive(_264),
            _264 = &(((*_1) as StructVariant).3: std::vec::Vec<(&str, __private::ser::content::Content)>),
            StorageLive(_265),
            StorageLive(_266),
            StorageLive(_267),
            _267 = move _2,
            StorageLive(_268),
            _268 = _261,
            StorageLive(_269),
            _269 = _262,
            StorageLive(_270),
            _270 = _263,
            StorageLive(_271),
            StorageLive(_272),
            _272 = &(*_264),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:84: 537:96 (#0),
                    scope: scope[61],
                },
                kind: _271 = std::vec::Vec::<(&str, __private::ser::content::Content)>::len(move _272) -> [return: bb211, unwind: bb276],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = (((*_1) as Bool).0: bool),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            _6 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:471:37: 471:65 (#0),
                    scope: scope[1],
                },
                kind: _0 = <S as ser::Serializer>::serialize_bool(move _5, move _6) -> [return: bb31, unwind: bb333],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:471:64: 471:65 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = (((*_1) as U8).0: u8),
            StorageLive(_8),
            _8 = move _2,
            StorageLive(_9),
            _9 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:472:35: 472:61 (#0),
                    scope: scope[2],
                },
                kind: _0 = <S as ser::Serializer>::serialize_u8(move _8, move _9) -> [return: bb33, unwind: bb332],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:472:60: 472:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = (((*_1) as U16).0: u16),
            StorageLive(_11),
            _11 = move _2,
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:473:36: 473:63 (#0),
                    scope: scope[3],
                },
                kind: _0 = <S as ser::Serializer>::serialize_u16(move _11, move _12) -> [return: bb35, unwind: bb331],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:473:62: 473:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = (((*_1) as U32).0: u32),
            StorageLive(_14),
            _14 = move _2,
            StorageLive(_15),
            _15 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:474:36: 474:63 (#0),
                    scope: scope[4],
                },
                kind: _0 = <S as ser::Serializer>::serialize_u32(move _14, move _15) -> [return: bb37, unwind: bb330],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:474:62: 474:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = (((*_1) as U64).0: u64),
            StorageLive(_17),
            _17 = move _2,
            StorageLive(_18),
            _18 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:475:36: 475:63 (#0),
                    scope: scope[5],
                },
                kind: _0 = <S as ser::Serializer>::serialize_u64(move _17, move _18) -> [return: bb39, unwind: bb329],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:475:62: 475:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (((*_1) as I8).0: i8),
            StorageLive(_20),
            _20 = move _2,
            StorageLive(_21),
            _21 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:476:35: 476:61 (#0),
                    scope: scope[6],
                },
                kind: _0 = <S as ser::Serializer>::serialize_i8(move _20, move _21) -> [return: bb41, unwind: bb328],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:476:60: 476:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = (((*_1) as I16).0: i16),
            StorageLive(_23),
            _23 = move _2,
            StorageLive(_24),
            _24 = _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:477:36: 477:63 (#0),
                    scope: scope[7],
                },
                kind: _0 = <S as ser::Serializer>::serialize_i16(move _23, move _24) -> [return: bb43, unwind: bb327],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:477:62: 477:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = (((*_1) as I32).0: i32),
            StorageLive(_26),
            _26 = move _2,
            StorageLive(_27),
            _27 = _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:478:36: 478:63 (#0),
                    scope: scope[8],
                },
                kind: _0 = <S as ser::Serializer>::serialize_i32(move _26, move _27) -> [return: bb45, unwind: bb326],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:478:62: 478:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = (((*_1) as I64).0: i64),
            StorageLive(_29),
            _29 = move _2,
            StorageLive(_30),
            _30 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:479:36: 479:63 (#0),
                    scope: scope[9],
                },
                kind: _0 = <S as ser::Serializer>::serialize_i64(move _29, move _30) -> [return: bb47, unwind: bb325],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:479:62: 479:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = (((*_1) as F32).0: f32),
            StorageLive(_32),
            _32 = move _2,
            StorageLive(_33),
            _33 = _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:480:36: 480:63 (#0),
                    scope: scope[10],
                },
                kind: _0 = <S as ser::Serializer>::serialize_f32(move _32, move _33) -> [return: bb49, unwind: bb324],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:480:62: 480:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = (((*_1) as F64).0: f64),
            StorageLive(_35),
            _35 = move _2,
            StorageLive(_36),
            _36 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:481:36: 481:63 (#0),
                    scope: scope[11],
                },
                kind: _0 = <S as ser::Serializer>::serialize_f64(move _35, move _36) -> [return: bb51, unwind: bb323],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:481:62: 481:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = (((*_1) as Char).0: char),
            StorageLive(_38),
            _38 = move _2,
            StorageLive(_39),
            _39 = _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:482:37: 482:65 (#0),
                    scope: scope[12],
                },
                kind: _0 = <S as ser::Serializer>::serialize_char(move _38, move _39) -> [return: bb53, unwind: bb322],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:482:64: 482:65 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = &(((*_1) as String).0: std::string::String),
            StorageLive(_41),
            _41 = move _2,
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:483:68: 483:69 (#0),
                    scope: scope[13],
                },
                kind: _43 = <std::string::String as std::ops::Deref>::deref(move _44) -> [return: bb55, unwind: bb321],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = &(*_43),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:483:43: 483:70 (#0),
                    scope: scope[13],
                },
                kind: _0 = <S as ser::Serializer>::serialize_str(move _41, move _42) -> [return: bb56, unwind: bb321],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_43),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:483:69: 483:70 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            _45 = &(((*_1) as Bytes).0: std::vec::Vec<u8>),
            StorageLive(_46),
            _46 = move _2,
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &(*_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:484:69: 484:70 (#0),
                    scope: scope[14],
                },
                kind: _48 = <std::vec::Vec<u8> as std::ops::Deref>::deref(move _49) -> [return: bb58, unwind: bb320],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = &(*_48),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:484:42: 484:71 (#0),
                    scope: scope[14],
                },
                kind: _0 = <S as ser::Serializer>::serialize_bytes(move _46, move _47) -> [return: bb59, unwind: bb320],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_48),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:484:70: 484:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:485:34: 485:61 (#0),
                    scope: scope[0],
                },
                kind: _0 = <S as ser::Serializer>::serialize_none(move _50) -> [return: bb61, unwind: bb319],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:485:60: 485:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = &(((*_1) as Some).0: std::boxed::Box<__private::ser::content::Content>),
            StorageLive(_52),
            _52 = move _2,
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(*(*_51)),
            _53 = &(*_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:486:41: 486:72 (#0),
                    scope: scope[15],
                },
                kind: _0 = <S as ser::Serializer>::serialize_some::<__private::ser::content::Content>(move _52, move _53) -> [return: bb63, unwind: bb318],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_54),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:486:71: 486:72 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:487:34: 487:61 (#0),
                    scope: scope[0],
                },
                kind: _0 = <S as ser::Serializer>::serialize_unit(move _55) -> [return: bb65, unwind: bb317],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:487:60: 487:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            _56 = (((*_1) as UnitStruct).0: &str),
            StorageLive(_57),
            _57 = move _2,
            StorageLive(_58),
            _58 = _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:488:43: 488:78 (#0),
                    scope: scope[16],
                },
                kind: _0 = <S as ser::Serializer>::serialize_unit_struct(move _57, move _58) -> [return: bb67, unwind: bb316],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:488:77: 488:78 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            _59 = (((*_1) as UnitVariant).0: &str),
            StorageLive(_60),
            _60 = (((*_1) as UnitVariant).1: u32),
            StorageLive(_61),
            _61 = (((*_1) as UnitVariant).2: &str),
            StorageLive(_62),
            _62 = move _2,
            StorageLive(_63),
            _63 = _59,
            StorageLive(_64),
            _64 = _60,
            StorageLive(_65),
            _65 = _61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:489:50: 489:92 (#0),
                    scope: scope[17],
                },
                kind: _0 = <S as ser::Serializer>::serialize_unit_variant(move _62, move _63, move _64, move _65) -> [return: bb69, unwind: bb315],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:489:91: 489:92 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = (((*_1) as NewtypeStruct).0: &str),
            StorageLive(_67),
            _67 = &(((*_1) as NewtypeStruct).1: std::boxed::Box<__private::ser::content::Content>),
            StorageLive(_68),
            _68 = move _2,
            StorageLive(_69),
            _69 = _66,
            StorageLive(_70),
            StorageLive(_71),
            _71 = &(*(*_67)),
            _70 = &(*_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:490:53: 490:97 (#0),
                    scope: scope[18],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_struct::<__private::ser::content::Content>(move _68, move _69, move _70) -> [return: bb71, unwind: bb314],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_71),
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:490:96: 490:97 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = (((*_1) as NewtypeVariant).0: &str),
            StorageLive(_73),
            _73 = (((*_1) as NewtypeVariant).1: u32),
            StorageLive(_74),
            _74 = (((*_1) as NewtypeVariant).2: &str),
            StorageLive(_75),
            _75 = &(((*_1) as NewtypeVariant).3: std::boxed::Box<__private::ser::content::Content>),
            StorageLive(_76),
            _76 = move _2,
            StorageLive(_77),
            _77 = _72,
            StorageLive(_78),
            _78 = _73,
            StorageLive(_79),
            _79 = _74,
            StorageLive(_80),
            StorageLive(_81),
            _81 = &(*(*_75)),
            _80 = &(*_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                    scope: scope[19],
                },
                kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<__private::ser::content::Content>(move _76, move _77, move _78, move _79, move _80) -> [return: bb73, unwind: bb313],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_81),
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_73),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:493:17: 493:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            _82 = &(((*_1) as Seq).0: std::vec::Vec<__private::ser::content::Content>),
            StorageLive(_83),
            _83 = &(*_82),
            StorageLive(_84),
            _84 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:494:47: 494:77 (#0),
                    scope: scope[20],
                },
                kind: _0 = <std::vec::Vec<__private::ser::content::Content> as ser::Serialize>::serialize::<S>(move _83, move _84) -> [return: bb75, unwind: bb312],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:494:76: 494:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_85),
            _85 = &(((*_1) as Tuple).0: std::vec::Vec<__private::ser::content::Content>),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = move _2,
            StorageLive(_89),
            StorageLive(_90),
            _90 = &(*_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:69: 497:83 (#0),
                    scope: scope[21],
                },
                kind: _89 = std::vec::Vec::<__private::ser::content::Content>::len(move _90) -> [return: bb77, unwind: bb311],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:42: 497:84 (#0),
                    scope: scope[21],
                },
                kind: _87 = <S as ser::Serializer>::serialize_tuple(move _88, move _89) -> [return: bb78, unwind: bb311],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            PlaceMention(_87),
            _91 = discriminant(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3884),
                    scope: scope[21],
                },
                kind: switchInt(move _91) -> [0: bb80, 1: bb81, otherwise: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:42: 497:84 (#0),
                    scope: scope[21],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3884),
                    scope: scope[21],
                },
                kind: falseEdge -> [real: bb82, imaginary: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_93),
            _93 = move ((_87 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_95),
            _95 = move _93,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3884),
                    scope: scope[24],
                },
                kind: drop(_95) -> [return: bb84, unwind: bb309],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = move ((_87 as Ok).0: <S as ser::Serializer>::SerializeTuple),
            _86 = move _92,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3884),
                    scope: scope[21],
                },
                kind: drop(_92) -> [return: bb83, unwind: bb310],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            FakeRead(ForLet(None), _86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:85: 497:86 (#0),
                    scope: scope[21],
                },
                kind: drop(_87) -> [return: bb85, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3884),
                    scope: scope[21],
                },
                kind: drop(_93) -> [return: bb265, unwind: bb310],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _85,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
                    scope: scope[22],
                },
                kind: _97 = <&std::vec::Vec<__private::ser::content::Content> as std::iter::IntoIterator>::into_iter(move _98) -> [return: bb86, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            PlaceMention(_97),
            StorageLive(_99),
            _99 = move _97,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
                    scope: scope[25],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
                    scope: scope[25],
                },
                kind: falseUnwind -> [real: bb88, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &mut _99,
            _103 = &mut (*_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
                    scope: scope[25],
                },
                kind: _102 = <std::slice::Iter<'_, __private::ser::content::Content> as std::iter::Iterator>::next(move _103) -> [return: bb89, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            PlaceMention(_102),
            _105 = discriminant(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
                    scope: scope[25],
                },
                kind: switchInt(move _105) -> [0: bb91, 1: bb92, otherwise: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
                    scope: scope[25],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
                    scope: scope[25],
                },
                kind: falseEdge -> [real: bb93, imaginary: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_107),
            _107 = ((_102 as Some).0: &__private::ser::content::Content),
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            _110 = &mut _86,
            StorageLive(_111),
            _111 = &(*_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:499:30: 499:56 (#0),
                    scope: scope[26],
                },
                kind: _109 = <<S as ser::Serializer>::SerializeTuple as ser::SerializeTuple>::serialize_element::<__private::ser::content::Content>(move _110, move _111) -> [return: bb94, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = const (),
            StorageDead(_104),
            StorageDead(_102),
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_117),
            _117 = move _86,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:501:21: 501:32 (#0),
                    scope: scope[22],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeTuple as ser::SerializeTuple>::end(move _117) -> [return: bb101, unwind: bb305],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            PlaceMention(_109),
            _112 = discriminant(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3885),
                    scope: scope[26],
                },
                kind: switchInt(move _112) -> [0: bb96, 1: bb97, otherwise: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:499:30: 499:56 (#0),
                    scope: scope[26],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3885),
                    scope: scope[26],
                },
                kind: falseEdge -> [real: bb98, imaginary: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_114),
            _114 = move ((_109 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_116),
            _116 = move _114,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3885),
                    scope: scope[28],
                },
                kind: drop(_116) -> [return: bb99, unwind: bb306],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_113),
            _113 = ((_109 as Ok).0: ()),
            _108 = _113,
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3885),
                    scope: scope[26],
                },
                kind: drop(_109) -> [return: bb100, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3885),
                    scope: scope[26],
                },
                kind: drop(_114) -> [return: bb263, unwind: bb307],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            _101 = const (),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_102),
            StorageDead(_101),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
                    scope: scope[25],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:502:17: 502:18 (#0),
                    scope: scope[21],
                },
                kind: drop(_86) -> [return: bb102, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:502:17: 502:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_118),
            _118 = (((*_1) as TupleStruct).0: &str),
            StorageLive(_119),
            _119 = &(((*_1) as TupleStruct).1: std::vec::Vec<__private::ser::content::Content>),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            _122 = move _2,
            StorageLive(_123),
            _123 = _118,
            StorageLive(_124),
            StorageLive(_125),
            _125 = &(*_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:76: 505:88 (#0),
                    scope: scope[29],
                },
                kind: _124 = std::vec::Vec::<__private::ser::content::Content>::len(move _125) -> [return: bb104, unwind: bb304],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:39: 505:89 (#0),
                    scope: scope[29],
                },
                kind: _121 = <S as ser::Serializer>::serialize_tuple_struct(move _122, move _123, move _124) -> [return: bb105, unwind: bb304],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
            StorageDead(_122),
            PlaceMention(_121),
            _126 = discriminant(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3886),
                    scope: scope[29],
                },
                kind: switchInt(move _126) -> [0: bb107, 1: bb108, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:39: 505:89 (#0),
                    scope: scope[29],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3886),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb109, imaginary: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_128),
            _128 = move ((_121 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_130),
            _130 = move _128,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3886),
                    scope: scope[32],
                },
                kind: drop(_130) -> [return: bb111, unwind: bb302],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_127),
            _127 = move ((_121 as Ok).0: <S as ser::Serializer>::SerializeTupleStruct),
            _120 = move _127,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3886),
                    scope: scope[29],
                },
                kind: drop(_127) -> [return: bb110, unwind: bb303],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            FakeRead(ForLet(None), _120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:90: 505:91 (#0),
                    scope: scope[29],
                },
                kind: drop(_121) -> [return: bb112, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3886),
                    scope: scope[29],
                },
                kind: drop(_128) -> [return: bb260, unwind: bb303],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageLive(_131),
            StorageLive(_132),
            StorageLive(_133),
            _133 = _119,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
                    scope: scope[30],
                },
                kind: _132 = <&std::vec::Vec<__private::ser::content::Content> as std::iter::IntoIterator>::into_iter(move _133) -> [return: bb113, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            PlaceMention(_132),
            StorageLive(_134),
            _134 = move _132,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
                    scope: scope[33],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
                    scope: scope[33],
                },
                kind: falseUnwind -> [real: bb115, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &mut _134,
            _137 = &mut (*_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
                    scope: scope[33],
                },
                kind: _136 = <std::slice::Iter<'_, __private::ser::content::Content> as std::iter::Iterator>::next(move _137) -> [return: bb116, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            PlaceMention(_136),
            _139 = discriminant(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
                    scope: scope[33],
                },
                kind: switchInt(move _139) -> [0: bb118, 1: bb119, otherwise: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
                    scope: scope[33],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
                    scope: scope[33],
                },
                kind: falseEdge -> [real: bb120, imaginary: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_141),
            _141 = ((_136 as Some).0: &__private::ser::content::Content),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            _144 = &mut _120,
            StorageLive(_145),
            _145 = &(*_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:507:30: 507:51 (#0),
                    scope: scope[34],
                },
                kind: _143 = <<S as ser::Serializer>::SerializeTupleStruct as ser::SerializeTupleStruct>::serialize_field::<__private::ser::content::Content>(move _144, move _145) -> [return: bb121, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _131 = const (),
            StorageDead(_138),
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_134),
            StorageDead(_132),
            StorageDead(_131),
            StorageLive(_151),
            _151 = move _120,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:509:21: 509:29 (#0),
                    scope: scope[30],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeTupleStruct as ser::SerializeTupleStruct>::end(move _151) -> [return: bb128, unwind: bb298],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            StorageDead(_144),
            PlaceMention(_143),
            _146 = discriminant(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3887),
                    scope: scope[34],
                },
                kind: switchInt(move _146) -> [0: bb123, 1: bb124, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:507:30: 507:51 (#0),
                    scope: scope[34],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3887),
                    scope: scope[34],
                },
                kind: falseEdge -> [real: bb125, imaginary: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_148),
            _148 = move ((_143 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_150),
            _150 = move _148,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3887),
                    scope: scope[36],
                },
                kind: drop(_150) -> [return: bb126, unwind: bb299],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_147),
            _147 = ((_143 as Ok).0: ()),
            _142 = _147,
            StorageDead(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3887),
                    scope: scope[34],
                },
                kind: drop(_143) -> [return: bb127, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3887),
                    scope: scope[34],
                },
                kind: drop(_148) -> [return: bb258, unwind: bb300],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            _135 = const (),
            StorageDead(_141),
            StorageDead(_138),
            StorageDead(_136),
            StorageDead(_135),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
                    scope: scope[33],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:510:17: 510:18 (#0),
                    scope: scope[29],
                },
                kind: drop(_120) -> [return: bb129, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:510:17: 510:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_152),
            _152 = (((*_1) as TupleVariant).0: &str),
            StorageLive(_153),
            _153 = (((*_1) as TupleVariant).1: u32),
            StorageLive(_154),
            _154 = (((*_1) as TupleVariant).2: &str),
            StorageLive(_155),
            _155 = &(((*_1) as TupleVariant).3: std::vec::Vec<__private::ser::content::Content>),
            StorageLive(_156),
            StorageLive(_157),
            StorageLive(_158),
            _158 = move _2,
            StorageLive(_159),
            _159 = _152,
            StorageLive(_160),
            _160 = _153,
            StorageLive(_161),
            _161 = _154,
            StorageLive(_162),
            StorageLive(_163),
            _163 = &(*_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:83: 513:95 (#0),
                    scope: scope[37],
                },
                kind: _162 = std::vec::Vec::<__private::ser::content::Content>::len(move _163) -> [return: bb131, unwind: bb297],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:39: 513:96 (#0),
                    scope: scope[37],
                },
                kind: _157 = <S as ser::Serializer>::serialize_tuple_variant(move _158, move _159, move _160, move _161, move _162) -> [return: bb132, unwind: bb297],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
            StorageDead(_161),
            StorageDead(_160),
            StorageDead(_159),
            StorageDead(_158),
            PlaceMention(_157),
            _164 = discriminant(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3888),
                    scope: scope[37],
                },
                kind: switchInt(move _164) -> [0: bb134, 1: bb135, otherwise: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:39: 513:96 (#0),
                    scope: scope[37],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3888),
                    scope: scope[37],
                },
                kind: falseEdge -> [real: bb136, imaginary: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_166),
            _166 = move ((_157 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_168),
            _168 = move _166,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3888),
                    scope: scope[40],
                },
                kind: drop(_168) -> [return: bb138, unwind: bb295],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_165),
            _165 = move ((_157 as Ok).0: <S as ser::Serializer>::SerializeTupleVariant),
            _156 = move _165,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3888),
                    scope: scope[37],
                },
                kind: drop(_165) -> [return: bb137, unwind: bb296],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            FakeRead(ForLet(None), _156),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:97: 513:98 (#0),
                    scope: scope[37],
                },
                kind: drop(_157) -> [return: bb139, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3888),
                    scope: scope[37],
                },
                kind: drop(_166) -> [return: bb255, unwind: bb296],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageLive(_169),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _155,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
                    scope: scope[38],
                },
                kind: _170 = <&std::vec::Vec<__private::ser::content::Content> as std::iter::IntoIterator>::into_iter(move _171) -> [return: bb140, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_171),
            PlaceMention(_170),
            StorageLive(_172),
            _172 = move _170,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
                    scope: scope[41],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
                    scope: scope[41],
                },
                kind: falseUnwind -> [real: bb142, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_173),
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            _176 = &mut _172,
            _175 = &mut (*_176),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
                    scope: scope[41],
                },
                kind: _174 = <std::slice::Iter<'_, __private::ser::content::Content> as std::iter::Iterator>::next(move _175) -> [return: bb143, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            PlaceMention(_174),
            _177 = discriminant(_174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
                    scope: scope[41],
                },
                kind: switchInt(move _177) -> [0: bb145, 1: bb146, otherwise: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
                    scope: scope[41],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
                    scope: scope[41],
                },
                kind: falseEdge -> [real: bb147, imaginary: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_179),
            _179 = ((_174 as Some).0: &__private::ser::content::Content),
            StorageLive(_180),
            StorageLive(_181),
            StorageLive(_182),
            _182 = &mut _156,
            StorageLive(_183),
            _183 = &(*_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:515:30: 515:51 (#0),
                    scope: scope[42],
                },
                kind: _181 = <<S as ser::Serializer>::SerializeTupleVariant as ser::SerializeTupleVariant>::serialize_field::<__private::ser::content::Content>(move _182, move _183) -> [return: bb148, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = const (),
            StorageDead(_176),
            StorageDead(_174),
            StorageDead(_173),
            StorageDead(_172),
            StorageDead(_170),
            StorageDead(_169),
            StorageLive(_189),
            _189 = move _156,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:517:21: 517:29 (#0),
                    scope: scope[38],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeTupleVariant as ser::SerializeTupleVariant>::end(move _189) -> [return: bb155, unwind: bb291],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageDead(_182),
            PlaceMention(_181),
            _184 = discriminant(_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3889),
                    scope: scope[42],
                },
                kind: switchInt(move _184) -> [0: bb150, 1: bb151, otherwise: bb149],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:515:30: 515:51 (#0),
                    scope: scope[42],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3889),
                    scope: scope[42],
                },
                kind: falseEdge -> [real: bb152, imaginary: bb151],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_186),
            _186 = move ((_181 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_188),
            _188 = move _186,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3889),
                    scope: scope[44],
                },
                kind: drop(_188) -> [return: bb153, unwind: bb292],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_185),
            _185 = ((_181 as Ok).0: ()),
            _180 = _185,
            StorageDead(_185),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3889),
                    scope: scope[42],
                },
                kind: drop(_181) -> [return: bb154, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3889),
                    scope: scope[42],
                },
                kind: drop(_186) -> [return: bb253, unwind: bb293],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_181),
            StorageDead(_180),
            _173 = const (),
            StorageDead(_179),
            StorageDead(_176),
            StorageDead(_174),
            StorageDead(_173),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
                    scope: scope[41],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:518:17: 518:18 (#0),
                    scope: scope[37],
                },
                kind: drop(_156) -> [return: bb156, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
            StorageDead(_154),
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:518:17: 518:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_190),
            _190 = &(((*_1) as Map).0: std::vec::Vec<(__private::ser::content::Content, __private::ser::content::Content)>),
            StorageLive(_191),
            StorageLive(_192),
            StorageLive(_193),
            _193 = move _2,
            StorageLive(_194),
            StorageLive(_195),
            StorageLive(_196),
            _196 = &(*_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:70: 521:83 (#0),
                    scope: scope[45],
                },
                kind: _195 = std::vec::Vec::<(__private::ser::content::Content, __private::ser::content::Content)>::len(move _196) -> [return: bb158, unwind: bb290],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_196),
            _194 = std::option::Option::<usize>::Some(move _195),
            StorageDead(_195),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:40: 521:85 (#0),
                    scope: scope[45],
                },
                kind: _192 = <S as ser::Serializer>::serialize_map(move _193, move _194) -> [return: bb159, unwind: bb290],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_194),
            StorageDead(_193),
            PlaceMention(_192),
            _197 = discriminant(_192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3890),
                    scope: scope[45],
                },
                kind: switchInt(move _197) -> [0: bb161, 1: bb162, otherwise: bb160],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:40: 521:85 (#0),
                    scope: scope[45],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3890),
                    scope: scope[45],
                },
                kind: falseEdge -> [real: bb163, imaginary: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_199),
            _199 = move ((_192 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_201),
            _201 = move _199,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _201),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3890),
                    scope: scope[48],
                },
                kind: drop(_201) -> [return: bb165, unwind: bb288],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_198),
            _198 = move ((_192 as Ok).0: <S as ser::Serializer>::SerializeMap),
            _191 = move _198,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3890),
                    scope: scope[45],
                },
                kind: drop(_198) -> [return: bb164, unwind: bb289],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            FakeRead(ForLet(None), _191),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:86: 521:87 (#0),
                    scope: scope[45],
                },
                kind: drop(_192) -> [return: bb166, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_201),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3890),
                    scope: scope[45],
                },
                kind: drop(_199) -> [return: bb250, unwind: bb289],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            _204 = _190,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
                    scope: scope[46],
                },
                kind: _203 = <&std::vec::Vec<(__private::ser::content::Content, __private::ser::content::Content)> as std::iter::IntoIterator>::into_iter(move _204) -> [return: bb167, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_204),
            PlaceMention(_203),
            StorageLive(_205),
            _205 = move _203,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
                    scope: scope[49],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
                    scope: scope[49],
                },
                kind: falseUnwind -> [real: bb169, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_206),
            StorageLive(_207),
            StorageLive(_208),
            StorageLive(_209),
            _209 = &mut _205,
            _208 = &mut (*_209),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
                    scope: scope[49],
                },
                kind: _207 = <std::slice::Iter<'_, (__private::ser::content::Content, __private::ser::content::Content)> as std::iter::Iterator>::next(move _208) -> [return: bb170, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_208),
            PlaceMention(_207),
            _210 = discriminant(_207),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
                    scope: scope[49],
                },
                kind: switchInt(move _210) -> [0: bb172, 1: bb173, otherwise: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _207),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
                    scope: scope[49],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
                    scope: scope[49],
                },
                kind: falseEdge -> [real: bb174, imaginary: bb173],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_212),
            _212 = &((*((_207 as Some).0: &(__private::ser::content::Content, __private::ser::content::Content))).0: __private::ser::content::Content),
            StorageLive(_213),
            _213 = &((*((_207 as Some).0: &(__private::ser::content::Content, __private::ser::content::Content))).1: __private::ser::content::Content),
            StorageLive(_214),
            StorageLive(_215),
            StorageLive(_216),
            _216 = &mut _191,
            StorageLive(_217),
            _217 = &(*_212),
            StorageLive(_218),
            _218 = &(*_213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:523:30: 523:55 (#0),
                    scope: scope[50],
                },
                kind: _215 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::serialize_entry::<__private::ser::content::Content, __private::ser::content::Content>(move _216, move _217, move _218) -> [return: bb175, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _202 = const (),
            StorageDead(_209),
            StorageDead(_207),
            StorageDead(_206),
            StorageDead(_205),
            StorageDead(_203),
            StorageDead(_202),
            StorageLive(_224),
            _224 = move _191,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:525:21: 525:30 (#0),
                    scope: scope[46],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeMap as ser::SerializeMap>::end(move _224) -> [return: bb182, unwind: bb284],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_218),
            StorageDead(_217),
            StorageDead(_216),
            PlaceMention(_215),
            _219 = discriminant(_215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3891),
                    scope: scope[50],
                },
                kind: switchInt(move _219) -> [0: bb177, 1: bb178, otherwise: bb176],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:523:30: 523:55 (#0),
                    scope: scope[50],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3891),
                    scope: scope[50],
                },
                kind: falseEdge -> [real: bb179, imaginary: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_221),
            _221 = move ((_215 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_223),
            _223 = move _221,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _223),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3891),
                    scope: scope[52],
                },
                kind: drop(_223) -> [return: bb180, unwind: bb285],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_220),
            _220 = ((_215 as Ok).0: ()),
            _214 = _220,
            StorageDead(_220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3891),
                    scope: scope[50],
                },
                kind: drop(_215) -> [return: bb181, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_223),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3891),
                    scope: scope[50],
                },
                kind: drop(_221) -> [return: bb248, unwind: bb286],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_215),
            StorageDead(_214),
            _206 = const (),
            StorageDead(_213),
            StorageDead(_212),
            StorageDead(_209),
            StorageDead(_207),
            StorageDead(_206),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
                    scope: scope[49],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:526:17: 526:18 (#0),
                    scope: scope[45],
                },
                kind: drop(_191) -> [return: bb183, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_191),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:526:17: 526:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_225),
            _225 = (((*_1) as Struct).0: &str),
            StorageLive(_226),
            _226 = &(((*_1) as Struct).1: std::vec::Vec<(&str, __private::ser::content::Content)>),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            _229 = move _2,
            StorageLive(_230),
            _230 = _225,
            StorageLive(_231),
            StorageLive(_232),
            _232 = &(*_226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:69: 529:81 (#0),
                    scope: scope[53],
                },
                kind: _231 = std::vec::Vec::<(&str, __private::ser::content::Content)>::len(move _232) -> [return: bb185, unwind: bb283],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:38: 529:82 (#0),
                    scope: scope[53],
                },
                kind: _228 = <S as ser::Serializer>::serialize_struct(move _229, move _230, move _231) -> [return: bb186, unwind: bb283],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
            StorageDead(_230),
            StorageDead(_229),
            PlaceMention(_228),
            _233 = discriminant(_228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3892),
                    scope: scope[53],
                },
                kind: switchInt(move _233) -> [0: bb188, 1: bb189, otherwise: bb187],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:38: 529:82 (#0),
                    scope: scope[53],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3892),
                    scope: scope[53],
                },
                kind: falseEdge -> [real: bb190, imaginary: bb189],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_235),
            _235 = move ((_228 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_237),
            _237 = move _235,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3892),
                    scope: scope[56],
                },
                kind: drop(_237) -> [return: bb192, unwind: bb281],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_234),
            _234 = move ((_228 as Ok).0: <S as ser::Serializer>::SerializeStruct),
            _227 = move _234,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3892),
                    scope: scope[53],
                },
                kind: drop(_234) -> [return: bb191, unwind: bb282],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            FakeRead(ForLet(None), _227),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:83: 529:84 (#0),
                    scope: scope[53],
                },
                kind: drop(_228) -> [return: bb193, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3892),
                    scope: scope[53],
                },
                kind: drop(_235) -> [return: bb245, unwind: bb282],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_228),
            StorageLive(_238),
            StorageLive(_239),
            StorageLive(_240),
            _240 = _226,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
                    scope: scope[54],
                },
                kind: _239 = <&std::vec::Vec<(&str, __private::ser::content::Content)> as std::iter::IntoIterator>::into_iter(move _240) -> [return: bb194, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            PlaceMention(_239),
            StorageLive(_241),
            _241 = move _239,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
                    scope: scope[57],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
                    scope: scope[57],
                },
                kind: falseUnwind -> [real: bb196, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_242),
            StorageLive(_243),
            StorageLive(_244),
            StorageLive(_245),
            _245 = &mut _241,
            _244 = &mut (*_245),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
                    scope: scope[57],
                },
                kind: _243 = <std::slice::Iter<'_, (&str, __private::ser::content::Content)> as std::iter::Iterator>::next(move _244) -> [return: bb197, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_244),
            PlaceMention(_243),
            _246 = discriminant(_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
                    scope: scope[57],
                },
                kind: switchInt(move _246) -> [0: bb199, 1: bb200, otherwise: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
                    scope: scope[57],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
                    scope: scope[57],
                },
                kind: falseEdge -> [real: bb201, imaginary: bb200],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_248),
            _248 = ((*((_243 as Some).0: &(&str, __private::ser::content::Content))).0: &str),
            StorageLive(_249),
            _249 = &((*((_243 as Some).0: &(&str, __private::ser::content::Content))).1: __private::ser::content::Content),
            StorageLive(_250),
            StorageLive(_251),
            StorageLive(_252),
            _252 = &mut _227,
            StorageLive(_253),
            _253 = &(*_248),
            StorageLive(_254),
            _254 = &(*_249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:531:30: 531:53 (#0),
                    scope: scope[58],
                },
                kind: _251 = <<S as ser::Serializer>::SerializeStruct as ser::SerializeStruct>::serialize_field::<__private::ser::content::Content>(move _252, move _253, move _254) -> [return: bb202, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _238 = const (),
            StorageDead(_245),
            StorageDead(_243),
            StorageDead(_242),
            StorageDead(_241),
            StorageDead(_239),
            StorageDead(_238),
            StorageLive(_260),
            _260 = move _227,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:533:21: 533:28 (#0),
                    scope: scope[54],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeStruct as ser::SerializeStruct>::end(move _260) -> [return: bb209, unwind: bb277],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_254),
            StorageDead(_253),
            StorageDead(_252),
            PlaceMention(_251),
            _255 = discriminant(_251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3893),
                    scope: scope[58],
                },
                kind: switchInt(move _255) -> [0: bb204, 1: bb205, otherwise: bb203],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:531:30: 531:53 (#0),
                    scope: scope[58],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3893),
                    scope: scope[58],
                },
                kind: falseEdge -> [real: bb206, imaginary: bb205],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_257),
            _257 = move ((_251 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_259),
            _259 = move _257,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3893),
                    scope: scope[60],
                },
                kind: drop(_259) -> [return: bb207, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_256),
            _256 = ((_251 as Ok).0: ()),
            _250 = _256,
            StorageDead(_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3893),
                    scope: scope[58],
                },
                kind: drop(_251) -> [return: bb208, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3893),
                    scope: scope[58],
                },
                kind: drop(_257) -> [return: bb243, unwind: bb279],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_250),
            _242 = const (),
            StorageDead(_249),
            StorageDead(_248),
            StorageDead(_245),
            StorageDead(_243),
            StorageDead(_242),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
                    scope: scope[57],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:534:17: 534:18 (#0),
                    scope: scope[53],
                },
                kind: drop(_227) -> [return: bb210, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_227),
            StorageDead(_226),
            StorageDead(_225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:534:17: 534:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:39: 537:97 (#0),
                    scope: scope[61],
                },
                kind: _266 = <S as ser::Serializer>::serialize_struct_variant(move _267, move _268, move _269, move _270, move _271) -> [return: bb212, unwind: bb276],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_271),
            StorageDead(_270),
            StorageDead(_269),
            StorageDead(_268),
            StorageDead(_267),
            PlaceMention(_266),
            _273 = discriminant(_266),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3894),
                    scope: scope[61],
                },
                kind: switchInt(move _273) -> [0: bb214, 1: bb215, otherwise: bb213],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _266),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:39: 537:97 (#0),
                    scope: scope[61],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3894),
                    scope: scope[61],
                },
                kind: falseEdge -> [real: bb216, imaginary: bb215],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_275),
            _275 = move ((_266 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_277),
            _277 = move _275,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _277),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3894),
                    scope: scope[64],
                },
                kind: drop(_277) -> [return: bb218, unwind: bb274],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_274),
            _274 = move ((_266 as Ok).0: <S as ser::Serializer>::SerializeStructVariant),
            _265 = move _274,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3894),
                    scope: scope[61],
                },
                kind: drop(_274) -> [return: bb217, unwind: bb275],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
            FakeRead(ForLet(None), _265),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:98: 537:99 (#0),
                    scope: scope[61],
                },
                kind: drop(_266) -> [return: bb219, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_277),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3894),
                    scope: scope[61],
                },
                kind: drop(_275) -> [return: bb240, unwind: bb275],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_266),
            StorageLive(_278),
            StorageLive(_279),
            StorageLive(_280),
            _280 = _264,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
                    scope: scope[62],
                },
                kind: _279 = <&std::vec::Vec<(&str, __private::ser::content::Content)> as std::iter::IntoIterator>::into_iter(move _280) -> [return: bb220, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_280),
            PlaceMention(_279),
            StorageLive(_281),
            _281 = move _279,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
                    scope: scope[65],
                },
                kind: goto -> bb221,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
                    scope: scope[65],
                },
                kind: falseUnwind -> [real: bb222, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_282),
            StorageLive(_283),
            StorageLive(_284),
            StorageLive(_285),
            _285 = &mut _281,
            _284 = &mut (*_285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
                    scope: scope[65],
                },
                kind: _283 = <std::slice::Iter<'_, (&str, __private::ser::content::Content)> as std::iter::Iterator>::next(move _284) -> [return: bb223, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
            PlaceMention(_283),
            _286 = discriminant(_283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
                    scope: scope[65],
                },
                kind: switchInt(move _286) -> [0: bb225, 1: bb226, otherwise: bb224],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
                    scope: scope[65],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
                    scope: scope[65],
                },
                kind: falseEdge -> [real: bb227, imaginary: bb226],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_288),
            _288 = ((*((_283 as Some).0: &(&str, __private::ser::content::Content))).0: &str),
            StorageLive(_289),
            _289 = &((*((_283 as Some).0: &(&str, __private::ser::content::Content))).1: __private::ser::content::Content),
            StorageLive(_290),
            StorageLive(_291),
            StorageLive(_292),
            _292 = &mut _265,
            StorageLive(_293),
            _293 = &(*_288),
            StorageLive(_294),
            _294 = &(*_289),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:539:30: 539:54 (#0),
                    scope: scope[66],
                },
                kind: _291 = <<S as ser::Serializer>::SerializeStructVariant as ser::SerializeStructVariant>::serialize_field::<__private::ser::content::Content>(move _292, move _293, move _294) -> [return: bb228, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _278 = const (),
            StorageDead(_285),
            StorageDead(_283),
            StorageDead(_282),
            StorageDead(_281),
            StorageDead(_279),
            StorageDead(_278),
            StorageLive(_300),
            _300 = move _265,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:541:21: 541:29 (#0),
                    scope: scope[62],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeStructVariant as ser::SerializeStructVariant>::end(move _300) -> [return: bb235, unwind: bb270],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            StorageDead(_293),
            StorageDead(_292),
            PlaceMention(_291),
            _295 = discriminant(_291),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3895),
                    scope: scope[66],
                },
                kind: switchInt(move _295) -> [0: bb230, 1: bb231, otherwise: bb229],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _291),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:539:30: 539:54 (#0),
                    scope: scope[66],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3895),
                    scope: scope[66],
                },
                kind: falseEdge -> [real: bb232, imaginary: bb231],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_297),
            _297 = move ((_291 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_299),
            _299 = move _297,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _299),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3895),
                    scope: scope[68],
                },
                kind: drop(_299) -> [return: bb233, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_296),
            _296 = ((_291 as Ok).0: ()),
            _290 = _296,
            StorageDead(_296),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3895),
                    scope: scope[66],
                },
                kind: drop(_291) -> [return: bb234, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_299),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3895),
                    scope: scope[66],
                },
                kind: drop(_297) -> [return: bb238, unwind: bb272],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_291),
            StorageDead(_290),
            _282 = const (),
            StorageDead(_289),
            StorageDead(_288),
            StorageDead(_285),
            StorageDead(_283),
            StorageDead(_282),
            _100 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
                    scope: scope[65],
                },
                kind: goto -> bb221,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_300),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:542:17: 542:18 (#0),
                    scope: scope[61],
                },
                kind: drop(_265) -> [return: bb236, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_265),
            StorageDead(_264),
            StorageDead(_263),
            StorageDead(_262),
            StorageDead(_261),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:542:17: 542:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb237,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:544:9: 544:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb269, unwind: bb335],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_297),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3895),
                    scope: scope[66],
                },
                kind: drop(_291) -> [return: bb239, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_291),
            StorageDead(_290),
            StorageDead(_289),
            StorageDead(_288),
            StorageDead(_285),
            StorageDead(_283),
            StorageDead(_282),
            StorageDead(_281),
            StorageDead(_279),
            StorageDead(_278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:542:17: 542:18 (#0),
                    scope: scope[61],
                },
                kind: drop(_265) -> [return: bb242, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_275),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:98: 537:99 (#0),
                    scope: scope[61],
                },
                kind: drop(_266) -> [return: bb241, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_266),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[61],
                },
                kind: goto -> bb242,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_265),
            StorageDead(_264),
            StorageDead(_263),
            StorageDead(_262),
            StorageDead(_261),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3893),
                    scope: scope[58],
                },
                kind: drop(_251) -> [return: bb244, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_250),
            StorageDead(_249),
            StorageDead(_248),
            StorageDead(_245),
            StorageDead(_243),
            StorageDead(_242),
            StorageDead(_241),
            StorageDead(_239),
            StorageDead(_238),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:534:17: 534:18 (#0),
                    scope: scope[53],
                },
                kind: drop(_227) -> [return: bb247, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:83: 529:84 (#0),
                    scope: scope[53],
                },
                kind: drop(_228) -> [return: bb246, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[53],
                },
                kind: goto -> bb247,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_227),
            StorageDead(_226),
            StorageDead(_225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3891),
                    scope: scope[50],
                },
                kind: drop(_215) -> [return: bb249, unwind: bb287],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_215),
            StorageDead(_214),
            StorageDead(_213),
            StorageDead(_212),
            StorageDead(_209),
            StorageDead(_207),
            StorageDead(_206),
            StorageDead(_205),
            StorageDead(_203),
            StorageDead(_202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:526:17: 526:18 (#0),
                    scope: scope[45],
                },
                kind: drop(_191) -> [return: bb252, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:86: 521:87 (#0),
                    scope: scope[45],
                },
                kind: drop(_192) -> [return: bb251, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[45],
                },
                kind: goto -> bb252,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_191),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_186),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3889),
                    scope: scope[42],
                },
                kind: drop(_181) -> [return: bb254, unwind: bb294],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_181),
            StorageDead(_180),
            StorageDead(_179),
            StorageDead(_176),
            StorageDead(_174),
            StorageDead(_173),
            StorageDead(_172),
            StorageDead(_170),
            StorageDead(_169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:518:17: 518:18 (#0),
                    scope: scope[37],
                },
                kind: drop(_156) -> [return: bb257, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:97: 513:98 (#0),
                    scope: scope[37],
                },
                kind: drop(_157) -> [return: bb256, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[37],
                },
                kind: goto -> bb257,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
            StorageDead(_154),
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3887),
                    scope: scope[34],
                },
                kind: drop(_143) -> [return: bb259, unwind: bb301],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            StorageDead(_141),
            StorageDead(_138),
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_134),
            StorageDead(_132),
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:510:17: 510:18 (#0),
                    scope: scope[29],
                },
                kind: drop(_120) -> [return: bb262, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:90: 505:91 (#0),
                    scope: scope[29],
                },
                kind: drop(_121) -> [return: bb261, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb262,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3885),
                    scope: scope[26],
                },
                kind: drop(_109) -> [return: bb264, unwind: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_102),
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_97),
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:502:17: 502:18 (#0),
                    scope: scope[21],
                },
                kind: drop(_86) -> [return: bb267, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:85: 497:86 (#0),
                    scope: scope[21],
                },
                kind: drop(_87) -> [return: bb266, unwind: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[21],
                },
                kind: goto -> bb267,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:544:9: 544:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb269, unwind: bb335],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:544:10: 544:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:541:28: 541:29 (#0),
                    scope: scope[62],
                },
                kind: drop(_300) -> [return: bb273, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3895),
                    scope: scope[66],
                },
                kind: drop(_297) -> [return: bb272, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3895),
                    scope: scope[66],
                },
                kind: drop(_291) -> [return: bb273, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:542:17: 542:18 (#0),
                    scope: scope[61],
                },
                kind: drop(_265) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3894),
                    scope: scope[61],
                },
                kind: drop(_275) -> [return: bb275, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:98: 537:99 (#0),
                    scope: scope[61],
                },
                kind: drop(_266) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:537:96: 537:97 (#0),
                    scope: scope[61],
                },
                kind: drop(_267) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:533:27: 533:28 (#0),
                    scope: scope[54],
                },
                kind: drop(_260) -> [return: bb280, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3893),
                    scope: scope[58],
                },
                kind: drop(_257) -> [return: bb279, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3893),
                    scope: scope[58],
                },
                kind: drop(_251) -> [return: bb280, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:534:17: 534:18 (#0),
                    scope: scope[53],
                },
                kind: drop(_227) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3892),
                    scope: scope[53],
                },
                kind: drop(_235) -> [return: bb282, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:83: 529:84 (#0),
                    scope: scope[53],
                },
                kind: drop(_228) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:529:81: 529:82 (#0),
                    scope: scope[53],
                },
                kind: drop(_229) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:525:29: 525:30 (#0),
                    scope: scope[46],
                },
                kind: drop(_224) -> [return: bb287, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3891),
                    scope: scope[50],
                },
                kind: drop(_221) -> [return: bb286, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3891),
                    scope: scope[50],
                },
                kind: drop(_215) -> [return: bb287, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:526:17: 526:18 (#0),
                    scope: scope[45],
                },
                kind: drop(_191) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3890),
                    scope: scope[45],
                },
                kind: drop(_199) -> [return: bb289, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:86: 521:87 (#0),
                    scope: scope[45],
                },
                kind: drop(_192) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:521:84: 521:85 (#0),
                    scope: scope[45],
                },
                kind: drop(_193) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:517:28: 517:29 (#0),
                    scope: scope[38],
                },
                kind: drop(_189) -> [return: bb294, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3889),
                    scope: scope[42],
                },
                kind: drop(_186) -> [return: bb293, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3889),
                    scope: scope[42],
                },
                kind: drop(_181) -> [return: bb294, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:518:17: 518:18 (#0),
                    scope: scope[37],
                },
                kind: drop(_156) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3888),
                    scope: scope[37],
                },
                kind: drop(_166) -> [return: bb296, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:97: 513:98 (#0),
                    scope: scope[37],
                },
                kind: drop(_157) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:513:95: 513:96 (#0),
                    scope: scope[37],
                },
                kind: drop(_158) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:509:28: 509:29 (#0),
                    scope: scope[30],
                },
                kind: drop(_151) -> [return: bb301, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3887),
                    scope: scope[34],
                },
                kind: drop(_148) -> [return: bb300, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3887),
                    scope: scope[34],
                },
                kind: drop(_143) -> [return: bb301, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:510:17: 510:18 (#0),
                    scope: scope[29],
                },
                kind: drop(_120) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3886),
                    scope: scope[29],
                },
                kind: drop(_128) -> [return: bb303, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:90: 505:91 (#0),
                    scope: scope[29],
                },
                kind: drop(_121) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:505:88: 505:89 (#0),
                    scope: scope[29],
                },
                kind: drop(_122) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:501:31: 501:32 (#0),
                    scope: scope[22],
                },
                kind: drop(_117) -> [return: bb308, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3885),
                    scope: scope[26],
                },
                kind: drop(_114) -> [return: bb307, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3885),
                    scope: scope[26],
                },
                kind: drop(_109) -> [return: bb308, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:502:17: 502:18 (#0),
                    scope: scope[21],
                },
                kind: drop(_86) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3884),
                    scope: scope[21],
                },
                kind: drop(_93) -> [return: bb310, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:85: 497:86 (#0),
                    scope: scope[21],
                },
                kind: drop(_87) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:497:83: 497:84 (#0),
                    scope: scope[21],
                },
                kind: drop(_88) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:494:76: 494:77 (#0),
                    scope: scope[20],
                },
                kind: drop(_84) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:492:71: 492:72 (#0),
                    scope: scope[19],
                },
                kind: drop(_76) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:490:96: 490:97 (#0),
                    scope: scope[18],
                },
                kind: drop(_68) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:489:91: 489:92 (#0),
                    scope: scope[17],
                },
                kind: drop(_62) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:488:77: 488:78 (#0),
                    scope: scope[16],
                },
                kind: drop(_57) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:487:60: 487:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_55) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:486:71: 486:72 (#0),
                    scope: scope[15],
                },
                kind: drop(_52) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:485:60: 485:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_50) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:484:70: 484:71 (#0),
                    scope: scope[14],
                },
                kind: drop(_46) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:483:69: 483:70 (#0),
                    scope: scope[13],
                },
                kind: drop(_41) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:482:64: 482:65 (#0),
                    scope: scope[12],
                },
                kind: drop(_38) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:481:62: 481:63 (#0),
                    scope: scope[11],
                },
                kind: drop(_35) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:480:62: 480:63 (#0),
                    scope: scope[10],
                },
                kind: drop(_32) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:479:62: 479:63 (#0),
                    scope: scope[9],
                },
                kind: drop(_29) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:478:62: 478:63 (#0),
                    scope: scope[8],
                },
                kind: drop(_26) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:477:62: 477:63 (#0),
                    scope: scope[7],
                },
                kind: drop(_23) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:476:60: 476:61 (#0),
                    scope: scope[6],
                },
                kind: drop(_20) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:475:62: 475:63 (#0),
                    scope: scope[5],
                },
                kind: drop(_17) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:474:62: 474:63 (#0),
                    scope: scope[4],
                },
                kind: drop(_14) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:473:62: 473:63 (#0),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:472:60: 472:61 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:471:64: 471:65 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb334, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:544:9: 544:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb335, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/ser.rs:466:9: 544:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:466:50: 466:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:466:25: 466:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/ser.rs:466:44: 466:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/ser.rs:466:32: 466:42 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:466:32: 466:42 (#0),
                    },
                ),
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:466:32: 466:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:471:17: 471:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:471:17: 471:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:471:31: 471:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:471:37: 471:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:471:63: 471:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:472:17: 472:31 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:472:29: 472:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:472:35: 472:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:472:59: 472:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:473:17: 473:32 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:473:30: 473:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:473:36: 473:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:473:61: 473:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:474:17: 474:32 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:474:30: 474:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:474:36: 474:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:474:61: 474:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:475:17: 475:32 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:475:30: 475:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:475:36: 475:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:475:61: 475:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:476:17: 476:31 (#0),
                    },
                ),
            ),
        ),
        ty: i8,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:476:29: 476:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:476:35: 476:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: i8,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:476:59: 476:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:477:17: 477:32 (#0),
                    },
                ),
            ),
        ),
        ty: i16,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:477:30: 477:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:477:36: 477:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: i16,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:477:61: 477:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:478:17: 478:32 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:478:30: 478:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:478:36: 478:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:478:61: 478:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:479:17: 479:32 (#0),
                    },
                ),
            ),
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:479:30: 479:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:479:36: 479:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:479:61: 479:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:480:17: 480:32 (#0),
                    },
                ),
            ),
        ),
        ty: f32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:480:30: 480:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:480:36: 480:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: f32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:480:61: 480:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:481:17: 481:32 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:481:30: 481:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:481:36: 481:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:481:61: 481:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:482:17: 482:33 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:482:31: 482:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:482:37: 482:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:482:63: 482:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:483:17: 483:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:483:33: 483:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:483:43: 483:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:483:68: 483:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:483:68: 483:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:483:68: 483:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:484:17: 484:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:484:32: 484:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:484:42: 484:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:484:69: 484:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:484:69: 484:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:484:69: 484:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:485:34: 485:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:486:17: 486:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:486:31: 486:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:486:41: 486:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:486:67: 486:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:486:67: 486:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:487:34: 487:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:488:17: 488:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:488:37: 488:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:488:43: 488:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:488:76: 488:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:489:17: 489:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:38: 489:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:489:17: 489:46 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:41: 489:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:489:17: 489:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:44: 489:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:50: 489:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:84: 489:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:87: 489:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:489:90: 489:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:490:17: 490:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:40: 490:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:490:17: 490:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:43: 490:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:53: 490:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:89: 490:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:92: 490:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:490:92: 490:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:491:17: 491:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:491:41: 491:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:491:17: 491:56 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:491:44: 491:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:491:17: 491:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:491:47: 491:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:491:17: 491:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:491:50: 491:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:21: 492:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:58: 492:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:61: 492:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:64: 492:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:67: 492:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:492:21: 492:72 (#0),
                },
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:492:67: 492:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:494:17: 494:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:494:30: 494:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:494:47: 494:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:470:13: 543:14 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:494:66: 494:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:495:17: 495:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:495:32: 495:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3884),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:497:25: 497:34 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:497:25: 497:34 (#0),
            scope: scope[21],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:497:42: 497:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:497:42: 497:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:497:69: 497:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:497:69: 497:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                serde/src/private/ser.rs:497:42: 497:84 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3884),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3884),
            scope: scope[21],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                serde/src/private/ser.rs:497:42: 497:84 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3884),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3884),
            scope: scope[21],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                serde/src/private/ser.rs:498:30: 498:38 (#4043),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:466:9: 544:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:30: 498:38 (#4043),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:21: 500:22 (#4042),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _102,
                                ),
                                serde/src/private/ser.rs:498:30: 498:38 (#4043),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:498:25: 498:26 (#4044),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:498:25: 498:26 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3885),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:499:30: 499:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:499:30: 499:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:499:54: 499:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3885),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _109,
                                ),
                                serde/src/private/ser.rs:499:30: 499:56 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3885),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3885),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _109,
                                ),
                                serde/src/private/ser.rs:499:30: 499:56 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3885),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3885),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3885),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3885),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:501:21: 501:32 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:501:21: 501:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:503:17: 503:52 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:503:38: 503:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:503:17: 503:52 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:503:41: 503:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3886),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:505:25: 505:31 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1977 ~ serde[cd55]::ser::Serializer::SerializeTupleStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:25: 505:31 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1977 ~ serde[cd55]::ser::Serializer::SerializeTupleStruct) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:39: 505:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:39: 505:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:73: 505:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:76: 505:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:505:76: 505:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _121,
                                ),
                                serde/src/private/ser.rs:505:39: 505:89 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3886),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1977 ~ serde[cd55]::ser::Serializer::SerializeTupleStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3886),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _121,
                                ),
                                serde/src/private/ser.rs:505:39: 505:89 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3886),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3886),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _132,
                                ),
                                serde/src/private/ser.rs:506:30: 506:36 (#4046),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:30: 506:36 (#4046),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:21: 508:22 (#4045),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _136,
                                ),
                                serde/src/private/ser.rs:506:30: 506:36 (#4046),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:506:25: 506:26 (#4047),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:506:25: 506:26 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:507:30: 507:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1977 ~ serde[cd55]::ser::Serializer::SerializeTupleStruct) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:507:30: 507:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:507:49: 507:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _143,
                                ),
                                serde/src/private/ser.rs:507:30: 507:51 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3887),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3887),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _143,
                                ),
                                serde/src/private/ser.rs:507:30: 507:51 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3887),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3887),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:509:21: 509:29 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1977 ~ serde[cd55]::ser::Serializer::SerializeTupleStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:509:21: 509:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:511:17: 511:59 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:511:39: 511:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:511:17: 511:59 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:511:42: 511:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:511:17: 511:59 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:511:45: 511:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:511:17: 511:59 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:511:48: 511:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3888),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:513:25: 513:31 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1978 ~ serde[cd55]::ser::Serializer::SerializeTupleVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:25: 513:31 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1978 ~ serde[cd55]::ser::Serializer::SerializeTupleVariant) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:39: 513:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:39: 513:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:74: 513:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:77: 513:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:80: 513:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:83: 513:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:513:83: 513:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _157,
                                ),
                                serde/src/private/ser.rs:513:39: 513:96 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3888),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1978 ~ serde[cd55]::ser::Serializer::SerializeTupleVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3888),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _157,
                                ),
                                serde/src/private/ser.rs:513:39: 513:96 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3888),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3888),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<__private::ser::content::Content, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _170,
                                ),
                                serde/src/private/ser.rs:514:30: 514:36 (#4049),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, __private::ser::content::Content>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:30: 514:36 (#4049),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:21: 516:22 (#4048),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _174,
                                ),
                                serde/src/private/ser.rs:514:30: 514:36 (#4049),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:514:25: 514:26 (#4050),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:514:25: 514:26 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3889),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:515:30: 515:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1978 ~ serde[cd55]::ser::Serializer::SerializeTupleVariant) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:515:30: 515:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:515:49: 515:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3889),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _181,
                                ),
                                serde/src/private/ser.rs:515:30: 515:51 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3889),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3889),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _181,
                                ),
                                serde/src/private/ser.rs:515:30: 515:51 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3889),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3889),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3889),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3889),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:517:21: 517:29 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1978 ~ serde[cd55]::ser::Serializer::SerializeTupleVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:517:21: 517:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:519:17: 519:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<(__private::ser::content::Content, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:519:30: 519:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3890),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:521:25: 521:32 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:25: 521:32 (#0),
            scope: scope[45],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:40: 521:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:40: 521:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:65: 521:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:70: 521:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(__private::ser::content::Content, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:521:70: 521:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                serde/src/private/ser.rs:521:40: 521:85 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3890),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3890),
            scope: scope[45],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                serde/src/private/ser.rs:521:40: 521:85 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3890),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3890),
            scope: scope[45],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (__private::ser::content::Content, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(__private::ser::content::Content, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _203,
                                ),
                                serde/src/private/ser.rs:522:35: 522:42 (#4052),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, (__private::ser::content::Content, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[46],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (__private::ser::content::Content, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (__private::ser::content::Content, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (__private::ser::content::Content, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:35: 522:42 (#4052),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:21: 524:22 (#4051),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _207,
                                ),
                                serde/src/private/ser.rs:522:35: 522:42 (#4052),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:522:25: 522:31 (#4053),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:26: 522:27 (#0),
            scope: scope[49],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _207,
                                ),
                                serde/src/private/ser.rs:522:35: 522:42 (#4052),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:522:25: 522:31 (#4053),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:522:29: 522:30 (#0),
            scope: scope[49],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3891),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:523:30: 523:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:523:30: 523:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:523:50: 523:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:523:53: 523:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3891),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _215,
                                ),
                                serde/src/private/ser.rs:523:30: 523:55 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3891),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3891),
            scope: scope[50],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _215,
                                ),
                                serde/src/private/ser.rs:523:30: 523:55 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3891),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3891),
            scope: scope[50],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3891),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3891),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:525:21: 525:30 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1979 ~ serde[cd55]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:525:21: 525:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:527:17: 527:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:527:33: 527:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:527:17: 527:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:527:36: 527:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3892),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:529:25: 529:30 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1980 ~ serde[cd55]::ser::Serializer::SerializeStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:25: 529:30 (#0),
            scope: scope[53],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1980 ~ serde[cd55]::ser::Serializer::SerializeStruct) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:38: 529:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:38: 529:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:66: 529:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:69: 529:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:529:69: 529:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _228,
                                ),
                                serde/src/private/ser.rs:529:38: 529:82 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3892),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1980 ~ serde[cd55]::ser::Serializer::SerializeStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3892),
            scope: scope[53],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _228,
                                ),
                                serde/src/private/ser.rs:529:38: 529:82 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3892),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3892),
            scope: scope[53],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _239,
                                ),
                                serde/src/private/ser.rs:530:40: 530:46 (#4055),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[54],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:40: 530:46 (#4055),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:21: 532:22 (#4054),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _243,
                                ),
                                serde/src/private/ser.rs:530:40: 530:46 (#4055),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:530:25: 530:36 (#4056),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:27: 530:28 (#0),
            scope: scope[57],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _243,
                                ),
                                serde/src/private/ser.rs:530:40: 530:46 (#4055),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:530:25: 530:36 (#4056),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:530:30: 530:35 (#0),
            scope: scope[57],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3893),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:531:30: 531:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1980 ~ serde[cd55]::ser::Serializer::SerializeStruct) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:531:30: 531:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:531:48: 531:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:531:51: 531:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3893),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _251,
                                ),
                                serde/src/private/ser.rs:531:30: 531:53 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3893),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3893),
            scope: scope[58],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _251,
                                ),
                                serde/src/private/ser.rs:531:30: 531:53 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3893),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3893),
            scope: scope[58],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3893),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3893),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:533:21: 533:28 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1980 ~ serde[cd55]::ser::Serializer::SerializeStruct),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:533:21: 533:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:535:17: 535:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:535:40: 535:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:535:17: 535:60 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:535:43: 535:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:535:17: 535:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:535:46: 535:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                serde/src/private/ser.rs:470:19: 470:24 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:535:17: 535:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:535:49: 535:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3894),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:537:25: 537:31 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1981 ~ serde[cd55]::ser::Serializer::SerializeStructVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:25: 537:31 (#0),
            scope: scope[61],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1981 ~ serde[cd55]::ser::Serializer::SerializeStructVariant) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:39: 537:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:39: 537:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:75: 537:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:78: 537:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:81: 537:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:84: 537:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:537:84: 537:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3894),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _266,
                                ),
                                serde/src/private/ser.rs:537:39: 537:97 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3894),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1981 ~ serde[cd55]::ser::Serializer::SerializeStructVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3894),
            scope: scope[61],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _266,
                                ),
                                serde/src/private/ser.rs:537:39: 537:97 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3894),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3894),
            scope: scope[61],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3894),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3894),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(&'{erased} str, __private::ser::content::Content), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _279,
                                ),
                                serde/src/private/ser.rs:538:40: 538:46 (#4058),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[62],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, (&'{erased} str, __private::ser::content::Content)>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:40: 538:46 (#4058),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:21: 540:22 (#4057),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _283,
                                ),
                                serde/src/private/ser.rs:538:40: 538:46 (#4058),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:538:25: 538:36 (#4059),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:27: 538:28 (#0),
            scope: scope[65],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _283,
                                ),
                                serde/src/private/ser.rs:538:40: 538:46 (#4058),
                            ),
                        ),
                        pat_span: serde/src/private/ser.rs:538:25: 538:36 (#4059),
                    },
                ),
            ),
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:538:30: 538:35 (#0),
            scope: scope[65],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3895),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:539:30: 539:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(0:1981 ~ serde[cd55]::ser::Serializer::SerializeStructVariant) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:539:30: 539:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:539:49: 539:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} __private::ser::content::Content,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:539:52: 539:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3895),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _291,
                                ),
                                serde/src/private/ser.rs:539:30: 539:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3895),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3895),
            scope: scope[66],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _291,
                                ),
                                serde/src/private/ser.rs:539:30: 539:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3895),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3895),
            scope: scope[66],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3895),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3895),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/ser.rs:541:21: 541:29 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(0:1981 ~ serde[cd55]::ser::Serializer::SerializeStructVariant),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/ser.rs:541:21: 541:23 (#0),
            scope: scope[0],
        },
    },
]