[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:40: 155:72 (#3348),
                    scope: scope[0],
                },
                kind: _4 = <S as ser::Serializer>::serialize_tuple(move _5, const 9_usize) -> [return: bb1, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3365),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:40: 155:72 (#3348),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3365),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_10),
            _10 = move _8,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3365),
                    scope: scope[3],
                },
                kind: drop(_10) -> [return: bb7, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_4 as Ok).0: <S as ser::Serializer>::SerializeTuple),
            _3 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3365),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb6, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:73: 155:74 (#3348),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3365),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb28, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                    scope: scope[1],
                },
                kind: _12 = <&[T; 9] as std::iter::IntoIterator>::into_iter(move _13) -> [return: bb9, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
                    scope: scope[4],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _14,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                    scope: scope[4],
                },
                kind: _17 = <std::slice::Iter<'_, T> as std::iter::Iterator>::next(move _18) -> [return: bb12, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                    scope: scope[4],
                },
                kind: switchInt(move _20) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_17 as Some).0: &T),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _3,
            StorageLive(_26),
            _26 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:157:30: 157:54 (#3348),
                    scope: scope[5],
                },
                kind: _24 = <<S as ser::Serializer>::SerializeTuple as ser::SerializeTuple>::serialize_element::<T>(move _25, move _26) -> [return: bb17, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_32),
            _32 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:159:21: 159:30 (#3348),
                    scope: scope[1],
                },
                kind: _0 = <<S as ser::Serializer>::SerializeTuple as ser::SerializeTuple>::end(move _32) -> [return: bb24, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            PlaceMention(_24),
            _27 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3366),
                    scope: scope[5],
                },
                kind: switchInt(move _27) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:157:30: 157:54 (#3348),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3366),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_24 as Err).0: <S as ser::Serializer>::Error),
            StorageLive(_31),
            _31 = move _29,
            _0 = std::result::Result::<<S as ser::Serializer>::Ok, <S as ser::Serializer>::Error>::Err(move _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3366),
                    scope: scope[7],
                },
                kind: drop(_31) -> [return: bb22, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_24 as Ok).0: ()),
            _23 = _28,
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3366),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3366),
                    scope: scope[5],
                },
                kind: drop(_29) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            _16 = const (),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
                    scope: scope[4],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb25, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3366),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb27, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb30, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:73: 155:74 (#3348),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb29, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:18: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:159:29: 159:30 (#3348),
                    scope: scope[1],
                },
                kind: drop(_32) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3366),
                    scope: scope[5],
                },
                kind: drop(_29) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:300:9: 300:10 (#3366),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3365),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:73: 155:74 (#3348),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:155:71: 155:72 (#3348),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:160:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impls.rs:151:17: 160:18 (#3348),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1973 ~ serde[cd55]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:151:58: 151:81 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} [T/#0; 9_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:151:33: 151:38 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impls.rs:151:52: 151:53 (#3348),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impls.rs:151:40: 151:50 (#3348),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:151:40: 151:50 (#3348),
                    },
                ),
            ),
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:151:40: 151:50 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3365),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:155:25: 155:32 (#3348),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:155:25: 155:32 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple) }), Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:155:40: 155:72 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:155:40: 155:50 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde/src/ser/impls.rs:155:40: 155:72 (#3348),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3365),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                serde/src/ser/impls.rs:155:40: 155:72 (#3348),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3365),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0; 9_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                    },
                ),
            ),
        ),
        ty: std::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:151:17: 160:18 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:30: 156:34 (#4607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:21: 158:22 (#4606),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                serde/src/ser/impls.rs:156:30: 156:34 (#4607),
                            ),
                        ),
                        pat_span: serde/src/ser/impls.rs:156:25: 156:26 (#4608),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:156:25: 156:26 (#3348),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:297:9: 300:10 (#3366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:157:30: 157:54 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple) }),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:157:30: 157:33 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:157:52: 157:53 (#3348),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                serde/src/ser/impls.rs:157:30: 157:54 (#3348),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3366),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3366),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                serde/src/ser/impls.rs:157:30: 157:54 (#3348),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3366),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3366),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1974 ~ serde[cd55]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impls.rs:159:21: 159:30 (#3348),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(0:1976 ~ serde[cd55]::ser::Serializer::SerializeTuple),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impls.rs:159:21: 159:24 (#3348),
            scope: scope[0],
        },
    },
]