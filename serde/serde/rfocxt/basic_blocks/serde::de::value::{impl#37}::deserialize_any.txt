[
    BasicBlockData {
        statements: [
            PlaceMention((_1.0: std::borrow::Cow<'_, str>)),
            _3 = discriminant((_1.0: std::borrow::Cow<'_, str>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:803:9: 803:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (_1.0: std::borrow::Cow<'_, str>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:803:15: 803:25 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:804:13: 804:34 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move (((_1.0: std::borrow::Cow<'_, str>) as Owned).0: std::string::String),
            StorageLive(_8),
            _8 = move _2,
            StorageLive(_9),
            _9 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:35: 805:63 (#0),
                    scope: scope[2],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_string::<E>(move _8, move _9) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = (((_1.0: std::borrow::Cow<'_, str>) as Borrowed).0: &str),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            _6 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:804:38: 804:63 (#0),
                    scope: scope[1],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_str::<E>(move _5, move _6) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:804:62: 804:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:62: 805:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:62: 805:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:807:5: 807:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:807:5: 807:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:807:6: 807:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:62: 805:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:62: 805:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:805:62: 805:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:804:62: 804:63 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:807:5: 807:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:807:5: 807:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/value.rs:799:5: 807:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:799:48: 799:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::value::CowStrDeserializer<'{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:799:27: 799:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/value.rs:799:42: 799:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/value.rs:799:33: 799:40 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:799:33: 799:40 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:799:33: 799:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:804:13: 804:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: std::borrow::Cow<'_, str>),
                                ),
                                serde/src/de/value.rs:803:15: 803:25 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:804:13: 804:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:804:27: 804:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:803:9: 806:10 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:804:38: 804:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:803:9: 806:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:804:56: 804:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: std::borrow::Cow<'_, str>),
                                ),
                                serde/src/de/value.rs:803:15: 803:25 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/value.rs:805:13: 805:31 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:805:24: 805:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:803:9: 806:10 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:805:35: 805:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/value.rs:803:9: 806:10 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/value.rs:805:56: 805:62 (#0),
            scope: scope[0],
        },
    },
]