[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move _4,
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*(_1.0: &mut std::vec::Vec<std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2577:19: 2577:36 (#0),
                    scope: scope[0],
                },
                kind: _9 = <std::vec::Vec<std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>> as std::ops::DerefMut>::deref_mut(move _10) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2577:19: 2577:36 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::slice::<impl [std::option::Option<(__private::de::content::Content<'_>, __private::de::content::Content<'_>)>]>::iter_mut(move _8) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_11),
            _11 = std::option::Option::<__private::de::content::Content<'_>>::None,
            StorageLive(_12),
            _12 = _3,
            StorageLive(_13),
            _13 = std::marker::PhantomData::<E>,
            _6 = __private::de::FlatStructAccess::<'_, '_, E> { iter: move _7, pending_content: move _11, fields: move _12, _marker: move _13 },
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2581:9: 2581:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as de::Visitor<'_>>::visit_map::<__private::de::FlatStructAccess<'_, '_, E>>(move _5, move _6) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2582:5: 2582:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2582:6: 2582:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2581:10: 2581:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2581:10: 2581:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2582:5: 2582:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/private/de.rs:2567:5: 2582:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(0:1533 ~ serde[cd55]::de::Visitor::Value) }), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2572:10: 2572:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: __private::de::FlatMapDeserializer<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2568:9: 2568:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2569:9: 2569:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2570:17: 2570:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2570:9: 2570:15 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2570:9: 2570:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2570:9: 2570:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/private/de.rs:2571:18: 2571:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/private/de.rs:2571:9: 2571:16 (#0),
                            ),
                        ),
                        pat_span: serde/src/private/de.rs:2571:9: 2571:16 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2571:9: 2571:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2576:9: 2576:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                },
            ),
        ),
        ty: __private::de::FlatStructAccess<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2576:27: 2581:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::slice::IterMut<'{erased}, std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2577:19: 2577:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2577:19: 2577:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2577:19: 2577:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/private/de.rs:2576:9: 2581:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<std::option::Option<(__private::de::content::Content<'{erased}>, __private::de::content::Content<'{erased}>)>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2577:19: 2577:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<__private::de::content::Content<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2578:30: 2578:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2579:13: 2579:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/private/de.rs:2580:22: 2580:33 (#0),
            scope: scope[0],
        },
    },
]