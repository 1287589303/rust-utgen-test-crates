[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            StorageLive(_3),
            StorageLive(_4),
            _4 = std::marker::PhantomData::<std::collections::Bound<T>>,
            _3 = de::impls::<impl de::Deserialize<'de> for std::collections::Bound<T>>::deserialize::BoundVisitor::<T>(move _4),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2972:9: 2972:84 (#0),
                    scope: scope[0],
                },
                kind: _0 = <D as de::Deserializer<'_>>::deserialize_enum::<de::impls::<impl de::Deserialize<'de> for std::collections::Bound<T>>::deserialize::BoundVisitor<T>>(move _2, const "Bound", const de::impls::<impl de::Deserialize<'de> for std::collections::Bound<T>>::deserialize::VARIANTS, move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2973:5: 2973:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2973:6: 2973:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2972:83: 2972:84 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2973:5: 2973:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2875:5: 2973:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::collections::Bound<T/#1>, Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2875:43: 2875:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:2875:37: 2875:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:2875:23: 2875:35 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2875:23: 2875:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2875:23: 2875:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2972:9: 2972:84 (#0),
                },
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2972:9: 2972:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:2972:9: 2972:84 (#0),
                },
            ),
        ),
        ty: de::impls::<impl de::Deserialize<'de> for std::collections::Bound<T>>::deserialize::BoundVisitor<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2972:58: 2972:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<std::collections::Bound<T/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2972:71: 2972:82 (#0),
            scope: scope[0],
        },
    },
]