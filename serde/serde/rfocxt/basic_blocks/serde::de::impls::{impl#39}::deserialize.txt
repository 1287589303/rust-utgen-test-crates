[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            StorageLive(_6),
            _6 = std::marker::PhantomData::<Idx>,
            _5 = de::impls::range_to::RangeToVisitor::<Idx> { expecting: const "struct RangeTo", phantom: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2748:24: 2755:10 (#0),
                    scope: scope[0],
                },
                kind: _3 = <D as de::Deserializer<'_>>::deserialize_struct::<de::impls::range_to::RangeToVisitor<Idx>>(move _4, const "RangeTo", const de::impls::range_to::FIELDS, move _5) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _7 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:297:9: 297:9 (#3271),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2748:24: 2755:10 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:13: 298:20 (#3271),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_3 as Err).0: <D as de::Deserializer<'_>>::Error),
            StorageLive(_11),
            _11 = move _9,
            _0 = std::result::Result::<std::ops::RangeTo<Idx>, <D as de::Deserializer<'_>>::Error>::Err(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3271),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb7, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_3 as Ok).0: Idx),
            _2 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:298:26: 298:27 (#3271),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2755:11: 2755:12 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3271),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _2,
            _12 = std::ops::RangeTo::<Idx> { end: move _13 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2756:16: 2756:17 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _0 = std::result::Result::<std::ops::RangeTo<Idx>, <D as de::Deserializer<'_>>::Error>::Ok(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2756:17: 2756:18 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2755:11: 2755:12 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:6: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2756:17: 2756:18 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/lib.rs:299:39: 299:40 (#3271),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2755:11: 2755:12 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2755:9: 2755:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2757:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:2744:5: 2757:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::ops::RangeTo<Idx/#1>, Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2744:43: 2744:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:2744:37: 2744:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:2744:23: 2744:35 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2744:23: 2744:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2744:23: 2744:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/lib.rs:297:9: 300:10 (#3271),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:2748:13: 2748:16 (#0),
                    },
                ),
            ),
        ),
        ty: Idx/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2748:13: 2748:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Idx/#1, Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2748:24: 2755:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2748:24: 2748:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::impls::range_to::RangeToVisitor<Idx/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2751:13: 2754:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::marker::PhantomData<Idx/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2753:26: 2753:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:13: 298:20 (#3271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/impls.rs:2748:24: 2755:10 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:298:13: 298:20 (#3271),
                    },
                ),
            ),
        ),
        ty: Idx/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:298:16: 298:19 (#3271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                serde/src/de/impls.rs:2748:24: 2755:10 (#0),
                            ),
                        ),
                        pat_span: serde/src/lib.rs:299:13: 299:21 (#3271),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    D/#2,
                    '{erased},
                ],
                def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:17: 299:20 (#3271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:25: 299:40 (#3271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    D/#2,
                    '{erased},
                ],
                def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/lib.rs:299:36: 299:39 (#3271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::ops::RangeTo<Idx/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2756:12: 2756:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Idx/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:2756:14: 2756:17 (#0),
            scope: scope[0],
        },
    },
]