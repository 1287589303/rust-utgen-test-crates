[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            StorageLive(_3),
            PlaceMention(((*_1).0: ser::impossible::Void)),
            FakeRead(ForMatchedPlace(None), ((*_1).0: ser::impossible::Void)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/ser/impossible.rs:100:15: 100:24 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Error/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:95:54: 95:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ser::impossible::Impossible<Ok/#0, Error/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:95:29: 95:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/ser/impossible.rs:95:47: 95:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/ser/impossible.rs:95:40: 95:45 (#0),
                            ),
                        ),
                        pat_span: serde/src/ser/impossible.rs:95:40: 95:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:95:40: 95:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/ser/impossible.rs:100:9: 100:27 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/ser/impossible.rs:100:9: 100:27 (#0),
            scope: scope[0],
        },
    },
]