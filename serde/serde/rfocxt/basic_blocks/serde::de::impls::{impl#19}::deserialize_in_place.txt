[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _1,
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_2),
            _4 = de::impls::<impl de::Deserialize<'de> for std::vec::Vec<T>>::deserialize_in_place::VecInPlaceVisitor::<'_, T>(move _5),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1223:9: 1223:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = <D as de::Deserializer<'_>>::deserialize_seq::<de::impls::<impl de::Deserialize<'de> for std::vec::Vec<T>>::deserialize_in_place::VecInPlaceVisitor<'_, T>>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1224:5: 1224:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1224:6: 1224:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1223:62: 1223:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1224:5: 1224:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: serde/src/de/impls.rs:1179:5: 1224:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [D/#2, '{erased}], def_id: DefId(0:1465 ~ serde[cd55]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1179:70: 1179:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:1179:46: 1179:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1179:32: 1179:44 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1179:32: 1179:44 (#0),
                    },
                ),
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1179:32: 1179:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            serde/src/de/impls.rs:1179:56: 1179:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                serde/src/de/impls.rs:1179:49: 1179:54 (#0),
                            ),
                        ),
                        pat_span: serde/src/de/impls.rs:1179:49: 1179:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<T/#1, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1179:49: 1179:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1223:9: 1223:63 (#0),
                },
            ),
        ),
        ty: D/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1223:9: 1223:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: serde/src/de/impls.rs:1223:9: 1223:63 (#0),
                },
            ),
        ),
        ty: de::impls::<impl de::Deserialize<'de> for std::vec::Vec<T>>::deserialize_in_place::VecInPlaceVisitor<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1223:38: 1223:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut std::vec::Vec<T/#1, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: serde/src/de/impls.rs:1223:56: 1223:61 (#0),
            scope: scope[0],
        },
    },
]