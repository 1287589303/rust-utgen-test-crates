bb0
  0: StorageLive(_3)
    SourceInfo(serde/src/ser/impls.rs:739:12-739:42)
  1: StorageLive(_4)
    SourceInfo(serde/src/ser/impls.rs:739:12-739:22)
  2: _4 = &_2
    SourceInfo(serde/src/ser/impls.rs:739:12-739:22)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:739:12-739:42)
      kind: _3 = <S as ser::Serializer>::is_human_readable(move _4) -> [return: bb1, unwind: bb22]
  }
  preds []
  succs [bb1, bb22]

bb1
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:739:12-739:42)
      kind: switchInt(move _3) -> [0: bb9, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:739:41-739:42)
  1: PlaceMention((*_1))
    SourceInfo(serde/src/ser/impls.rs:740:19-740:24)
  2: _5 = discriminant((*_1))
    SourceInfo(serde/src/ser/impls.rs:740:19-740:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:740:13-740:24)
      kind: switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(serde/src/ser/impls.rs:740:19-740:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:740:19-740:24)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:741:17-741:39)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_9)
    SourceInfo(serde/src/ser/impls.rs:742:33-742:38)
  1: _9 = &(((*_1) as V6).0: std::net::Ipv6Addr)
    SourceInfo(serde/src/ser/impls.rs:742:33-742:38)
  2: StorageLive(_10)
    SourceInfo(serde/src/ser/impls.rs:742:43-742:44)
  3: _10 = &(*_9)
    SourceInfo(serde/src/ser/impls.rs:742:43-742:44)
  4: StorageLive(_11)
    SourceInfo(serde/src/ser/impls.rs:742:55-742:65)
  5: _11 = move _2
    SourceInfo(serde/src/ser/impls.rs:742:55-742:65)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:742:43-742:66)
      kind: _0 = <std::net::Ipv6Addr as ser::Serialize>::serialize::<S>(move _10, move _11) -> [return: bb8, unwind: bb20]
  }
  preds [bb2, bb4]
  succs [bb8, bb20]

bb6
  0: StorageLive(_6)
    SourceInfo(serde/src/ser/impls.rs:741:33-741:38)
  1: _6 = &(((*_1) as V4).0: std::net::Ipv4Addr)
    SourceInfo(serde/src/ser/impls.rs:741:33-741:38)
  2: StorageLive(_7)
    SourceInfo(serde/src/ser/impls.rs:741:43-741:44)
  3: _7 = &(*_6)
    SourceInfo(serde/src/ser/impls.rs:741:43-741:44)
  4: StorageLive(_8)
    SourceInfo(serde/src/ser/impls.rs:741:55-741:65)
  5: _8 = move _2
    SourceInfo(serde/src/ser/impls.rs:741:55-741:65)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:741:43-741:66)
      kind: _0 = <std::net::Ipv4Addr as ser::Serialize>::serialize::<S>(move _7, move _8) -> [return: bb7, unwind: bb21]
  }
  preds [bb4]
  succs [bb7, bb21]

bb7
  0: StorageDead(_8)
    SourceInfo(serde/src/ser/impls.rs:741:65-741:66)
  1: StorageDead(_7)
    SourceInfo(serde/src/ser/impls.rs:741:65-741:66)
  2: StorageDead(_6)
    SourceInfo(serde/src/ser/impls.rs:741:65-741:66)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:741:65-741:66)
      kind: goto -> bb16
  }
  preds [bb6]
  succs [bb16]

bb8
  0: StorageDead(_11)
    SourceInfo(serde/src/ser/impls.rs:742:65-742:66)
  1: StorageDead(_10)
    SourceInfo(serde/src/ser/impls.rs:742:65-742:66)
  2: StorageDead(_9)
    SourceInfo(serde/src/ser/impls.rs:742:65-742:66)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:742:65-742:66)
      kind: goto -> bb16
  }
  preds [bb5]
  succs [bb16]

bb9
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:739:41-739:42)
  1: PlaceMention((*_1))
    SourceInfo(serde/src/ser/impls.rs:745:19-745:24)
  2: _12 = discriminant((*_1))
    SourceInfo(serde/src/ser/impls.rs:745:19-745:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:745:13-745:24)
      kind: switchInt(move _12) -> [0: bb11, 1: bb12, otherwise: bb10]
  }
  preds [bb1]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(serde/src/ser/impls.rs:745:19-745:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:745:19-745:24)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:746:17-746:39)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_16)
    SourceInfo(serde/src/ser/impls.rs:749:33-749:38)
  1: _16 = &(((*_1) as V6).0: std::net::Ipv6Addr)
    SourceInfo(serde/src/ser/impls.rs:749:33-749:38)
  2: StorageLive(_17)
    SourceInfo(serde/src/ser/impls.rs:750:21-750:31)
  3: _17 = move _2
    SourceInfo(serde/src/ser/impls.rs:750:21-750:31)
  4: StorageLive(_18)
    SourceInfo(serde/src/ser/impls.rs:750:77-750:78)
  5: _18 = &(*_16)
    SourceInfo(serde/src/ser/impls.rs:750:77-750:78)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:750:21-750:79)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::Ipv6Addr>(move _17, const "IpAddr", const 1_u32, const "V6", move _18) -> [return: bb15, unwind: bb18]
  }
  preds [bb9, bb11]
  succs [bb15, bb18]

bb13
  0: StorageLive(_13)
    SourceInfo(serde/src/ser/impls.rs:746:33-746:38)
  1: _13 = &(((*_1) as V4).0: std::net::Ipv4Addr)
    SourceInfo(serde/src/ser/impls.rs:746:33-746:38)
  2: StorageLive(_14)
    SourceInfo(serde/src/ser/impls.rs:747:21-747:31)
  3: _14 = move _2
    SourceInfo(serde/src/ser/impls.rs:747:21-747:31)
  4: StorageLive(_15)
    SourceInfo(serde/src/ser/impls.rs:747:77-747:78)
  5: _15 = &(*_13)
    SourceInfo(serde/src/ser/impls.rs:747:77-747:78)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:747:21-747:79)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::Ipv4Addr>(move _14, const "IpAddr", const 0_u32, const "V4", move _15) -> [return: bb14, unwind: bb19]
  }
  preds [bb11]
  succs [bb14, bb19]

bb14
  0: StorageDead(_15)
    SourceInfo(serde/src/ser/impls.rs:747:78-747:79)
  1: StorageDead(_14)
    SourceInfo(serde/src/ser/impls.rs:747:78-747:79)
  2: StorageDead(_13)
    SourceInfo(serde/src/ser/impls.rs:748:17-748:18)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:748:17-748:18)
      kind: goto -> bb16
  }
  preds [bb13]
  succs [bb16]

bb15
  0: StorageDead(_18)
    SourceInfo(serde/src/ser/impls.rs:750:78-750:79)
  1: StorageDead(_17)
    SourceInfo(serde/src/ser/impls.rs:750:78-750:79)
  2: StorageDead(_16)
    SourceInfo(serde/src/ser/impls.rs:751:17-751:18)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:751:17-751:18)
      kind: goto -> bb16
  }
  preds [bb12]
  succs [bb16]

bb16
  0: StorageDead(_3)
    SourceInfo(serde/src/ser/impls.rs:753:9-753:10)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:754:5-754:6)
      kind: drop(_2) -> [return: bb17, unwind: bb23]
  }
  preds [bb7, bb8, bb14, bb15]
  succs [bb17, bb23]

bb17
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:754:6-754:6)
      kind: return
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:750:78-750:79)
      kind: drop(_17) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb22]

bb19
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:747:78-747:79)
      kind: drop(_14) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb22]

bb20
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:742:65-742:66)
      kind: drop(_11) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb22]

bb21
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:741:65-741:66)
      kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:754:5-754:6)
      kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb0, bb18, bb19, bb20, bb21]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:735:5-754:6)
      kind: resume
  }
  preds [bb16, bb22]
  succs []

