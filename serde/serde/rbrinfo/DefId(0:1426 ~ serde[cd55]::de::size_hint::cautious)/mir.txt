bb0
  0: StorageLive(_2)
    SourceInfo(serde/src/de/size_hint.rs:15:8-15:38)
  1: StorageLive(_3)
    SourceInfo(serde/src/de/size_hint.rs:15:8-15:33)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:15:8-15:33)
      kind: _3 = std::mem::size_of::<Element>() -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: _2 = Eq(move _3, const 0_usize)
    SourceInfo(serde/src/de/size_hint.rs:15:8-15:38)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:15:8-15:38)
      kind: switchInt(move _2) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(serde/src/de/size_hint.rs:15:37-15:38)
  1: _0 = const 0_usize
    SourceInfo(serde/src/de/size_hint.rs:16:9-16:10)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:15:5-22:6)
      kind: goto -> bb8
  }
  preds [bb1]
  succs [bb8]

bb3
  0: StorageDead(_3)
    SourceInfo(serde/src/de/size_hint.rs:15:37-15:38)
  1: StorageLive(_4)
    SourceInfo(serde/src/de/size_hint.rs:19:13-19:30)
  2: StorageLive(_5)
    SourceInfo(serde/src/de/size_hint.rs:19:13-19:17)
  3: _5 = _1
    SourceInfo(serde/src/de/size_hint.rs:19:13-19:17)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:19:13-19:30)
      kind: _4 = std::option::Option::<usize>::unwrap_or(move _5, const 0_usize) -> [return: bb4, unwind: bb9]
  }
  preds [bb1]
  succs [bb4, bb9]

bb4
  0: StorageDead(_5)
    SourceInfo(serde/src/de/size_hint.rs:19:29-19:30)
  1: StorageLive(_6)
    SourceInfo(serde/src/de/size_hint.rs:20:13-20:59)
  2: StorageLive(_7)
    SourceInfo(serde/src/de/size_hint.rs:20:34-20:59)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:20:34-20:59)
      kind: _7 = std::mem::size_of::<Element>() -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _8 = Eq(_7, const 0_usize)
    SourceInfo(serde/src/de/size_hint.rs:20:13-20:59)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:20:13-20:59)
      kind: assert(!move _8, "attempt to divide `{}` by zero", const de::size_hint::cautious::MAX_PREALLOC_BYTES) -> [success: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _6 = Div(const de::size_hint::cautious::MAX_PREALLOC_BYTES, move _7)
    SourceInfo(serde/src/de/size_hint.rs:20:13-20:59)
  1: StorageDead(_7)
    SourceInfo(serde/src/de/size_hint.rs:20:58-20:59)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:18:9-21:10)
      kind: _0 = std::cmp::min::<usize>(move _4, move _6) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_6)
    SourceInfo(serde/src/de/size_hint.rs:21:9-21:10)
  1: StorageDead(_4)
    SourceInfo(serde/src/de/size_hint.rs:21:9-21:10)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:15:5-22:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: StorageDead(_2)
    SourceInfo(serde/src/de/size_hint.rs:22:5-22:6)
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:23:2-23:2)
      kind: return
  }
  preds [bb2, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(serde/src/de/size_hint.rs:12:1-23:2)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6]
  succs []

