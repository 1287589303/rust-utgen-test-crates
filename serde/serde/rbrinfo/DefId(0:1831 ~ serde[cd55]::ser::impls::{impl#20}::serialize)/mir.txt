bb0
  0: PlaceMention((*_1))
    SourceInfo(serde/src/ser/impls.rs:672:15-672:20)
  1: _3 = discriminant((*_1))
    SourceInfo(serde/src/ser/impls.rs:672:15-672:20)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:672:9-672:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(serde/src/ser/impls.rs:672:15-672:20)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:672:15-672:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:673:13-673:34)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_7)
    SourceInfo(serde/src/ser/impls.rs:674:25-674:34)
  1: _7 = &(((*_1) as Err).0: E)
    SourceInfo(serde/src/ser/impls.rs:674:25-674:34)
  2: StorageLive(_8)
    SourceInfo(serde/src/ser/impls.rs:675:17-675:27)
  3: _8 = move _2
    SourceInfo(serde/src/ser/impls.rs:675:17-675:27)
  4: StorageLive(_9)
    SourceInfo(serde/src/ser/impls.rs:675:74-675:79)
  5: _9 = &(*_7)
    SourceInfo(serde/src/ser/impls.rs:675:74-675:79)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:675:17-675:80)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<E>(move _8, const "Result", const 1_u32, const "Err", move _9) -> [return: bb6, unwind: bb9]
  }
  preds [bb0, bb2]
  succs [bb6, bb9]

bb4
  0: StorageLive(_4)
    SourceInfo(serde/src/ser/impls.rs:673:24-673:33)
  1: _4 = &(((*_1) as Ok).0: T)
    SourceInfo(serde/src/ser/impls.rs:673:24-673:33)
  2: StorageLive(_5)
    SourceInfo(serde/src/ser/impls.rs:673:38-673:48)
  3: _5 = move _2
    SourceInfo(serde/src/ser/impls.rs:673:38-673:48)
  4: StorageLive(_6)
    SourceInfo(serde/src/ser/impls.rs:673:94-673:99)
  5: _6 = &(*_4)
    SourceInfo(serde/src/ser/impls.rs:673:94-673:99)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:673:38-673:100)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<T>(move _5, const "Result", const 0_u32, const "Ok", move _6) -> [return: bb5, unwind: bb10]
  }
  preds [bb2]
  succs [bb5, bb10]

bb5
  0: StorageDead(_6)
    SourceInfo(serde/src/ser/impls.rs:673:99-673:100)
  1: StorageDead(_5)
    SourceInfo(serde/src/ser/impls.rs:673:99-673:100)
  2: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:673:99-673:100)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:673:99-673:100)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_9)
    SourceInfo(serde/src/ser/impls.rs:675:79-675:80)
  1: StorageDead(_8)
    SourceInfo(serde/src/ser/impls.rs:675:79-675:80)
  2: StorageDead(_7)
    SourceInfo(serde/src/ser/impls.rs:676:13-676:14)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:676:13-676:14)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:678:5-678:6)
      kind: drop(_2) -> [return: bb8, unwind: bb12]
  }
  preds [bb5, bb6]
  succs [bb8, bb12]

bb8
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:678:6-678:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:675:79-675:80)
      kind: drop(_8) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb11]

bb10
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:673:99-673:100)
      kind: drop(_5) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:678:5-678:6)
      kind: drop(_2) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb9, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:668:5-678:6)
      kind: resume
  }
  preds [bb7, bb11]
  succs []

