bb0
  0: StorageLive(_3)
    SourceInfo(serde/src/ser/impls.rs:768:8-768:16)
  1: StorageLive(_4)
    SourceInfo(serde/src/ser/impls.rs:768:8-768:9)
  2: _4 = _1
    SourceInfo(serde/src/ser/impls.rs:768:8-768:9)
  3: _3 = Ge(move _4, const 100_u8)
    SourceInfo(serde/src/ser/impls.rs:768:8-768:16)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:768:8-768:16)
      kind: switchInt(move _3) -> [0: bb12, otherwise: bb1]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:768:15-768:16)
  1: StorageLive(_5)
    SourceInfo(serde/src/ser/impls.rs:769:13-769:15)
  2: StorageLive(_6)
    SourceInfo(serde/src/ser/impls.rs:769:18-769:34)
  3: StorageLive(_7)
    SourceInfo(serde/src/ser/impls.rs:769:19-769:28)
  4: StorageLive(_8)
    SourceInfo(serde/src/ser/impls.rs:769:20-769:21)
  5: _8 = _1
    SourceInfo(serde/src/ser/impls.rs:769:20-769:21)
  6: _9 = Eq(const 100_u8, const 0_u8)
    SourceInfo(serde/src/ser/impls.rs:769:19-769:28)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:769:19-769:28)
      kind: assert(!move _9, "attempt to calculate the remainder of `{}` with a divisor of zero", _8) -> [success: bb2, unwind: bb25]
  }
  preds [bb0]
  succs [bb2, bb25]

bb2
  0: _7 = Rem(move _8, const 100_u8)
    SourceInfo(serde/src/ser/impls.rs:769:19-769:28)
  1: StorageDead(_8)
    SourceInfo(serde/src/ser/impls.rs:769:27-769:28)
  2: _10 = const 1_i32 as u32 (IntToInt)
    SourceInfo(serde/src/ser/impls.rs:769:18-769:34)
  3: _11 = Lt(move _10, const 8_u32)
    SourceInfo(serde/src/ser/impls.rs:769:18-769:34)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:769:18-769:34)
      kind: assert(move _11, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb3, unwind: bb25]
  }
  preds [bb1]
  succs [bb3, bb25]

bb3
  0: _6 = Shl(move _7, const 1_i32)
    SourceInfo(serde/src/ser/impls.rs:769:18-769:34)
  1: StorageDead(_7)
    SourceInfo(serde/src/ser/impls.rs:769:33-769:34)
  2: _5 = move _6 as usize (IntToInt)
    SourceInfo(serde/src/ser/impls.rs:769:18-769:43)
  3: StorageDead(_6)
    SourceInfo(serde/src/ser/impls.rs:769:42-769:43)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(serde/src/ser/impls.rs:769:13-769:15)
  5: _12 = Eq(const 100_u8, const 0_u8)
    SourceInfo(serde/src/ser/impls.rs:770:9-770:17)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:770:9-770:17)
      kind: assert(!move _12, "attempt to divide `{}` by zero", _1) -> [success: bb4, unwind: bb25]
  }
  preds [bb2]
  succs [bb4, bb25]

bb4
  0: _1 = Div(_1, const 100_u8)
    SourceInfo(serde/src/ser/impls.rs:770:9-770:17)
  1: StorageLive(_13)
    SourceInfo(serde/src/ser/impls.rs:771:25-771:26)
  2: _13 = _1
    SourceInfo(serde/src/ser/impls.rs:771:25-771:26)
  3: _14 = AddWithOverflow(const 48_u8, _13)
    SourceInfo(serde/src/ser/impls.rs:771:18-771:26)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:771:18-771:26)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _13) -> [success: bb5, unwind: bb25]
  }
  preds [bb3]
  succs [bb5, bb25]

bb5
  0: StorageLive(_15)
    SourceInfo(serde/src/ser/impls.rs:771:13-771:14)
  1: _15 = const 0_usize
    SourceInfo(serde/src/ser/impls.rs:771:13-771:14)
  2: _16 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:771:9-771:15)
  3: _17 = Lt(_15, _16)
    SourceInfo(serde/src/ser/impls.rs:771:9-771:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:771:9-771:15)
      kind: assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb6, unwind: bb25]
  }
  preds [bb4]
  succs [bb6, bb25]

bb6
  0: (*_2)[_15] = move (_14.0: u8)
    SourceInfo(serde/src/ser/impls.rs:771:9-771:26)
  1: StorageDead(_13)
    SourceInfo(serde/src/ser/impls.rs:771:25-771:26)
  2: StorageDead(_15)
    SourceInfo(serde/src/ser/impls.rs:771:26-771:27)
  3: StorageLive(_18)
    SourceInfo(serde/src/ser/impls.rs:772:18-772:36)
  4: StorageLive(_19)
    SourceInfo(serde/src/ser/impls.rs:772:18-772:32)
  5: _19 = const ser::impls::DEC_DIGITS_LUT
    SourceInfo(serde/src/ser/impls.rs:772:18-772:32)
  6: StorageLive(_20)
    SourceInfo(serde/src/ser/impls.rs:772:33-772:35)
  7: _20 = _5
    SourceInfo(serde/src/ser/impls.rs:772:33-772:35)
  8: _21 = Len((*_19))
    SourceInfo(serde/src/ser/impls.rs:772:18-772:36)
  9: _22 = Lt(_20, _21)
    SourceInfo(serde/src/ser/impls.rs:772:18-772:36)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:772:18-772:36)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb7, unwind: bb25]
  }
  preds [bb5]
  succs [bb7, bb25]

bb7
  0: _18 = (*_19)[_20]
    SourceInfo(serde/src/ser/impls.rs:772:18-772:36)
  1: StorageLive(_23)
    SourceInfo(serde/src/ser/impls.rs:772:13-772:14)
  2: _23 = const 1_usize
    SourceInfo(serde/src/ser/impls.rs:772:13-772:14)
  3: _24 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:772:9-772:15)
  4: _25 = Lt(_23, _24)
    SourceInfo(serde/src/ser/impls.rs:772:9-772:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:772:9-772:15)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb8, unwind: bb25]
  }
  preds [bb6]
  succs [bb8, bb25]

bb8
  0: (*_2)[_23] = move _18
    SourceInfo(serde/src/ser/impls.rs:772:9-772:36)
  1: StorageDead(_18)
    SourceInfo(serde/src/ser/impls.rs:772:35-772:36)
  2: StorageDead(_23)
    SourceInfo(serde/src/ser/impls.rs:772:36-772:37)
  3: StorageDead(_20)
    SourceInfo(serde/src/ser/impls.rs:772:36-772:37)
  4: StorageDead(_19)
    SourceInfo(serde/src/ser/impls.rs:772:36-772:37)
  5: StorageLive(_26)
    SourceInfo(serde/src/ser/impls.rs:773:18-773:40)
  6: StorageLive(_27)
    SourceInfo(serde/src/ser/impls.rs:773:18-773:32)
  7: _27 = const ser::impls::DEC_DIGITS_LUT
    SourceInfo(serde/src/ser/impls.rs:773:18-773:32)
  8: StorageLive(_28)
    SourceInfo(serde/src/ser/impls.rs:773:33-773:39)
  9: StorageLive(_29)
    SourceInfo(serde/src/ser/impls.rs:773:33-773:35)
  10: _29 = _5
    SourceInfo(serde/src/ser/impls.rs:773:33-773:35)
  11: _30 = AddWithOverflow(_29, const 1_usize)
    SourceInfo(serde/src/ser/impls.rs:773:33-773:39)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:773:33-773:39)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 1_usize) -> [success: bb9, unwind: bb25]
  }
  preds [bb7]
  succs [bb9, bb25]

bb9
  0: _28 = move (_30.0: usize)
    SourceInfo(serde/src/ser/impls.rs:773:33-773:39)
  1: StorageDead(_29)
    SourceInfo(serde/src/ser/impls.rs:773:38-773:39)
  2: _31 = Len((*_27))
    SourceInfo(serde/src/ser/impls.rs:773:18-773:40)
  3: _32 = Lt(_28, _31)
    SourceInfo(serde/src/ser/impls.rs:773:18-773:40)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:773:18-773:40)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _28) -> [success: bb10, unwind: bb25]
  }
  preds [bb8]
  succs [bb10, bb25]

bb10
  0: _26 = (*_27)[_28]
    SourceInfo(serde/src/ser/impls.rs:773:18-773:40)
  1: StorageLive(_33)
    SourceInfo(serde/src/ser/impls.rs:773:13-773:14)
  2: _33 = const 2_usize
    SourceInfo(serde/src/ser/impls.rs:773:13-773:14)
  3: _34 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:773:9-773:15)
  4: _35 = Lt(_33, _34)
    SourceInfo(serde/src/ser/impls.rs:773:9-773:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:773:9-773:15)
      kind: assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb11, unwind: bb25]
  }
  preds [bb9]
  succs [bb11, bb25]

bb11
  0: (*_2)[_33] = move _26
    SourceInfo(serde/src/ser/impls.rs:773:9-773:40)
  1: StorageDead(_26)
    SourceInfo(serde/src/ser/impls.rs:773:39-773:40)
  2: StorageDead(_33)
    SourceInfo(serde/src/ser/impls.rs:773:40-773:41)
  3: StorageDead(_28)
    SourceInfo(serde/src/ser/impls.rs:773:40-773:41)
  4: StorageDead(_27)
    SourceInfo(serde/src/ser/impls.rs:773:40-773:41)
  5: _0 = const 3_usize
    SourceInfo(serde/src/ser/impls.rs:774:9-774:10)
  6: StorageDead(_5)
    SourceInfo(serde/src/ser/impls.rs:775:5-775:6)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:768:5-783:6)
      kind: goto -> bb24
  }
  preds [bb10]
  succs [bb24]

bb12
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:768:15-768:16)
  1: StorageLive(_36)
    SourceInfo(serde/src/ser/impls.rs:775:15-775:22)
  2: StorageLive(_37)
    SourceInfo(serde/src/ser/impls.rs:775:15-775:16)
  3: _37 = _1
    SourceInfo(serde/src/ser/impls.rs:775:15-775:16)
  4: _36 = Ge(move _37, const 10_u8)
    SourceInfo(serde/src/ser/impls.rs:775:15-775:22)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:775:15-775:22)
      kind: switchInt(move _36) -> [0: bb20, otherwise: bb13]
  }
  preds [bb0]
  succs [bb13, bb20]

bb13
  0: StorageDead(_37)
    SourceInfo(serde/src/ser/impls.rs:775:21-775:22)
  1: StorageLive(_38)
    SourceInfo(serde/src/ser/impls.rs:776:13-776:15)
  2: StorageLive(_39)
    SourceInfo(serde/src/ser/impls.rs:776:18-776:26)
  3: StorageLive(_40)
    SourceInfo(serde/src/ser/impls.rs:776:19-776:20)
  4: _40 = _1
    SourceInfo(serde/src/ser/impls.rs:776:19-776:20)
  5: _41 = const 1_i32 as u32 (IntToInt)
    SourceInfo(serde/src/ser/impls.rs:776:18-776:26)
  6: _42 = Lt(move _41, const 8_u32)
    SourceInfo(serde/src/ser/impls.rs:776:18-776:26)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:776:18-776:26)
      kind: assert(move _42, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb14, unwind: bb25]
  }
  preds [bb12]
  succs [bb14, bb25]

bb14
  0: _39 = Shl(move _40, const 1_i32)
    SourceInfo(serde/src/ser/impls.rs:776:18-776:26)
  1: StorageDead(_40)
    SourceInfo(serde/src/ser/impls.rs:776:25-776:26)
  2: _38 = move _39 as usize (IntToInt)
    SourceInfo(serde/src/ser/impls.rs:776:18-776:35)
  3: StorageDead(_39)
    SourceInfo(serde/src/ser/impls.rs:776:34-776:35)
  4: FakeRead(ForLet(None), _38)
    SourceInfo(serde/src/ser/impls.rs:776:13-776:15)
  5: StorageLive(_43)
    SourceInfo(serde/src/ser/impls.rs:777:18-777:36)
  6: StorageLive(_44)
    SourceInfo(serde/src/ser/impls.rs:777:18-777:32)
  7: _44 = const ser::impls::DEC_DIGITS_LUT
    SourceInfo(serde/src/ser/impls.rs:777:18-777:32)
  8: StorageLive(_45)
    SourceInfo(serde/src/ser/impls.rs:777:33-777:35)
  9: _45 = _38
    SourceInfo(serde/src/ser/impls.rs:777:33-777:35)
  10: _46 = Len((*_44))
    SourceInfo(serde/src/ser/impls.rs:777:18-777:36)
  11: _47 = Lt(_45, _46)
    SourceInfo(serde/src/ser/impls.rs:777:18-777:36)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:777:18-777:36)
      kind: assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb15, unwind: bb25]
  }
  preds [bb13]
  succs [bb15, bb25]

bb15
  0: _43 = (*_44)[_45]
    SourceInfo(serde/src/ser/impls.rs:777:18-777:36)
  1: StorageLive(_48)
    SourceInfo(serde/src/ser/impls.rs:777:13-777:14)
  2: _48 = const 0_usize
    SourceInfo(serde/src/ser/impls.rs:777:13-777:14)
  3: _49 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:777:9-777:15)
  4: _50 = Lt(_48, _49)
    SourceInfo(serde/src/ser/impls.rs:777:9-777:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:777:9-777:15)
      kind: assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> [success: bb16, unwind: bb25]
  }
  preds [bb14]
  succs [bb16, bb25]

bb16
  0: (*_2)[_48] = move _43
    SourceInfo(serde/src/ser/impls.rs:777:9-777:36)
  1: StorageDead(_43)
    SourceInfo(serde/src/ser/impls.rs:777:35-777:36)
  2: StorageDead(_48)
    SourceInfo(serde/src/ser/impls.rs:777:36-777:37)
  3: StorageDead(_45)
    SourceInfo(serde/src/ser/impls.rs:777:36-777:37)
  4: StorageDead(_44)
    SourceInfo(serde/src/ser/impls.rs:777:36-777:37)
  5: StorageLive(_51)
    SourceInfo(serde/src/ser/impls.rs:778:18-778:40)
  6: StorageLive(_52)
    SourceInfo(serde/src/ser/impls.rs:778:18-778:32)
  7: _52 = const ser::impls::DEC_DIGITS_LUT
    SourceInfo(serde/src/ser/impls.rs:778:18-778:32)
  8: StorageLive(_53)
    SourceInfo(serde/src/ser/impls.rs:778:33-778:39)
  9: StorageLive(_54)
    SourceInfo(serde/src/ser/impls.rs:778:33-778:35)
  10: _54 = _38
    SourceInfo(serde/src/ser/impls.rs:778:33-778:35)
  11: _55 = AddWithOverflow(_54, const 1_usize)
    SourceInfo(serde/src/ser/impls.rs:778:33-778:39)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:778:33-778:39)
      kind: assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> [success: bb17, unwind: bb25]
  }
  preds [bb15]
  succs [bb17, bb25]

bb17
  0: _53 = move (_55.0: usize)
    SourceInfo(serde/src/ser/impls.rs:778:33-778:39)
  1: StorageDead(_54)
    SourceInfo(serde/src/ser/impls.rs:778:38-778:39)
  2: _56 = Len((*_52))
    SourceInfo(serde/src/ser/impls.rs:778:18-778:40)
  3: _57 = Lt(_53, _56)
    SourceInfo(serde/src/ser/impls.rs:778:18-778:40)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:778:18-778:40)
      kind: assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _53) -> [success: bb18, unwind: bb25]
  }
  preds [bb16]
  succs [bb18, bb25]

bb18
  0: _51 = (*_52)[_53]
    SourceInfo(serde/src/ser/impls.rs:778:18-778:40)
  1: StorageLive(_58)
    SourceInfo(serde/src/ser/impls.rs:778:13-778:14)
  2: _58 = const 1_usize
    SourceInfo(serde/src/ser/impls.rs:778:13-778:14)
  3: _59 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:778:9-778:15)
  4: _60 = Lt(_58, _59)
    SourceInfo(serde/src/ser/impls.rs:778:9-778:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:778:9-778:15)
      kind: assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb19, unwind: bb25]
  }
  preds [bb17]
  succs [bb19, bb25]

bb19
  0: (*_2)[_58] = move _51
    SourceInfo(serde/src/ser/impls.rs:778:9-778:40)
  1: StorageDead(_51)
    SourceInfo(serde/src/ser/impls.rs:778:39-778:40)
  2: StorageDead(_58)
    SourceInfo(serde/src/ser/impls.rs:778:40-778:41)
  3: StorageDead(_53)
    SourceInfo(serde/src/ser/impls.rs:778:40-778:41)
  4: StorageDead(_52)
    SourceInfo(serde/src/ser/impls.rs:778:40-778:41)
  5: _0 = const 2_usize
    SourceInfo(serde/src/ser/impls.rs:779:9-779:10)
  6: StorageDead(_38)
    SourceInfo(serde/src/ser/impls.rs:780:5-780:6)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:775:12-783:6)
      kind: goto -> bb23
  }
  preds [bb18]
  succs [bb23]

bb20
  0: StorageDead(_37)
    SourceInfo(serde/src/ser/impls.rs:775:21-775:22)
  1: StorageLive(_61)
    SourceInfo(serde/src/ser/impls.rs:781:25-781:26)
  2: _61 = _1
    SourceInfo(serde/src/ser/impls.rs:781:25-781:26)
  3: _62 = AddWithOverflow(const 48_u8, _61)
    SourceInfo(serde/src/ser/impls.rs:781:18-781:26)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:781:18-781:26)
      kind: assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _61) -> [success: bb21, unwind: bb25]
  }
  preds [bb12]
  succs [bb21, bb25]

bb21
  0: StorageLive(_63)
    SourceInfo(serde/src/ser/impls.rs:781:13-781:14)
  1: _63 = const 0_usize
    SourceInfo(serde/src/ser/impls.rs:781:13-781:14)
  2: _64 = Len((*_2))
    SourceInfo(serde/src/ser/impls.rs:781:9-781:15)
  3: _65 = Lt(_63, _64)
    SourceInfo(serde/src/ser/impls.rs:781:9-781:15)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:781:9-781:15)
      kind: assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> [success: bb22, unwind: bb25]
  }
  preds [bb20]
  succs [bb22, bb25]

bb22
  0: (*_2)[_63] = move (_62.0: u8)
    SourceInfo(serde/src/ser/impls.rs:781:9-781:26)
  1: StorageDead(_61)
    SourceInfo(serde/src/ser/impls.rs:781:25-781:26)
  2: StorageDead(_63)
    SourceInfo(serde/src/ser/impls.rs:781:26-781:27)
  3: _0 = const 1_usize
    SourceInfo(serde/src/ser/impls.rs:782:9-782:10)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:775:12-783:6)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  0: StorageDead(_36)
    SourceInfo(serde/src/ser/impls.rs:783:5-783:6)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:768:5-783:6)
      kind: goto -> bb24
  }
  preds [bb19, bb22]
  succs [bb24]

bb24
  0: StorageDead(_3)
    SourceInfo(serde/src/ser/impls.rs:783:5-783:6)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:784:2-784:2)
      kind: return
  }
  preds [bb11, bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:767:1-784:2)
      kind: resume
  }
  preds [bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb13, bb14, bb15, bb16, bb17, bb18, bb20, bb21]
  succs []

