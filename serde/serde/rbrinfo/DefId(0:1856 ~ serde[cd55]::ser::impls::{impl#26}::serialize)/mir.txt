bb0
  0: StorageLive(_3)
    SourceInfo(serde/src/ser/impls.rs:849:12-849:42)
  1: StorageLive(_4)
    SourceInfo(serde/src/ser/impls.rs:849:12-849:22)
  2: _4 = &_2
    SourceInfo(serde/src/ser/impls.rs:849:12-849:22)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:849:12-849:42)
      kind: _3 = <S as ser::Serializer>::is_human_readable(move _4) -> [return: bb1, unwind: bb22]
  }
  preds []
  succs [bb1, bb22]

bb1
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:849:12-849:42)
      kind: switchInt(move _3) -> [0: bb9, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:849:41-849:42)
  1: PlaceMention((*_1))
    SourceInfo(serde/src/ser/impls.rs:850:19-850:24)
  2: _5 = discriminant((*_1))
    SourceInfo(serde/src/ser/impls.rs:850:19-850:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:850:13-850:24)
      kind: switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(serde/src/ser/impls.rs:850:19-850:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:850:19-850:24)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:851:17-851:46)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_9)
    SourceInfo(serde/src/ser/impls.rs:852:37-852:45)
  1: _9 = &(((*_1) as V6).0: std::net::SocketAddrV6)
    SourceInfo(serde/src/ser/impls.rs:852:37-852:45)
  2: StorageLive(_10)
    SourceInfo(serde/src/ser/impls.rs:852:50-852:54)
  3: _10 = &(*_9)
    SourceInfo(serde/src/ser/impls.rs:852:50-852:54)
  4: StorageLive(_11)
    SourceInfo(serde/src/ser/impls.rs:852:65-852:75)
  5: _11 = move _2
    SourceInfo(serde/src/ser/impls.rs:852:65-852:75)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:852:50-852:76)
      kind: _0 = <std::net::SocketAddrV6 as ser::Serialize>::serialize::<S>(move _10, move _11) -> [return: bb8, unwind: bb20]
  }
  preds [bb2, bb4]
  succs [bb8, bb20]

bb6
  0: StorageLive(_6)
    SourceInfo(serde/src/ser/impls.rs:851:37-851:45)
  1: _6 = &(((*_1) as V4).0: std::net::SocketAddrV4)
    SourceInfo(serde/src/ser/impls.rs:851:37-851:45)
  2: StorageLive(_7)
    SourceInfo(serde/src/ser/impls.rs:851:50-851:54)
  3: _7 = &(*_6)
    SourceInfo(serde/src/ser/impls.rs:851:50-851:54)
  4: StorageLive(_8)
    SourceInfo(serde/src/ser/impls.rs:851:65-851:75)
  5: _8 = move _2
    SourceInfo(serde/src/ser/impls.rs:851:65-851:75)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:851:50-851:76)
      kind: _0 = <std::net::SocketAddrV4 as ser::Serialize>::serialize::<S>(move _7, move _8) -> [return: bb7, unwind: bb21]
  }
  preds [bb4]
  succs [bb7, bb21]

bb7
  0: StorageDead(_8)
    SourceInfo(serde/src/ser/impls.rs:851:75-851:76)
  1: StorageDead(_7)
    SourceInfo(serde/src/ser/impls.rs:851:75-851:76)
  2: StorageDead(_6)
    SourceInfo(serde/src/ser/impls.rs:851:75-851:76)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:851:75-851:76)
      kind: goto -> bb16
  }
  preds [bb6]
  succs [bb16]

bb8
  0: StorageDead(_11)
    SourceInfo(serde/src/ser/impls.rs:852:75-852:76)
  1: StorageDead(_10)
    SourceInfo(serde/src/ser/impls.rs:852:75-852:76)
  2: StorageDead(_9)
    SourceInfo(serde/src/ser/impls.rs:852:75-852:76)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:852:75-852:76)
      kind: goto -> bb16
  }
  preds [bb5]
  succs [bb16]

bb9
  0: StorageDead(_4)
    SourceInfo(serde/src/ser/impls.rs:849:41-849:42)
  1: PlaceMention((*_1))
    SourceInfo(serde/src/ser/impls.rs:855:19-855:24)
  2: _12 = discriminant((*_1))
    SourceInfo(serde/src/ser/impls.rs:855:19-855:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:855:13-855:24)
      kind: switchInt(move _12) -> [0: bb11, 1: bb12, otherwise: bb10]
  }
  preds [bb1]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(serde/src/ser/impls.rs:855:19-855:24)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:855:19-855:24)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:856:17-856:46)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_16)
    SourceInfo(serde/src/ser/impls.rs:859:37-859:45)
  1: _16 = &(((*_1) as V6).0: std::net::SocketAddrV6)
    SourceInfo(serde/src/ser/impls.rs:859:37-859:45)
  2: StorageLive(_17)
    SourceInfo(serde/src/ser/impls.rs:860:21-860:31)
  3: _17 = move _2
    SourceInfo(serde/src/ser/impls.rs:860:21-860:31)
  4: StorageLive(_18)
    SourceInfo(serde/src/ser/impls.rs:860:81-860:85)
  5: _18 = &(*_16)
    SourceInfo(serde/src/ser/impls.rs:860:81-860:85)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:860:21-860:86)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::SocketAddrV6>(move _17, const "SocketAddr", const 1_u32, const "V6", move _18) -> [return: bb15, unwind: bb18]
  }
  preds [bb9, bb11]
  succs [bb15, bb18]

bb13
  0: StorageLive(_13)
    SourceInfo(serde/src/ser/impls.rs:856:37-856:45)
  1: _13 = &(((*_1) as V4).0: std::net::SocketAddrV4)
    SourceInfo(serde/src/ser/impls.rs:856:37-856:45)
  2: StorageLive(_14)
    SourceInfo(serde/src/ser/impls.rs:857:21-857:31)
  3: _14 = move _2
    SourceInfo(serde/src/ser/impls.rs:857:21-857:31)
  4: StorageLive(_15)
    SourceInfo(serde/src/ser/impls.rs:857:81-857:85)
  5: _15 = &(*_13)
    SourceInfo(serde/src/ser/impls.rs:857:81-857:85)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:857:21-857:86)
      kind: _0 = <S as ser::Serializer>::serialize_newtype_variant::<std::net::SocketAddrV4>(move _14, const "SocketAddr", const 0_u32, const "V4", move _15) -> [return: bb14, unwind: bb19]
  }
  preds [bb11]
  succs [bb14, bb19]

bb14
  0: StorageDead(_15)
    SourceInfo(serde/src/ser/impls.rs:857:85-857:86)
  1: StorageDead(_14)
    SourceInfo(serde/src/ser/impls.rs:857:85-857:86)
  2: StorageDead(_13)
    SourceInfo(serde/src/ser/impls.rs:858:17-858:18)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:858:17-858:18)
      kind: goto -> bb16
  }
  preds [bb13]
  succs [bb16]

bb15
  0: StorageDead(_18)
    SourceInfo(serde/src/ser/impls.rs:860:85-860:86)
  1: StorageDead(_17)
    SourceInfo(serde/src/ser/impls.rs:860:85-860:86)
  2: StorageDead(_16)
    SourceInfo(serde/src/ser/impls.rs:861:17-861:18)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:861:17-861:18)
      kind: goto -> bb16
  }
  preds [bb12]
  succs [bb16]

bb16
  0: StorageDead(_3)
    SourceInfo(serde/src/ser/impls.rs:863:9-863:10)
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:864:5-864:6)
      kind: drop(_2) -> [return: bb17, unwind: bb23]
  }
  preds [bb7, bb8, bb14, bb15]
  succs [bb17, bb23]

bb17
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:864:6-864:6)
      kind: return
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:860:85-860:86)
      kind: drop(_17) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb22]

bb19
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:857:85-857:86)
      kind: drop(_14) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb22]

bb20
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:852:75-852:76)
      kind: drop(_11) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb22]

bb21
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:851:75-851:76)
      kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:864:5-864:6)
      kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb0, bb18, bb19, bb20, bb21]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(serde/src/ser/impls.rs:845:5-864:6)
      kind: resume
  }
  preds [bb16, bb22]
  succs []

