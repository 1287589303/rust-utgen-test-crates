bb0
  0: StorageLive(_3)
    SourceInfo(serde/src/format.rs:22:12-22:52)
  1: StorageLive(_4)
    SourceInfo(serde/src/format.rs:22:12-22:33)
  2: StorageLive(_5)
    SourceInfo(serde/src/format.rs:22:12-22:23)
  3: _5 = ((*_1).1: usize)
    SourceInfo(serde/src/format.rs:22:12-22:23)
  4: StorageLive(_6)
    SourceInfo(serde/src/format.rs:22:26-22:33)
  5: StorageLive(_7)
    SourceInfo(serde/src/format.rs:22:26-22:27)
  6: _7 = &(*_2)
    SourceInfo(serde/src/format.rs:22:26-22:27)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:26-22:33)
      kind: _6 = core::str::<impl str>::len(move _7) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_7)
    SourceInfo(serde/src/format.rs:22:32-22:33)
  1: _8 = AddWithOverflow(_5, _6)
    SourceInfo(serde/src/format.rs:22:12-22:33)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:12-22:33)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: _4 = move (_8.0: usize)
    SourceInfo(serde/src/format.rs:22:12-22:33)
  1: StorageDead(_6)
    SourceInfo(serde/src/format.rs:22:32-22:33)
  2: StorageDead(_5)
    SourceInfo(serde/src/format.rs:22:32-22:33)
  3: StorageLive(_9)
    SourceInfo(serde/src/format.rs:22:36-22:52)
  4: StorageLive(_10)
    SourceInfo(serde/src/format.rs:22:36-22:46)
  5: _10 = &(*((*_1).0: &mut [u8]))
    SourceInfo(serde/src/format.rs:22:36-22:46)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:36-22:52)
      kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_10)
    SourceInfo(serde/src/format.rs:22:51-22:52)
  1: _3 = Gt(move _4, move _9)
    SourceInfo(serde/src/format.rs:22:12-22:52)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:12-22:52)
      kind: switchInt(move _3) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_9)
    SourceInfo(serde/src/format.rs:22:51-22:52)
  1: StorageDead(_4)
    SourceInfo(serde/src/format.rs:22:51-22:52)
  2: StorageLive(_11)
    SourceInfo(serde/src/format.rs:23:17-23:27)
  3: _11 = std::fmt::Error
    SourceInfo(serde/src/format.rs:23:17-23:27)
  4: _0 = std::result::Result::<(), std::fmt::Error>::Err(move _11)
    SourceInfo(serde/src/format.rs:23:13-23:28)
  5: StorageDead(_11)
    SourceInfo(serde/src/format.rs:23:27-23:28)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:9-28:10)
      kind: goto -> bb13
  }
  preds [bb3]
  succs [bb13]

bb5
  0: StorageDead(_9)
    SourceInfo(serde/src/format.rs:22:51-22:52)
  1: StorageDead(_4)
    SourceInfo(serde/src/format.rs:22:51-22:52)
  2: StorageLive(_12)
    SourceInfo(serde/src/format.rs:25:13-25:89)
  3: StorageLive(_13)
    SourceInfo(serde/src/format.rs:25:13-25:59)
  4: StorageLive(_14)
    SourceInfo(serde/src/format.rs:25:23-25:59)
  5: StorageLive(_15)
    SourceInfo(serde/src/format.rs:25:13-25:23)
  6: _15 = &mut (*((*_1).0: &mut [u8]))
    SourceInfo(serde/src/format.rs:25:13-25:23)
  7: StorageLive(_16)
    SourceInfo(serde/src/format.rs:25:24-25:58)
  8: StorageLive(_17)
    SourceInfo(serde/src/format.rs:25:24-25:35)
  9: _17 = ((*_1).1: usize)
    SourceInfo(serde/src/format.rs:25:24-25:35)
  10: StorageLive(_18)
    SourceInfo(serde/src/format.rs:25:37-25:58)
  11: StorageLive(_19)
    SourceInfo(serde/src/format.rs:25:37-25:48)
  12: _19 = ((*_1).1: usize)
    SourceInfo(serde/src/format.rs:25:37-25:48)
  13: StorageLive(_20)
    SourceInfo(serde/src/format.rs:25:51-25:58)
  14: StorageLive(_21)
    SourceInfo(serde/src/format.rs:25:51-25:52)
  15: _21 = &(*_2)
    SourceInfo(serde/src/format.rs:25:51-25:52)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:25:51-25:58)
      kind: _20 = core::str::<impl str>::len(move _21) -> [return: bb6, unwind: bb14]
  }
  preds [bb3]
  succs [bb6, bb14]

bb6
  0: StorageDead(_21)
    SourceInfo(serde/src/format.rs:25:57-25:58)
  1: _22 = AddWithOverflow(_19, _20)
    SourceInfo(serde/src/format.rs:25:37-25:58)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:25:37-25:58)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, move _20) -> [success: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: _18 = move (_22.0: usize)
    SourceInfo(serde/src/format.rs:25:37-25:58)
  1: StorageDead(_20)
    SourceInfo(serde/src/format.rs:25:57-25:58)
  2: StorageDead(_19)
    SourceInfo(serde/src/format.rs:25:57-25:58)
  3: _16 = std::ops::Range::<usize> { start: move _17, end: move _18 }
    SourceInfo(serde/src/format.rs:25:24-25:58)
  4: StorageDead(_18)
    SourceInfo(serde/src/format.rs:25:57-25:58)
  5: StorageDead(_17)
    SourceInfo(serde/src/format.rs:25:57-25:58)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:25:23-25:59)
      kind: _14 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _15, move _16) -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: _13 = &mut (*_14)
    SourceInfo(serde/src/format.rs:25:13-25:59)
  1: StorageDead(_16)
    SourceInfo(serde/src/format.rs:25:58-25:59)
  2: StorageDead(_15)
    SourceInfo(serde/src/format.rs:25:58-25:59)
  3: StorageLive(_23)
    SourceInfo(serde/src/format.rs:25:76-25:88)
  4: StorageLive(_24)
    SourceInfo(serde/src/format.rs:25:76-25:88)
  5: StorageLive(_25)
    SourceInfo(serde/src/format.rs:25:76-25:77)
  6: _25 = &(*_2)
    SourceInfo(serde/src/format.rs:25:76-25:77)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:25:76-25:88)
      kind: _24 = core::str::<impl str>::as_bytes(move _25) -> [return: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: _23 = &(*_24)
    SourceInfo(serde/src/format.rs:25:76-25:88)
  1: StorageDead(_25)
    SourceInfo(serde/src/format.rs:25:87-25:88)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:25:13-25:89)
      kind: _12 = core::slice::<impl [u8]>::copy_from_slice(move _13, move _23) -> [return: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: StorageDead(_23)
    SourceInfo(serde/src/format.rs:25:88-25:89)
  1: StorageDead(_13)
    SourceInfo(serde/src/format.rs:25:88-25:89)
  2: StorageDead(_24)
    SourceInfo(serde/src/format.rs:25:89-25:90)
  3: StorageDead(_14)
    SourceInfo(serde/src/format.rs:25:89-25:90)
  4: StorageDead(_12)
    SourceInfo(serde/src/format.rs:25:89-25:90)
  5: StorageLive(_26)
    SourceInfo(serde/src/format.rs:26:28-26:35)
  6: StorageLive(_27)
    SourceInfo(serde/src/format.rs:26:28-26:29)
  7: _27 = &(*_2)
    SourceInfo(serde/src/format.rs:26:28-26:29)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:26:28-26:35)
      kind: _26 = core::str::<impl str>::len(move _27) -> [return: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_27)
    SourceInfo(serde/src/format.rs:26:34-26:35)
  1: _28 = AddWithOverflow(((*_1).1: usize), _26)
    SourceInfo(serde/src/format.rs:26:13-26:35)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:26:13-26:35)
      kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _26) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: ((*_1).1: usize) = move (_28.0: usize)
    SourceInfo(serde/src/format.rs:26:13-26:35)
  1: StorageDead(_26)
    SourceInfo(serde/src/format.rs:26:34-26:35)
  2: StorageLive(_29)
    SourceInfo(serde/src/format.rs:27:16-27:18)
  3: _29 = ()
    SourceInfo(serde/src/format.rs:27:16-27:18)
  4: _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _29)
    SourceInfo(serde/src/format.rs:27:13-27:19)
  5: StorageDead(_29)
    SourceInfo(serde/src/format.rs:27:18-27:19)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:22:9-28:10)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  0: StorageDead(_3)
    SourceInfo(serde/src/format.rs:28:9-28:10)
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:29:6-29:6)
      kind: return
  }
  preds [bb4, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(serde/src/format.rs:21:5-29:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb5, bb6, bb7, bb8, bb9, bb10, bb11]
  succs []

