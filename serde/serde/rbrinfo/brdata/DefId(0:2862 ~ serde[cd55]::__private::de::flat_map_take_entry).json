{
  "name": "serde::__private::de::flat_map_take_entry",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": false,
  "loc": "serde/src/private/de.rs:2735:1:2752:2",
  "doc": "/// Claims one key-value pair from a FlatMapDeserializer's field buffer if the\n/// field name matches any of the recognized ones.\n",
  "code": [
    "fn flat_map_take_entry<'de>(",
    "    entry: &mut Option<(Content<'de>, Content<'de>)>,",
    "    recognized: &[&str],",
    ") -> Option<(Content<'de>, Content<'de>)> {",
    "    // Entries in the FlatMapDeserializer buffer are nulled out as they get",
    "    // claimed for deserialization. We only use an entry if it is still present",
    "    // and if the field is one recognized by the current data structure.",
    "    let is_recognized = match entry {",
    "        None => false,",
    "        Some((k, _v)) => k.as_str().map_or(false, |name| recognized.contains(&name)),",
    "    };",
    "",
    "    if is_recognized {",
    "        entry.take()",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "entry matches Some((k, _v))",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "is_recognized",
          "norm": null,
          "value": "true",
          "line": 2747,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        5,
        6,
        7,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "entry matches Some((k, _v))",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "is_recognized",
          "norm": null,
          "value": "false",
          "line": 2747,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        3,
        5,
        6,
        7,
        10,
        11
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "entry matches None",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "entry matches None",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "is_recognized",
          "norm": null,
          "value": "true",
          "line": 2747,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        7,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "entry matches None",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "entry matches None",
          "norm": null,
          "value": "true",
          "line": 2742,
          "bound": null
        },
        {
          "cond": "is_recognized",
          "norm": null,
          "value": "false",
          "line": 2747,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        7,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}