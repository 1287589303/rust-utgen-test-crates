{
  "name": "serde::de::Visitor::visit_byte_buf",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1594:5:1599:6",
  "doc": "/// The input contains a byte array and ownership of the byte array is being\n/// given to the `Visitor`.\n///\n/// This method allows the `Visitor` to avoid a copy by taking ownership of\n/// a byte buffer created by the `Deserializer`. `Deserialize`\n/// implementations that benefit from taking ownership of `Vec<u8>` data\n/// should indicate that to the deserializer by using\n/// `Deserializer::deserialize_byte_buf` rather than\n/// `Deserializer::deserialize_bytes`, although not every deserializer will\n/// honor such a request.\n///\n/// It is never correct to implement `visit_byte_buf` without implementing\n/// `visit_bytes`. Implement neither, both, or just `visit_bytes`.\n///\n/// The default implementation forwards to `visit_bytes` and then drops the\n/// `Vec<u8>`.\n",
  "code": [
    "fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>",
    "where",
    "    E: Error,",
    "{",
    "    self.visit_bytes(&v)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}