{
  "name": "serde::de::value::{impl#68}::next_value_seed",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1375:5:1384:6",
  "doc": "",
  "code": [
    "fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>",
    "where",
    "    T: de::DeserializeSeed<'de>,",
    "{",
    "    let value = self.value.take();",
    "    // Panic because this indicates a bug in the program rather than an",
    "    // expected failure.",
    "    let value = value.expect(\"MapAccess::next_value called before next_key\");",
    "    seed.deserialize(value.into_deserializer())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}