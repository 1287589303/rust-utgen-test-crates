{
  "name": "serde::de::impls::range_from::{impl#1}::visit_map",
  "mod_info": {
    "name": "de::impls::range_from",
    "loc": "serde/src/de/impls.rs:2622:1:2729:2"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:2707:9:2727:10",
  "doc": "",
  "code": [
    "fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: MapAccess<'de>,",
    "{",
    "    let mut start: Option<Idx> = None;",
    "    while let Some(key) = tri!(map.next_key()) {",
    "        match key {",
    "            Field::Start => {",
    "                if start.is_some() {",
    "                    return Err(<A::Error as Error>::duplicate_field(\"start\"));",
    "                }",
    "                start = Some(tri!(map.next_value()));",
    "            }",
    "        }",
    "    }",
    "    let start = match start {",
    "        Some(start) => start,",
    "        None => return Err(<A::Error as Error>::missing_field(\"start\")),",
    "    };",
    "    Ok(start)",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "map.next_key() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        44,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2722,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2722,
          "bound": null
        }
      ],
      "ret": "Ok(start)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        30,
        32,
        34,
        35,
        38,
        39,
        40,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "start matches None",
          "norm": null,
          "value": "true",
          "line": 2722,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::missing_field(\"start\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        30,
        33,
        36,
        37,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "true",
          "line": 2715,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::duplicate_field(\"start\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        43,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "false",
          "line": 2715,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2718,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        12,
        16,
        17,
        20,
        23,
        41,
        42,
        43,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "false",
          "line": 2715,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2718,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2712,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        12,
        16,
        17,
        19,
        21,
        22,
        24,
        25,
        27,
        28,
        29,
        1,
        2,
        3,
        6,
        8,
        44,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}