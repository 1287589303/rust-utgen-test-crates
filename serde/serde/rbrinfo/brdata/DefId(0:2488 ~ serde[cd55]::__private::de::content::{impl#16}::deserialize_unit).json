{
  "name": "serde::__private::de::content::{impl#16}::deserialize_unit",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:1317:9:1336:10",
  "doc": "",
  "code": [
    "fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    match self.content {",
    "        Content::Unit => visitor.visit_unit(),",
    "",
    "        // Allow deserializing newtype variant containing unit.",
    "        //",
    "        //     #[derive(Deserialize)]",
    "        //     #[serde(tag = \"result\")]",
    "        //     enum Response<T> {",
    "        //         Success(T),",
    "        //     }",
    "        //",
    "        // We want {\"result\":\"Success\"} to deserialize into Response<()>.",
    "        Content::Map(ref v) if v.is_empty() => visitor.visit_unit(),",
    "        _ => Err(self.invalid_type(&visitor)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.content matches Content::Map(ref v)",
          "norm": null,
          "value": "false",
          "line": 1333,
          "bound": null
        },
        {
          "cond": "self.content matches Content::Unit",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.content matches _",
          "norm": null,
          "value": "true",
          "line": 1334,
          "bound": null
        }
      ],
      "ret": "Err(self.invalid_type(&visitor))",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.content matches Content::Map(ref v)",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        },
        {
          "cond": "self.content matches Content::Map(ref v)",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        },
        {
          "cond": "v.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1333,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7,
        8,
        10,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.content matches Content::Map(ref v)",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        },
        {
          "cond": "self.content matches Content::Map(ref v)",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        },
        {
          "cond": "v.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1333,
          "bound": null
        }
      ],
      "ret": "Err(self.invalid_type(&visitor))",
      "path": [
        0,
        3,
        6,
        7,
        9,
        1,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.content matches Content::Unit",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        },
        {
          "cond": "self.content matches Content::Unit",
          "norm": null,
          "value": "true",
          "line": 1321,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}