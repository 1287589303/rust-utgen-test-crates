{
  "name": "serde::__private::ser::content::{impl#6}::serialize_tuple_struct",
  "mod_info": {
    "name": "__private::ser::content",
    "loc": "serde/src/private/ser.rs:337:1:987:2"
  },
  "visible": true,
  "loc": "serde/src/private/ser.rs:698:9:708:10",
  "doc": "",
  "code": [
    "fn serialize_tuple_struct(",
    "    self,",
    "    name: &'static str,",
    "    len: usize,",
    ") -> Result<Self::SerializeTupleStruct, E> {",
    "    Ok(SerializeTupleStruct {",
    "        name,",
    "        fields: Vec::with_capacity(len),",
    "        error: PhantomData,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Ok(SerializeTupleStruct {\n                name,\n                fields: Vec::with_capacity(len),\n                error: PhantomData,\n            })",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}