{
  "name": "serde::de::value::{impl#80}::variant_seed",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1671:5:1679:6",
  "doc": "",
  "code": [
    "fn variant_seed<T>(mut self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>",
    "where",
    "    T: de::DeserializeSeed<'de>,",
    "{",
    "    match tri!(self.map.next_key_seed(seed)) {",
    "        Some(key) => Ok((key, private::map_as_enum(self.map))),",
    "        None => Err(de::Error::invalid_type(de::Unexpected::Map, &\"enum\")),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.next_key_seed(seed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        4,
        7,
        23,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.next_key_seed(seed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        },
        {
          "cond": "self.map.next_key_seed(seed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        },
        {
          "cond": "self.map.next_key_seed(seed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        },
        {
          "cond": "match $expr {\n            Ok(val) => val,\n            Err(err) => return Err(err),\n        } matches Some(key)",
          "norm": null,
          "value": "true",
          "line": 297,
          "bound": null
        }
      ],
      "ret": "Ok((key, private::map_as_enum(self.map)))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        21,
        22,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.map.next_key_seed(seed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        },
        {
          "cond": "self.map.next_key_seed(seed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        },
        {
          "cond": "self.map.next_key_seed(seed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1675,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_type(de::Unexpected::Map, &\"enum\"))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        10,
        17,
        18,
        19,
        20,
        21,
        22,
        26
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}