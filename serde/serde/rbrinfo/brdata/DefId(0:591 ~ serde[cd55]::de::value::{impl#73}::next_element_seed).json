{
  "name": "serde::de::value::{impl#73}::next_element_seed",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1537:5:1548:6",
  "doc": "",
  "code": [
    "fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>",
    "where",
    "    T: de::DeserializeSeed<'de>,",
    "{",
    "    if let Some(k) = self.0.take() {",
    "        seed.deserialize(k.into_deserializer()).map(Some)",
    "    } else if let Some(v) = self.1.take() {",
    "        seed.deserialize(v.into_deserializer()).map(Some)",
    "    } else {",
    "        Ok(None)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(k) = self.0.take()",
          "norm": null,
          "value": "true",
          "line": 1541,
          "bound": null
        },
        {
          "cond": "let Some(v) = self.1.take()",
          "norm": null,
          "value": "true",
          "line": 1543,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        7,
        9,
        15,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(k) = self.0.take()",
          "norm": null,
          "value": "true",
          "line": 1541,
          "bound": null
        },
        {
          "cond": "let Some(v) = self.1.take()",
          "norm": null,
          "value": "true",
          "line": 1543,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(k) = self.0.take()",
          "norm": null,
          "value": "true",
          "line": 1541,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}