{
  "name": "serde::de::impls::{impl#4}::visit_str",
  "mod_info": {
    "name": "de::impls",
    "loc": "serde/src/de/mod.rs:122:1:122:11"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:556:5:565:6",
  "doc": "",
  "code": [
    "fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>",
    "where",
    "    E: Error,",
    "{",
    "    let mut iter = v.chars();",
    "    match (iter.next(), iter.next()) {",
    "        (Some(c), None) => Ok(c),",
    "        _ => Err(Error::invalid_value(Unexpected::Str(v), &self)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(iter.next(), iter.next()) matches _",
          "norm": null,
          "value": "true",
          "line": 563,
          "bound": null
        }
      ],
      "ret": "Err(Error::invalid_value(Unexpected::Str(v), &self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(iter.next(), iter.next()) matches _",
          "norm": null,
          "value": "true",
          "line": 563,
          "bound": null
        }
      ],
      "ret": "Err(Error::invalid_value(Unexpected::Str(v), &self))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        4,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(iter.next(), iter.next()) matches (Some(c), None)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        }
      ],
      "ret": "Ok(c)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}