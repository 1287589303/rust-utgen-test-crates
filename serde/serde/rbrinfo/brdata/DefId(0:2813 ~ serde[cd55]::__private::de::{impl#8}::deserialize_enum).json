{
  "name": "serde::__private::de::{impl#8}::deserialize_enum",
  "mod_info": {
    "name": "__private::de",
    "loc": "serde/src/private/mod.rs:2:1:2:12"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:2535:5:2554:6",
  "doc": "",
  "code": [
    "fn deserialize_enum<V>(",
    "    self,",
    "    name: &'static str,",
    "    variants: &'static [&'static str],",
    "    visitor: V,",
    ") -> Result<V::Value, Self::Error>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    for entry in self.0 {",
    "        if let Some((key, value)) = flat_map_take_entry(entry, variants) {",
    "            return visitor.visit_enum(EnumDeserializer::new(key, Some(value)));",
    "        }",
    "    }",
    "",
    "    Err(Error::custom(format_args!(",
    "        \"no variant of enum {} found in flattened data\",",
    "        name",
    "    )))",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "entry in self.0",
          "norm": null,
          "value": "true",
          "line": 2544,
          "bound": null
        },
        {
          "cond": "let Some((key, value)) = flat_map_take_entry(entry, variants)",
          "norm": null,
          "value": "true",
          "line": 2545,
          "bound": null
        },
        {
          "cond": "entry in self.0",
          "norm": null,
          "value": "false",
          "line": 2544,
          "bound": null
        }
      ],
      "ret": "Err(Error::custom(format_args!(\n            \"no variant of enum {} found in flattened data\",\n            name\n        )))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        15,
        16,
        2,
        3,
        4,
        6,
        8,
        17,
        18,
        19,
        20,
        24
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "entry in self.0",
          "norm": null,
          "value": "true",
          "line": 2544,
          "bound": null
        },
        {
          "cond": "let Some((key, value)) = flat_map_take_entry(entry, variants)",
          "norm": null,
          "value": "true",
          "line": 2545,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "entry in self.0",
          "norm": null,
          "value": "false",
          "line": 2544,
          "bound": null
        }
      ],
      "ret": "Err(Error::custom(format_args!(\n            \"no variant of enum {} found in flattened data\",\n            name\n        )))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        17,
        18,
        19,
        20,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}