{
  "name": "serde::de::impls::{impl#19}::deserialize",
  "mod_info": {
    "name": "de::impls",
    "loc": "serde/src/de/mod.rs:122:1:122:11"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:1140:5:1177:6",
  "doc": "",
  "code": [
    "fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>",
    "where",
    "    D: Deserializer<'de>,",
    "{",
    "    struct VecVisitor<T> {",
    "        marker: PhantomData<T>,",
    "    }",
    "",
    "    impl<'de, T> Visitor<'de> for VecVisitor<T>",
    "    where",
    "        T: Deserialize<'de>,",
    "    {",
    "        type Value = Vec<T>;",
    "",
    "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
    "            formatter.write_str(\"a sequence\")",
    "        }",
    "",
    "        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>",
    "        where",
    "            A: SeqAccess<'de>,",
    "        {",
    "            let capacity = size_hint::cautious::<T>(seq.size_hint());",
    "            let mut values = Vec::<T>::with_capacity(capacity);",
    "",
    "            while let Some(value) = tri!(seq.next_element()) {",
    "                values.push(value);",
    "            }",
    "",
    "            Ok(values)",
    "        }",
    "    }",
    "",
    "    let visitor = VecVisitor {",
    "        marker: PhantomData,",
    "    };",
    "    deserializer.deserialize_seq(visitor)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}