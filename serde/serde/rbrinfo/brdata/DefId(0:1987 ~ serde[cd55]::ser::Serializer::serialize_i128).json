{
  "name": "serde::ser::Serializer::serialize_i128",
  "mod_info": {
    "name": "ser",
    "loc": "serde/src/lib.rs:313:1:313:13"
  },
  "visible": true,
  "loc": "serde/src/ser/mod.rs:516:5:519:6",
  "doc": "/// Serialize an `i128` value.\n///\n/// ```edition2021\n/// # use serde::Serializer;\n/// #\n/// # serde::__private_serialize!();\n/// #\n/// impl Serialize for i128 {\n///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n///     where\n///         S: Serializer,\n///     {\n///         serializer.serialize_i128(*self)\n///     }\n/// }\n/// ```\n///\n/// The default behavior unconditionally returns an error.\n",
  "code": [
    "fn serialize_i128(self, v: i128) -> Result<Self::Ok, Self::Error> {",
    "    let _ = v;",
    "    Err(Error::custom(\"i128 is not supported\"))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Err(Error::custom(\"i128 is not supported\"))",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}