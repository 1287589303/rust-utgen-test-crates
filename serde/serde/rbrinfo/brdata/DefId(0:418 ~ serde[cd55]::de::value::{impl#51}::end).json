{
  "name": "serde::de::value::{impl#51}::end",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1029:5:1041:6",
  "doc": "/// Check for remaining elements after passing a `SeqDeserializer` to\n/// `Visitor::visit_seq`.\n",
  "code": [
    "pub fn end(self) -> Result<(), E> {",
    "    let remaining = self.iter.count();",
    "    if remaining == 0 {",
    "        Ok(())",
    "    } else {",
    "        // First argument is the number of elements in the data, second",
    "        // argument is the number of elements expected by the Deserialize.",
    "        Err(de::Error::invalid_length(",
    "            self.count + remaining,",
    "            &ExpectedInSeq(self.count),",
    "        ))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "remaining == 0",
          "norm": "0 == remaining",
          "value": "false",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "remaining == 0",
          "norm": "0 == remaining",
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_length(\n                self.count + remaining,\n                &ExpectedInSeq(self.count),\n            ))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}