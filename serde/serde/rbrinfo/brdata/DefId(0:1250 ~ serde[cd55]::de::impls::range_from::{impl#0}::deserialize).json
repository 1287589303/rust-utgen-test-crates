{
  "name": "serde::de::impls::range_from::{impl#0}::deserialize",
  "mod_info": {
    "name": "de::impls::range_from",
    "loc": "serde/src/de/impls.rs:2622:1:2729:2"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:2638:9:2676:10",
  "doc": "",
  "code": [
    "fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>",
    "where",
    "    D: Deserializer<'de>,",
    "{",
    "    struct FieldVisitor;",
    "",
    "    impl<'de> Visitor<'de> for FieldVisitor {",
    "        type Value = Field;",
    "",
    "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
    "            formatter.write_str(\"`start`\")",
    "        }",
    "",
    "        fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>",
    "        where",
    "            E: Error,",
    "        {",
    "            match value {",
    "                \"start\" => Ok(Field::Start),",
    "                _ => Err(Error::unknown_field(value, FIELDS)),",
    "            }",
    "        }",
    "",
    "        fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>",
    "        where",
    "            E: Error,",
    "        {",
    "            match value {",
    "                b\"start\" => Ok(Field::Start),",
    "                _ => {",
    "                    let value = crate::__private::from_utf8_lossy(value);",
    "                    Err(Error::unknown_field(&*value, FIELDS))",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    deserializer.deserialize_identifier(FieldVisitor)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}