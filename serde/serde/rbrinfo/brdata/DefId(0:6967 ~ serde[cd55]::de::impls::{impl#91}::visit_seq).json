{
  "name": "serde::de::impls::{impl#91}::visit_seq",
  "mod_info": {
    "name": "de::impls",
    "loc": "serde/src/de/mod.rs:122:1:122:11"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:1306:17:1321:18",
  "doc": "",
  "code": [
    "fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: SeqAccess<'de>,",
    "{",
    "    let mut fail_idx = None;",
    "    for (idx, dest) in self.0[..].iter_mut().enumerate() {",
    "        if tri!(seq.next_element_seed(InPlaceSeed(dest))).is_none() {",
    "            fail_idx = Some(idx);",
    "            break;",
    "        }",
    "    }",
    "    if let Some(idx) = fail_idx {",
    "        return Err(Error::invalid_length(idx, &self));",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "seq.next_element_seed(InPlaceSeed(dest)) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        15,
        17,
        29,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "seq.next_element_seed(InPlaceSeed(dest)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "tri!(seq.next_element_seed(InPlaceSeed(dest))).is_none()",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        16,
        18,
        19,
        20,
        23,
        24,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "seq.next_element_seed(InPlaceSeed(dest)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "tri!(seq.next_element_seed(InPlaceSeed(dest))).is_none()",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Err(Error::invalid_length(idx, &self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        16,
        18,
        19,
        20,
        23,
        25,
        26,
        27,
        28,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "seq.next_element_seed(InPlaceSeed(dest)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "tri!(seq.next_element_seed(InPlaceSeed(dest))).is_none()",
          "norm": null,
          "value": "false",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "false",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        16,
        18,
        21,
        22,
        5,
        6,
        7,
        9,
        11,
        23,
        24,
        32
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "seq.next_element_seed(InPlaceSeed(dest)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "tri!(seq.next_element_seed(InPlaceSeed(dest))).is_none()",
          "norm": null,
          "value": "false",
          "line": 1312,
          "bound": null
        },
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "false",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Err(Error::invalid_length(idx, &self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        16,
        18,
        21,
        22,
        5,
        6,
        7,
        9,
        11,
        23,
        25,
        26,
        27,
        28,
        31,
        32
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "false",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        23,
        24,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(idx, dest) in self.0[..].iter_mut().enumerate()",
          "norm": null,
          "value": "false",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "let Some(idx) = fail_idx",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": "Err(Error::invalid_length(idx, &self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        23,
        25,
        26,
        27,
        28,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}