{
  "name": "serde::ser::Serializer::collect_seq",
  "mod_info": {
    "name": "ser",
    "loc": "serde/src/lib.rs:313:1:313:13"
  },
  "visible": true,
  "loc": "serde/src/ser/mod.rs:1281:5:1290:6",
  "doc": "/// Collect an iterator as a sequence.\n///\n/// The default implementation serializes each item yielded by the iterator\n/// using [`serialize_seq`]. Implementors should not need to override this\n/// method.\n///\n/// ```edition2021\n/// use serde::{Serialize, Serializer};\n///\n/// struct SecretlyOneHigher {\n///     data: Vec<i32>,\n/// }\n///\n/// impl Serialize for SecretlyOneHigher {\n///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n///     where\n///         S: Serializer,\n///     {\n///         serializer.collect_seq(self.data.iter().map(|x| x + 1))\n///     }\n/// }\n/// ```\n///\n/// [`serialize_seq`]: #tymethod.serialize_seq\n",
  "code": [
    "fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>",
    "where",
    "    I: IntoIterator,",
    "    <I as IntoIterator>::Item: Serialize,",
    "{",
    "    let mut iter = iter.into_iter();",
    "    let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));",
    "    tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));",
    "    serializer.end()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.serialize_seq(iterator_len_hint(&iter)) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1287,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        24,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.serialize_seq(iterator_len_hint(&iter)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1287,
          "bound": null
        },
        {
          "cond": "iter.try_for_each(|item| serializer.serialize_element(&item)) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        10,
        11,
        14,
        16,
        22,
        23,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.serialize_seq(iterator_len_hint(&iter)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1287,
          "bound": null
        },
        {
          "cond": "iter.try_for_each(|item| serializer.serialize_element(&item)) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        10,
        11,
        13,
        15,
        17,
        18,
        19,
        20,
        21,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}