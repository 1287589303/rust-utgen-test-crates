{
  "name": "serde::__private::de::content::{impl#5}::visit_map",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:514:9:526:10",
  "doc": "",
  "code": [
    "fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>",
    "where",
    "    V: MapAccess<'de>,",
    "{",
    "    let mut vec =",
    "        Vec::<(Content, Content)>::with_capacity(",
    "            size_hint::cautious::<(Content, Content)>(visitor.size_hint()),",
    "        );",
    "    while let Some(kv) = tri!(visitor.next_entry()) {",
    "        vec.push(kv);",
    "    }",
    "    Ok(Content::Map(vec))",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "visitor.next_entry() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "visitor.next_entry() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        },
        {
          "cond": "visitor.next_entry() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        },
        {
          "cond": "let Some(kv) = tri!(visitor.next_entry())",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        }
      ],
      "ret": "Ok(Content::Map(vec))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        13,
        20,
        21,
        22,
        23,
        24,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "visitor.next_entry() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        },
        {
          "cond": "visitor.next_entry() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        },
        {
          "cond": "let Some(kv) = tri!(visitor.next_entry())",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        },
        {
          "cond": "visitor.next_entry() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 522,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        4,
        5,
        6,
        9,
        12,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}