{
  "name": "serde::de::Visitor::visit_borrowed_str",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1510:5:1515:6",
  "doc": "/// The input contains a string that lives at least as long as the\n/// `Deserializer`.\n///\n/// This enables zero-copy deserialization of strings in some formats. For\n/// example JSON input containing the JSON string `\"borrowed\"` can be\n/// deserialized with zero copying into a `&'a str` as long as the input\n/// data outlives `'a`.\n///\n/// The default implementation forwards to `visit_str`.\n",
  "code": [
    "fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>",
    "where",
    "    E: Error,",
    "{",
    "    self.visit_str(v)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}