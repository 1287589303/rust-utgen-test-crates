{
  "name": "serde::__private::de::content::{impl#22}::deserialize_option",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:1906:9:1925:10",
  "doc": "",
  "code": [
    "fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    // Covered by tests/test_enum_untagged.rs",
    "    //      with_optional_field::*",
    "    match *self.content {",
    "        Content::None => visitor.visit_none(),",
    "        Content::Some(ref v) => visitor.visit_some(ContentRefDeserializer::new(v)),",
    "        Content::Unit => visitor.visit_unit(),",
    "        // This case is to support data formats which do not encode an",
    "        // indication whether a value is optional. An example of such a",
    "        // format is JSON, and a counterexample is RON. When requesting",
    "        // `deserialize_any` in JSON, the data format never performs",
    "        // `Visitor::visit_some` but we still must be able to",
    "        // deserialize the resulting Content into data structures with",
    "        // optional fields.",
    "        _ => visitor.visit_some(self),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.content matches Content::None",
          "norm": null,
          "value": "false",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Some(ref v)",
          "norm": null,
          "value": "false",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Unit",
          "norm": null,
          "value": "false",
          "line": 1915,
          "bound": null
        },
        {
          "cond": "*self.content matches _",
          "norm": null,
          "value": "true",
          "line": 1923,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.content matches Content::Unit",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Unit",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        10,
        11,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self.content matches Content::Some(ref v)",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Some(ref v)",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self.content matches Content::None",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::None",
          "norm": null,
          "value": "true",
          "line": 1912,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}