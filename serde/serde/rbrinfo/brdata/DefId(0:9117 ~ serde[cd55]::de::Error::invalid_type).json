{
  "name": "serde::de::Error::invalid_type",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:209:13:211:14",
  "doc": "/// Raised when a `Deserialize` receives a type different from what it was\n/// expecting.\n///\n/// The `unexp` argument provides information about what type was received.\n/// This is the type that was present in the input file or other source data\n/// of the Deserializer.\n///\n/// The `exp` argument provides information about what type was being\n/// expected. This is the type that is written in the program.\n///\n/// For example if we try to deserialize a String out of a JSON file\n/// containing an integer, the unexpected type is the integer and the\n/// expected type is the string.\n",
  "code": [
    "fn invalid_type(unexp: Unexpected, exp: &dyn Expected) -> Self {",
    "    Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}