{
  "name": "serde::de::value::{impl#72}::deserialize_seq",
  "mod_info": {
    "name": "de::value",
    "loc": "serde/src/de/mod.rs:119:1:119:15"
  },
  "visible": true,
  "loc": "serde/src/de/value.rs:1497:5:1511:6",
  "doc": "",
  "code": [
    "fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>",
    "where",
    "    V: de::Visitor<'de>,",
    "{",
    "    let mut pair_visitor = PairVisitor(Some(self.0), Some(self.1), PhantomData);",
    "    let pair = tri!(visitor.visit_seq(&mut pair_visitor));",
    "    if pair_visitor.1.is_none() {",
    "        Ok(pair)",
    "    } else {",
    "        let remaining = pair_visitor.size_hint().unwrap();",
    "        // First argument is the number of elements in the data, second",
    "        // argument is the number of elements expected by the Deserialize.",
    "        Err(de::Error::invalid_length(2, &ExpectedInSeq(2 - remaining)))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "visitor.visit_seq(&mut pair_visitor) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        26,
        27,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "visitor.visit_seq(&mut pair_visitor) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "visitor.visit_seq(&mut pair_visitor) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "pair_visitor.1.is_none()",
          "norm": null,
          "value": "true",
          "line": 1503,
          "bound": null
        }
      ],
      "ret": "Ok(pair)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        22,
        23,
        24,
        25,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "visitor.visit_seq(&mut pair_visitor) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "visitor.visit_seq(&mut pair_visitor) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "pair_visitor.1.is_none()",
          "norm": null,
          "value": "false",
          "line": 1503,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_length(2, &ExpectedInSeq(2 - remaining)))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}