{
  "name": "serde::de::impls::range::{impl#1}::visit_map",
  "mod_info": {
    "name": "de::impls::range",
    "loc": "serde/src/de/impls.rs:2464:1:2591:2"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:2558:9:2589:10",
  "doc": "",
  "code": [
    "fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: MapAccess<'de>,",
    "{",
    "    let mut start: Option<Idx> = None;",
    "    let mut end: Option<Idx> = None;",
    "    while let Some(key) = tri!(map.next_key()) {",
    "        match key {",
    "            Field::Start => {",
    "                if start.is_some() {",
    "                    return Err(<A::Error as Error>::duplicate_field(\"start\"));",
    "                }",
    "                start = Some(tri!(map.next_value()));",
    "            }",
    "            Field::End => {",
    "                if end.is_some() {",
    "                    return Err(<A::Error as Error>::duplicate_field(\"end\"));",
    "                }",
    "                end = Some(tri!(map.next_value()));",
    "            }",
    "        }",
    "    }",
    "    let start = match start {",
    "        Some(start) => start,",
    "        None => return Err(<A::Error as Error>::missing_field(\"start\")),",
    "    };",
    "    let end = match end {",
    "        Some(end) => end,",
    "        None => return Err(<A::Error as Error>::missing_field(\"end\")),",
    "    };",
    "    Ok((start, end))",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "map.next_key() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2580,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2580,
          "bound": null
        },
        {
          "cond": "end matches Some(end)",
          "norm": null,
          "value": "true",
          "line": 2584,
          "bound": null
        },
        {
          "cond": "end matches Some(end)",
          "norm": null,
          "value": "true",
          "line": 2584,
          "bound": null
        }
      ],
      "ret": "Ok((start, end))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        52,
        54,
        56,
        57,
        61,
        63,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2580,
          "bound": null
        },
        {
          "cond": "start matches Some(start)",
          "norm": null,
          "value": "true",
          "line": 2580,
          "bound": null
        },
        {
          "cond": "end matches None",
          "norm": null,
          "value": "true",
          "line": 2584,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::missing_field(\"end\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        52,
        54,
        56,
        57,
        62,
        65,
        66,
        74,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "start matches None",
          "norm": null,
          "value": "true",
          "line": 2580,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::missing_field(\"start\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        52,
        55,
        58,
        59,
        74,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::End",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "end.is_some()",
          "norm": null,
          "value": "true",
          "line": 2573,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::duplicate_field(\"end\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        14,
        33,
        34,
        35,
        36,
        79,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::End",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "end.is_some()",
          "norm": null,
          "value": "false",
          "line": 2573,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2576,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        14,
        33,
        37,
        38,
        41,
        44,
        75,
        76,
        79,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::End",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "end.is_some()",
          "norm": null,
          "value": "false",
          "line": 2573,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2576,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        14,
        33,
        37,
        38,
        40,
        42,
        43,
        45,
        46,
        48,
        49,
        50,
        51,
        1,
        2,
        3,
        6,
        8,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "true",
          "line": 2567,
          "bound": null
        }
      ],
      "ret": "Err(<A::Error as Error>::duplicate_field(\"start\"))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        79,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "false",
          "line": 2567,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2570,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        13,
        15,
        16,
        20,
        21,
        24,
        27,
        77,
        78,
        79,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "map.next_key() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "let Some(key) = tri!(map.next_key())",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "key matches Field::Start",
          "norm": null,
          "value": "true",
          "line": 2565,
          "bound": null
        },
        {
          "cond": "start.is_some()",
          "norm": null,
          "value": "false",
          "line": 2567,
          "bound": null
        },
        {
          "cond": "map.next_value() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2570,
          "bound": null
        },
        {
          "cond": "map.next_key() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 2564,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        13,
        15,
        16,
        20,
        21,
        23,
        25,
        26,
        28,
        29,
        31,
        32,
        50,
        51,
        1,
        2,
        3,
        6,
        8,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}