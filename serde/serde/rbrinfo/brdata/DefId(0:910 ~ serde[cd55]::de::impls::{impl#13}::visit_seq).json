{
  "name": "serde::de::impls::{impl#13}::visit_seq",
  "mod_info": {
    "name": "de::impls",
    "loc": "serde/src/de/mod.rs:122:1:122:11"
  },
  "visible": true,
  "loc": "serde/src/de/impls.rs:788:5:800:6",
  "doc": "",
  "code": [
    "fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: SeqAccess<'de>,",
    "{",
    "    let capacity = size_hint::cautious::<u8>(seq.size_hint());",
    "    let mut values = Vec::<u8>::with_capacity(capacity);",
    "",
    "    while let Some(value) = tri!(seq.next_element()) {",
    "        values.push(value);",
    "    }",
    "",
    "    CString::new(values).map_err(Error::custom)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "seq.next_element() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "let Some(value) = tri!(seq.next_element())",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        12,
        17,
        18,
        19,
        20,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "let Some(value) = tri!(seq.next_element())",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        13,
        14,
        15,
        16,
        4,
        5,
        6,
        9,
        11,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}