{
  "name": "serde::__private::de::content::{impl#22}::deserialize_enum",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:2026:9:2070:10",
  "doc": "",
  "code": [
    "fn deserialize_enum<V>(",
    "    self,",
    "    _name: &str,",
    "    _variants: &'static [&'static str],",
    "    visitor: V,",
    ") -> Result<V::Value, Self::Error>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    let (variant, value) = match *self.content {",
    "        Content::Map(ref value) => {",
    "            let mut iter = value.iter();",
    "            let (variant, value) = match iter.next() {",
    "                Some(v) => v,",
    "                None => {",
    "                    return Err(de::Error::invalid_value(",
    "                        de::Unexpected::Map,",
    "                        &\"map with a single key\",",
    "                    ));",
    "                }",
    "            };",
    "            // enums are encoded in json as maps with a single key:value pair",
    "            if iter.next().is_some() {",
    "                return Err(de::Error::invalid_value(",
    "                    de::Unexpected::Map,",
    "                    &\"map with a single key\",",
    "                ));",
    "            }",
    "            (variant, Some(value))",
    "        }",
    "        ref s @ Content::String(_) | ref s @ Content::Str(_) => (s, None),",
    "        ref other => {",
    "            return Err(de::Error::invalid_type(",
    "                other.unexpected(),",
    "                &\"string or map\",",
    "            ));",
    "        }",
    "    };",
    "",
    "    visitor.visit_enum(EnumRefDeserializer {",
    "        variant,",
    "        value,",
    "        err: PhantomData,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "false",
          "line": 2036,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_type(\n                        other.unexpected(),\n                        &\"string or map\",\n                    ))",
      "path": [
        0,
        1,
        24,
        25,
        26,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 2038,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 2038,
          "bound": null
        },
        {
          "cond": "iter.next().is_some()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_value(\n                            de::Unexpected::Map,\n                            &\"map with a single key\",\n                        ))",
      "path": [
        0,
        2,
        5,
        6,
        7,
        8,
        10,
        12,
        15,
        16,
        17,
        18,
        19,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 2038,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 2038,
          "bound": null
        },
        {
          "cond": "iter.next().is_some()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        7,
        8,
        10,
        12,
        15,
        16,
        20,
        27,
        28,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Map(ref value)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 2038,
          "bound": null
        }
      ],
      "ret": "Err(de::Error::invalid_value(\n                                de::Unexpected::Map,\n                                &\"map with a single key\",\n                            ))",
      "path": [
        0,
        2,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self.content matches ",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "*self.content matches ref s @ Content::Str(_)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        23,
        21,
        27,
        28,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self.content matches ",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        },
        {
          "cond": "*self.content matches ref s @ Content::String(_)",
          "norm": null,
          "value": "true",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        22,
        21,
        27,
        28,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}