{
  "name": "serde::de::Visitor::visit_str",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1493:5:1498:6",
  "doc": "/// The input contains a string. The lifetime of the string is ephemeral and\n/// it may be destroyed after this method returns.\n///\n/// This method allows the `Deserializer` to avoid a copy by retaining\n/// ownership of any buffered data. `Deserialize` implementations that do\n/// not benefit from taking ownership of `String` data should indicate that\n/// to the deserializer by using `Deserializer::deserialize_str` rather than\n/// `Deserializer::deserialize_string`.\n///\n/// It is never correct to implement `visit_string` without implementing\n/// `visit_str`. Implement neither, both, or just `visit_str`.\n",
  "code": [
    "fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>",
    "where",
    "    E: Error,",
    "{",
    "    Err(Error::invalid_type(Unexpected::Str(v), &self))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Err(Error::invalid_type(Unexpected::Str(v), &self))",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}