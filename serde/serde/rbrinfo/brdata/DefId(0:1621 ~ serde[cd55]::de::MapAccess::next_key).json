{
  "name": "serde::de::MapAccess::next_key",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1852:5:1857:6",
  "doc": "/// This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\n/// if there are no more remaining entries.\n///\n/// This method exists as a convenience for `Deserialize` implementations.\n/// `MapAccess` implementations should not override the default behavior.\n",
  "code": [
    "fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>",
    "where",
    "    K: Deserialize<'de>,",
    "{",
    "    self.next_key_seed(PhantomData)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}