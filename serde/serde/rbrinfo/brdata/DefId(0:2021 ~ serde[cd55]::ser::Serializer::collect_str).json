{
  "name": "serde::ser::Serializer::collect_str",
  "mod_info": {
    "name": "ser",
    "loc": "serde/src/lib.rs:313:1:313:13"
  },
  "visible": true,
  "loc": "serde/src/ser/mod.rs:1358:5:1363:6",
  "doc": "/// Serialize a string produced by an implementation of `Display`.\n///\n/// The default implementation builds a heap-allocated [`String`] and\n/// delegates to [`serialize_str`]. Serializers are encouraged to provide a\n/// more efficient implementation if possible.\n///\n/// ```edition2021\n/// # struct DateTime;\n/// #\n/// # impl DateTime {\n/// #     fn naive_local(&self) -> () { () }\n/// #     fn offset(&self) -> () { () }\n/// # }\n/// #\n/// use serde::{Serialize, Serializer};\n///\n/// impl Serialize for DateTime {\n///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n///     where\n///         S: Serializer,\n///     {\n///         serializer.collect_str(&format_args!(\"{:?}{:?}\", self.naive_local(), self.offset()))\n///     }\n/// }\n/// ```\n///\n/// [`serialize_str`]: Self::serialize_str\n",
  "code": [
    "fn collect_str<T>(self, value: &T) -> Result<Self::Ok, Self::Error>",
    "where",
    "    T: ?Sized + Display,",
    "{",
    "    self.serialize_str(&value.to_string())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}