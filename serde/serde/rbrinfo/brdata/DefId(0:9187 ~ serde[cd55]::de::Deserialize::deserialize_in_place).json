{
  "name": "serde::de::Deserialize::deserialize_in_place",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:572:5:579:6",
  "doc": "/// Deserializes a value into `self` from the given Deserializer.\n///\n/// The purpose of this method is to allow the deserializer to reuse\n/// resources and avoid copies. As such, if this method returns an error,\n/// `self` will be in an indeterminate state where some parts of the struct\n/// have been overwritten. Although whatever state that is will be\n/// memory-safe.\n///\n/// This is generally useful when repeatedly deserializing values that\n/// are processed one at a time, where the value of `self` doesn't matter\n/// when the next deserialization occurs.\n///\n/// If you manually implement this, your recursive deserializations should\n/// use `deserialize_in_place`.\n///\n/// This method is stable and an official public API, but hidden from the\n/// documentation because it is almost never what newbies are looking for.\n/// Showing it in rustdoc would cause it to be featured more prominently\n/// than it deserves.\n",
  "code": [
    "fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>",
    "where",
    "    D: Deserializer<'de>,",
    "{",
    "    // Default implementation just delegates to `deserialize` impl.",
    "    *place = tri!(Deserialize::deserialize(deserializer));",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Deserialize::deserialize(deserializer) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        4,
        7,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Deserialize::deserialize(deserializer) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        10,
        11,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}