{
  "name": "serde::de::Visitor::visit_map",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1660:5:1666:6",
  "doc": "/// The input contains a key-value map.\n///\n/// The default implementation fails with a type error.\n",
  "code": [
    "fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: MapAccess<'de>,",
    "{",
    "    let _ = map;",
    "    Err(Error::invalid_type(Unexpected::Map, &self))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Err(Error::invalid_type(Unexpected::Map, &self))",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}