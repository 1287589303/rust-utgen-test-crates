{
  "name": "serde::__private::de::content::{impl#22}::deserialize_newtype_struct",
  "mod_info": {
    "name": "__private::de::content",
    "loc": "serde/src/private/de.rs:198:1:2358:2"
  },
  "visible": true,
  "loc": "serde/src/private/de.rs:1948:9:1969:10",
  "doc": "",
  "code": [
    "fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, E>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    // Covered by tests/test_enum_untagged.rs",
    "    //      newtype_struct",
    "    match *self.content {",
    "        Content::Newtype(ref v) => {",
    "            visitor.visit_newtype_struct(ContentRefDeserializer::new(v))",
    "        }",
    "        // This case is to support data formats that encode newtype",
    "        // structs and their underlying data the same, with no",
    "        // indication whether a newtype wrapper was present. For example",
    "        // JSON does this, while RON does not. In RON a newtype's name",
    "        // is included in the serialized representation and it knows to",
    "        // call `Visitor::visit_newtype_struct` from `deserialize_any`.",
    "        // JSON's `deserialize_any` never calls `visit_newtype_struct`",
    "        // but in this code we still must be able to deserialize the",
    "        // resulting Content into newtypes.",
    "        _ => visitor.visit_newtype_struct(self),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.content matches _",
          "norm": null,
          "value": "true",
          "line": 1967,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Newtype(ref v)",
          "norm": null,
          "value": "false",
          "line": 1955,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.content matches Content::Newtype(ref v)",
          "norm": null,
          "value": "true",
          "line": 1954,
          "bound": null
        },
        {
          "cond": "*self.content matches Content::Newtype(ref v)",
          "norm": null,
          "value": "true",
          "line": 1954,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}