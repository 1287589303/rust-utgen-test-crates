{
  "name": "serde::de::MapAccess::next_value",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1869:5:1874:6",
  "doc": "/// This returns a `Ok(value)` for the next value in the map.\n///\n/// This method exists as a convenience for `Deserialize` implementations.\n/// `MapAccess` implementations should not override the default behavior.\n///\n/// # Panics\n///\n/// Calling `next_value` before `next_key` is incorrect and is allowed to\n/// panic or return bogus results.\n",
  "code": [
    "fn next_value<V>(&mut self) -> Result<V, Self::Error>",
    "where",
    "    V: Deserialize<'de>,",
    "{",
    "    self.next_value_seed(PhantomData)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}