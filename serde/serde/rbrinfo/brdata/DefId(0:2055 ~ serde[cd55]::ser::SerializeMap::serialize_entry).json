{
  "name": "serde::ser::SerializeMap::serialize_entry",
  "mod_info": {
    "name": "ser",
    "loc": "serde/src/lib.rs:313:1:313:13"
  },
  "visible": true,
  "loc": "serde/src/ser/mod.rs:1810:5:1817:6",
  "doc": "/// Serialize a map entry consisting of a key and a value.\n///\n/// Some [`Serialize`] types are not able to hold a key and value in memory\n/// at the same time so `SerializeMap` implementations are required to\n/// support [`serialize_key`] and [`serialize_value`] individually. The\n/// `serialize_entry` method allows serializers to optimize for the case\n/// where key and value are both available. [`Serialize`] implementations\n/// are encouraged to use `serialize_entry` if possible.\n///\n/// The default implementation delegates to [`serialize_key`] and\n/// [`serialize_value`]. This is appropriate for serializers that do not\n/// care about performance or are not able to optimize `serialize_entry` any\n/// better than this.\n///\n/// [`Serialize`]: crate::Serialize\n/// [`serialize_key`]: Self::serialize_key\n/// [`serialize_value`]: Self::serialize_value\n",
  "code": [
    "fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>",
    "where",
    "    K: ?Sized + Serialize,",
    "    V: ?Sized + Serialize,",
    "{",
    "    tri!(self.serialize_key(key));",
    "    self.serialize_value(value)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.serialize_key(key) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        4,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.serialize_key(key) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "self.serialize_key(key) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        7,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}