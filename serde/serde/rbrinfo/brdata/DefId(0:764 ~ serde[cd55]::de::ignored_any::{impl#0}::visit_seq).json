{
  "name": "serde::de::ignored_any::{impl#0}::visit_seq",
  "mod_info": {
    "name": "de::ignored_any",
    "loc": "serde/src/de/mod.rs:121:1:121:17"
  },
  "visible": true,
  "loc": "serde/src/de/ignored_any.rs:192:5:200:6",
  "doc": "",
  "code": [
    "fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>",
    "where",
    "    A: SeqAccess<'de>,",
    "{",
    "    while let Some(IgnoredAny) = tri!(seq.next_element()) {",
    "        // Gobble",
    "    }",
    "    Ok(IgnoredAny)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "seq.next_element() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        },
        {
          "cond": "let Some(IgnoredAny) = tri!(seq.next_element())",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        }
      ],
      "ret": "Ok(IgnoredAny)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        13,
        16
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        },
        {
          "cond": "let Some(IgnoredAny) = tri!(seq.next_element())",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        },
        {
          "cond": "seq.next_element() matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 196,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        12,
        1,
        2,
        3,
        6,
        8,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}