{
  "name": "serde::de::MapAccess::next_entry_seed",
  "mod_info": {
    "name": "de",
    "loc": "serde/src/lib.rs:312:1:312:12"
  },
  "visible": true,
  "loc": "serde/src/de/mod.rs:1828:5:1844:6",
  "doc": "/// This returns `Ok(Some((key, value)))` for the next (key-value) pair in\n/// the map, or `Ok(None)` if there are no more remaining items.\n///\n/// `MapAccess` implementations should override the default behavior if a\n/// more efficient implementation is possible.\n///\n/// `Deserialize` implementations should typically use\n/// `MapAccess::next_entry` instead.\n",
  "code": [
    "fn next_entry_seed<K, V>(",
    "    &mut self,",
    "    kseed: K,",
    "    vseed: V,",
    ") -> Result<Option<(K::Value, V::Value)>, Self::Error>",
    "where",
    "    K: DeserializeSeed<'de>,",
    "    V: DeserializeSeed<'de>,",
    "{",
    "    match tri!(self.next_key_seed(kseed)) {",
    "        Some(key) => {",
    "            let value = tri!(self.next_value_seed(vseed));",
    "            Ok(Some((key, value)))",
    "        }",
    "        None => Ok(None),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.next_key_seed(kseed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        4,
        7,
        34,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.next_key_seed(kseed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        },
        {
          "cond": "self.next_key_seed(kseed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        },
        {
          "cond": "match $expr {\n            Ok(val) => val,\n            Err(err) => return Err(err),\n        } matches Some(key)",
          "norm": null,
          "value": "true",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.next_value_seed(vseed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1839,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        9,
        11,
        12,
        15,
        18,
        31,
        32,
        33,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.next_key_seed(kseed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        },
        {
          "cond": "self.next_key_seed(kseed) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        },
        {
          "cond": "match $expr {\n            Ok(val) => val,\n            Err(err) => return Err(err),\n        } matches Some(key)",
          "norm": null,
          "value": "true",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.next_value_seed(vseed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1839,
          "bound": null
        }
      ],
      "ret": "Ok(Some((key, value)))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        9,
        11,
        12,
        14,
        16,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.next_key_seed(kseed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        },
        {
          "cond": "self.next_key_seed(kseed) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1837,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        10,
        26,
        27,
        28,
        29,
        30,
        38
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}