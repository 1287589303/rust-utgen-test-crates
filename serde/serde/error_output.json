{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/proc-macro2-0c3d45c0079797c8/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/proc-macro2-3bfb6d3b5c679c6f/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libunicode_ident-926027468c5cecb0.rlib","/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libunicode_ident-926027468c5cecb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde_derive#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde_derive/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde_derive/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/serde_derive-a51edaf4c064a40e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/serde-d05a4376da9b44f6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rlib","/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde_derive#1.0.219","linked_libs":[],"linked_paths":[],"cfgs":["check_cfg"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/serde_derive-ced11b7b1fb35010/out"}
{"reason":"build-script-executed","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/serde/target/debug/build/serde-1a12532a11ede2bb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libquote-ba51b6359bb907e7.rlib","/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libquote-ba51b6359bb907e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","derive","parsing","printing","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libsyn-43438f6056661991.rlib","/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libsyn-43438f6056661991.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde_derive#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde_derive/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde_derive/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/abezbm/rust-utgen-test-crates/serde/target/debug/deps/libserde_derive-614ac6932407fbdd.so"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `fmt`\n    --> serde/src/private/de.rs:2369:5\n     |\n2369 |     impl Expected for ExpectedSeq {}\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n     |\n    ::: serde/src/de/mod.rs:477:5\n     |\n477  |     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n     |     ------------------------------------------------------------- `fmt` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":74133,"byte_start":74133,"column_end":36,"column_start":36,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":null,"line_end":2369,"line_start":2369,"suggested_replacement":"    fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":36,"highlight_start":36,"text":"    impl Expected for ExpectedSeq {}"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `fmt`","spans":[{"byte_end":74131,"byte_start":74102,"column_end":34,"column_start":5,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":"missing `fmt` in implementation","line_end":2369,"line_start":2369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    impl Expected for ExpectedSeq {}"}]},{"byte_end":17669,"byte_start":17608,"column_end":66,"column_start":5,"expansion":null,"file_name":"serde/src/de/mod.rs","is_primary":false,"label":"`fmt` from trait","line_end":477,"line_start":477,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":5,"text":"    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: the method `invalid_type` exists for struct `ContentRefDeserializer<'_, '_, ()>`, but its trait bounds were not satisfied\n    --> serde/src/private/de.rs:2378:26\n     |\n1647 |     pub struct ContentRefDeserializer<'a, 'de: 'a, E> {\n     |     ------------------------------------------------- method `invalid_type` not found for this struct\n...\n2378 |     let _ = deserializer.invalid_type(&exp);\n     |                          ^^^^^^^^^^^^ method cannot be called on `ContentRefDeserializer<'_, '_, ()>` due to unsatisfied trait bounds\n     |\nnote: trait bound `(): de::Error` was not satisfied\n    --> serde/src/private/de.rs:1654:12\n     |\n1652 |     impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>\n     |                      ----------------------------------\n1653 |     where\n1654 |         E: de::Error,\n     |            ^^^^^^^^^ unsatisfied trait bound introduced here\n     = help: items from traits can only be used if the trait is implemented and in scope\nnote: `de::Error` defines an item `invalid_type`, perhaps you need to implement it\n    --> serde/src/de/mod.rs:161:9\n     |\n161  |         pub trait Error: Sized $(+ $($supertrait)::+)* {\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n300  | declare_error_trait!(Error: Sized + StdError);\n     | --------------------------------------------- in this macro invocation\n     = note: this error originates in the macro `declare_error_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"trait bound `(): de::Error` was not satisfied","rendered":null,"spans":[{"byte_end":50543,"byte_start":50534,"column_end":21,"column_start":12,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":"unsatisfied trait bound introduced here","line_end":1654,"line_start":1654,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"        E: de::Error,"}]},{"byte_end":50512,"byte_start":50478,"column_end":56,"column_start":22,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":false,"label":"","line_end":1652,"line_start":1652,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":22,"text":"    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>"}]}]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`de::Error` defines an item `invalid_type`, perhaps you need to implement it","rendered":null,"spans":[{"byte_end":5883,"byte_start":5843,"column_end":49,"column_start":9,"expansion":{"def_site_span":{"byte_end":4673,"byte_start":4641,"column_end":33,"column_start":1,"expansion":null,"file_name":"serde/src/de/mod.rs","is_primary":false,"label":null,"line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"macro_rules! declare_error_trait {"}]},"macro_decl_name":"declare_error_trait!","span":{"byte_end":11877,"byte_start":11832,"column_end":46,"column_start":1,"expansion":null,"file_name":"serde/src/de/mod.rs","is_primary":false,"label":null,"line_end":300,"line_start":300,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":1,"text":"declare_error_trait!(Error: Sized + StdError);"}]}},"file_name":"serde/src/de/mod.rs","is_primary":true,"label":null,"line_end":161,"line_start":161,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":9,"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `invalid_type` exists for struct `ContentRefDeserializer<'_, '_, ()>`, but its trait bounds were not satisfied","spans":[{"byte_end":74389,"byte_start":74377,"column_end":38,"column_start":26,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":"method cannot be called on `ContentRefDeserializer<'_, '_, ()>` due to unsatisfied trait bounds","line_end":2378,"line_start":2378,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"    let _ = deserializer.invalid_type(&exp);"}]},{"byte_end":50383,"byte_start":50334,"column_end":54,"column_start":5,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":false,"label":"method `invalid_type` not found for this struct","line_end":1647,"line_start":1647,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":5,"text":"    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: the method `invalid_type` exists for struct `ContentRefDeserializer<'_, '_, ()>`, but its trait bounds were not satisfied\n    --> serde/src/private/de.rs:2385:26\n     |\n1647 |     pub struct ContentRefDeserializer<'a, 'de: 'a, E> {\n     |     ------------------------------------------------- method `invalid_type` not found for this struct\n...\n2385 |     assert!(deserializer.invalid_type(&exp).is_err());\n     |                          ^^^^^^^^^^^^ method cannot be called on `ContentRefDeserializer<'_, '_, ()>` due to unsatisfied trait bounds\n     |\nnote: trait bound `(): de::Error` was not satisfied\n    --> serde/src/private/de.rs:1654:12\n     |\n1652 |     impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>\n     |                      ----------------------------------\n1653 |     where\n1654 |         E: de::Error,\n     |            ^^^^^^^^^ unsatisfied trait bound introduced here\n     = help: items from traits can only be used if the trait is implemented and in scope\nnote: `de::Error` defines an item `invalid_type`, perhaps you need to implement it\n    --> serde/src/de/mod.rs:161:9\n     |\n161  |         pub trait Error: Sized $(+ $($supertrait)::+)* {\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n300  | declare_error_trait!(Error: Sized + StdError);\n     | --------------------------------------------- in this macro invocation\n     = note: this error originates in the macro `declare_error_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"trait bound `(): de::Error` was not satisfied","rendered":null,"spans":[{"byte_end":50543,"byte_start":50534,"column_end":21,"column_start":12,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":"unsatisfied trait bound introduced here","line_end":1654,"line_start":1654,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"        E: de::Error,"}]},{"byte_end":50512,"byte_start":50478,"column_end":56,"column_start":22,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":false,"label":"","line_end":1652,"line_start":1652,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":22,"text":"    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>"}]}]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`de::Error` defines an item `invalid_type`, perhaps you need to implement it","rendered":null,"spans":[{"byte_end":5883,"byte_start":5843,"column_end":49,"column_start":9,"expansion":{"def_site_span":{"byte_end":4673,"byte_start":4641,"column_end":33,"column_start":1,"expansion":null,"file_name":"serde/src/de/mod.rs","is_primary":false,"label":null,"line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"macro_rules! declare_error_trait {"}]},"macro_decl_name":"declare_error_trait!","span":{"byte_end":11877,"byte_start":11832,"column_end":46,"column_start":1,"expansion":null,"file_name":"serde/src/de/mod.rs","is_primary":false,"label":null,"line_end":300,"line_start":300,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":1,"text":"declare_error_trait!(Error: Sized + StdError);"}]}},"file_name":"serde/src/de/mod.rs","is_primary":true,"label":null,"line_end":161,"line_start":161,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":9,"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `invalid_type` exists for struct `ContentRefDeserializer<'_, '_, ()>`, but its trait bounds were not satisfied","spans":[{"byte_end":74637,"byte_start":74625,"column_end":38,"column_start":26,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":true,"label":"method cannot be called on `ContentRefDeserializer<'_, '_, ()>` due to unsatisfied trait bounds","line_end":2385,"line_start":2385,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"    assert!(deserializer.invalid_type(&exp).is_err());"}]},{"byte_end":50383,"byte_start":50334,"column_end":54,"column_start":5,"expansion":null,"file_name":"serde/src/private/de.rs","is_primary":false,"label":"method `invalid_type` not found for this struct","line_end":1647,"line_start":1647,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":5,"text":"    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 3 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 3 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/serde/serde#1.0.219","manifest_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/rust-utgen-test-crates/serde/serde/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
{"reason":"build-finished","success":false}
