{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ext.rs\n// crate name is quote\nuse super::ToTokens;\nuse core::iter;\nuse proc_macro2::{TokenStream, TokenTree};\npub trait TokenStreamExt: private::Sealed {\n    fn append<U>(&mut self, token: U)\n    where\n        U: Into<TokenTree>;\n    fn append_all<I>(&mut self, iter: I)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens;\n    fn append_separated<I, U>(&mut self, iter: I, op: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n    fn append_terminated<I, U>(&mut self, iter: I, term: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n}\npub trait ToTokens {\n    fn to_tokens(&self, tokens: &mut TokenStream);\n    fn to_token_stream(&self) -> TokenStream;\n    fn into_token_stream(self) -> TokenStream\n    where\n        Self: Sized;\n}\npub trait Sealed {}\nimpl TokenStreamExt for TokenStream {\n    fn append<U>(&mut self, token: U)\n    where\n        U: Into<TokenTree>,\n    {}\n    fn append_all<I>(&mut self, iter: I)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n    {}\n    fn append_separated<I, U>(&mut self, iter: I, op: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens,\n    {\n        for (i, token) in iter.into_iter().enumerate() {\n            if i > 0 {\n                op.to_tokens(self);\n            }\n            token.to_tokens(self);\n        }\n    }\n    fn append_terminated<I, U>(&mut self, iter: I, term: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n77 fn append_separated<I, U>(&mut self, iter: I, op: U)\n78 where\n79     I: IntoIterator,\n80     I::Item: ToTokens,\n81     U: ToTokens,\n82 {\n83     for (i, token) in iter.into_iter().enumerate() {\n84         if i > 0 {\n85             op.to_tokens(self);\n86         }\n87         token.to_tokens(self);\n88     }\n89 }\n\n",
  "depend_pt": ""
}