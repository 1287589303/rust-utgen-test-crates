{
  "name": "quote::ident_fragment::{impl#1}::span",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:36:5:38:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Dummy;",
                "    ",
                "    impl IdentFragment for Dummy {",
                "        fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let dummy = Dummy;",
                "    assert_eq!(dummy.span(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DummyWithSpan {",
                "        span: Span,",
                "    }",
                "    ",
                "    impl IdentFragment for DummyWithSpan {",
                "        fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {",
                "            Ok(())",
                "        }",
                "",
                "        fn span(&self) -> Option<Span> {",
                "            Some(self.span)",
                "        }",
                "    }",
                "    ",
                "    let dummy_with_span = DummyWithSpan { span: Span::call_site() };",
                "    assert_eq!(dummy_with_span.span().is_some(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}