{
  "name": "quote::spanned::join_spans",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": false,
  "loc": "src/spanned.rs:28:1:39:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenStream;",
            "use proc_macro2::TokenTree;",
            "use proc_macro2::Span;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "",
                "    let tokens = TokenStream::new();",
                "    let result = join_spans(tokens);",
                "    assert_eq!(result, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{TokenStream, TokenTree, Span};",
                "",
                "    let tokens = TokenStream::from(TokenTree::Ident(proc_macro2::Ident::new(\"token\", Span::call_site())));",
                "    let result = join_spans(tokens);",
                "    assert_eq!(result, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{TokenStream, TokenTree, Span};",
                "",
                "    let token1 = TokenTree::Ident(proc_macro2::Ident::new(\"token1\", Span::call_site()));",
                "    let token2 = TokenTree::Ident(proc_macro2::Ident::new(\"token2\", Span::call_site()));",
                "    let tokens = TokenStream::from_iter(vec![token1.clone(), token2.clone()]);",
                "    ",
                "    let result = join_spans(tokens);",
                "    assert!(result.is_valid());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}