{
  "name": "quote::to_tokens::{impl#6}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:113:5:115:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MyString<'a>(&'a str);",
                "",
                "    impl ToTokens for MyString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "",
                "    let input = MyString(\"hello\");",
                "    let mut output = TokenStream::new();",
                "    input.to_tokens(&mut output);",
                "    let expected_output: TokenStream = Literal::string(\"hello\").into();",
                "",
                "    assert_eq!(output.to_string(), expected_output.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MyString<'a>(&'a str);",
                "",
                "    impl ToTokens for MyString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "",
                "    let input = MyString(\"\");",
                "    let mut output = TokenStream::new();",
                "    input.to_tokens(&mut output);",
                "    let expected_output: TokenStream = Literal::string(\"\").into();",
                "",
                "    assert_eq!(output.to_string(), expected_output.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MyString<'a>(&'a str);",
                "",
                "    impl ToTokens for MyString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "",
                "    let input = MyString(\"special!@#\");",
                "    let mut output = TokenStream::new();",
                "    input.to_tokens(&mut output);",
                "    let expected_output: TokenStream = Literal::string(\"special!@#\").into();",
                "",
                "    assert_eq!(output.to_string(), expected_output.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}