{
  "name": "quote::ident_fragment::{impl#3}::fmt",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:68:5:70:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestIdentFragment;",
                "",
                "    impl IdentFragment for TestIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"TestIdentFragment\")",
                "        }",
                "    }",
                "",
                "    struct TestOwnedIdentFragment<'a>(Cow<'a, TestIdentFragment>);",
                "",
                "    impl ToTokens for TestOwnedIdentFragment<'_> {",
                "        fn to_tokens(&self, _tokens: &mut TokenStream) {}",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "        fn into_token_stream(self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "    }",
                "",
                "    let test_fragment = TestOwnedIdentFragment(Cow::Owned(TestIdentFragment));",
                "    let mut output = String::new();",
                "    let result = test_fragment.0.fmt(&mut output);",
                "",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"TestIdentFragment\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct CowIdentFragment;",
                "",
                "    impl IdentFragment for CowIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"CowIdentFragment\")",
                "        }",
                "    }",
                "",
                "    let cow_fragment: Cow<CowIdentFragment> = Cow::Owned(CowIdentFragment);",
                "    let mut output = String::new();",
                "    let result = cow_fragment.fmt(&mut output);",
                "",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"CowIdentFragment\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}