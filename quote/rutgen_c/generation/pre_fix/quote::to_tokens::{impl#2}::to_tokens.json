{
  "name": "quote::to_tokens::{impl#2}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:87:5:89:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestType;",
                "",
                "    impl ToTokens for TestType {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(iter::once(TokenTree::Ident(Ident::new(\"test\", Span::call_site()))));",
                "        }",
                "    }",
                "",
                "    let value = TestType;",
                "    let cow_value: Cow<TestType> = Cow::Borrowed(&value);",
                "    let mut tokens = TokenStream::new();",
                "    cow_value.to_tokens(&mut tokens);",
                "",
                "    let expected_tokens: TokenStream = iter::once(TokenTree::Ident(Ident::new(\"test\", Span::call_site()))).collect();",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct AnotherTestType;",
                "",
                "    impl ToTokens for AnotherTestType {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(iter::once(TokenTree::Ident(Ident::new(\"another_test\", Span::call_site()))));",
                "        }",
                "    }",
                "",
                "    let value = AnotherTestType;",
                "    let cow_value: Cow<AnotherTestType> = Cow::Borrowed(&value);",
                "    let tokens = cow_value.to_token_stream();",
                "",
                "    let expected_tokens: TokenStream = iter::once(TokenTree::Ident(Ident::new(\"another_test\", Span::call_site()))).collect();",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}