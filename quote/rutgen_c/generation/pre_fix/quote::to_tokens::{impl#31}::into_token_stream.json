{
  "name": "quote::to_tokens::{impl#31}::into_token_stream",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:268:5:270:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_into_token_stream_panic() {",
            "    let empty_token_stream: TokenStream = TokenStream::new();",
            "    let _result: TokenStream = empty_token_stream.into_token_stream();",
            "} "
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let token_stream = TokenStream::new();",
                "    let result: TokenStream = token_stream.clone().into_token_stream();",
                "    assert_eq!(result.to_string(), token_stream.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let token_stream = TokenStream::from_iter(iter::once(TokenTree::Ident(Ident::new(\"test\", Span::call_site()))));",
                "    let result: TokenStream = token_stream.clone().into_token_stream();",
                "    assert_eq!(result.to_string(), token_stream.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}