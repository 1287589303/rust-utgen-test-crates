{
  "name": "quote::ext::{impl#0}::append_terminated",
  "mod_info": {
    "name": "ext",
    "loc": "src/lib.rs:109:1:109:9"
  },
  "visible": true,
  "loc": "src/ext.rs:91:5:101:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DummyToken;",
                "",
                "    impl ToTokens for DummyToken {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {}",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "        ",
                "        fn into_token_stream(self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let iter: Vec<DummyToken> = vec![];",
                "    let term = DummyToken;",
                "",
                "    tokens.append_terminated(iter, term);",
                "    assert!(tokens.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DummyToken;",
                "",
                "    impl ToTokens for DummyToken {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {}",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "        ",
                "        fn into_token_stream(self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let iter = vec![DummyToken, DummyToken];",
                "    let term = DummyToken;",
                "",
                "    tokens.append_terminated(iter, term);",
                "    // Check tokens state and content after appending",
                "    // Here we assume some verification logic on tokens or just assert it's not empty.",
                "    assert!(!tokens.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}