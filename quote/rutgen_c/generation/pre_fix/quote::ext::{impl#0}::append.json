{
  "name": "quote::ext::{impl#0}::append",
  "mod_info": {
    "name": "ext",
    "loc": "src/lib.rs:109:1:109:9"
  },
  "visible": true,
  "loc": "src/ext.rs:60:5:65:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenStream;",
            "use proc_macro2::Ident;",
            "use proc_macro2::Literal;"
          ],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_append_panics_on_invalid_token() {",
            "",
            "    let mut tokens = TokenStream::new();",
            "    let invalid_token = 123; // This should not compile, as 123 is not Into<TokenTree>",
            "    ",
            "    tokens.append(invalid_token); // This line is expected to compile_fail",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{Ident, TokenStream};",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let token = Ident::new(\"example\", proc_macro2::Span::call_site());",
                "    ",
                "    tokens.append(token);",
                "",
                "    let expected: TokenStream = quote::quote! { example }; ",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{Literal, TokenStream};",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let token = Literal::new(\"42\", proc_macro2::Span::call_site());",
                "",
                "    tokens.append(token);",
                "",
                "    let expected: TokenStream = quote::quote! { 42 }; ",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}