{
  "name": "quote::spanned::{impl#2}::__span",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": true,
  "loc": "src/spanned.rs:23:5:25:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct EmptyTokens;",
                "",
                "    impl ToTokens for EmptyTokens {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {}",
                "",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "    }",
                "",
                "    impl Sealed for EmptyTokens {}",
                "",
                "    let empty_tokens = EmptyTokens;",
                "    let span = empty_tokens.__span();",
                "    assert_eq!(span, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct SingleToken;",
                "",
                "    impl ToTokens for SingleToken {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(proc_macro2::TokenTree::Ident(proc_macro2::Ident::new(\"a\", Span::call_site())));",
                "        }",
                "",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            let mut stream = TokenStream::new();",
                "            self.to_tokens(&mut stream);",
                "            stream",
                "        }",
                "    }",
                "",
                "    impl Sealed for SingleToken {}",
                "",
                "    let single_token = SingleToken;",
                "    let span = single_token.__span();",
                "    ",
                "    assert_ne!(span, Span::call_site()); // Expecting a valid span, not the call site span",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MultipleTokens;",
                "",
                "    impl ToTokens for MultipleTokens {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(proc_macro2::TokenTree::Ident(proc_macro2::Ident::new(\"a\", Span::call_site())));",
                "            tokens.append(proc_macro2::TokenTree::Ident(proc_macro2::Ident::new(\"b\", Span::call_site())));",
                "        }",
                "",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            let mut stream = TokenStream::new();",
                "            self.to_tokens(&mut stream);",
                "            stream",
                "        }",
                "    }",
                "",
                "    impl Sealed for MultipleTokens {}",
                "",
                "    let multiple_tokens = MultipleTokens;",
                "    let span = multiple_tokens.__span();",
                "    ",
                "    assert_ne!(span, Span::call_site()); // Expecting a valid span, not the call site span",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}