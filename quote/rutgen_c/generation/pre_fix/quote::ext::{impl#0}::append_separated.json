{
  "name": "quote::ext::{impl#0}::append_separated",
  "mod_info": {
    "name": "ext",
    "loc": "src/lib.rs:109:1:109:9"
  },
  "visible": true,
  "loc": "src/ext.rs:77:5:89:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TokenMock;",
                "    ",
                "    impl ToTokens for TokenMock {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote! { token });",
                "        }",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            self.into_token_stream()",
                "        }",
                "        fn into_token_stream(self) -> TokenStream {",
                "            quote::quote! { token }",
                "        }",
                "    }",
                "    ",
                "    let mut token_stream = TokenStream::new();",
                "    let token = vec![TokenMock];",
                "    let separator = TokenMock;",
                "    ",
                "    token_stream.append_separated(token.iter(), separator);",
                "    assert!(!token_stream.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TokenMock;",
                "",
                "    impl ToTokens for TokenMock {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote! { token });",
                "        }",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            self.into_token_stream()",
                "        }",
                "        fn into_token_stream(self) -> TokenStream {",
                "            quote::quote! { token }",
                "        }",
                "    }",
                "",
                "    let mut token_stream = TokenStream::new();",
                "    let tokens = vec![TokenMock, TokenMock, TokenMock];",
                "    let separator = TokenMock;",
                "",
                "    token_stream.append_separated(tokens.iter(), separator);",
                "    assert!(!token_stream.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TokenMock;",
                "",
                "    impl ToTokens for TokenMock {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote! { token });",
                "        }",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            self.into_token_stream()",
                "        }",
                "        fn into_token_stream(self) -> TokenStream {",
                "            quote::quote! { token }",
                "        }",
                "    }",
                "",
                "    let mut token_stream = TokenStream::new();",
                "    let tokens: Vec<TokenMock> = Vec::new();",
                "    let separator = TokenMock;",
                "",
                "    token_stream.append_separated(tokens.iter(), separator);",
                "    assert!(token_stream.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}