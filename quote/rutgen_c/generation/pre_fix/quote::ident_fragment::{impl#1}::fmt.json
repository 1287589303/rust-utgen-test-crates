{
  "name": "quote::ident_fragment::{impl#1}::fmt",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:40:5:42:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestIdentFragment;",
                "",
                "    impl IdentFragment for TestIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"TestIdentFragment\")",
                "        }",
                "    }",
                "",
                "    let id_fragment = TestIdentFragment;",
                "    let mut output = String::new();",
                "    let result = id_fragment.fmt(&mut output);",
                "",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"TestIdentFragment\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestIdentFragment;",
                "",
                "    impl IdentFragment for TestIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"TestIdentFragment\")",
                "        }",
                "    }",
                "",
                "    let mut id_fragment = TestIdentFragment;",
                "    let mut output = String::new();",
                "    let result = (&mut id_fragment).fmt(&mut output);",
                "",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"TestIdentFragment\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}