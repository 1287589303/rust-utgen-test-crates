{
  "name": "quote::to_tokens::{impl#30}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:258:5:260:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenTree;",
            "use proc_macro2::TokenStream;",
            "use proc_macro2::Ident;",
            "use proc_macro2::Literal;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{TokenTree, Ident, TokenStream};",
                "",
                "    let ident = Ident::new(\"my_ident\", Span::call_site());",
                "    let token_tree = TokenTree::Ident(ident);",
                "    let mut tokens = TokenStream::new();",
                "",
                "    token_tree.to_tokens(&mut tokens);",
                "    ",
                "    let expected_tokens: TokenStream = TokenTree::Ident(Ident::new(\"my_ident\", Span::call_site())).into();",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::{TokenTree, Literal, TokenStream};",
                "",
                "    let lit = TokenTree::Literal(Literal::new(\"42\", Span::call_site()));",
                "    let ident = TokenTree::Ident(Ident::new(\"my_var\", Span::call_site()));",
                "",
                "    let mut tokens = TokenStream::new();",
                "    lit.to_tokens(&mut tokens);",
                "    ident.to_tokens(&mut tokens);",
                "",
                "    let expected_tokens: TokenStream = ",
                "      TokenTree::Literal(Literal::u32_unsuffixed(42)).into() +",
                "      TokenTree::Ident(Ident::new(\"my_var\", Span::call_site())).into();",
                "    ",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::{TokenTree, TokenStream, Delimiter};  ",
                " ",
                "   let token_tree: TokenTree = TokenTree::Group(Group::new(Delimiter::Brace, TokenStream::new()));  ",
                "    let mut tokens = TokenStream::new();",
                "",
                "    token_tree.to_tokens(&mut tokens);",
                "",
                "    assert!(tokens.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}