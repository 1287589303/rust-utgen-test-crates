{
  "name": "quote::to_tokens::ToTokens::to_token_stream",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:56:5:60:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: tokens\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct;",
                "",
                "    impl ToTokens for TestStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            // No tokens added",
                "        }",
                "    }",
                "",
                "    let test_struct = TestStruct;",
                "    let token_stream = test_struct.to_token_stream();",
                "    assert!(token_stream.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestIdent {",
                "        ident: Ident,",
                "    }",
                "",
                "    impl ToTokens for TestIdent {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(iter::once(TokenTree::Ident(self.ident.clone())));",
                "        }",
                "    }",
                "",
                "    let test_ident = TestIdent {",
                "        ident: Ident::new(\"my_ident\", Span::call_site()),",
                "    };",
                "    let token_stream = test_ident.to_token_stream();",
                "    let expected: TokenStream = quote::quote! { my_ident };",
                "    assert_eq!(token_stream.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestLiteral {",
                "        literal: Literal,",
                "    }",
                "",
                "    impl ToTokens for TestLiteral {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(iter::once(TokenTree::Literal(self.literal.clone())));",
                "        }",
                "    }",
                "",
                "    let test_literal = TestLiteral {",
                "       literal: Literal::u32_unsuffixed(42),  ",
                "   };  ",
                "   let token_stream = test_literal.to_token_stream();  ",
                "   let expected: TokenStream = quote::quote! { 42 };  ",
                "   assert_eq!(token_stream.to_string(), expected.to_string());  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{  ",
                "  struct TestPunct {  ",
                "      punct: Punct,  ",
                "  }  ",
                " ",
                "  impl ToTokens for TestPunct {  ",
                "      fn to_tokens(&self, tokens: &mut TokenStream) {  ",
                "          tokens.extend(iter::once(TokenTree::Punct(self.punct.clone())));  ",
                "      }  ",
                "  }  ",
                " ",
                "  let test_punct = TestPunct {  ",
                "      punct: Punct::new('!', proc_macro2::Spacing::Alone),  ",
                "  };  ",
                "  let token_stream = test_punct.to_token_stream();  ",
                "  let expected: TokenStream = quote::quote! { ! };  ",
                "  assert_eq!(token_stream.to_string(), expected.to_string());  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestGroup {",
                "        group: Group,",
                "    }",
                "",
                "    impl ToTokens for TestGroup {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(iter::once(TokenTree::Group(self.group.clone())));",
                "        }",
                "    }",
                "",
                "    let test_group = TestGroup {",
                "        group: Group::new(Delimiter::Parentheses, TokenStream::new()),",
                "    };",
                "    let token_stream = test_group.to_token_stream();",
                "    let expected: TokenStream = quote::quote! { () };",
                "    assert_eq!(token_stream.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}