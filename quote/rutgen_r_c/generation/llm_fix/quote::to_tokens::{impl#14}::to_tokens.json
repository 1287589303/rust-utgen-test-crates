{
  "name": "quote::to_tokens::{impl#14}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:161:5:163:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::{TokenStream, Literal};",
                "",
                "   struct U8Wrapper(u8);",
                "",
                "   impl ToTokens for U8Wrapper {",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {",
                "           tokens.append(Literal::u8_suffixed(self.0));",
                "       }",
                "   }",
                "",
                "   let mut tokens = TokenStream::new();",
                "   let value = U8Wrapper(10);",
                "   value.to_tokens(&mut tokens);",
                "   let expected = Literal::u8_suffixed(10).to_token_stream();",
                "   assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::{TokenStream, Literal};",
                "",
                "   struct U8Wrapper(u8);",
                "",
                "   impl ToTokens for U8Wrapper {",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {",
                "           tokens.append(Literal::u8_suffixed(self.0));",
                "       }",
                "   }",
                "",
                "   let mut tokens = TokenStream::new();",
                "   let value = U8Wrapper(0);",
                "   value.to_tokens(&mut tokens);",
                "   let expected = Literal::u8_suffixed(0).into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::{TokenStream, Literal};",
                "",
                "   struct U8Wrapper(u8);",
                "",
                "   impl ToTokens for U8Wrapper {",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {",
                "           tokens.append(Literal::u8_suffixed(self.0));",
                "       }",
                "   }",
                "",
                "   let mut tokens = TokenStream::new();",
                "   let value = U8Wrapper(255);",
                "   value.to_tokens(&mut tokens);",
                "   let expected = Literal::u8_suffixed(255).into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}