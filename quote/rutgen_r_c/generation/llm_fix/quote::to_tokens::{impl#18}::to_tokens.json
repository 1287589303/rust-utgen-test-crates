{
  "name": "quote::to_tokens::{impl#18}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:185:5:187:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::Literal;",
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct TestBool(u128);",
                "",
                "    impl ToTokens for TestBool {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::u128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let test_value = TestBool(42);",
                "    let mut tokens = TokenStream::new();",
                "    test_value.to_tokens(&mut tokens);",
                "",
                "    let expected_literal = Literal::u128_suffixed(42);",
                "    assert!(tokens.to_string().contains(&expected_literal.to_string()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct TestBool(u128);",
                "",
                "    impl ToTokens for TestBool {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::u128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let test_value = TestBool(0);",
                "    let mut tokens = TokenStream::new();",
                "    test_value.to_tokens(&mut tokens);",
                "",
                "    let expected_literal = Literal::u128_suffixed(0);",
                "    assert!(tokens.to_string().contains(&expected_literal.to_string()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct TestBool(u128);",
                "",
                "    impl ToTokens for TestBool {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::u128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let test_value = TestBool(u128::MAX);",
                "    let mut tokens = TokenStream::new();",
                "    test_value.to_tokens(&mut tokens);",
                "",
                "    let expected_literal = Literal::u128_suffixed(u128::MAX);",
                "    assert!(tokens.to_string().contains(&expected_literal.to_string()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}