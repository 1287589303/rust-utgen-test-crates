{
  "name": "quote::to_tokens::{impl#17}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:179:5:181:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestU64(u64);",
                "",
                "    impl ToTokens for TestU64 {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::u64_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let value = TestU64(42);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "   let expected: TokenStream = Literal::u64_suffixed(42).to_token_stream();",
                "   assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestZeroU64(u64);",
                "",
                "    impl ToTokens for TestZeroU64 {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::u64_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let value = TestZeroU64(0);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "   let expected: TokenStream = Literal::u64_suffixed(0).to_token_stream();",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   struct TestLargeU64(u64);  ",
                " ",
                "   impl ToTokens for TestLargeU64 {  ",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {  ",
                "           tokens.append(Literal::u64_suffixed(self.0));  ",
                "       }  ",
                "   }  ",
                " ",
                "   let value = TestLargeU64(u64::MAX);  ",
                "   let mut tokens = TokenStream::new();  ",
                "   value.to_tokens(&mut tokens);  ",
                "   let expected = Literal::u64_suffixed(u64::MAX).to_token_stream();  ",
                "   assert_eq!(tokens.to_string(), expected.to_string());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}