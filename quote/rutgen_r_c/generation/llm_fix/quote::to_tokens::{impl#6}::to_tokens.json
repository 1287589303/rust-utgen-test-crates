{
  "name": "quote::to_tokens::{impl#6}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:113:5:115:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestString<'a>(&'a str);",
                "    ",
                "    impl ToTokens for TestString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "    ",
                "   let test_string = TestString(\"Hello, world!\");",
                "   let mut tokens = TokenStream::new();",
                "   test_string.to_tokens(&mut tokens);",
                "   ",
                "   let expected_tokens = Literal::string(\"Hello, world!\").into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestString<'a>(&'a str);",
                "    ",
                "    impl ToTokens for TestString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "    ",
                "   let test_string = TestString(\"\");",
                "   let mut tokens = TokenStream::new();",
                "   test_string.to_tokens(&mut tokens);",
                "   ",
                "   let expected_tokens = Literal::string(\"\").into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestString<'a>(&'a str);",
                "    ",
                "    impl ToTokens for TestString<'_> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::string(self.0));",
                "        }",
                "    }",
                "    ",
                "   let test_string = TestString(\"Hello, \\n world!\");",
                "   let mut tokens = TokenStream::new();",
                "   test_string.to_tokens(&mut tokens);",
                "   ",
                "   let expected_tokens = Literal::string(\"Hello, \\n world!\").into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}