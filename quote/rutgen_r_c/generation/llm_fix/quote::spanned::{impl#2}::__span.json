{
  "name": "quote::spanned::{impl#2}::__span",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": true,
  "loc": "src/spanned.rs:23:5:25:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct EmptyTokenStruct;",
                "",
                "    impl ToTokens for EmptyTokenStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {}",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            TokenStream::new()",
                "        }",
                "    }",
                "",
                "    let empty_token_struct = EmptyTokenStruct;",
                "    let span = empty_token_struct.__span();",
                "    assert_eq!(span, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct SingleTokenStruct;",
                "",
                "    impl ToTokens for SingleTokenStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(TokenStream::from(quote::quote! { token }));",
                "        }",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            let mut tokens = TokenStream::new();",
                "            self.to_tokens(&mut tokens);",
                "            tokens",
                "        }",
                "    }",
                "",
                "    let single_token_struct = SingleTokenStruct;",
                "    let span = single_token_struct.__span();",
                "    assert!(span.is_line());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "fn test___span_02()  ",
                "{  ",
                " struct MultipleTokenStruct;  ",
                " ",
                " impl ToTokens for MultipleTokenStruct {  ",
                "     fn to_tokens(&self, tokens: &mut TokenStream) {  ",
                "         tokens.extend(TokenStream::from(quote! { token1 token2 }));  ",
                "     }  ",
                "     fn to_token_stream(&self) -> TokenStream {  ",
                "            self.to_tokens(&mut tokens);",
                "            tokens",
                "        }",
                "    }",
                "",
                "    let multiple_token_struct = MultipleTokenStruct;",
                "    let span = multiple_token_struct.__span();",
                "    assert!(span.is_line());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct PanicTokenStruct;",
                "",
                "    impl ToTokens for PanicTokenStruct {",
                "        fn to_tokens(&self, _tokens: &mut TokenStream) {",
                "            panic!(\"Intentional Panic\");",
                "        }",
                "        fn to_token_stream(&self) -> TokenStream {",
                "            let mut tokens = TokenStream::new();",
                "            self.to_tokens(&mut tokens);",
                "            tokens",
                "        }",
                "    }",
                "",
                "    let panic_token_struct = PanicTokenStruct;",
                "    let result = std::panic::catch_unwind(|| {",
                "        panic_token_struct.__span();",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}