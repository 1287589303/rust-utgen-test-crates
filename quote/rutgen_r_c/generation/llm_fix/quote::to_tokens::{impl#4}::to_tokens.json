{
  "name": "quote::to_tokens::{impl#4}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:99:5:101:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestToken {",
                "        value: String,",
                "    }",
                "    ",
                "    impl ToTokens for TestToken {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            let ident = Ident::new(&self.value, Span::call_site());",
                "            tokens.extend(iter::once(TokenTree::Ident(ident)));",
                "        }",
                "    }",
                "",
                "    let test_value = TestToken { value: \"hello\".to_string() };",
                "    let rc_test_value = Rc::new(test_value);",
                "    ",
                "    let mut token_stream = TokenStream::new();",
                "    rc_test_value.to_tokens(&mut token_stream);",
                "    ",
                "    assert_eq!(token_stream.to_string(), \"hello\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestToken {",
                "        value: String,",
                "    }",
                "    ",
                "    impl ToTokens for TestToken {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            let ident = Ident::new(&self.value, Span::call_site());",
                "            tokens.extend(iter::once(TokenTree::Ident(ident)));",
                "        }",
                "    }",
                "",
                "    let test_value = TestToken { value: \"world\".to_string() };",
                "    let rc_test_value = Rc::new(test_value);",
                "    ",
                "    let token_stream = rc_test_value.to_token_stream();",
                "    ",
                "    assert_eq!(token_stream.to_string(), \"world\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let empty_rc: Rc<dyn ToTokens> = Rc::new(TestToken { value: String::new() });",
                "    let mut token_stream = TokenStream::new();",
                "    empty_rc.to_tokens(&mut token_stream);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}