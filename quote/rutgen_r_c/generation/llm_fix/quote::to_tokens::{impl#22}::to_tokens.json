{
  "name": "quote::to_tokens::{impl#22}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:209:5:211:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenStream;",
            "use proc_macro2::Literal;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::TokenStream;  ",
                "   use proc_macro2::Literal;  ",
                " ",
                "   struct BoolWrapper(bool);  ",
                " ",
                "   impl ToTokens for BoolWrapper {  ",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {  ",
                "          tokens.append(Literal::character(if self.0 { '1' } else { '0' }));  ",
                "       }  ",
                "   }  ",
                " ",
                "   let mut tokens = TokenStream::new();  ",
                "   let value = BoolWrapper(true);  ",
                "   value.to_tokens(&mut tokens);  ",
                "   ",
                "   let expected: TokenStream = Literal::character('1').to_token_stream(); // As `true` is expected to be '1'  ",
                "   assert_eq!(tokens.to_string(), expected.to_string());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   use proc_macro2::TokenStream;",
                "   use proc_macro2::Literal;",
                "",
                "   struct BoolWrapper(bool);",
                "",
                "   impl ToTokens for BoolWrapper {",
                "       fn to_tokens(&self, tokens: &mut TokenStream) {",
                "          tokens.append(Literal::character(if self.0 { '1' } else { '0' }));",
                "      }",
                "  }",
                "  ",
                "  let mut tokens = TokenStream::new();",
                "  let value = BoolWrapper(false);",
                "  value.to_tokens(&mut tokens);",
                "  ",
                "  let expected: TokenStream = Literal::character('0').to_token_stream(); // As `false` is expected to be '0'",
                "   assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct BoolWrapper(bool);",
                "",
                "    impl ToTokens for BoolWrapper {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "         tokens.append(Literal::character(if self.0 { '1' } else { '0' }));  ",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let value_true = BoolWrapper(true);",
                "    let value_false = BoolWrapper(false);",
                "    ",
                "    value_true.to_tokens(&mut tokens);",
                "    value_false.to_tokens(&mut tokens);",
                "    ",
                "    let expected: TokenStream = Literal::character('1').into().append(Literal::character('0'));",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}