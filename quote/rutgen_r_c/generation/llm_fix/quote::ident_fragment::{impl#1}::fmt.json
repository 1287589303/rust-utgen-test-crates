{
  "name": "quote::ident_fragment::{impl#1}::fmt",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:40:5:42:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_fmt_should_panic() {",
                "   struct PanicIdentFragment;",
                "",
                "   impl IdentFragment for PanicIdentFragment {",
                "       fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {",
                "           panic!(\"This should panic!\");",
                "       }",
                "   }",
                "",
                "   let fragment = &mut PanicIdentFragment;",
                "   let mut formatter = fmt::Formatter::new();",
                "   fragment.fmt(&mut formatter).unwrap();",
                "}",
                "   struct ValidIdentFragment;",
                "",
                "   impl IdentFragment for ValidIdentFragment {",
                "       fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "           write!(f, \"ValidIdentFragment\")",
                "       }",
                "   }",
                "",
                "   let fragment = &mut ValidIdentFragment;",
                "   let mut output = String::new();",
                "   {",
                "       let mut buffer = String::new();",
                "       let mut formatter = fmt::Formatter::new(&mut buffer);",
                "       fragment.fmt(&mut formatter).unwrap();",
                "       output = buffer;",
                "   }",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_fmt_should_panic() {",
                "    struct PanicIdentFragment;",
                "",
                "    impl fmt::Display for PanicIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"PanicIdentFragment\")",
                "        }",
                "    }",
                "",
                "    let fragment = &mut PanicIdentFragment;",
                "    let output = format!(\"{}\", fragment);",
                "    panic!(\"This should panic!\");  // Instead of calling fmt.",
                "}",
                "    struct RefIdentFragment;",
                "",
                "    impl IdentFragment for RefIdentFragment {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"RefIdentFragment\")",
                "        }",
                "    }",
                "",
                "    let fragment = &mut RefIdentFragment;",
                "    let mut output = String::new();",
                "    {",
                "       let mut output_buffer = String::new();",
                "       let mut formatter = fmt::Formatter::new(&mut output_buffer);",
                "       fragment.fmt(&mut formatter).unwrap();",
                "    }",
                "    assert_eq!(output, \"RefIdentFragment\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}