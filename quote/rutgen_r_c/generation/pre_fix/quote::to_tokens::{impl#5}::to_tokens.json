{
  "name": "quote::to_tokens::{impl#5}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:105:5:109:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: let Some(t) = self at line 106 is true\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    let value: Option<&bool> = Some(&true);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    let expected: TokenStream = TokenStream::from(Ident::new(\"true\", Span::call_site()));",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    let value: Option<&bool> = Some(&false);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    let expected: TokenStream = TokenStream::from(Ident::new(\"false\", Span::call_site()));",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(t) = self at line 106 is true\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::Ident;",
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Ident;",
                "",
                "    struct SomeBool {",
                "        value: bool,",
                "    }",
                "    ",
                "    impl std::ops::Deref for SomeBool {",
                "        type Target = bool;",
                "",
                "        fn deref(&self) -> &Self::Target {",
                "            &self.value",
                "        }",
                "    }",
                "",
                "    let some_true = SomeBool { value: true };",
                "    let mut tokens = TokenStream::new();",
                "    some_true.to_tokens(&mut tokens);",
                "    ",
                "    let expected = TokenStream::from(Ident::new(\"true\", Span::call_site()));",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Ident;",
                "",
                "    struct SomeBool {",
                "        value: bool,",
                "    }",
                "    ",
                "    impl std::ops::Deref for SomeBool {",
                "        type Target = bool;",
                "",
                "        fn deref(&self) -> &Self::Target {",
                "            &self.value",
                "        }",
                "    }",
                "",
                "    let some_false = SomeBool { value: false };",
                "    let mut tokens = TokenStream::new();",
                "    some_false.to_tokens(&mut tokens);",
                "    ",
                "    let expected = TokenStream::from(Ident::new(\"false\", Span::call_site()));",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}