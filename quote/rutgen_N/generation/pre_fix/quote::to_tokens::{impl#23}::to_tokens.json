{
  "name": "quote::to_tokens::{impl#23}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:215:5:218:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct BoolWrapper(bool);",
            "",
            "impl std::ops::Deref for BoolWrapper {",
            "    type Target = bool;",
            "",
            "    fn deref(&self) -> &Self::Target {",
            "        &self.0",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut tokens = TokenStream::new();",
                "    let wrapper = BoolWrapper(true);",
                "    wrapper.to_tokens(&mut tokens);",
                "    ",
                "    let expected_ident = Ident::new(\"true\", Span::call_site());",
                "    assert!(tokens.to_string().contains(&expected_ident.to_string()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut tokens = TokenStream::new();",
                "    let wrapper = BoolWrapper(false);",
                "    wrapper.to_tokens(&mut tokens);",
                "    ",
                "    let expected_ident = Ident::new(\"false\", Span::call_site());",
                "    assert!(tokens.to_string().contains(&expected_ident.to_string()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}