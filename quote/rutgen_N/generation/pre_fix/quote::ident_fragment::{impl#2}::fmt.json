{
  "name": "quote::ident_fragment::{impl#2}::fmt",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:50:5:57:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct IdentFragment {",
            "    value: String,",
            "}",
            "",
            "impl IdentFragment {",
            "    fn to_string(&self) -> String {",
            "        self.value.clone()",
            "    }",
            "}",
            "",
            "impl std::fmt::Display for IdentFragment {",
            "    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
            "        let id = self.to_string();",
            "        if let Some(id) = id.strip_prefix(\"r#\") {",
            "            fmt::Display::fmt(id, f)",
            "        } else {",
            "            fmt::Display::fmt(&id[..], f)",
            "        }",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ident = IdentFragment { value: String::from(\"r#my_identifier\") };",
                "    let mut buffer = String::new();",
                "    let result = write!(&mut buffer, \"{}\", ident);",
                "    ",
                "    assert!(result.is_ok());",
                "    assert_eq!(buffer, \"my_identifier\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let ident = IdentFragment { value: String::from(\"my_identifier\") };",
                "    let mut buffer = String::new();",
                "    let result = write!(&mut buffer, \"{}\", ident);",
                "    ",
                "    assert!(result.is_ok());",
                "    assert_eq!(buffer, \"my_identifier\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}