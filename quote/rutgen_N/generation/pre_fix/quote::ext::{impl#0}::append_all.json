{
  "name": "quote::ext::{impl#0}::append_all",
  "mod_info": {
    "name": "ext",
    "loc": "src/lib.rs:109:1:109:9"
  },
  "visible": true,
  "loc": "src/ext.rs:67:5:75:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct MockTokens;",
            "",
            "impl MockTokens {",
            "    pub fn new() -> Self {",
            "        MockTokens",
            "    }",
            "}",
            "",
            "trait ToTokens {",
            "    fn to_tokens(&self, tokens: &mut MockTokens);",
            "}",
            "",
            "impl ToTokens for i32 {",
            "    fn to_tokens(&self, tokens: &mut MockTokens) {",
            "        // Mock implementation",
            "    }",
            "}",
            "",
            "impl ToTokens for String {",
            "    fn to_tokens(&self, tokens: &mut MockTokens) {",
            "        // Mock implementation",
            "    }",
            "}",
            "",
            "struct TokenAppender {",
            "    tokens: MockTokens,",
            "}",
            "",
            "impl TokenAppender {",
            "    pub fn new() -> Self {",
            "        TokenAppender {",
            "            tokens: MockTokens::new(),",
            "        }",
            "    }",
            "",
            "    fn append_all<I>(&mut self, iter: I)",
            "    where",
            "        I: IntoIterator,",
            "        I::Item: ToTokens,",
            "    {",
            "        for token in iter {",
            "            token.to_tokens(&mut self.tokens);",
            "        }",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    let integers = vec![1, 2, 3];",
                "    appender.append_all(integers);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    let strings = vec![\"one\".to_string(), \"two\".to_string(), \"three\".to_string()];",
                "    appender.append_all(strings);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    let empty: Vec<i32> = Vec::new();",
                "    appender.append_all(empty);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}