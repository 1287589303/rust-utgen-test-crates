{
  "name": "quote::to_tokens::{impl#29}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:252:5:254:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Clone)]",
            "struct TokenStream {",
            "    data: Vec<String>,",
            "}",
            "",
            "impl TokenStream {",
            "    fn new() -> Self {",
            "        TokenStream { data: Vec::new() }",
            "    }",
            "",
            "    fn append(&mut self, token: String) {",
            "        self.data.push(token);",
            "    }",
            "}",
            "",
            "trait ToTokens {",
            "    fn to_tokens(&self, tokens: &mut TokenStream);",
            "}",
            "",
            "#[derive(Clone)]",
            "struct MyStruct {",
            "    value: String,",
            "}",
            "",
            "impl ToTokens for MyStruct {",
            "    fn to_tokens(&self, tokens: &mut TokenStream) {",
            "        tokens.append(self.value.clone());",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let my_struct = MyStruct {",
                "        value: \"token1\".to_string(),",
                "    };",
                "    let mut tokens = TokenStream::new();",
                "    my_struct.to_tokens(&mut tokens);",
                "    ",
                "    assert_eq!(tokens.data.len(), 1);",
                "    assert_eq!(tokens.data[0], \"token1\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let my_struct1 = MyStruct {",
                "        value: \"token1\".to_string(),",
                "    };",
                "    let my_struct2 = MyStruct {",
                "        value: \"token2\".to_string(),",
                "    };",
                "    ",
                "    let mut tokens = TokenStream::new();",
                "    my_struct1.to_tokens(&mut tokens);",
                "    my_struct2.to_tokens(&mut tokens);",
                "    ",
                "    assert_eq!(tokens.data.len(), 2);",
                "    assert_eq!(tokens.data[0], \"token1\");",
                "    assert_eq!(tokens.data[1], \"token2\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}