{
  "name": "quote::to_tokens::{impl#2}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:87:5:89:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Default)]",
            "struct TokenStream {",
            "    data: Vec<String>,",
            "}",
            "",
            "trait ToTokens {",
            "    fn to_tokens(&self, tokens: &mut TokenStream);",
            "}",
            "",
            "struct Example;",
            "",
            "impl ToTokens for Example {",
            "    fn to_tokens(&self, tokens: &mut TokenStream) {",
            "        tokens.data.push(\"Example Token\".to_string());",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let example = Example::default();",
                "    let mut tokens = TokenStream::default();",
                "    ",
                "    example.to_tokens(&mut tokens);",
                "    ",
                "    assert_eq!(tokens.data.len(), 1);",
                "    assert_eq!(tokens.data[0], \"Example Token\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let example = Example::default();",
                "    let mut tokens = TokenStream::default();",
                "    ",
                "    assert!(tokens.data.is_empty());",
                "    ",
                "    example.to_tokens(&mut tokens);",
                "    ",
                "    assert_eq!(tokens.data.len(), 1);",
                "    assert_eq!(tokens.data[0], \"Example Token\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}