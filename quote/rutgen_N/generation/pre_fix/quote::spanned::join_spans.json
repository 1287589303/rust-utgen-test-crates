{
  "name": "quote::spanned::join_spans",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": false,
  "loc": "src/spanned.rs:28:1:39:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Token {",
                "        span: Span,",
                "    }",
                "",
                "    impl Token {",
                "        fn span(&self) -> Span {",
                "            self.span",
                "        }",
                "    }",
                "",
                "    let tokens = vec![",
                "        Token { span: Span::from(1..2) },",
                "        Token { span: Span::from(2..3) },",
                "        Token { span: Span::from(3..4) },",
                "    ];",
                "    ",
                "    let token_stream = TokenStream::from_iter(tokens.into_iter());",
                "    ",
                "    let result = join_spans(token_stream);",
                "    assert_eq!(result, Span::from(1..4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let tokens: Vec<Token> = vec![];",
                "    let token_stream = TokenStream::from_iter(tokens.into_iter());",
                "    ",
                "    let result = join_spans(token_stream);",
                "    assert_eq!(result, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Token {",
                "        span: Span,",
                "    }",
                "    ",
                "    impl Token {",
                "        fn span(&self) -> Span {",
                "            self.span",
                "        }",
                "    }",
                "",
                "    let token = Token { span: Span::from(1..2) };",
                "    let token_stream = TokenStream::from_iter(vec![token].into_iter());",
                "    ",
                "    let result = join_spans(token_stream);",
                "    assert_eq!(result, Span::from(1..2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}