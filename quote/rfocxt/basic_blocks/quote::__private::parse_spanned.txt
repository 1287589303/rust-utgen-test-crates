[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:274:26: 274:35 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::str::<impl str>::parse::<proc_macro2::TokenStream>(move _6) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const "invalid token stream",
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:274:26: 274:66 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::result::Result::<proc_macro2::TokenStream, proc_macro2::LexError>::expect(move _5, move _7) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageDead(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_1),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:19: 275:32 (#0),
                    scope: scope[1],
                },
                kind: _12 = <proc_macro2::TokenStream as std::iter::IntoIterator>::into_iter(move _13) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_2,
            _14 = {closure@src/runtime.rs:275:37: 275:40} { span: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:19: 275:68 (#0),
                    scope: scope[1],
                },
                kind: _11 = <proc_macro2::token_stream::IntoIter as std::iter::Iterator>::map::<proc_macro2::TokenTree, {closure@src/runtime.rs:275:37: 275:40}>(move _12, move _14) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:5: 275:69 (#0),
                    scope: scope[1],
                },
                kind: _9 = <proc_macro2::TokenStream as std::iter::Extend<proc_macro2::TokenTree>>::extend::<std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@src/runtime.rs:275:37: 275:40}>>(move _10, move _11) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:276:1: 276:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:276:2: 276:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:68: 275:69 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:67: 275:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:275:31: 275:32 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:276:1: 276:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:274:65: 274:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:273:1: 276:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:273:68: 273:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/runtime.rs:273:30: 273:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:273:22: 273:28 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:273:22: 273:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:273:22: 273:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/runtime.rs:273:54: 273:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:273:48: 273:52 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:273:48: 273:52 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:273:48: 273:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/runtime.rs:273:63: 273:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:273:60: 273:61 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:273:60: 273:61 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:273:60: 273:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:274:26: 274:66 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:274:9: 274:10 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/runtime.rs:274:12: 274:23 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/runtime.rs:274:9: 274:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<proc_macro2::TokenStream, proc_macro2::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:274:26: 274:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:274:26: 274:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:274:43: 274:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:274:43: 274:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:5: 275:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:5: 275:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:302 ~ quote[0e24]::__private::parse_spanned::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] }, (&'{erased} proc_macro2::Span,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:19: 275:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:19: 275:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:19: 275:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:302 ~ quote[0e24]::__private::parse_spanned::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] },
                (&'{erased} proc_macro2::Span,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:37: 275:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:275:37: 275:67 (#0),
            scope: scope[0],
        },
    },
]