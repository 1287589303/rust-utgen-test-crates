[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut _1,
            PlaceMention(_4),
            _5 = discriminant((*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:280:5: 280:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move _4,
            StorageLive(_22),
            _22 = &mut (*_21),
            StorageLive(_23),
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:290:18: 290:38 (#0),
                    scope: scope[3],
                },
                kind: _3 = proc_macro2::TokenTree::set_span(move _22, move _23) -> [return: bb15, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:281:9: 281:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &mut (((*_4) as Group).0: proc_macro2::Group),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:282:26: 283:26 (#0),
                    scope: scope[1],
                },
                kind: _10 = proc_macro2::Group::stream(move _11) -> [return: bb4, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:282:26: 284:29 (#0),
                    scope: scope[1],
                },
                kind: _9 = <proc_macro2::TokenStream as std::iter::IntoIterator>::into_iter(move _10) -> [return: bb5, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_2,
            _12 = {closure@src/runtime.rs:285:22: 285:29} { span: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:282:26: 285:61 (#0),
                    scope: scope[1],
                },
                kind: _8 = <proc_macro2::token_stream::IntoIter as std::iter::Iterator>::map::<proc_macro2::TokenTree, {closure@src/runtime.rs:285:22: 285:29}>(move _9, move _12) -> [return: bb6, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:282:26: 286:27 (#0),
                    scope: scope[1],
                },
                kind: _7 = <std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@src/runtime.rs:285:22: 285:29}> as std::iter::Iterator>::collect::<proc_macro2::TokenStream>(move _8) -> [return: bb7, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:29: 287:42 (#0),
                    scope: scope[2],
                },
                kind: _15 = proc_macro2::Group::delimiter(move _16) -> [return: bb8, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_17),
            _17 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:18: 287:51 (#0),
                    scope: scope[2],
                },
                kind: _14 = proc_macro2::Group::new(move _15, move _17) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:13: 287:15 (#0),
                    scope: scope[2],
                },
                kind: drop((*_6)) -> [return: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_6) = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:50: 287:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_6) = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:50: 287:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_6),
            StorageLive(_20),
            _20 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:288:13: 288:29 (#0),
                    scope: scope[2],
                },
                kind: _18 = proc_macro2::Group::set_span(move _19, move _20) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:289:9: 289:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb14, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:289:9: 289:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:290:37: 290:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            _0 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:293:1: 293:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:293:2: 293:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:287:50: 287:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:289:9: 289:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:286:26: 286:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:285:60: 285:61 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:284:28: 284:29 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:293:1: 293:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:279:1: 293:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:279:59: 279:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/runtime.rs:279:33: 279:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:279:22: 279:31 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:279:22: 279:31 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:279:22: 279:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/runtime.rs:279:50: 279:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:279:44: 279:48 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:279:44: 279:48 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:279:44: 279:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:280:5: 291:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:280:11: 280:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:281:9: 281:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/runtime.rs:280:11: 280:21 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:281:9: 281:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:281:26: 281:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/runtime.rs:282:26: 286:27 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:282:17: 282:23 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:282:17: 282:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:304 ~ quote[0e24]::__private::respan_token_tree::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] }, (&'{erased} proc_macro2::Span,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:282:26: 285:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:282:26: 284:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:282:26: 283:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:282:26: 282:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:304 ~ quote[0e24]::__private::respan_token_tree::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::TokenTree, bound_vars: [] },
                (&'{erased} proc_macro2::Span,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:285:22: 285:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:285:22: 285:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:287:18: 287:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:287:29: 287:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro2::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:287:29: 287:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:287:44: 287:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:288:13: 288:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:288:13: 288:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:288:24: 288:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/runtime.rs:280:11: 280:21 (#0),
                            ),
                        ),
                        pat_span: src/runtime.rs:290:9: 290:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:290:9: 290:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:290:18: 290:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:290:33: 290:37 (#0),
            scope: scope[0],
        },
    },
]