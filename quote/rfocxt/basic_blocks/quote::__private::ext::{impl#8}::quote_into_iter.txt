[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: T),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:157:13: 157:37 (#0),
                    scope: scope[0],
                },
                kind: _0 = <T as __private::ext::RepAsIteratorExt<'_>>::quote_into_iter(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:158:10: 158:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:156:9: 158:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(0:217 ~ quote[0e24]::__private::ext::RepAsIteratorExt::Iter) }), __private::HasIterator),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:156:41: 156:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} __private::RepInterp<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:156:28: 156:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/runtime.rs:157:13: 157:37 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:157:13: 157:19 (#0),
            scope: scope[0],
        },
    },
]