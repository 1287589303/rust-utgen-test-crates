[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            _3 = move _4 as &[T] (PointerCoercion(Unsize)),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:133:14: 133:25 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::slice::<impl [T]>::iter(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_5),
            _5 = __private::HasIterator,
            _0 = (move _2, move _5),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:134:10: 134:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/runtime.rs:132:9: 134:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (std::slice::Iter<'{erased}, T/#1>, __private::HasIterator),
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:132:41: 132:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} [T/#1; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:132:28: 132:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/runtime.rs:133:13: 133:35 (#0),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:133:14: 133:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/runtime.rs:133:13: 133:35 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:133:14: 133:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/runtime.rs:133:13: 133:35 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#1; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:133:14: 133:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/runtime.rs:133:13: 133:35 (#0),
                },
            ),
        ),
        ty: __private::HasIterator,
        user_ty: None,
        source_info: SourceInfo {
            span: src/runtime.rs:133:27: 133:34 (#0),
            scope: scope[0],
        },
    },
]