[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:22: 97:26 (#71),
                    scope: scope[0],
                },
                kind: _4 = <I as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_6),
            _6 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:22: 97:26 (#71),
                    scope: scope[1],
                },
                kind: _9 = <<I as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::next(move _10) -> [return: bb4, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:22: 97:26 (#71),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:22: 97:26 (#71),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_9 as Some).0: <I as std::iter::IntoIterator>::Item),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_14,
            StorageLive(_17),
            _17 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:98:13: 98:34 (#0),
                    scope: scope[2],
                },
                kind: _15 = <<I as std::iter::IntoIterator>::Item as to_tokens::ToTokens>::to_tokens(move _16, move _17) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_3,
            StorageLive(_20),
            _20 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:99:13: 99:33 (#0),
                    scope: scope[2],
                },
                kind: _18 = <U as to_tokens::ToTokens>::to_tokens(move _19, move _20) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb12, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb15, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:101:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:101:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:101:6: 101:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:100:9: 100:10 (#70),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:97:25: 97:26 (#71),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:101:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:101:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ext.rs:91:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:91:60: 91:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:91:32: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ext.rs:91:49: 91:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ext.rs:91:43: 91:47 (#0),
                            ),
                        ),
                        pat_span: src/ext.rs:91:43: 91:47 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:91:43: 91:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ext.rs:91:58: 91:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ext.rs:91:52: 91:56 (#0),
                            ),
                        ),
                        pat_span: src/ext.rs:91:52: 91:56 (#0),
                    },
                ),
            ),
        ),
        ty: U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:91:52: 91:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/ext.rs:97:9: 100:10 (#70),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/ext.rs:97:9: 100:10 (#70),
                },
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/ext.rs:97:22: 97:26 (#71),
                            ),
                        ),
                        pat_span: src/ext.rs:97:22: 97:26 (#71),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:91:5: 101:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(2:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:22: 97:26 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:9: 100:10 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:9: 100:10 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/ext.rs:97:22: 97:26 (#71),
                            ),
                        ),
                        pat_span: src/ext.rs:97:13: 97:18 (#72),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(2:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:97:13: 97:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:98:13: 98:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(2:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:98:13: 98:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:98:29: 98:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:99:13: 99:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:99:13: 99:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ext.rs:99:28: 99:32 (#0),
            scope: scope[0],
        },
    },
]