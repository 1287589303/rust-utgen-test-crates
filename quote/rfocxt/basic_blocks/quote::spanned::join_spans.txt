[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:29:20: 29:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = <proc_macro2::TokenStream as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@src/spanned.rs:29:43: 29:47},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:29:20: 29:58 (#0),
                    scope: scope[0],
                },
                kind: _2 = <proc_macro2::token_stream::IntoIter as std::iter::Iterator>::map::<proc_macro2::Span, {closure@src/spanned.rs:29:43: 29:47}>(move _3, move _5) -> [return: bb2, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:31:23: 31:34 (#0),
                    scope: scope[1],
                },
                kind: _7 = <std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@src/spanned.rs:29:43: 29:47}> as std::iter::Iterator>::next(move _8) -> [return: bb3, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _9 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:31:17: 31:34 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:31:23: 31:34 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:32:9: 32:19 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:33:24: 33:41 (#0),
                    scope: scope[1],
                },
                kind: _0 = proc_macro2::Span::call_site() -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_7 as Some).0: proc_macro2::Span),
            _6 = _10,
            StorageDead(_10),
            FakeRead(ForLet(None), _6),
            StorageDead(_7),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = move _2,
            StorageLive(_15),
            _15 = std::option::Option::<proc_macro2::Span>::None,
            StorageLive(_16),
            _16 = {closure@src/spanned.rs:36:21: 36:34},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:36:5: 36:46 (#0),
                    scope: scope[2],
                },
                kind: _13 = <std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@src/spanned.rs:29:43: 29:47}> as std::iter::Iterator>::fold::<std::option::Option<proc_macro2::Span>, {closure@src/spanned.rs:36:21: 36:34}>(move _14, move _15, move _16) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_6,
            _17 = {closure@src/spanned.rs:37:19: 37:25} { first: move _18 },
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:36:5: 37:43 (#0),
                    scope: scope[2],
                },
                kind: _12 = std::option::Option::<proc_macro2::Span>::and_then::<proc_macro2::Span, {closure@src/spanned.rs:37:19: 37:25}>(move _13, move _17) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_13),
            StorageLive(_19),
            _19 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:36:5: 38:26 (#0),
                    scope: scope[2],
                },
                kind: _0 = std::option::Option::<proc_macro2::Span>::unwrap_or(move _12, move _19) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_12),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:2: 39:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:36:45: 36:46 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:29:57: 29:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:29:37: 29:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:39:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/spanned.rs:28:1: 39:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:28:39: 28:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/spanned.rs:28:23: 28:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/spanned.rs:28:15: 28:21 (#0),
                            ),
                        ),
                        pat_span: src/spanned.rs:28:15: 28:21 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:28:15: 28:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/spanned.rs:29:20: 29:58 (#0),
                            ),
                        ),
                        pat_span: src/spanned.rs:29:9: 29:17 (#0),
                    },
                ),
            ),
        ),
        ty: std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:368 ~ quote[0e24]::spanned::join_spans::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::Span, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:29:9: 29:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:29:20: 29:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:29:20: 29:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:368 ~ quote[0e24]::spanned::join_spans::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::Span, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:29:43: 29:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/spanned.rs:31:17: 34:6 (#0),
                            ),
                        ),
                        pat_span: src/spanned.rs:31:9: 31:14 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:31:9: 31:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<proc_macro2::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:31:23: 31:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:368 ~ quote[0e24]::spanned::join_spans::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::Span, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:31:23: 31:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:32:9: 32:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/spanned.rs:31:23: 31:34 (#0),
                            ),
                        ),
                        pat_span: src/spanned.rs:32:9: 32:19 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:32:14: 32:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:33:17: 33:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: std::option::Option<proc_macro2::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:36:5: 37:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: std::option::Option<proc_macro2::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:36:5: 36:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: std::iter::Map<proc_macro2::token_stream::IntoIter, Closure(DefId(0:368 ~ quote[0e24]::spanned::join_spans::{closure#0}), [i16, Binder { value: extern "RustCall" fn((proc_macro2::TokenTree,)) -> proc_macro2::Span, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:36:5: 36:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: std::option::Option<proc_macro2::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:36:15: 36:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:369 ~ quote[0e24]::spanned::join_spans::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((std::option::Option<proc_macro2::Span>, proc_macro2::Span)) -> std::option::Option<proc_macro2::Span>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:36:21: 36:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:370 ~ quote[0e24]::spanned::join_spans::{closure#2}),
            [
                i32,
                Binder { value: extern "RustCall" fn((proc_macro2::Span,)) -> std::option::Option<proc_macro2::Span>, bound_vars: [] },
                (&'{erased} proc_macro2::Span,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:37:19: 37:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:37:19: 37:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/spanned.rs:36:5: 38:26 (#0),
                },
            ),
        ),
        ty: proc_macro2::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/spanned.rs:38:20: 38:25 (#0),
            scope: scope[0],
        },
    },
]