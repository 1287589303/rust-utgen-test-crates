[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*(*_1)),
            StorageLive(_5),
            _5 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/to_tokens.rs:82:9: 82:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = <T as to_tokens::ToTokens>::to_tokens(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/to_tokens.rs:83:6: 83:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/to_tokens.rs:81:5: 83:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:81:50: 81:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:81:18: 81:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/to_tokens.rs:81:33: 81:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/to_tokens.rs:81:25: 81:31 (#0),
                            ),
                        ),
                        pat_span: src/to_tokens.rs:81:25: 81:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:81:25: 81:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:82:9: 82:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:82:9: 82:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro2::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/to_tokens.rs:82:28: 82:34 (#0),
            scope: scope[0],
        },
    },
]