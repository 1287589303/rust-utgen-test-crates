{
  "name": "quote::to_tokens::{impl#7}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:119:5:121:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::marker::PhantomData;",
            "use proc_macro2::TokenStream;",
            "use quote::ToTokens;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use std::marker::PhantomData;",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct EmptyString;",
                "",
                "    impl ToTokens for EmptyString {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote!(\"\"));",
                "        }",
                "    }",
                "",
                "    let empty = EmptyString;",
                "    let mut tokens = TokenStream::new();",
                "    empty.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"\\\"\\\"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use std::marker::PhantomData;",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct NonEmptyString<'a> {",
                "        value: &'a str,",
                "    }",
                "",
                "    impl<'a> ToTokens for NonEmptyString<'a> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote!(#self.value));",
                "        }",
                "    }",
                "",
                "    let non_empty = NonEmptyString { value: \"Hello\" };",
                "    let mut tokens = TokenStream::new();",
                "    non_empty.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Hello\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use std::marker::PhantomData;",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct SpecialChars<'a> {",
                "        value: &'a str,",
                "    }",
                "",
                "    impl<'a> ToTokens for SpecialChars<'a> {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote::quote!(#self.value));",
                "        }",
                "    }",
                "",
                "    let special = SpecialChars { value: \"Hello, World!\" };",
                "    let mut tokens = TokenStream::new();",
                "    special.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Hello, World!\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}