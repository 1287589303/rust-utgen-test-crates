{
  "name": "quote::spanned::{impl#0}::__span",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": true,
  "loc": "src/spanned.rs:11:5:13:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: *self\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug, Clone, Copy)]",
            "struct Span;",
            "",
            "impl Span {",
            "    fn new() -> Self {",
            "        Span",
            "    }",
            "}",
            "",
            "trait Spanned {",
            "    fn __span(&self) -> Span;",
            "}",
            "",
            "struct ExampleStruct {",
            "    span: Span,",
            "}",
            "",
            "impl Spanned for ExampleStruct {",
            "    fn __span(&self) -> Span {",
            "        *self.span",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let example = ExampleStruct {",
                "        span: Span::new(),",
                "    };",
                "    let span_result = example.__span();",
                "    assert_eq!(format!(\"{:?}\", span_result), format!(\"{:?}\", example.span));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let example = ExampleStruct {",
                "        span: Span::new(),",
                "    };",
                "    let span_result = example.__span();",
                "    let span_clone = span_result.clone();",
                "    assert_eq!(format!(\"{:?}\", span_result), format!(\"{:?}\", span_clone));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}