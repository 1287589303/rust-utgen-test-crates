{
  "name": "quote::ident_fragment::{impl#3}::fmt",
  "mod_info": {
    "name": "ident_fragment",
    "loc": "src/lib.rs:111:1:111:20"
  },
  "visible": true,
  "loc": "src/ident_fragment.rs:68:5:70:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_fmt_with_panic() {",
            "    struct PanickingType;",
            "",
            "    impl std::fmt::Display for PanickingType {",
            "        fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {",
            "            panic!(\"This is a panic!\");",
            "        }",
            "    }",
            "",
            "    struct TestStruct<T> {",
            "        value: T,",
            "    }",
            "",
            "    impl<T: std::fmt::Display> std::fmt::Display for TestStruct<T> {",
            "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
            "            T::fmt(&self.value, f)",
            "        }",
            "    }",
            "",
            "    let test_instance = TestStruct { value: PanickingType };",
            "    let _ = format!(\"{}\", test_instance);",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestType;",
                "",
                "    impl std::fmt::Display for TestType {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"TestType\")",
                "        }",
                "    }",
                "",
                "    struct TestStruct<T> {",
                "        value: T,",
                "    }",
                "",
                "    impl<T: std::fmt::Display> std::fmt::Display for TestStruct<T> {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            T::fmt(&self.value, f)",
                "        }",
                "    }",
                "",
                "    let test_instance = TestStruct { value: TestType };",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", test_instance);",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"TestType\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}