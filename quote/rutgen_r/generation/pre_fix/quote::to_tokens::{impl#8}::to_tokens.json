{
  "name": "quote::to_tokens::{impl#8}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:125:5:127:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct MyStruct {",
            "    value: i8,",
            "}",
            "",
            "impl MyStruct {",
            "    fn new(value: i8) -> Self {",
            "        MyStruct { value }",
            "    }",
            "}",
            "",
            "",
            "",
            "",
            "#[should_panic]",
            "fn test_to_tokens_with_overflow_value() {",
            "    let mut tokens = quote::TokenStream::new();",
            "    let my_struct = MyStruct::new(128); // Oversized for i8",
            "    my_struct.to_tokens(&mut tokens);",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut tokens = quote::TokenStream::new();",
                "    let my_struct = MyStruct::new(5);",
                "    my_struct.to_tokens(&mut tokens);",
                "    let expected = quote::quote! { 5_i8 };",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut tokens = quote::TokenStream::new();",
                "    let my_struct = MyStruct::new(-3);",
                "    my_struct.to_tokens(&mut tokens);",
                "    let expected = quote::quote! { -3_i8 };",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut tokens = quote::TokenStream::new();",
                "    let my_struct = MyStruct::new(0);",
                "    my_struct.to_tokens(&mut tokens);",
                "    let expected = quote::quote! { 0_i8 };",
                "    assert_eq!(tokens.to_string(), expected.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}