{
  "name": "quote::to_tokens::{impl#1}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:81:5:83:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use quote::ToTokens;",
            "use quote::quote;",
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::{quote, ToTokens};",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct TestStruct;",
                "",
                "    impl ToTokens for TestStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote! { });",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let test_struct = TestStruct;",
                "",
                "    test_struct.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::{quote, ToTokens};",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct TestStruct;",
                "",
                "    impl ToTokens for TestStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote! { let x = 10; });",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let test_struct = TestStruct;",
                "",
                "    test_struct.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"let x = 10;\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::{quote, ToTokens};",
                "    use proc_macro2::TokenStream;",
                "",
                "    struct TestStruct;",
                "",
                "    impl ToTokens for TestStruct {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.extend(quote! { fn example() { return 42; } });",
                "        }",
                "    }",
                "",
                "    let mut tokens = TokenStream::new();",
                "    let test_struct = TestStruct;",
                "",
                "    test_struct.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"fn example() { return 42; }\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}