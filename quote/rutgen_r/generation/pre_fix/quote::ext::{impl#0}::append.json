{
  "name": "quote::ext::{impl#0}::append",
  "mod_info": {
    "name": "ext",
    "loc": "src/lib.rs:109:1:109:9"
  },
  "visible": true,
  "loc": "src/ext.rs:60:5:65:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct TokenTree;",
            "",
            "struct TokenAppender {",
            "    tokens: Vec<TokenTree>,",
            "}",
            "",
            "impl TokenAppender {",
            "    fn new() -> Self {",
            "        TokenAppender { tokens: Vec::new() }",
            "    }",
            "",
            "    fn append<U>(&mut self, token: U)",
            "    where",
            "        U: Into<TokenTree>,",
            "    {",
            "        self.tokens.extend(std::iter::once(token.into()));",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    let token = TokenTree;",
                "    appender.append(token);",
                "    assert_eq!(appender.tokens.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    let token1 = TokenTree;",
                "    let token2 = TokenTree;",
                "    appender.append(token1);",
                "    appender.append(token2);",
                "    assert_eq!(appender.tokens.len(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut appender = TokenAppender::new();",
                "    assert_eq!(appender.tokens.len(), 0);",
                "    appender.append(TokenTree);",
                "    assert_eq!(appender.tokens.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}