{
  "name": "quote::to_tokens::{impl#12}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:149:5:151:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use proc_macro2::Literal;",
            "use quote::ToTokens;",
            "use proc_macro2::TokenStream;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct PositiveI128(i128);",
                "",
                "    impl ToTokens for PositiveI128 {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::i128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let value = PositiveI128(1234567890123456789);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"1234567890123456789_i128\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct ZeroI128(i128);",
                "",
                "    impl ToTokens for ZeroI128 {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::i128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let value = ZeroI128(0);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"0_i128\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use quote::ToTokens;",
                "    use proc_macro2::TokenStream;",
                "    use proc_macro2::Literal;",
                "",
                "    struct NegativeI128(i128);",
                "",
                "    impl ToTokens for NegativeI128 {",
                "        fn to_tokens(&self, tokens: &mut TokenStream) {",
                "            tokens.append(Literal::i128_suffixed(self.0));",
                "        }",
                "    }",
                "",
                "    let value = NegativeI128(-1234567890123456789);",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"-1234567890123456789_i128\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}