bb0
  0: StorageLive(_4)
    SourceInfo(src/runtime.rs:274:9-274:10)
  1: StorageLive(_5)
    SourceInfo(src/runtime.rs:274:26-274:35)
  2: StorageLive(_6)
    SourceInfo(src/runtime.rs:274:26-274:27)
  3: _6 = &(*_3)
    SourceInfo(src/runtime.rs:274:26-274:27)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:274:26-274:35)
      kind: _5 = core::str::<impl str>::parse::<proc_macro2::TokenStream>(move _6) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_6)
    SourceInfo(src/runtime.rs:274:34-274:35)
  1: StorageLive(_7)
    SourceInfo(src/runtime.rs:274:43-274:65)
  2: StorageLive(_8)
    SourceInfo(src/runtime.rs:274:43-274:65)
  3: _8 = const "invalid token stream"
    SourceInfo(src/runtime.rs:274:43-274:65)
  4: _7 = &(*_8)
    SourceInfo(src/runtime.rs:274:43-274:65)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:274:26-274:66)
      kind: _4 = std::result::Result::<proc_macro2::TokenStream, proc_macro2::LexError>::expect(move _5, move _7) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_7)
    SourceInfo(src/runtime.rs:274:65-274:66)
  1: StorageDead(_5)
    SourceInfo(src/runtime.rs:274:65-274:66)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/runtime.rs:274:9-274:10)
  3: AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(src/runtime.rs:274:12-274:23)
  4: StorageDead(_8)
    SourceInfo(src/runtime.rs:274:66-274:67)
  5: StorageLive(_9)
    SourceInfo(src/runtime.rs:275:5-275:69)
  6: StorageLive(_10)
    SourceInfo(src/runtime.rs:275:5-275:11)
  7: _10 = &mut (*_1)
    SourceInfo(src/runtime.rs:275:5-275:11)
  8: StorageLive(_11)
    SourceInfo(src/runtime.rs:275:19-275:68)
  9: StorageLive(_12)
    SourceInfo(src/runtime.rs:275:19-275:32)
  10: StorageLive(_13)
    SourceInfo(src/runtime.rs:275:19-275:20)
  11: _13 = move _4
    SourceInfo(src/runtime.rs:275:19-275:20)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:19-275:32)
      kind: _12 = <proc_macro2::TokenStream as std::iter::IntoIterator>::into_iter(move _13) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_13)
    SourceInfo(src/runtime.rs:275:31-275:32)
  1: StorageLive(_14)
    SourceInfo(src/runtime.rs:275:37-275:67)
  2: StorageLive(_15)
    SourceInfo(src/runtime.rs:275:37-275:67)
  3: _15 = &_2
    SourceInfo(src/runtime.rs:275:37-275:67)
  4: _14 = {closure@src/runtime.rs:275:37: 275:40} { span: move _15 }
    SourceInfo(src/runtime.rs:275:37-275:67)
  5: StorageDead(_15)
    SourceInfo(src/runtime.rs:275:39-275:40)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:19-275:68)
      kind: _11 = <proc_macro2::token_stream::IntoIter as std::iter::Iterator>::map::<proc_macro2::TokenTree, {closure@src/runtime.rs:275:37: 275:40}>(move _12, move _14) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_14)
    SourceInfo(src/runtime.rs:275:67-275:68)
  1: StorageDead(_12)
    SourceInfo(src/runtime.rs:275:67-275:68)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:5-275:69)
      kind: _9 = <proc_macro2::TokenStream as std::iter::Extend<proc_macro2::TokenTree>>::extend::<std::iter::Map<proc_macro2::token_stream::IntoIter, {closure@src/runtime.rs:275:37: 275:40}>>(move _10, move _11) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_11)
    SourceInfo(src/runtime.rs:275:68-275:69)
  1: StorageDead(_10)
    SourceInfo(src/runtime.rs:275:68-275:69)
  2: StorageDead(_9)
    SourceInfo(src/runtime.rs:275:69-275:70)
  3: _0 = const ()
    SourceInfo(src/runtime.rs:273:69-276:2)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:276:1-276:2)
      kind: drop(_4) -> [return: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: StorageDead(_4)
    SourceInfo(src/runtime.rs:276:1-276:2)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:276:2-276:2)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:68-275:69)
      kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb10]

bb8
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:67-275:68)
      kind: drop(_12) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb10]

bb9
  Terminator {
      source_info: SourceInfo(src/runtime.rs:275:31-275:32)
      kind: drop(_13) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/runtime.rs:276:1-276:2)
      kind: drop(_4) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb7, bb8, bb9]
  succs [bb12]

bb11
  Terminator {
      source_info: SourceInfo(src/runtime.rs:274:65-274:66)
      kind: drop(_5) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(src/runtime.rs:273:1-276:2)
      kind: resume
  }
  preds [bb0, bb5, bb10, bb11]
  succs []

