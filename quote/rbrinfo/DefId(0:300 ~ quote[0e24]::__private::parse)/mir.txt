bb0
  0: StorageLive(_3)
    SourceInfo(src/runtime.rs:268:9-268:10)
  1: StorageLive(_4)
    SourceInfo(src/runtime.rs:268:26-268:35)
  2: StorageLive(_5)
    SourceInfo(src/runtime.rs:268:26-268:27)
  3: _5 = &(*_2)
    SourceInfo(src/runtime.rs:268:26-268:27)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:268:26-268:35)
      kind: _4 = core::str::<impl str>::parse::<proc_macro2::TokenStream>(move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(src/runtime.rs:268:34-268:35)
  1: StorageLive(_6)
    SourceInfo(src/runtime.rs:268:43-268:65)
  2: StorageLive(_7)
    SourceInfo(src/runtime.rs:268:43-268:65)
  3: _7 = const "invalid token stream"
    SourceInfo(src/runtime.rs:268:43-268:65)
  4: _6 = &(*_7)
    SourceInfo(src/runtime.rs:268:43-268:65)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:268:26-268:66)
      kind: _3 = std::result::Result::<proc_macro2::TokenStream, proc_macro2::LexError>::expect(move _4, move _6) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_6)
    SourceInfo(src/runtime.rs:268:65-268:66)
  1: StorageDead(_4)
    SourceInfo(src/runtime.rs:268:65-268:66)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/runtime.rs:268:9-268:10)
  3: AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(src/runtime.rs:268:12-268:23)
  4: StorageDead(_7)
    SourceInfo(src/runtime.rs:268:66-268:67)
  5: StorageLive(_8)
    SourceInfo(src/runtime.rs:269:5-269:33)
  6: StorageLive(_9)
    SourceInfo(src/runtime.rs:269:5-269:11)
  7: _9 = &mut (*_1)
    SourceInfo(src/runtime.rs:269:5-269:11)
  8: StorageLive(_10)
    SourceInfo(src/runtime.rs:269:19-269:32)
  9: StorageLive(_11)
    SourceInfo(src/runtime.rs:269:30-269:31)
  10: _11 = move _3
    SourceInfo(src/runtime.rs:269:30-269:31)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:269:19-269:32)
      kind: _10 = std::iter::once::<proc_macro2::TokenStream>(move _11) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_11)
    SourceInfo(src/runtime.rs:269:31-269:32)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:269:5-269:33)
      kind: _8 = <proc_macro2::TokenStream as std::iter::Extend<proc_macro2::TokenStream>>::extend::<std::iter::Once<proc_macro2::TokenStream>>(move _9, move _10) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_10)
    SourceInfo(src/runtime.rs:269:32-269:33)
  1: StorageDead(_9)
    SourceInfo(src/runtime.rs:269:32-269:33)
  2: StorageDead(_8)
    SourceInfo(src/runtime.rs:269:33-269:34)
  3: _0 = const ()
    SourceInfo(src/runtime.rs:267:49-270:2)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:270:1-270:2)
      kind: drop(_3) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_3)
    SourceInfo(src/runtime.rs:270:1-270:2)
  Terminator {
      source_info: SourceInfo(src/runtime.rs:270:2-270:2)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/runtime.rs:269:32-269:33)
      kind: drop(_10) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb8]

bb7
  Terminator {
      source_info: SourceInfo(src/runtime.rs:269:31-269:32)
      kind: drop(_11) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(src/runtime.rs:270:1-270:2)
      kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb6, bb7]
  succs [bb10]

bb9
  Terminator {
      source_info: SourceInfo(src/runtime.rs:268:65-268:66)
      kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/runtime.rs:267:1-270:2)
      kind: resume
  }
  preds [bb0, bb4, bb8, bb9]
  succs []

