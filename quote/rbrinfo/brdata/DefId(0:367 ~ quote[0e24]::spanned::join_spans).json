{
  "name": "quote::spanned::join_spans",
  "mod_info": {
    "name": "spanned",
    "loc": "src/lib.rs:125:1:125:17"
  },
  "visible": false,
  "loc": "src/spanned.rs:28:1:39:2",
  "doc": "",
  "code": [
    "fn join_spans(tokens: TokenStream) -> Span {",
    "    let mut iter = tokens.into_iter().map(|tt| tt.span());",
    "",
    "    let first = match iter.next() {",
    "        Some(span) => span,",
    "        None => return Span::call_site(),",
    "    };",
    "",
    "    iter.fold(None, |_prev, next| Some(next))",
    "        .and_then(|last| first.join(last))",
    "        .unwrap_or(first)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "iter.next() matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}