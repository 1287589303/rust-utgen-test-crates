{
  "name": "quote::__private::respan_token_tree",
  "mod_info": {
    "name": "__private",
    "loc": "src/lib.rs:117:1:117:19"
  },
  "visible": false,
  "loc": "src/runtime.rs:279:1:293:2",
  "doc": "",
  "code": [
    "fn respan_token_tree(mut token: TokenTree, span: Span) -> TokenTree {",
    "    match &mut token {",
    "        TokenTree::Group(g) => {",
    "            let stream = g",
    "                .stream()",
    "                .into_iter()",
    "                .map(|token| respan_token_tree(token, span))",
    "                .collect();",
    "            *g = Group::new(g.delimiter(), stream);",
    "            g.set_span(span);",
    "        }",
    "        other => other.set_span(span),",
    "    }",
    "    token",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "&mut token matches TokenTree::Group(g)",
          "norm": null,
          "value": "false",
          "line": 281,
          "bound": null
        }
      ],
      "ret": "token",
      "path": [
        0,
        1,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "&mut token matches TokenTree::Group(g)",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        },
        {
          "cond": "&mut token matches TokenTree::Group(g)",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "token",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}