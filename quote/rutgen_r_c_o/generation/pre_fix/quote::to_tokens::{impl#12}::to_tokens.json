{
  "name": "quote::to_tokens::{impl#12}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:149:5:151:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions or ranges: integer values of type i128 including edge cases like i128::MIN, i128::MAX, zero, and small negative/positive integers.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = i128::MIN;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"Literal(i128::MIN)\");",
                "    let value: i128 = 0;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(0)\");",
                "    let value: i128 = i128::MAX;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(i128::MAX)\");",
                "    let value: i128 = 123456789012345678901234567890;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(123456789012345678901234567890)\");",
                "    let value: i128 = -123456789012345678901234567890;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(-123456789012345678901234567890)\");"
              ],
              "code": [
                "{",
                "    let value: i128 = i128::MIN;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(i128::MIN)\");",
                "    let value: i128 = 0;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(0)\");",
                "    let value: i128 = i128::MAX;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(i128::MAX)\");",
                "    let value: i128 = 123456789012345678901234567890;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(123456789012345678901234567890)\");",
                "    let value: i128 = -123456789012345678901234567890;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(-123456789012345678901234567890)\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = -1;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"Literal::i128_suffixed(-1)\");"
              ],
              "code": [
                "{",
                "    let value: i128 = -1;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal::i128_suffixed(-1)\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = 0;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"0i128\");",
                "    assert!(tokens.is_empty() == false);",
                "    let value: i128 = i128::MAX;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"170141183460469231731687303715884105727i128\");",
                "    let value: i128 = i128::MIN;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"-170141183460469231731687303715884105728i128\");",
                "    let value: i128 = -1;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"-1i128\");",
                "    let value: i128 = 1;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"1i128\");"
              ],
              "code": [
                "{",
                "    let value: i128 = 0;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"0i128\");",
                "    assert!(tokens.is_empty() == false);",
                "    let value: i128 = i128::MAX;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"170141183460469231731687303715884105727i128\");",
                "    let value: i128 = i128::MIN;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"-170141183460469231731687303715884105728i128\");",
                "    let value: i128 = -1;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"-1i128\");",
                "    let value: i128 = 1;",
                "    tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"1i128\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = 1;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"1i128\");"
              ],
              "code": [
                "{",
                "    let value: i128 = 1;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"1i128\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = 42;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    tokens.to_string() == \"42i128\"",
                "    tokens.is_empty() == false",
                "    tokens.len() == 1"
              ],
              "code": [
                "{",
                "    let value: i128 = 42;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    tokens.to_string() == \"42i128\"",
                "    tokens.is_empty() == false",
                "    tokens.len() == 1",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = -42;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"Literal(i128_suffixed(-42))\");"
              ],
              "code": [
                "{",
                "    let value: i128 = -42;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"Literal(i128_suffixed(-42))\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = i128::MAX;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    let expected_tokens = TokenStream::from(Literal::i128_suffixed(i128::MAX));",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());"
              ],
              "code": [
                "{",
                "    let value: i128 = i128::MAX;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    let expected_tokens = TokenStream::from(Literal::i128_suffixed(i128::MAX));",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}