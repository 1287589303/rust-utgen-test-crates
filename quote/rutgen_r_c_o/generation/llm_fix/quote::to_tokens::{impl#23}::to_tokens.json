{
  "name": "quote::to_tokens::{impl#23}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:215:5:218:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self at line 216 is true\n"
      ],
      "input_infer": "true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"true\");"
              ],
              "code": [
                "{",
                "    let value = true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"true\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    tokens.is_empty() assert_eq!(tokens.to_string(), \"false\");"
              ],
              "code": [
                "{",
                "    let value = false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "   tokens.is_empty(); assert_eq!(tokens.to_string(), \"false\");  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self at line 216 is false\n"
      ],
      "input_infer": "*self = false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: bool = false;",
                "    let mut tokens = TokenStream::new();",
                "    input.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"false\");"
              ],
              "code": [
                "{",
                "    let input: bool = false;",
                "    let mut tokens = TokenStream::new();",
                "    input.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: bool = false;",
                "    let tokens = input.to_token_stream();",
                "}"
              ],
              "oracle": [
                "    let input: bool = false;",
                "    let expected_tokens = TokenStream::from(Ident::new(\"false\", Span::call_site()));",
                "    assert_eq!(tokens.to_string(), expected_tokens.to_string());"
              ],
              "code": [
                "{",
                "   let input: bool = false;",
                "   let tokens = input.to_token_stream();",
                "   let input: bool = false;",
                "   let expected_tokens = Ident::new(\"false\", Span::call_site()).into_token_stream();",
                "   assert_eq!(tokens.to_string(), expected_tokens.to_string());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: bool = false;",
                "    let tokens = input.into_token_stream();",
                "}"
              ],
              "oracle": [
                "    tokens.is_empty();",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "    assert!(tokens.clone().into_iter().count() == 1);",
                "    assert!(matches!(tokens.clone().into_iter().next(), Some(TokenTree::Ident(_)));",
                "    let ident = tokens.clone().into_iter().next().unwrap();",
                "    assert_eq!(ident.to_string(), \"false\");",
                "    assert!(ident.span() == Span::call_site());"
              ],
              "code": [
                "{",
                "    let input: bool = false;",
                "    let tokens = input.into_token_stream();",
                "    tokens.is_empty();",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "    assert!(tokens.clone().into_iter().count() == 1);",
                "    assert!(matches!(tokens.clone().into_iter().next(), Some(TokenTree::Ident(_)));",
                "    let ident = tokens.clone().into_iter().next().unwrap();",
                "    assert_eq!(ident.to_string(), \"false\");",
                "    assert!(ident.span() == Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}