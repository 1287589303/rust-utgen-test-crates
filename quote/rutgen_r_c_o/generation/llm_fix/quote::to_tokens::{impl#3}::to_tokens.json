{
  "name": "quote::to_tokens::{impl#3}::to_tokens",
  "mod_info": {
    "name": "to_tokens",
    "loc": "src/lib.rs:112:1:112:15"
  },
  "visible": true,
  "loc": "src/to_tokens.rs:93:5:95:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self should be a reference to a value of a type that implements the ToTokens trait, and tokens should be a mutable reference to a TokenStream object. The input conditions are: self type must be any type implementing ToTokens, such as bool, and tokens must be a mutable TokenStream instance initialized to an empty state.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"true\");",
                "    ",
                "    let value: &bool = &false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "    ",
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert!(tokens.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"true\");",
                "    ",
                "    let value: &bool = &false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "    ",
                "    let value: &bool = &true;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert!(tokens.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: &bool = &false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tokens.to_string(), \"false\");"
              ],
              "code": [
                "{",
                "    let value: &bool = &false;",
                "    let mut tokens = TokenStream::new();",
                "    value.to_tokens(&mut tokens);",
                "    assert_eq!(tokens.to_string(), \"false\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}