{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/spanned.rs\n// crate name is quote\nuse crate::ToTokens;\nuse proc_macro2::extra::DelimSpan;\nuse proc_macro2::{Span, TokenStream};\nfn join_spans(tokens: TokenStream) -> Span {\n    let mut iter = tokens.into_iter().map(|tt| tt.span());\n    let first = match iter.next() {\n        Some(span) => span,\n        None => return Span::call_site(),\n    };\n    iter.fold(None, |_prev, next| Some(next))\n        .and_then(|last| first.join(last))\n        .unwrap_or(first)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n28 fn join_spans(tokens: TokenStream) -> Span {\n29     let mut iter = tokens.into_iter().map(|tt| tt.span());\n30 \n31     let first = match iter.next() {\n32         Some(span) => span,\n33         None => return Span::call_site(),\n34     };\n35 \n36     iter.fold(None, |_prev, next| Some(next))\n37         .and_then(|last| first.join(last))\n38         .unwrap_or(first)\n39 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}