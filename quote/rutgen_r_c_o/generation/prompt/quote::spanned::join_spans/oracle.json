{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/spanned.rs\n// crate name is quote\nuse crate::ToTokens;\nuse proc_macro2::extra::DelimSpan;\nuse proc_macro2::{Span, TokenStream};\nfn join_spans(tokens: TokenStream) -> Span {\n    let mut iter = tokens.into_iter().map(|tt| tt.span());\n    let first = match iter.next() {\n        Some(span) => span,\n        None => return Span::call_site(),\n    };\n    iter.fold(None, |_prev, next| Some(next))\n        .and_then(|last| first.join(last))\n        .unwrap_or(first)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n28 fn join_spans(tokens: TokenStream) -> Span {\n29     let mut iter = tokens.into_iter().map(|tt| tt.span());\n30 \n31     let first = match iter.next() {\n32         Some(span) => span,\n33         None => return Span::call_site(),\n34     };\n35 \n36     iter.fold(None, |_prev, next| Some(next))\n37         .and_then(|last| first.join(last))\n38         .unwrap_or(first)\n39 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}