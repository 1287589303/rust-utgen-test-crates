{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/to_tokens.rs\n// crate name is quote\nuse super::TokenStreamExt;\nuse alloc::borrow::Cow;\nuse alloc::rc::Rc;\nuse core::iter;\nuse proc_macro2::{Group, Ident, Literal, Punct, Span, TokenStream, TokenTree};\nuse std::ffi::{CStr, CString};\npub trait ToTokens {\n    fn to_tokens(&self, tokens: &mut TokenStream);\n    fn to_token_stream(&self) -> TokenStream {\n        let mut tokens = TokenStream::new();\n        self.to_tokens(&mut tokens);\n        tokens\n    }\n    fn into_token_stream(self) -> TokenStream\n    where\n        Self: Sized,\n    {\n        self.to_token_stream()\n    }\n}\npub trait TokenStreamExt: private::Sealed {\n    fn append<U>(&mut self, token: U)\n    where\n        U: Into<TokenTree>;\n    fn append_all<I>(&mut self, iter: I)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens;\n    fn append_separated<I, U>(&mut self, iter: I, op: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n    fn append_terminated<I, U>(&mut self, iter: I, term: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n}\nimpl ToTokens for TokenStream {\n    fn to_tokens(&self, tokens: &mut TokenStream) {}\n    fn into_token_stream(self) -> TokenStream {\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n268 fn into_token_stream(self) -> TokenStream {\n269     self\n270 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}