{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ident_fragment.rs\n// crate name is quote\nuse alloc::borrow::Cow;\nuse core::fmt;\nuse proc_macro2::{Ident, Span};\npub trait IdentFragment {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result;\n    fn span(&self) -> Option<Span> {\n        None\n    }\n}\npub trait ToTokens {\n    fn to_tokens(&self, tokens: &mut TokenStream);\n    fn to_token_stream(&self) -> TokenStream;\n    fn into_token_stream(self) -> TokenStream\n    where\n        Self: Sized;\n}\nimpl IdentFragment for Ident {\n    fn span(&self) -> Option<Span> {}\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let id = self.to_string();\n        if let Some(id) = id.strip_prefix(\"r#\") {\n            fmt::Display::fmt(id, f)\n        } else {\n            fmt::Display::fmt(&id[..], f)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n50 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n51     let id = self.to_string();\n52     if let Some(id) = id.strip_prefix(\"r#\") {\n53         fmt::Display::fmt(id, f)\n54     } else {\n55         fmt::Display::fmt(&id[..], f)\n56     }\n57 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}