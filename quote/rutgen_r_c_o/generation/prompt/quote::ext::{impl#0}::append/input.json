{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ext.rs\n// crate name is quote\nuse super::ToTokens;\nuse core::iter;\nuse proc_macro2::{TokenStream, TokenTree};\npub trait TokenStreamExt: private::Sealed {\n    fn append<U>(&mut self, token: U)\n    where\n        U: Into<TokenTree>;\n    fn append_all<I>(&mut self, iter: I)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens;\n    fn append_separated<I, U>(&mut self, iter: I, op: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n    fn append_terminated<I, U>(&mut self, iter: I, term: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens;\n}\npub trait ToTokens {\n    fn to_tokens(&self, tokens: &mut TokenStream);\n    fn to_token_stream(&self) -> TokenStream;\n    fn into_token_stream(self) -> TokenStream\n    where\n        Self: Sized;\n}\npub trait Sealed {}\nimpl TokenStreamExt for TokenStream {\n    fn append<U>(&mut self, token: U)\n    where\n        U: Into<TokenTree>,\n    {\n        self.extend(iter::once(token.into()));\n    }\n    fn append_all<I>(&mut self, iter: I)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n    {}\n    fn append_separated<I, U>(&mut self, iter: I, op: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens,\n    {}\n    fn append_terminated<I, U>(&mut self, iter: I, term: U)\n    where\n        I: IntoIterator,\n        I::Item: ToTokens,\n        U: ToTokens,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n60 fn append<U>(&mut self, token: U)\n61 where\n62     U: Into<TokenTree>,\n63 {\n64     self.extend(iter::once(token.into()));\n65 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}