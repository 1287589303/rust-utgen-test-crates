{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/spanned.rs\n// crate name is quote\nuse crate::ToTokens;\nuse proc_macro2::extra::DelimSpan;\nuse proc_macro2::{Span, TokenStream};\npub trait Spanned: private::Sealed {\n    fn __span(&self) -> Span;\n}\npub trait ToTokens {\n    fn to_tokens(&self, tokens: &mut TokenStream);\n    fn to_token_stream(&self) -> TokenStream;\n    fn into_token_stream(self) -> TokenStream\n    where\n        Self: Sized,\n    {\n        self.to_token_stream()\n    }\n}\npub trait IdentFragment {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result;\n    fn span(&self) -> Option<Span>;\n}\npub trait RepAsIteratorExt<'q> {\n    type Iter: Iterator;\n    fn quote_into_iter(&'q self) -> (Self::Iter, HasIter);\n}\npub trait Sealed {}\nimpl<T: ?Sized + ToTokens> Spanned for T {\n    fn __span(&self) -> Span {\n        join_spans(self.into_token_stream())\n    }\n}\nfn join_spans(tokens: TokenStream) -> Span {\n    let mut iter = tokens.into_iter().map(|tt| tt.span());\n    let first = match iter.next() {\n        Some(span) => span,\n        None => return Span::call_site(),\n    };\n    iter.fold(None, |_prev, next| Some(next))\n        .and_then(|last| first.join(last))\n        .unwrap_or(first)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n23 fn __span(&self) -> Span {\n24     join_spans(self.into_token_stream())\n25 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}