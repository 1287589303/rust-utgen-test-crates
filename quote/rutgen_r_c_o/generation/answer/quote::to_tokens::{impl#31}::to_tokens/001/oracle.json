[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    let mut tokens = TokenStream::new();",
          "    token_stream.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), token_stream.to_string());",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(token_stream.is_empty() == true);",
          "    assert!(tokens.len() == 1);",
          "    assert!(tokens.clone().into_iter().next().is_some());",
          "    assert!(tokens.clone().into_iter().next().unwrap() == token_stream);"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    let mut tokens = TokenStream::new();",
          "    token_stream.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), token_stream.to_string());",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(token_stream.is_empty() == true);",
          "    assert!(tokens.len() == 1);",
          "    assert!(tokens.clone().into_iter().next().is_some());",
          "    assert!(tokens.clone().into_iter().next().unwrap() == token_stream);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]);",
          "    let mut tokens = TokenStream::new();",
          "    token_stream.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert!(tokens.clone().to_string() == \"test\");",
          "    assert!(!tokens.is_empty());",
          "    assert_eq!(tokens.into_iter().count(), 1);",
          "    assert!(tokens.into_iter().next().unwrap().to_string() == \"test\");",
          "    assert!(tokens.to_string() == \"test\");"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]);",
          "    let mut tokens = TokenStream::new();",
          "    token_stream.to_tokens(&mut tokens);",
          "    assert!(tokens.clone().to_string() == \"test\");",
          "    assert!(!tokens.is_empty());",
          "    assert_eq!(tokens.into_iter().count(), 1);",
          "    assert!(tokens.into_iter().next().unwrap().to_string() == \"test\");",
          "    assert!(tokens.to_string() == \"test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from(vec![",
          "        TokenTree::Ident(Ident::new(\"test1\", Span::call_site())),",
          "        TokenTree::Ident(Ident::new(\"test2\", Span::call_site())),",
          "    ]);",
          "    let mut tokens = TokenStream::from(vec![",
          "        TokenTree::Ident(Ident::new(\"existing\", Span::call_site())),",
          "    ]);",
          "    token_stream.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.len() == 2",
          "    tokens.to_string() == \"existing test1 test2\"",
          "    tokens.iter().next().unwrap() == TokenTree::Ident(Ident::new(\"existing\", Span::call_site()))",
          "    tokens.iter().nth(1).unwrap() == TokenTree::Ident(Ident::new(\"test1\", Span::call_site()))",
          "    tokens.iter().nth(2).unwrap() == TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from(vec![",
          "        TokenTree::Ident(Ident::new(\"test1\", Span::call_site())),",
          "        TokenTree::Ident(Ident::new(\"test2\", Span::call_site())),",
          "    ]);",
          "    let mut tokens = TokenStream::from(vec![",
          "        TokenTree::Ident(Ident::new(\"existing\", Span::call_site())),",
          "    ]);",
          "    token_stream.to_tokens(&mut tokens);",
          "    tokens.len() == 2",
          "    tokens.to_string() == \"existing test1 test2\"",
          "    tokens.iter().next().unwrap() == TokenTree::Ident(Ident::new(\"existing\", Span::call_site()))",
          "    tokens.iter().nth(1).unwrap() == TokenTree::Ident(Ident::new(\"test1\", Span::call_site()))",
          "    tokens.iter().nth(2).unwrap() == TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]