[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyToken;",
          "",
          "    impl ToTokens for DummyToken {",
          "        fn to_tokens(&self, _tokens: &mut TokenStream) {}",
          "        fn to_token_stream(&self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "        fn into_token_stream(self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "    }",
          "",
          "    let mut tokens = TokenStream::new();",
          "    let separator = DummyToken;",
          "    let empty_iter = iter::empty::<DummyToken>();",
          "",
          "    tokens.append_separated(empty_iter, separator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"\");"
        ],
        "code": [
          "{",
          "    struct DummyToken;",
          "",
          "    impl ToTokens for DummyToken {",
          "        fn to_tokens(&self, _tokens: &mut TokenStream) {}",
          "        fn to_token_stream(&self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "        fn into_token_stream(self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "    }",
          "",
          "    let mut tokens = TokenStream::new();",
          "    let separator = DummyToken;",
          "    let empty_iter = iter::empty::<DummyToken>();",
          "",
          "    tokens.append_separated(empty_iter, separator);",
          "    assert_eq!(tokens.to_string(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherDummyToken;",
          "",
          "    impl ToTokens for AnotherDummyToken {",
          "        fn to_tokens(&self, _tokens: &mut TokenStream) {}",
          "        fn to_token_stream(&self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "        fn into_token_stream(self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "    }",
          "",
          "    let mut tokens = TokenStream::new();",
          "    let separator = AnotherDummyToken;",
          "    let empty_iter = iter::empty::<AnotherDummyToken>();",
          "",
          "    tokens.append_separated(empty_iter, separator);",
          "}"
        ],
        "oracle": [
          "    tokens.is_empty();",
          "    tokens.to_string() == \"\";"
        ],
        "code": [
          "{",
          "    struct AnotherDummyToken;",
          "",
          "    impl ToTokens for AnotherDummyToken {",
          "        fn to_tokens(&self, _tokens: &mut TokenStream) {}",
          "        fn to_token_stream(&self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "        fn into_token_stream(self) -> TokenStream {",
          "            TokenStream::new()",
          "        }",
          "    }",
          "",
          "    let mut tokens = TokenStream::new();",
          "    let separator = AnotherDummyToken;",
          "    let empty_iter = iter::empty::<AnotherDummyToken>();",
          "",
          "    tokens.append_separated(empty_iter, separator);",
          "    tokens.is_empty();",
          "    tokens.to_string() == \"\";",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]