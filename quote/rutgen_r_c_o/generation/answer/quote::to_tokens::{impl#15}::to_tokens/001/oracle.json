[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(tokens.clone().to_string().contains(\"0\"));",
          "    assert!(tokens.clone().to_string().contains(\"u16\"));",
          "    assert!(tokens.iter().next().is_some());",
          "    assert!(tokens.iter().next().unwrap().is_literal());",
          "    assert!(tokens.iter().next().unwrap().to_string() == \"0\");"
        ],
        "code": [
          "{",
          "    let value: u16 = 0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(tokens.clone().to_string().contains(\"0\"));",
          "    assert!(tokens.clone().to_string().contains(\"u16\"));",
          "    assert!(tokens.iter().next().is_some());",
          "    assert!(tokens.iter().next().unwrap().is_literal());",
          "    assert!(tokens.iter().next().unwrap().to_string() == \"0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 1;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let value: u16 = 1;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1\");"
        ],
        "code": [
          "{",
          "    let value: u16 = 1;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let value: u16 = 1;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 64;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"64\");"
        ],
        "code": [
          "{",
          "    let value: u16 = 64;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"64\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u16 = 65535;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.len() == 1",
          "    tokens.to_string() == \"65535\"",
          "    tokens.into_iter().next().unwrap().is_literal()",
          "    tokens.into_iter().next().unwrap().to_string() == \"65535\""
        ],
        "code": [
          "{",
          "    let value: u16 = 65535;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.len() == 1",
          "    tokens.to_string() == \"65535\"",
          "    tokens.into_iter().next().unwrap().is_literal()",
          "    tokens.into_iter().next().unwrap().to_string() == \"65535\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]