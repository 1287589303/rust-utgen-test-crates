[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let t: Option<&bool> = Some(&true);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.len() == 1",
          "    tokens.to_string() == \"true\""
        ],
        "code": [
          "{",
          "    let t: Option<&bool> = Some(&true);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    tokens.len() == 1",
          "    tokens.to_string() == \"true\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let t: Option<&bool> = Some(&false);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let t: Option<&bool> = Some(&false);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"false\");",
          "    ",
          "    let t: Option<&bool> = Some(&true);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"true\");"
        ],
        "code": [
          "{",
          "    let t: Option<&bool> = Some(&false);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    let t: Option<&bool> = Some(&false);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"false\");",
          "    ",
          "    let t: Option<&bool> = Some(&true);",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"true\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let t: Option<&Ident> = Some(&Ident::new(\"my_ident\", Span::call_site()));",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"my_ident\""
        ],
        "code": [
          "{",
          "    let t: Option<&Ident> = Some(&Ident::new(\"my_ident\", Span::call_site()));",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"my_ident\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let t: Option<&Literal> = Some(&Literal::new(b\"123\", Span::call_site()));",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert!(!tokens.is_empty());",
          "    assert_eq!(tokens.to_string(), \"123\");"
        ],
        "code": [
          "{",
          "    let t: Option<&Literal> = Some(&Literal::new(b\"123\", Span::call_site()));",
          "    let mut tokens = TokenStream::new();",
          "    t.to_tokens(&mut tokens);",
          "    assert!(!tokens.is_empty());",
          "    assert_eq!(tokens.to_string(), \"123\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]