[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(0).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"0\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"255\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(1).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"1\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(128).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"128\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"254\""
        ],
        "code": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(0).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"0\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"255\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(1).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"1\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(128).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"128\"",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"254\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(1).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"1u8\"",
          "    tokens.to_string() == \"0u8\"",
          "    tokens.to_string() == \"255u8\"",
          "    tokens.to_string() == \"127u8\"",
          "    tokens.to_string() == \"0u8\"",
          "    tokens.to_string() == \"128u8\""
        ],
        "code": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(1).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"1u8\"",
          "    tokens.to_string() == \"0u8\"",
          "    tokens.to_string() == \"255u8\"",
          "    tokens.to_string() == \"127u8\"",
          "    tokens.to_string() == \"0u8\"",
          "    tokens.to_string() == \"128u8\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(128).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"128u8\""
        ],
        "code": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(128).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"128u8\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"254u8\");",
          "    tokens.clear();",
          "    TestU8(0).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0u8\");",
          "    tokens.clear();",
          "    TestU8(127).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"127u8\");",
          "    tokens.clear();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"255u8\");",
          "    tokens.clear();",
          "    TestU8(8).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"8u8\");"
        ],
        "code": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(254).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"254u8\");",
          "    tokens.clear();",
          "    TestU8(0).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0u8\");",
          "    tokens.clear();",
          "    TestU8(127).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"127u8\");",
          "    tokens.clear();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"255u8\");",
          "    tokens.clear();",
          "    TestU8(8).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"8u8\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"255u8\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().count() == 1",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"255u8\"",
          "    tokens.clone().into_iter().next().unwrap().span() == Span::call_site()"
        ],
        "code": [
          "{",
          "    struct TestU8(u8);",
          "    ",
          "    let mut tokens = TokenStream::new();",
          "    TestU8(255).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"255u8\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().count() == 1",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"255u8\"",
          "    tokens.clone().into_iter().next().unwrap().span() == Span::call_site()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]