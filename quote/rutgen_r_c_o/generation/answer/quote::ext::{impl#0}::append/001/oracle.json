[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token = TokenTree::from(proc_macro2::Literal::string(\"test\"));",
          "    ts.append(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ts.to_string(), \"\\\"test\\\"\");",
          "    assert!(ts.is_empty() == false);",
          "    assert!(ts.clone().into_iter().count() == 1);",
          "    assert!(ts.clone().into_iter().next().unwrap().to_string() == \"\\\"test\\\"\");"
        ],
        "code": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token = TokenTree::from(proc_macro2::Literal::string(\"test\"));",
          "    ts.append(token);",
          "    assert_eq!(ts.to_string(), \"\\\"test\\\"\");",
          "    assert!(ts.is_empty() == false);",
          "    assert!(ts.clone().into_iter().count() == 1);",
          "    assert!(ts.clone().into_iter().next().unwrap().to_string() == \"\\\"test\\\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token = TokenTree::from(proc_macro2::Ident::new(\"identifier\", proc_macro2::Span::call_site()));",
          "    ts.append(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ts.to_string(), \"identifier\");"
        ],
        "code": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token = TokenTree::from(proc_macro2::Ident::new(\"identifier\", proc_macro2::Span::call_site()));",
          "    ts.append(token);",
          "    assert_eq!(ts.to_string(), \"identifier\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token1 = TokenTree::from(proc_macro2::Ident::new(\"first\", proc_macro2::Span::call_site()));",
          "    let token2 = TokenTree::from(proc_macro2::Literal::string(\"string literal\"));",
          "    let token3 = TokenTree::from(proc_macro2::Punct::new(';', proc_macro2::Spacing::Alone));",
          "",
          "    ts.append(token1);",
          "    ts.append(token2);",
          "    ts.append(token3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ts.to_string(), \"first\\\"string literal\\\";\");",
          "    assert!(ts.is_empty() == false);",
          "    assert!(ts.clone().into_iter().count() == 3);",
          "    assert!(ts.clone().into_iter().nth(0).unwrap().to_string() == \"first\");",
          "    assert!(ts.clone().into_iter().nth(1).unwrap().to_string() == \"\\\"string literal\\\"\");",
          "    assert!(ts.clone().into_iter().nth(2).unwrap().to_string() == \";\");"
        ],
        "code": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    let token1 = TokenTree::from(proc_macro2::Ident::new(\"first\", proc_macro2::Span::call_site()));",
          "    let token2 = TokenTree::from(proc_macro2::Literal::string(\"string literal\"));",
          "    let token3 = TokenTree::from(proc_macro2::Punct::new(';', proc_macro2::Spacing::Alone));",
          "",
          "    ts.append(token1);",
          "    ts.append(token2);",
          "    ts.append(token3);",
          "    assert_eq!(ts.to_string(), \"first\\\"string literal\\\";\");",
          "    assert!(ts.is_empty() == false);",
          "    assert!(ts.clone().into_iter().count() == 3);",
          "    assert!(ts.clone().into_iter().nth(0).unwrap().to_string() == \"first\");",
          "    assert!(ts.clone().into_iter().nth(1).unwrap().to_string() == \"\\\"string literal\\\"\");",
          "    assert!(ts.clone().into_iter().nth(2).unwrap().to_string() == \";\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    ts.append(TokenTree::from(proc_macro2::Punct::new(',', proc_macro2::Spacing::Alone)));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ts.to_string(), \",\");"
        ],
        "code": [
          "{",
          "    let mut ts = TokenStream::new();",
          "    ts.append(TokenTree::from(proc_macro2::Punct::new(',', proc_macro2::Spacing::Alone)));",
          "    assert_eq!(ts.to_string(), \",\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]