[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 1.0;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = -1.0;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"-1.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 1.5;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1.5_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 0.0001;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0.0001_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::INFINITY;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"inf_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"-inf_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::NAN;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"nan_f64\");"
        ],
        "code": [
          "{",
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 1.0;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = -1.0;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"-1.0_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 1.5;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1.5_f64\");",
          "    tokens.clear();",
          "    let value: f64 = 0.0001;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0.0001_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::INFINITY;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"inf_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::NEG_INFINITY;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"-inf_f64\");",
          "    tokens.clear();",
          "    let value: f64 = f64::NAN;",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"nan_f64\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = -0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"0.0\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.to_string().contains(\"0.0\"));",
          "    assert!(tokens.to_string().contains(\"f64\"));",
          "    assert!(tokens.to_string().len() > 0);",
          "    assert!(tokens.to_string().parse::<f64>().is_ok());"
        ],
        "code": [
          "{",
          "    let value: f64 = -0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0.0\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.to_string().contains(\"0.0\"));",
          "    assert!(tokens.to_string().contains(\"f64\"));",
          "    assert!(tokens.to_string().len() > 0);",
          "    assert!(tokens.to_string().parse::<f64>().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"f64::INFINITY\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.len() == 1);"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"f64::INFINITY\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"f64::NEG_INFINITY\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.iter().count() == 1);",
          "    assert!(matches!(tokens.into_iter().next(), Some(TokenTree::Literal(_))));",
          "    assert_eq!(tokens.clone().into_iter().next().unwrap().to_string(), \"f64::NEG_INFINITY\");"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"f64::NEG_INFINITY\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.iter().count() == 1);",
          "    assert!(matches!(tokens.into_iter().next(), Some(TokenTree::Literal(_))));",
          "    assert_eq!(tokens.clone().into_iter().next().unwrap().to_string(), \"f64::NEG_INFINITY\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::NAN;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert!(tokens.to_string().contains(\"NaN\"));",
          "    assert_eq!(tokens.clone().into_iter().count(), 1);",
          "    assert!(tokens.is_empty() == false);",
          "    assert_eq!(tokens.to_string(), \"NaN\");",
          "    assert!(tokens.clone().into_iter().next().is_some());"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::NAN;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert!(tokens.to_string().contains(\"NaN\"));",
          "    assert_eq!(tokens.clone().into_iter().count(), 1);",
          "    assert!(tokens.is_empty() == false);",
          "    assert_eq!(tokens.to_string(), \"NaN\");",
          "    assert!(tokens.clone().into_iter().next().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = -1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"some_expected_representation\");",
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_zero\");",
          "    let value: f64 = 1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_large_value\");",
          "    let value: f64 = f64::NAN;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_nan\");",
          "    let value: f64 = f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_infinity\");",
          "    let value: f64 = -f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_negative_infinity\");"
        ],
        "code": [
          "{",
          "    let value: f64 = -1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation\");",
          "    let value: f64 = 0.0;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_zero\");",
          "    let value: f64 = 1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_large_value\");",
          "    let value: f64 = f64::NAN;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_nan\");",
          "    let value: f64 = f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_infinity\");",
          "    let value: f64 = -f64::INFINITY;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"some_expected_representation_for_negative_infinity\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = 1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"1e+308\");"
        ],
        "code": [
          "{",
          "    let value: f64 = 1.0e+308;",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1e+308\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]