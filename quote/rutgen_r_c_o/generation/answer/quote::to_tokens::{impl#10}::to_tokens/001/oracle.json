[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MIN);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"i32::MIN\"",
          "    tokens.to_string() == \"0\"",
          "    tokens.to_string() == \"1\"",
          "    tokens.to_string() == \"-1\"",
          "    tokens.to_string() == \"i32::MAX\"",
          "    tokens.to_string().contains(\"i32\")"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MIN);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"i32::MIN\"",
          "    tokens.to_string() == \"0\"",
          "    tokens.to_string() == \"1\"",
          "    tokens.to_string() == \"-1\"",
          "    tokens.to_string() == \"i32::MAX\"",
          "    tokens.to_string().contains(\"i32\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.append(Literal::i32_suffixed(i32::MAX));",
          "    assert_eq!(tokens.to_string(), \"i32::MAX\");"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.append(Literal::i32_suffixed(i32::MAX));",
          "    assert_eq!(tokens.to_string(), \"i32::MAX\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let expected_token_stream = Literal::i32_suffixed(0);",
          "    assert_eq!(tokens.to_string(), expected_token_stream.to_string());"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let expected_token_stream = Literal::i32_suffixed(0);",
          "    assert_eq!(tokens.to_string(), expected_token_stream.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(-123);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \" -123\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.to_string().contains(\"-123\"));",
          "    assert!(tokens.to_string().contains(\"Literal\"));",
          "    let value_zero = TestStruct(0);",
          "    let mut tokens_zero = TokenStream::new();",
          "    value_zero.to_tokens(&mut tokens_zero);",
          "    assert_eq!(tokens_zero.to_string(), \"0\");",
          "    let value_positive = TestStruct(123);",
          "    let mut tokens_positive = TokenStream::new();",
          "    value_positive.to_tokens(&mut tokens_positive);",
          "    assert_eq!(tokens_positive.to_string(), \"123\");"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(-123);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \" -123\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.to_string().contains(\"-123\"));",
          "    assert!(tokens.to_string().contains(\"Literal\"));",
          "    let value_zero = TestStruct(0);",
          "    let mut tokens_zero = TokenStream::new();",
          "    value_zero.to_tokens(&mut tokens_zero);",
          "    assert_eq!(tokens_zero.to_string(), \"0\");",
          "    let value_positive = TestStruct(123);",
          "    let mut tokens_positive = TokenStream::new();",
          "    value_positive.to_tokens(&mut tokens_positive);",
          "    assert_eq!(tokens_positive.to_string(), \"123\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(123);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"123\""
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(123);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"123\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MIN + 1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    assert_eq!(tokens.to_string(), \"2\");",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert_eq!(tokens.to_string(), \"-1\");",
          "    assert_eq!(tokens.to_string(), \"2147483647\");",
          "    assert_eq!(tokens.to_string(), \"2147483646\");",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert_eq!(tokens.to_string(), \"i32\");",
          "    assert_eq!(tokens.to_string(), \"2\");",
          "    assert_eq!(tokens.to_string(), \"i32\");"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MIN + 1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    assert_eq!(tokens.to_string(), \"2\");",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert_eq!(tokens.to_string(), \"-1\");",
          "    assert_eq!(tokens.to_string(), \"2147483647\");",
          "    assert_eq!(tokens.to_string(), \"2147483646\");",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    assert_eq!(tokens.to_string(), \"i32\");",
          "    assert_eq!(tokens.to_string(), \"2\");",
          "    assert_eq!(tokens.to_string(), \"i32\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MAX - 1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert!(tokens.to_string() == \"2147483647\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.len() == 1);",
          "    assert!(format!(\"{:?}\", tokens) == \"TokenStream(Ident, \\\"2147483647\\\")\");",
          "    assert!(tokens.to_string().contains(\"2147483647\"));"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    let value = TestStruct(i32::MAX - 1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert!(tokens.to_string() == \"2147483647\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.len() == 1);",
          "    assert!(format!(\"{:?}\", tokens) == \"TokenStream(Ident, \\\"2147483647\\\")\");",
          "    assert!(tokens.to_string().contains(\"2147483647\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]