[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct PositiveInteger(i32);",
          "    impl ToTokens for PositiveInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = PositiveInteger(42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"42i\");"
        ],
        "code": [
          "{",
          "    struct PositiveInteger(i32);",
          "    impl ToTokens for PositiveInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = PositiveInteger(42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"42i\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NegativeInteger(i32);",
          "    impl ToTokens for NegativeInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = NegativeInteger(-42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let value = NegativeInteger(-42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let expected_token = Literal::isize_suffixed(-42);",
          "    assert!(tokens.to_string().contains(&expected_token.to_string()));",
          "    assert_eq!(tokens.to_string(), expected_token.to_string());"
        ],
        "code": [
          "{",
          "    struct NegativeInteger(i32);",
          "    impl ToTokens for NegativeInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = NegativeInteger(-42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let value = NegativeInteger(-42);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let expected_token = Literal::isize_suffixed(-42);",
          "    assert!(tokens.to_string().contains(&expected_token.to_string()));",
          "    assert_eq!(tokens.to_string(), expected_token.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroInteger(i32);",
          "    impl ToTokens for ZeroInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = ZeroInteger(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    token_stream.to_string() == \"0\"",
          "    tokens.iter().count() == 1",
          "    tokens.into_iter().next().unwrap() == Literal::isize_suffixed(0)"
        ],
        "code": [
          "{",
          "    struct ZeroInteger(i32);",
          "    impl ToTokens for ZeroInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = ZeroInteger(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    token_stream.to_string() == \"0\"",
          "    tokens.iter().count() == 1",
          "    tokens.into_iter().next().unwrap() == Literal::isize_suffixed(0)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinInteger(i32);",
          "    impl ToTokens for MinInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = MinInteger(i32::MIN);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"MIN\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(format!(\"{}\", tokens).contains(\"MIN\"));",
          "    assert!(tokens.clone().into_iter().count() > 0);",
          "    assert!(tokens.to_string().contains(\"isize\"));"
        ],
        "code": [
          "{",
          "    struct MinInteger(i32);",
          "    impl ToTokens for MinInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = MinInteger(i32::MIN);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"MIN\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(format!(\"{}\", tokens).contains(\"MIN\"));",
          "    assert!(tokens.clone().into_iter().count() > 0);",
          "    assert!(tokens.to_string().contains(\"isize\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MaxInteger(i32);",
          "    impl ToTokens for MaxInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = MaxInteger(i32::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"9223372036854775807\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(tokens.clone().to_string().contains(\"9223372036854775807\"));",
          "    assert!(tokens.clone().to_string().contains(\"isize\"));"
        ],
        "code": [
          "{",
          "    struct MaxInteger(i32);",
          "    impl ToTokens for MaxInteger {",
          "        fn to_tokens(&self, tokens: &mut TokenStream) {",
          "            tokens.append(Literal::isize_suffixed(self.0));",
          "        }",
          "    }",
          "    let value = MaxInteger(i32::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"9223372036854775807\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(tokens.clone().to_string().contains(\"9223372036854775807\"));",
          "    assert!(tokens.clone().to_string().contains(\"isize\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]