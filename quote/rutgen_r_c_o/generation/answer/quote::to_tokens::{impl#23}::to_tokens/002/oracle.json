[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: bool = false;",
          "    let mut tokens = TokenStream::new();",
          "    input.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"false\");"
        ],
        "code": [
          "{",
          "    let input: bool = false;",
          "    let mut tokens = TokenStream::new();",
          "    input.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"false\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: bool = false;",
          "    let tokens = input.to_token_stream();",
          "}"
        ],
        "oracle": [
          "    let input: bool = false;",
          "    let expected_tokens = TokenStream::from(Ident::new(\"false\", Span::call_site()));",
          "    assert_eq!(tokens.to_string(), expected_tokens.to_string());"
        ],
        "code": [
          "{",
          "    let input: bool = false;",
          "    let tokens = input.to_token_stream();",
          "    let input: bool = false;",
          "    let expected_tokens = TokenStream::from(Ident::new(\"false\", Span::call_site()));",
          "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: bool = false;",
          "    let tokens = input.into_token_stream();",
          "}"
        ],
        "oracle": [
          "    tokens.is_empty();",
          "    assert_eq!(tokens.to_string(), \"false\");",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(matches!(tokens.clone().into_iter().next(), Some(TokenTree::Ident(_)));",
          "    let ident = tokens.clone().into_iter().next().unwrap();",
          "    assert_eq!(ident.to_string(), \"false\");",
          "    assert!(ident.span() == Span::call_site());"
        ],
        "code": [
          "{",
          "    let input: bool = false;",
          "    let tokens = input.into_token_stream();",
          "    tokens.is_empty();",
          "    assert_eq!(tokens.to_string(), \"false\");",
          "    assert!(tokens.clone().into_iter().count() == 1);",
          "    assert!(matches!(tokens.clone().into_iter().next(), Some(TokenTree::Ident(_)));",
          "    let ident = tokens.clone().into_iter().next().unwrap();",
          "    assert_eq!(ident.to_string(), \"false\");",
          "    assert!(ident.span() == Span::call_site());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]