[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MinI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    MinI16(-32768).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"Literal(i16 –32768)\");"
        ],
        "code": [
          "{",
          "    struct MinI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    MinI16(-32768).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"Literal(i16 –32768)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    ZeroI16(0).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"0\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().count() == 1",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"0\""
        ],
        "code": [
          "{",
          "    struct ZeroI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    ZeroI16(0).to_tokens(&mut tokens);",
          "    tokens.to_string() == \"0\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().count() == 1",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"0\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MaxI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    MaxI16(32767).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"32767\");"
        ],
        "code": [
          "{",
          "    struct MaxI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    MaxI16(32767).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"32767\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NegativeValueI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    NegativeValueI16(-1234).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tokens.to_string(), \"1234\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.iter().count() == 1);",
          "    assert!(matches!(tokens.iter().next().unwrap(), TokenTree::Literal(_)));"
        ],
        "code": [
          "{",
          "    struct NegativeValueI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    NegativeValueI16(-1234).to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1234\");",
          "    assert!(tokens.is_empty() == false);",
          "    assert!(tokens.iter().count() == 1);",
          "    assert!(matches!(tokens.iter().next().unwrap(), TokenTree::Literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct PositiveValueI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    PositiveValueI16(1234).to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    assert!(tokens.to_string() == \"1234\");",
          "    assert!(tokens.into_iter().count() == 1);",
          "    assert!(matches!(tokens.into_iter().next(), Some(TokenTree::Literal(lit)) if lit.to_string() == \"1234\"));",
          "    assert!(tokens.span() == Span::call_site());"
        ],
        "code": [
          "{",
          "    struct PositiveValueI16(i16);",
          "    let mut tokens = TokenStream::new();",
          "    PositiveValueI16(1234).to_tokens(&mut tokens);",
          "    assert!(tokens.to_string() == \"1234\");",
          "    assert!(tokens.into_iter().count() == 1);",
          "    assert!(matches!(tokens.into_iter().next(), Some(TokenTree::Literal(lit)) if lit.to_string() == \"1234\"));",
          "    assert!(tokens.span() == Span::call_site());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]