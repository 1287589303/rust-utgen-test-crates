[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"0\"",
          "    tokens.is_empty() == false"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(0);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"0\"",
          "    tokens.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"1u64\"",
          "    tokens.is_empty() == false"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(1);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"1u64\"",
          "    tokens.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(100);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"100_u64\"",
          "    tokens.is_empty() == false",
          "    tokens.len() == 1",
          "    tokens.iter().next().unwrap().to_string() == \"100_u64\"",
          "    tokens.iter().next().unwrap().span() == Span::call_site()"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(100);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"100_u64\"",
          "    tokens.is_empty() == false",
          "    tokens.len() == 1",
          "    tokens.iter().next().unwrap().to_string() == \"100_u64\"",
          "    tokens.iter().next().unwrap().span() == Span::call_site()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(50000);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    let expected_tokens = TokenStream::from(Literal::u64_suffixed(50000));",
          "    assert_eq!(tokens.to_string(), expected_tokens.to_string());"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(50000);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    let expected_tokens = TokenStream::from(Literal::u64_suffixed(50000));",
          "    assert_eq!(tokens.to_string(), expected_tokens.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(123456789);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.to_string() == \"123456789\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"123456789\"",
          "    tokens.to_string().contains(\"123456789\") == true",
          "    tokens.len() > 0"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(123456789);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.to_string() == \"123456789\"",
          "    tokens.is_empty() == false",
          "    tokens.clone().into_iter().next().unwrap().to_string() == \"123456789\"",
          "    tokens.to_string().contains(\"123456789\") == true",
          "    tokens.len() > 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(u64::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "}"
        ],
        "oracle": [
          "    tokens.append(Literal::u64_suffixed(u64::MAX));",
          "    assert_eq!(tokens.to_string(), \"18446744073709551615\");",
          "    let value = TestStruct(0);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    let value = TestStruct(1);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    let value = TestStruct(12345);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"12345\");",
          "    let value = TestStruct(u64::MIN);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0\");"
        ],
        "code": [
          "{",
          "    struct TestStruct(u64);",
          "    let value = TestStruct(u64::MAX);",
          "    let mut tokens = TokenStream::new();",
          "    value.to_tokens(&mut tokens);",
          "    tokens.append(Literal::u64_suffixed(u64::MAX));",
          "    assert_eq!(tokens.to_string(), \"18446744073709551615\");",
          "    let value = TestStruct(0);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "    let value = TestStruct(1);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"1\");",
          "    let value = TestStruct(12345);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"12345\");",
          "    let value = TestStruct(u64::MIN);",
          "    value.to_tokens(&mut tokens);",
          "    assert_eq!(tokens.to_string(), \"0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]