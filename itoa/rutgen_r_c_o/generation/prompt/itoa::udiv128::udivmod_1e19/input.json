{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/udiv128.rs\n// crate name is itoa\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\n#[inline]\n#[cfg_attr(feature = \"no-panic\", no_panic)]\npub fn udivmod_1e19(n: u128) -> (u128, u64) {\n    let d = 10_000_000_000_000_000_000_u64;\n    let quot = if n < 1 << 83 {\n        ((n >> 19) as u64 / (d >> 19)) as u128\n    } else {\n        u128_mulhi(n, 156927543384667019095894735580191660403) >> 62\n    };\n    let rem = (n - quot * d as u128) as u64;\n    debug_assert_eq!(quot, n / d as u128);\n    debug_assert_eq!(rem as u128, n % d as u128);\n    (quot, rem)\n}\n#[inline]\n#[cfg_attr(feature = \"no-panic\", no_panic)]\nfn u128_mulhi(x: u128, y: u128) -> u128 {\n    let x_lo = x as u64;\n    let x_hi = (x >> 64) as u64;\n    let y_lo = y as u64;\n    let y_hi = (y >> 64) as u64;\n    let carry = (x_lo as u128 * y_lo as u128) >> 64;\n    let m = x_lo as u128 * y_hi as u128 + carry;\n    let high1 = m >> 64;\n    let m_lo = m as u64;\n    let high2 = (x_hi as u128 * y_lo as u128 + m_lo as u128) >> 64;\n    x_hi as u128 * y_hi as u128 + high1 + high2\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Divide `n` by 1e19 and return quotient and remainder\n///\n/// Integer division algorithm is based on the following paper:\n///\n///   T. Granlund and P. Montgomery, “Division by Invariant Integers Using Multiplication”\n///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n///   Implementation, 1994, pp. 61–72\n///\n34 pub fn udivmod_1e19(n: u128) -> (u128, u64) {\n35     let d = 10_000_000_000_000_000_000_u64; // 10^19\n36 \n37     let quot = if n < 1 << 83 {\n38         ((n >> 19) as u64 / (d >> 19)) as u128\n39     } else {\n40         u128_mulhi(n, 156927543384667019095894735580191660403) >> 62\n41     };\n42 \n43     let rem = (n - quot * d as u128) as u64;\n44     debug_assert_eq!(quot, n / d as u128);\n45     debug_assert_eq!(rem as u128, n % d as u128);\n46 \n47     (quot, rem)\n48 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}