{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is itoa\nuse core::hint;\nuse core::mem::MaybeUninit;\nuse core::{ptr, slice, str};\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\nconst DEC_DIGITS_LUT: [u8; 200] = *b\"\\\n      0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\";\npub trait Sealed: Copy {\n    type Buffer: 'static;\n    fn write(self, buf: &mut Self::Buffer) -> &str;\n}\npub struct Buffer {\n    bytes: [MaybeUninit<u8>; i128::MAX_STR_LEN],\n}\nimpl Buffer {\n    #[inline]\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn new() -> Buffer {}\n    #[cfg_attr(feature = \"no-panic\", no_panic)]\n    pub fn format<I: Integer>(&mut self, i: I) -> &str {\n        let string = i\n            .write(unsafe {\n                &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; i128::MAX_STR_LEN]\n                    as *mut <I as private::Sealed>::Buffer)\n            });\n        if string.len() > I::MAX_STR_LEN {\n            unsafe { hint::unreachable_unchecked() };\n        }\n        string\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print an integer into this buffer and return a reference to its string\n/// representation within the buffer.\n 97 pub fn format<I: Integer>(&mut self, i: I) -> &str {\n 98     let string = i.write(unsafe {\n 99         &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; i128::MAX_STR_LEN]\n100             as *mut <I as private::Sealed>::Buffer)\n101     });\n102     if string.len() > I::MAX_STR_LEN {\n103         unsafe { hint::unreachable_unchecked() };\n104     }\n105     string\n106 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}