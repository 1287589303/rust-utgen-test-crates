{
  "name": "itoa::udiv128::u128_mulhi",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": false,
  "loc": "src/udiv128.rs:7:1:22:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: x_hi as u128 * y_hi as u128 + high1 + high2\n"
      ],
      "input_infer": "0 to 340282366920938463463374607431768211455 for both x and y, covering edge cases where x or y is 0, 1, maximum value, and half maximum value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 0;",
                "    let y: u128 = 0;",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(1 << 64, 1 << 64), 1);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), u128::MAX >> 64);",
                "    assert_eq!(u128_mulhi(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert_eq!(u128_mulhi(1 << 63, 1 << 63), 0);",
                "    assert_eq!(u128_mulhi(1, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), 0);",
                "    assert_eq!(u128_mulhi(0x1234567890ABCDEF1234567890ABCDEF, 0xFEDCBA0987654321FEDCBA0987654321), 0x0B42D517F05E83C7);",
                "    assert_eq!(u128_mulhi(0x0, 0x0), 0);",
                "    assert_eq!(u128_mulhi(0x1, 0x1), 0);"
              ],
              "code": [
                "{",
                "    let x: u128 = 0;",
                "    let y: u128 = 0;",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(1 << 64, 1 << 64), 1);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), u128::MAX >> 64);",
                "    assert_eq!(u128_mulhi(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert_eq!(u128_mulhi(1 << 63, 1 << 63), 0);",
                "    assert_eq!(u128_mulhi(1, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), 0);",
                "    assert_eq!(u128_mulhi(0x1234567890ABCDEF1234567890ABCDEF, 0xFEDCBA0987654321FEDCBA0987654321), 0x0B42D517F05E83C7);",
                "    assert_eq!(u128_mulhi(0x0, 0x0), 0);",
                "    assert_eq!(u128_mulhi(0x1, 0x1), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 1;",
                "    let y: u128 = 1;",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), (u128::MAX as u128 * u128::MAX as u128) >> 64);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(2, 3), 1);",
                "    assert_eq!(u128_mulhi(2, 2), 0);",
                "    assert_eq!(u128_mulhi(0x0000000000000001_0000000000000000, 0x0000000000000001_0000000000000000), 1);",
                "    assert_eq!(u128_mulhi(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert_eq!(u128_mulhi(0x8000000000000000_8000000000000000, 0x8000000000000000_8000000000000000), 0x4000000000000000_0000000000000000);",
                "    assert_eq!(u128_mulhi(0x0000000000000000_0000000000000001, 0x0000000000000000_0000000000000001), 0);"
              ],
              "code": [
                "{",
                "    let x: u128 = 1;",
                "    let y: u128 = 1;",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), (u128::MAX as u128 * u128::MAX as u128) >> 64);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(2, 3), 1);",
                "    assert_eq!(u128_mulhi(2, 2), 0);",
                "    assert_eq!(u128_mulhi(0x0000000000000001_0000000000000000, 0x0000000000000001_0000000000000000), 1);",
                "    assert_eq!(u128_mulhi(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert_eq!(u128_mulhi(0x8000000000000000_8000000000000000, 0x8000000000000000_8000000000000000), 0x4000000000000000_0000000000000000);",
                "    assert_eq!(u128_mulhi(0x0000000000000000_0000000000000001, 0x0000000000000000_0000000000000001), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let y: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(0, 0), 0); // Test with zero values",
                "    assert_eq!(u128_mulhi(1, 1), 0); // Test small values",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), u128::MAX >> 64); // Test with max u128 and 1",
                "    assert_eq!(u128_mulhi(1, u128::MAX), u128::MAX >> 64); // Test with 1 and max u128",
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 2), 170141183460469231731687303715884105727); // Test max u128 * 2",
                "    assert_eq!(u128_mulhi(2, 340282366920938463463374607431768211455), 170141183460469231731687303715884105727); // Test 2 * max u128",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0); // Test max u128 * max u128",
                "    assert_eq!(u128_mulhi(0, u128::MAX), 0); // Test with one operand as zero",
                "    assert_eq!(u128_mulhi(u128::MAX, 0), 0); // Test with one operand as zero",
                "    assert_eq!(u128_mulhi(123456789012345678901234567890123456789, 987654321098765432109876543210987654321), 0); // Test with large random values"
              ],
              "code": [
                "{",
                "    let x: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let y: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(0, 0), 0); // Test with zero values",
                "    assert_eq!(u128_mulhi(1, 1), 0); // Test small values",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), u128::MAX >> 64); // Test with max u128 and 1",
                "    assert_eq!(u128_mulhi(1, u128::MAX), u128::MAX >> 64); // Test with 1 and max u128",
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 2), 170141183460469231731687303715884105727); // Test max u128 * 2",
                "    assert_eq!(u128_mulhi(2, 340282366920938463463374607431768211455), 170141183460469231731687303715884105727); // Test 2 * max u128",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0); // Test max u128 * max u128",
                "    assert_eq!(u128_mulhi(0, u128::MAX), 0); // Test with one operand as zero",
                "    assert_eq!(u128_mulhi(u128::MAX, 0), 0); // Test with one operand as zero",
                "    assert_eq!(u128_mulhi(123456789012345678901234567890123456789, 987654321098765432109876543210987654321), 0); // Test with large random values",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 170141183460469231731687303715884105727; // half of max u128",
                "    let y: u128 = 170141183460469231731687303715884105727; // half of max u128",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105727, 170141183460469231731687303715884105727), 28925731010070432716830019237409841147728919574561275824901326297666566821545244081849692760767329583105778636347197);"
              ],
              "code": [
                "{",
                "    let x: u128 = 170141183460469231731687303715884105727; // half of max u128",
                "    let y: u128 = 170141183460469231731687303715884105727; // half of max u128",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105727, 170141183460469231731687303715884105727), 28925731010070432716830019237409841147728919574561275824901326297666566821545244081849692760767329583105778636347197);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let y: u128 = 1;",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 1), 340282366920938463463374607431768211455);",
                "    assert_eq!(u128_mulhi(1, 340282366920938463463374607431768211455), 0);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(2, 3), 0);",
                "    assert_eq!(u128_mulhi(18446744073709551615, 18446744073709551615), 340282366920938463442257500209548933887);",
                "    assert_eq!(u128_mulhi(12345678901234567890123456789012345678, 98765432109876543210987654321098765432), 0);",
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 340282366920938463463374607431768211455), 340282366920938463463374607431768211455 * 340282366920938463463374607431768211455 >> 64);"
              ],
              "code": [
                "{",
                "    let x: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let y: u128 = 1;",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 1), 340282366920938463463374607431768211455);",
                "    assert_eq!(u128_mulhi(1, 340282366920938463463374607431768211455), 0);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(2, 3), 0);",
                "    assert_eq!(u128_mulhi(18446744073709551615, 18446744073709551615), 340282366920938463442257500209548933887);",
                "    assert_eq!(u128_mulhi(12345678901234567890123456789012345678, 98765432109876543210987654321098765432), 0);",
                "    assert_eq!(u128_mulhi(340282366920938463463374607431768211455, 340282366920938463463374607431768211455), 340282366920938463463374607431768211455 * 340282366920938463463374607431768211455 >> 64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 1;",
                "    let y: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(1, 340282366920938463463374607431768211455), 0);"
              ],
              "code": [
                "{",
                "    let x: u128 = 1;",
                "    let y: u128 = 340282366920938463463374607431768211455; // max u128",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(1, 340282366920938463463374607431768211455), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 170141183460469231731687303715884105728; // slightly more than half",
                "    let y: u128 = 2;",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 2), 170141183460469231731687303715884105728);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(2, 2), 0);",
                "    assert_eq!(u128_mulhi(2, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 1), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), 0);",
                "    assert_eq!(u128_mulhi(1, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);"
              ],
              "code": [
                "{",
                "    let x: u128 = 170141183460469231731687303715884105728; // slightly more than half",
                "    let y: u128 = 2;",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 2), 170141183460469231731687303715884105728);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(2, 2), 0);",
                "    assert_eq!(u128_mulhi(2, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 1), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, 1), 0);",
                "    assert_eq!(u128_mulhi(1, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x: u128 = 2;",
                "    let y: u128 = 170141183460469231731687303715884105728; // slightly more than half",
                "    let _ = u128_mulhi(x, y);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(u128_mulhi(2, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 2), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105727, 1), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(123456789012345678901234567890123456789, 987654321098765432109876543210987654321), expected_value);"
              ],
              "code": [
                "{",
                "    let x: u128 = 2;",
                "    let y: u128 = 170141183460469231731687303715884105728; // slightly more than half",
                "    let _ = u128_mulhi(x, y);",
                "    assert_eq!(u128_mulhi(2, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(0, 0), 0);",
                "    assert_eq!(u128_mulhi(0, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 0), 0);",
                "    assert_eq!(u128_mulhi(1, 1), 0);",
                "    assert_eq!(u128_mulhi(1, 2), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105727, 1), 0);",
                "    assert_eq!(u128_mulhi(170141183460469231731687303715884105728, 170141183460469231731687303715884105728), 0);",
                "    assert_eq!(u128_mulhi(u128::MAX, u128::MAX), 0);",
                "    assert_eq!(u128_mulhi(123456789012345678901234567890123456789, 987654321098765432109876543210987654321), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}