{
  "name": "itoa::udiv128::udivmod_1e19",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": true,
  "loc": "src/udiv128.rs:34:1:48:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 1_000_000_000_000_000_000; // 10^18",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    assert_eq!(quot, 0);",
                "    assert_eq!(rem, 1_000_000_000_000_000_000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 10_000_000_000_000_000_000; // 10^19",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    assert_eq!(quot, 1);",
                "    assert_eq!(rem, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 20_000_000_000_000_000_000; // 2 * 10^19",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    assert_eq!(quot, 2);",
                "    assert_eq!(rem, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 10_000_000_000_000_000_001; // 10^19 + 1",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    assert_eq!(quot, 1);",
                "    assert_eq!(rem, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = u128::MAX;",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    let expected_quot = (n / 10_000_000_000_000_000_000u128);",
                "    let expected_rem = (n % 10_000_000_000_000_000_000u128) as u64;",
                "    assert_eq!(quot, expected_quot);",
                "    assert_eq!(rem, expected_rem);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}