{
  "name": "itoa::udiv128::udivmod_1e19",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": true,
  "loc": "src/udiv128.rs:34:1:48:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: n < 1 << 83 at line 37 is true\n",
        "precondition: (*left_val == *right_val) at line 40 is true\n",
        "precondition: (*left_val == *right_val) at line 40 is true\n",
        "expected return value/type: (quot, rem)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 10_000_000_000_000_000_000; // This value is less than 1 << 83",
                "    let expected_quot: u128 = 1; // 10^19 / 10^19 = 1",
                "    let expected_rem: u64 = 0; // 10^19 % 10^19 = 0",
                "",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    ",
                "    assert_eq!(quot, expected_quot);",
                "    assert_eq!(rem, expected_rem);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 2 << 82; // This value is less than 1 << 83",
                "    let expected_quot: u128 = 2; // (2^83) / (10^19) = 2",
                "    let expected_rem: u64 = 0; // (2^83) % (10^19) = 0",
                "",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    ",
                "    assert_eq!(quot, expected_quot);",
                "    assert_eq!(rem, expected_rem);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = (1 << 83) - 1; // Maximum value under 1 << 83",
                "    let expected_quot: u128 = 0; // (2^83 - 1) / (10^19) = 0",
                "    let expected_rem: u64 = (1 << 83) - 1; // (2^83 - 1) % (10^19) = (2^83 - 1)",
                "",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    ",
                "    assert_eq!(quot, expected_quot);",
                "    assert_eq!(rem, expected_rem);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: n < 1 << 83 at line 37 is false, with bound n == 1 << 83\n",
        "precondition: (*left_val == *right_val) at line 40 is false\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let n: u128 = 1 << 83; // n == 1 << 83, should not hold for the test",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    ",
                "    assert!(quot > 0); // Since n is large, we expect a non-zero quotient",
                "    assert!(rem < 10_000_000_000_000_000_000); // Remainder should be within the range of d = 10^19",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct(u128);",
                "    ",
                "    let n: u128 = 156927543384667019095894735580191660403; // A value at which u128_mulhi may not align with typical expectations",
                "    let (quot, rem) = udivmod_1e19(n);",
                "    ",
                "    assert!(quot == 0 || rem > 0); // The quotient could be zero, but the remainder must be greater than zero for non-zero inputs",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}