{
  "name": "itoa::udiv128::u128_mulhi",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": false,
  "loc": "src/udiv128.rs:7:1:22:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: x_hi as u128 * y_hi as u128 + high1 + high2\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 10;",
                "    let y: u128 = 20;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // 10 * 20 = 200, upper 128 bits is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 0x0000000100000000; // 2^32",
                "    let y: u128 = 0x0000000200000000; // 2^33",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0x0000000000000002); // 2^32 * 2^33 = 2^65, upper 128 bits = 2^65 >> 64 = 2",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = u128::MAX;",
                "    let y: u128 = u128::MAX;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0xFFFFFFFFFFFFFFFF); // The computation should yield upper 128 bits as 0xFFFFFFFFFFFFFFFF",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 0;",
                "    let y: u128 = 0;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // 0 * 0 = 0, upper 128 bits is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 0;",
                "    let y: u128 = 20;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // 0 * 20 = 0, upper 128 bits is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = u128::MAX;",
                "    let y: u128 = 0;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // MAX * 0 = 0, upper 128 bits is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}