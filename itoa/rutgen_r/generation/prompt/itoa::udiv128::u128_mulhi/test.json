{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/udiv128.rs\n// crate name is itoa\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Multiply unsigned 128 bit integers, return upper 128 bits of the result\n 7 fn u128_mulhi(x: u128, y: u128) -> u128 {\n 8     let x_lo = x as u64;\n 9     let x_hi = (x >> 64) as u64;\n10     let y_lo = y as u64;\n11     let y_hi = (y >> 64) as u64;\n12 \n13     // handle possibility of overflow\n14     let carry = (x_lo as u128 * y_lo as u128) >> 64;\n15     let m = x_lo as u128 * y_hi as u128 + carry;\n16     let high1 = m >> 64;\n17 \n18     let m_lo = m as u64;\n19     let high2 = (x_hi as u128 * y_lo as u128 + m_lo as u128) >> 64;\n20 \n21     x_hi as u128 * y_hi as u128 + high1 + high2\n22 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}