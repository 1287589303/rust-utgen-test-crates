{
  "name": "itoa::udiv128::u128_mulhi",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": false,
  "loc": "src/udiv128.rs:7:1:22:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: x_hi as u128 * y_hi as u128 + high1 + high2\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 2;",
                "    let y: u128 = 3;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // upper 128 bits of 6 is 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 1 << 128 - 1; // max value for u128",
                "    let y: u128 = 1 << 128 - 1; // max value for u128",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 1); // upper 128 bits of (max^2) will still yield upper bits contributing to 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = (1 << 64) - 1; // max value for lower 64 bits",
                "    let y: u128 = (1 << 64) - 1; // max value for lower 64 bits",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, (1u128 << 64) - 1); // the upper bits will be 1 since it multiplies into the upper range",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 0;",
                "    let y: u128 = 5;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // multiplying with zero should yield zero",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = 1;",
                "    let y: u128 = 5;",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, 0); // upper bits of 5 are 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let x: u128 = u128::MAX; ",
                "    let y: u128 = u128::MAX; ",
                "    let result = u128_mulhi(x, y);",
                "    assert_eq!(result, u128::MAX); // the overflow scenario where upper bits contribute max value",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}