{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/udiv128.rs\n// crate name is itoa\n#[cfg(feature = \"no-panic\")]\nuse no_panic::no_panic;\n#[inline]\n#[cfg_attr(feature = \"no-panic\", no_panic)]\npub fn udivmod_1e19(n: u128) -> (u128, u64) {\n    let d = 10_000_000_000_000_000_000_u64;\n    let quot = if n < 1 << 83 {\n        ((n >> 19) as u64 / (d >> 19)) as u128\n    } else {\n        u128_mulhi(n, 156927543384667019095894735580191660403) >> 62\n    };\n    let rem = (n - quot * d as u128) as u64;\n    debug_assert_eq!(quot, n / d as u128);\n    debug_assert_eq!(rem as u128, n % d as u128);\n    (quot, rem)\n}\n#[inline]\n#[cfg_attr(feature = \"no-panic\", no_panic)]\nfn u128_mulhi(x: u128, y: u128) -> u128 {\n    let x_lo = x as u64;\n    let x_hi = (x >> 64) as u64;\n    let y_lo = y as u64;\n    let y_hi = (y >> 64) as u64;\n    let carry = (x_lo as u128 * y_lo as u128) >> 64;\n    let m = x_lo as u128 * y_hi as u128 + carry;\n    let high1 = m >> 64;\n    let m_lo = m as u64;\n    let high2 = (x_hi as u128 * y_lo as u128 + m_lo as u128) >> 64;\n    x_hi as u128 * y_hi as u128 + high1 + high2\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Divide `n` by 1e19 and return quotient and remainder\n///\n/// Integer division algorithm is based on the following paper:\n///\n///   T. Granlund and P. Montgomery, “Division by Invariant Integers Using Multiplication”\n///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n///   Implementation, 1994, pp. 61–72\n///\n34 pub fn udivmod_1e19(n: u128) -> (u128, u64) {\n35     let d = 10_000_000_000_000_000_000_u64; // 10^19\n36 \n37     let quot = if n < 1 << 83 {\n38         ((n >> 19) as u64 / (d >> 19)) as u128\n39     } else {\n40         u128_mulhi(n, 156927543384667019095894735580191660403) >> 62\n41     };\n42 \n43     let rem = (n - quot * d as u128) as u64;\n44     debug_assert_eq!(quot, n / d as u128);\n45     debug_assert_eq!(rem as u128, n % d as u128);\n46 \n47     (quot, rem)\n48 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}