{
  "name": "itoa::{impl#3}::format",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:329:34"
  },
  "visible": true,
  "loc": "src/lib.rs:97:5:106:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestInteger;",
                "",
                "    impl Copy for TestInteger {}",
                "",
                "    impl Sealed for TestInteger {",
                "        type Buffer = [MaybeUninit<u8>; 20];",
                "",
                "        fn write(self, buf: &mut Self::Buffer) -> &str {",
                "            let str_representation = \"42\";",
                "            buf[..str_representation.len()].clone_from_slice(&str_representation.as_bytes());",
                "            unsafe { str::from_utf8_unchecked(&buf[..str_representation.len()]) }",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format(TestInteger);",
                "    assert_eq!(result, \"42\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestNegativeInteger;",
                "",
                "    impl Copy for TestNegativeInteger {}",
                "",
                "    impl Sealed for TestNegativeInteger {",
                "        type Buffer = [MaybeUninit<u8>; 20];",
                "",
                "        fn write(self, buf: &mut Self::Buffer) -> &str {",
                "            let str_representation = \"-42\";",
                "            buf[..str_representation.len()].clone_from_slice(&str_representation.as_bytes());",
                "            unsafe { str::from_utf8_unchecked(&buf[..str_representation.len()]) }",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format(TestNegativeInteger);",
                "    assert_eq!(result, \"-42\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestZeroInteger;",
                "",
                "    impl Copy for TestZeroInteger {}",
                "",
                "    impl Sealed for TestZeroInteger {",
                "        type Buffer = [MaybeUninit<u8>; 20];",
                "",
                "        fn write(self, buf: &mut Self::Buffer) -> &str {",
                "            let str_representation = \"0\";",
                "            buf[..str_representation.len()].clone_from_slice(&str_representation.as_bytes());",
                "            unsafe { str::from_utf8_unchecked(&buf[..str_representation.len()]) }",
                "        }",
                "    }",
                "",
                "    let mut buffer = Buffer::new();",
                "    let result = buffer.format(TestZeroInteger);",
                "    assert_eq!(result, \"0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}