{
  "name": "itoa::udiv128::udivmod_1e19",
  "mod_info": {
    "name": "udiv128",
    "loc": "src/lib.rs:45:1:45:13"
  },
  "visible": true,
  "loc": "src/udiv128.rs:34:1:48:2",
  "doc": "/// Divide `n` by 1e19 and return quotient and remainder\n///\n/// Integer division algorithm is based on the following paper:\n///\n///   T. Granlund and P. Montgomery, “Division by Invariant Integers Using Multiplication”\n///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n///   Implementation, 1994, pp. 61–72\n///\n",
  "code": [
    "pub fn udivmod_1e19(n: u128) -> (u128, u64) {",
    "    let d = 10_000_000_000_000_000_000_u64; // 10^19",
    "",
    "    let quot = if n < 1 << 83 {",
    "        ((n >> 19) as u64 / (d >> 19)) as u128",
    "    } else {",
    "        u128_mulhi(n, 156927543384667019095894735580191660403) >> 62",
    "    };",
    "",
    "    let rem = (n - quot * d as u128) as u64;",
    "    debug_assert_eq!(quot, n / d as u128);",
    "    debug_assert_eq!(rem as u128, n % d as u128);",
    "",
    "    (quot, rem)",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 2,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "true",
          "line": 37,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "(quot, rem)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        20,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "true",
          "line": 37,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        21,
        24
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "true",
          "line": 37,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        12,
        13,
        15,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "false",
          "line": 37,
          "bound": "n == 1 << 83"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "(quot, rem)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        20,
        23
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "false",
          "line": 37,
          "bound": "n == 1 << 83"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        21,
        24
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "n < 1 << 83",
          "norm": "1 << 83 > n",
          "value": "false",
          "line": 37,
          "bound": "n == 1 << 83"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}