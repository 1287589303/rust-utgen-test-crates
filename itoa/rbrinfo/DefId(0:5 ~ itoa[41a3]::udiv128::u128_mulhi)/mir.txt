bb0
  0: StorageLive(_3)
    SourceInfo(src/udiv128.rs:8:9-8:13)
  1: StorageLive(_4)
    SourceInfo(src/udiv128.rs:8:16-8:17)
  2: _4 = _1
    SourceInfo(src/udiv128.rs:8:16-8:17)
  3: _3 = move _4 as u64 (IntToInt)
    SourceInfo(src/udiv128.rs:8:16-8:24)
  4: StorageDead(_4)
    SourceInfo(src/udiv128.rs:8:23-8:24)
  5: FakeRead(ForLet(None), _3)
    SourceInfo(src/udiv128.rs:8:9-8:13)
  6: StorageLive(_5)
    SourceInfo(src/udiv128.rs:9:9-9:13)
  7: StorageLive(_6)
    SourceInfo(src/udiv128.rs:9:16-9:25)
  8: StorageLive(_7)
    SourceInfo(src/udiv128.rs:9:17-9:18)
  9: _7 = _1
    SourceInfo(src/udiv128.rs:9:17-9:18)
  10: _8 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/udiv128.rs:9:16-9:25)
  11: _9 = Lt(move _8, const 128_u32)
    SourceInfo(src/udiv128.rs:9:16-9:25)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:9:16-9:25)
      kind: assert(move _9, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: _6 = Shr(move _7, const 64_i32)
    SourceInfo(src/udiv128.rs:9:16-9:25)
  1: StorageDead(_7)
    SourceInfo(src/udiv128.rs:9:24-9:25)
  2: _5 = move _6 as u64 (IntToInt)
    SourceInfo(src/udiv128.rs:9:16-9:32)
  3: StorageDead(_6)
    SourceInfo(src/udiv128.rs:9:31-9:32)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(src/udiv128.rs:9:9-9:13)
  5: StorageLive(_10)
    SourceInfo(src/udiv128.rs:10:9-10:13)
  6: StorageLive(_11)
    SourceInfo(src/udiv128.rs:10:16-10:17)
  7: _11 = _2
    SourceInfo(src/udiv128.rs:10:16-10:17)
  8: _10 = move _11 as u64 (IntToInt)
    SourceInfo(src/udiv128.rs:10:16-10:24)
  9: StorageDead(_11)
    SourceInfo(src/udiv128.rs:10:23-10:24)
  10: FakeRead(ForLet(None), _10)
    SourceInfo(src/udiv128.rs:10:9-10:13)
  11: StorageLive(_12)
    SourceInfo(src/udiv128.rs:11:9-11:13)
  12: StorageLive(_13)
    SourceInfo(src/udiv128.rs:11:16-11:25)
  13: StorageLive(_14)
    SourceInfo(src/udiv128.rs:11:17-11:18)
  14: _14 = _2
    SourceInfo(src/udiv128.rs:11:17-11:18)
  15: _15 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/udiv128.rs:11:16-11:25)
  16: _16 = Lt(move _15, const 128_u32)
    SourceInfo(src/udiv128.rs:11:16-11:25)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:11:16-11:25)
      kind: assert(move _16, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: _13 = Shr(move _14, const 64_i32)
    SourceInfo(src/udiv128.rs:11:16-11:25)
  1: StorageDead(_14)
    SourceInfo(src/udiv128.rs:11:24-11:25)
  2: _12 = move _13 as u64 (IntToInt)
    SourceInfo(src/udiv128.rs:11:16-11:32)
  3: StorageDead(_13)
    SourceInfo(src/udiv128.rs:11:31-11:32)
  4: FakeRead(ForLet(None), _12)
    SourceInfo(src/udiv128.rs:11:9-11:13)
  5: StorageLive(_17)
    SourceInfo(src/udiv128.rs:14:9-14:14)
  6: StorageLive(_18)
    SourceInfo(src/udiv128.rs:14:17-14:46)
  7: StorageLive(_19)
    SourceInfo(src/udiv128.rs:14:18-14:30)
  8: StorageLive(_20)
    SourceInfo(src/udiv128.rs:14:18-14:22)
  9: _20 = _3
    SourceInfo(src/udiv128.rs:14:18-14:22)
  10: _19 = move _20 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:14:18-14:30)
  11: StorageDead(_20)
    SourceInfo(src/udiv128.rs:14:29-14:30)
  12: StorageLive(_21)
    SourceInfo(src/udiv128.rs:14:33-14:45)
  13: StorageLive(_22)
    SourceInfo(src/udiv128.rs:14:33-14:37)
  14: _22 = _10
    SourceInfo(src/udiv128.rs:14:33-14:37)
  15: _21 = move _22 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:14:33-14:45)
  16: StorageDead(_22)
    SourceInfo(src/udiv128.rs:14:44-14:45)
  17: _23 = MulWithOverflow(_19, _21)
    SourceInfo(src/udiv128.rs:14:17-14:46)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:14:17-14:46)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _19, move _21) -> [success: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: _18 = move (_23.0: u128)
    SourceInfo(src/udiv128.rs:14:17-14:46)
  1: StorageDead(_21)
    SourceInfo(src/udiv128.rs:14:45-14:46)
  2: StorageDead(_19)
    SourceInfo(src/udiv128.rs:14:45-14:46)
  3: _24 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/udiv128.rs:14:17-14:52)
  4: _25 = Lt(move _24, const 128_u32)
    SourceInfo(src/udiv128.rs:14:17-14:52)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:14:17-14:52)
      kind: assert(move _25, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: _17 = Shr(move _18, const 64_i32)
    SourceInfo(src/udiv128.rs:14:17-14:52)
  1: StorageDead(_18)
    SourceInfo(src/udiv128.rs:14:51-14:52)
  2: FakeRead(ForLet(None), _17)
    SourceInfo(src/udiv128.rs:14:9-14:14)
  3: StorageLive(_26)
    SourceInfo(src/udiv128.rs:15:9-15:10)
  4: StorageLive(_27)
    SourceInfo(src/udiv128.rs:15:13-15:40)
  5: StorageLive(_28)
    SourceInfo(src/udiv128.rs:15:13-15:25)
  6: StorageLive(_29)
    SourceInfo(src/udiv128.rs:15:13-15:17)
  7: _29 = _3
    SourceInfo(src/udiv128.rs:15:13-15:17)
  8: _28 = move _29 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:15:13-15:25)
  9: StorageDead(_29)
    SourceInfo(src/udiv128.rs:15:24-15:25)
  10: StorageLive(_30)
    SourceInfo(src/udiv128.rs:15:28-15:40)
  11: StorageLive(_31)
    SourceInfo(src/udiv128.rs:15:28-15:32)
  12: _31 = _12
    SourceInfo(src/udiv128.rs:15:28-15:32)
  13: _30 = move _31 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:15:28-15:40)
  14: StorageDead(_31)
    SourceInfo(src/udiv128.rs:15:39-15:40)
  15: _32 = MulWithOverflow(_28, _30)
    SourceInfo(src/udiv128.rs:15:13-15:40)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:15:13-15:40)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} * {}`, which would overflow", move _28, move _30) -> [success: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: _27 = move (_32.0: u128)
    SourceInfo(src/udiv128.rs:15:13-15:40)
  1: StorageDead(_30)
    SourceInfo(src/udiv128.rs:15:39-15:40)
  2: StorageDead(_28)
    SourceInfo(src/udiv128.rs:15:39-15:40)
  3: StorageLive(_33)
    SourceInfo(src/udiv128.rs:15:43-15:48)
  4: _33 = _17
    SourceInfo(src/udiv128.rs:15:43-15:48)
  5: _34 = AddWithOverflow(_27, _33)
    SourceInfo(src/udiv128.rs:15:13-15:48)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:15:13-15:48)
      kind: assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _33) -> [success: bb6, unwind: bb14]
  }
  preds [bb4]
  succs [bb6, bb14]

bb6
  0: _26 = move (_34.0: u128)
    SourceInfo(src/udiv128.rs:15:13-15:48)
  1: StorageDead(_33)
    SourceInfo(src/udiv128.rs:15:47-15:48)
  2: StorageDead(_27)
    SourceInfo(src/udiv128.rs:15:47-15:48)
  3: FakeRead(ForLet(None), _26)
    SourceInfo(src/udiv128.rs:15:9-15:10)
  4: StorageLive(_35)
    SourceInfo(src/udiv128.rs:16:9-16:14)
  5: StorageLive(_36)
    SourceInfo(src/udiv128.rs:16:17-16:18)
  6: _36 = _26
    SourceInfo(src/udiv128.rs:16:17-16:18)
  7: _37 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/udiv128.rs:16:17-16:24)
  8: _38 = Lt(move _37, const 128_u32)
    SourceInfo(src/udiv128.rs:16:17-16:24)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:16:17-16:24)
      kind: assert(move _38, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: _35 = Shr(move _36, const 64_i32)
    SourceInfo(src/udiv128.rs:16:17-16:24)
  1: StorageDead(_36)
    SourceInfo(src/udiv128.rs:16:23-16:24)
  2: FakeRead(ForLet(None), _35)
    SourceInfo(src/udiv128.rs:16:9-16:14)
  3: StorageLive(_39)
    SourceInfo(src/udiv128.rs:18:9-18:13)
  4: StorageLive(_40)
    SourceInfo(src/udiv128.rs:18:16-18:17)
  5: _40 = _26
    SourceInfo(src/udiv128.rs:18:16-18:17)
  6: _39 = move _40 as u64 (IntToInt)
    SourceInfo(src/udiv128.rs:18:16-18:24)
  7: StorageDead(_40)
    SourceInfo(src/udiv128.rs:18:23-18:24)
  8: FakeRead(ForLet(None), _39)
    SourceInfo(src/udiv128.rs:18:9-18:13)
  9: StorageLive(_41)
    SourceInfo(src/udiv128.rs:19:9-19:14)
  10: StorageLive(_42)
    SourceInfo(src/udiv128.rs:19:17-19:61)
  11: StorageLive(_43)
    SourceInfo(src/udiv128.rs:19:18-19:45)
  12: StorageLive(_44)
    SourceInfo(src/udiv128.rs:19:18-19:30)
  13: StorageLive(_45)
    SourceInfo(src/udiv128.rs:19:18-19:22)
  14: _45 = _5
    SourceInfo(src/udiv128.rs:19:18-19:22)
  15: _44 = move _45 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:19:18-19:30)
  16: StorageDead(_45)
    SourceInfo(src/udiv128.rs:19:29-19:30)
  17: StorageLive(_46)
    SourceInfo(src/udiv128.rs:19:33-19:45)
  18: StorageLive(_47)
    SourceInfo(src/udiv128.rs:19:33-19:37)
  19: _47 = _10
    SourceInfo(src/udiv128.rs:19:33-19:37)
  20: _46 = move _47 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:19:33-19:45)
  21: StorageDead(_47)
    SourceInfo(src/udiv128.rs:19:44-19:45)
  22: _48 = MulWithOverflow(_44, _46)
    SourceInfo(src/udiv128.rs:19:18-19:45)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:19:18-19:45)
      kind: assert(!move (_48.1: bool), "attempt to compute `{} * {}`, which would overflow", move _44, move _46) -> [success: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: _43 = move (_48.0: u128)
    SourceInfo(src/udiv128.rs:19:18-19:45)
  1: StorageDead(_46)
    SourceInfo(src/udiv128.rs:19:44-19:45)
  2: StorageDead(_44)
    SourceInfo(src/udiv128.rs:19:44-19:45)
  3: StorageLive(_49)
    SourceInfo(src/udiv128.rs:19:48-19:60)
  4: StorageLive(_50)
    SourceInfo(src/udiv128.rs:19:48-19:52)
  5: _50 = _39
    SourceInfo(src/udiv128.rs:19:48-19:52)
  6: _49 = move _50 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:19:48-19:60)
  7: StorageDead(_50)
    SourceInfo(src/udiv128.rs:19:59-19:60)
  8: _51 = AddWithOverflow(_43, _49)
    SourceInfo(src/udiv128.rs:19:17-19:61)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:19:17-19:61)
      kind: assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, move _49) -> [success: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: _42 = move (_51.0: u128)
    SourceInfo(src/udiv128.rs:19:17-19:61)
  1: StorageDead(_49)
    SourceInfo(src/udiv128.rs:19:60-19:61)
  2: StorageDead(_43)
    SourceInfo(src/udiv128.rs:19:60-19:61)
  3: _52 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/udiv128.rs:19:17-19:67)
  4: _53 = Lt(move _52, const 128_u32)
    SourceInfo(src/udiv128.rs:19:17-19:67)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:19:17-19:67)
      kind: assert(move _53, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: _41 = Shr(move _42, const 64_i32)
    SourceInfo(src/udiv128.rs:19:17-19:67)
  1: StorageDead(_42)
    SourceInfo(src/udiv128.rs:19:66-19:67)
  2: FakeRead(ForLet(None), _41)
    SourceInfo(src/udiv128.rs:19:9-19:14)
  3: StorageLive(_54)
    SourceInfo(src/udiv128.rs:21:5-21:40)
  4: StorageLive(_55)
    SourceInfo(src/udiv128.rs:21:5-21:32)
  5: StorageLive(_56)
    SourceInfo(src/udiv128.rs:21:5-21:17)
  6: StorageLive(_57)
    SourceInfo(src/udiv128.rs:21:5-21:9)
  7: _57 = _5
    SourceInfo(src/udiv128.rs:21:5-21:9)
  8: _56 = move _57 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:21:5-21:17)
  9: StorageDead(_57)
    SourceInfo(src/udiv128.rs:21:16-21:17)
  10: StorageLive(_58)
    SourceInfo(src/udiv128.rs:21:20-21:32)
  11: StorageLive(_59)
    SourceInfo(src/udiv128.rs:21:20-21:24)
  12: _59 = _12
    SourceInfo(src/udiv128.rs:21:20-21:24)
  13: _58 = move _59 as u128 (IntToInt)
    SourceInfo(src/udiv128.rs:21:20-21:32)
  14: StorageDead(_59)
    SourceInfo(src/udiv128.rs:21:31-21:32)
  15: _60 = MulWithOverflow(_56, _58)
    SourceInfo(src/udiv128.rs:21:5-21:32)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:21:5-21:32)
      kind: assert(!move (_60.1: bool), "attempt to compute `{} * {}`, which would overflow", move _56, move _58) -> [success: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: _55 = move (_60.0: u128)
    SourceInfo(src/udiv128.rs:21:5-21:32)
  1: StorageDead(_58)
    SourceInfo(src/udiv128.rs:21:31-21:32)
  2: StorageDead(_56)
    SourceInfo(src/udiv128.rs:21:31-21:32)
  3: StorageLive(_61)
    SourceInfo(src/udiv128.rs:21:35-21:40)
  4: _61 = _35
    SourceInfo(src/udiv128.rs:21:35-21:40)
  5: _62 = AddWithOverflow(_55, _61)
    SourceInfo(src/udiv128.rs:21:5-21:40)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:21:5-21:40)
      kind: assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", move _55, move _61) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _54 = move (_62.0: u128)
    SourceInfo(src/udiv128.rs:21:5-21:40)
  1: StorageDead(_61)
    SourceInfo(src/udiv128.rs:21:39-21:40)
  2: StorageDead(_55)
    SourceInfo(src/udiv128.rs:21:39-21:40)
  3: StorageLive(_63)
    SourceInfo(src/udiv128.rs:21:43-21:48)
  4: _63 = _41
    SourceInfo(src/udiv128.rs:21:43-21:48)
  5: _64 = AddWithOverflow(_54, _63)
    SourceInfo(src/udiv128.rs:21:5-21:48)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:21:5-21:48)
      kind: assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, move _63) -> [success: bb13, unwind: bb14]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: _0 = move (_64.0: u128)
    SourceInfo(src/udiv128.rs:21:5-21:48)
  1: StorageDead(_63)
    SourceInfo(src/udiv128.rs:21:47-21:48)
  2: StorageDead(_54)
    SourceInfo(src/udiv128.rs:21:47-21:48)
  3: StorageDead(_41)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  4: StorageDead(_39)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  5: StorageDead(_35)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  6: StorageDead(_26)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  7: StorageDead(_17)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  8: StorageDead(_12)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  9: StorageDead(_10)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  10: StorageDead(_5)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  11: StorageDead(_3)
    SourceInfo(src/udiv128.rs:22:1-22:2)
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:22:2-22:2)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/udiv128.rs:7:1-22:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12]
  succs []

