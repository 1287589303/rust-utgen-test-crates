[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut ((*_1).0: [core::mem::MaybeUninit<u8>; 40]),
            _10 = &raw mut (*_11),
            AscribeUserType(_10, o, UserTypeProjection { base: UserType(0), projs: [] }),
            _9 = _10,
            _8 = move _9 as *mut <I as private::Sealed>::Buffer (PtrToPtr),
            AscribeUserType(_8, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageDead(_9),
            _7 = &mut (*_8),
            _6 = &mut (*_7),
            _5 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:98:22: 101:11 (#0),
                    scope: scope[0],
                },
                kind: _3 = <I as private::Sealed>::write(move _4, move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:102:12: 102:24 (#0),
                    scope: scope[1],
                },
                kind: _14 = core::str::<impl str>::len(move _15) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = Gt(move _14, const <I as Integer>::MAX_STR_LEN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:102:12: 102:41 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_17),
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:103:22: 103:51 (#0),
                    scope: scope[1],
                },
                kind: _18 = core::hint::unreachable_unchecked() -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = const (),
            StorageDead(_13),
            StorageDead(_12),
            _0 = &(*_3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:106:6: 106:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:97:5: 106:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:51: 97:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Buffer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:31: 97:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:97:45: 97:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:97:42: 97:43 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:97:42: 97:43 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:42: 97:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:98:22: 101:11 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:98:13: 98:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:98:13: 98:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:98:22: 98:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:31 ~ itoa[41a3]::private::Sealed::Buffer) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:13: 100:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:31 ~ itoa[41a3]::private::Sealed::Buffer) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:13: 100:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:99:13: 100:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:31 ~ itoa[41a3]::private::Sealed::Buffer) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:13: 100:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:99:13: 100:56 (#0),
                },
            ),
        ),
        ty: *mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:31 ~ itoa[41a3]::private::Sealed::Buffer) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:19: 100:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:99:13: 100:56 (#0),
                },
            ),
        ),
        ty: *mut [core::mem::MaybeUninit<u8>; 40_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:20: 99:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:99:13: 100:56 (#0),
                },
            ),
        ),
        ty: *mut [core::mem::MaybeUninit<u8>; 40_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:20: 99:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:99:13: 100:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::mem::MaybeUninit<u8>; 40_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:20: 99:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:102:9: 104:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:102:12: 102:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:102:12: 102:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:102:12: 102:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:102:42: 104:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:103:22: 103:51 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:103:22: 103:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:103:22: 103:51 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:103:22: 103:51 (#0),
            scope: scope[0],
        },
    },
]