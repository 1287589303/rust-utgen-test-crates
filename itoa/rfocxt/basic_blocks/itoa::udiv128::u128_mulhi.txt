[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            _3 = move _4 as u64 (IntToInt),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
            _8 = const 64_i32 as u32 (IntToInt),
            _9 = Lt(move _8, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:9:16: 9:25 (#0),
                    scope: scope[1],
                },
                kind: assert(move _9, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Shr(move _7, const 64_i32),
            StorageDead(_7),
            _5 = move _6 as u64 (IntToInt),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _2,
            _10 = move _11 as u64 (IntToInt),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _2,
            _15 = const 64_i32 as u32 (IntToInt),
            _16 = Lt(move _15, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:11:16: 11:25 (#0),
                    scope: scope[3],
                },
                kind: assert(move _16, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = Shr(move _14, const 64_i32),
            StorageDead(_14),
            _12 = move _13 as u64 (IntToInt),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _3,
            _19 = move _20 as u128 (IntToInt),
            StorageDead(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _10,
            _21 = move _22 as u128 (IntToInt),
            StorageDead(_22),
            _23 = MulWithOverflow(_19, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:14:17: 14:46 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _19, move _21) -> [success: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_23.0: u128),
            StorageDead(_21),
            StorageDead(_19),
            _24 = const 64_i32 as u32 (IntToInt),
            _25 = Lt(move _24, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:14:17: 14:52 (#0),
                    scope: scope[4],
                },
                kind: assert(move _25, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Shr(move _18, const 64_i32),
            StorageDead(_18),
            FakeRead(ForLet(None), _17),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _3,
            _28 = move _29 as u128 (IntToInt),
            StorageDead(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _12,
            _30 = move _31 as u128 (IntToInt),
            StorageDead(_31),
            _32 = MulWithOverflow(_28, _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:15:13: 15:40 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_32.1: bool), "attempt to compute `{} * {}`, which would overflow", move _28, move _30) -> [success: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_32.0: u128),
            StorageDead(_30),
            StorageDead(_28),
            StorageLive(_33),
            _33 = _17,
            _34 = AddWithOverflow(_27, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:15:13: 15:48 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _33) -> [success: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_34.0: u128),
            StorageDead(_33),
            StorageDead(_27),
            FakeRead(ForLet(None), _26),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _26,
            _37 = const 64_i32 as u32 (IntToInt),
            _38 = Lt(move _37, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:16:17: 16:24 (#0),
                    scope: scope[6],
                },
                kind: assert(move _38, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = Shr(move _36, const 64_i32),
            StorageDead(_36),
            FakeRead(ForLet(None), _35),
            StorageLive(_39),
            StorageLive(_40),
            _40 = _26,
            _39 = move _40 as u64 (IntToInt),
            StorageDead(_40),
            FakeRead(ForLet(None), _39),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _5,
            _44 = move _45 as u128 (IntToInt),
            StorageDead(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _10,
            _46 = move _47 as u128 (IntToInt),
            StorageDead(_47),
            _48 = MulWithOverflow(_44, _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:19:18: 19:45 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_48.1: bool), "attempt to compute `{} * {}`, which would overflow", move _44, move _46) -> [success: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = move (_48.0: u128),
            StorageDead(_46),
            StorageDead(_44),
            StorageLive(_49),
            StorageLive(_50),
            _50 = _39,
            _49 = move _50 as u128 (IntToInt),
            StorageDead(_50),
            _51 = AddWithOverflow(_43, _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:19:17: 19:61 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, move _49) -> [success: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = move (_51.0: u128),
            StorageDead(_49),
            StorageDead(_43),
            _52 = const 64_i32 as u32 (IntToInt),
            _53 = Lt(move _52, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:19:17: 19:67 (#0),
                    scope: scope[8],
                },
                kind: assert(move _53, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = Shr(move _42, const 64_i32),
            StorageDead(_42),
            FakeRead(ForLet(None), _41),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _5,
            _56 = move _57 as u128 (IntToInt),
            StorageDead(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _12,
            _58 = move _59 as u128 (IntToInt),
            StorageDead(_59),
            _60 = MulWithOverflow(_56, _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:21:5: 21:32 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_60.1: bool), "attempt to compute `{} * {}`, which would overflow", move _56, move _58) -> [success: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = move (_60.0: u128),
            StorageDead(_58),
            StorageDead(_56),
            StorageLive(_61),
            _61 = _35,
            _62 = AddWithOverflow(_55, _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:21:5: 21:40 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", move _55, move _61) -> [success: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = move (_62.0: u128),
            StorageDead(_61),
            StorageDead(_55),
            StorageLive(_63),
            _63 = _41,
            _64 = AddWithOverflow(_54, _63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, move _63) -> [success: bb13, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_64.0: u128),
            StorageDead(_63),
            StorageDead(_54),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_35),
            StorageDead(_26),
            StorageDead(_17),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:22:2: 22:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/udiv128.rs:7:1: 22:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:7:36: 7:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/udiv128.rs:7:18: 7:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:7:15: 7:16 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:7:15: 7:16 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:7:15: 7:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/udiv128.rs:7:27: 7:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:7:24: 7:25 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:7:24: 7:25 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:7:24: 7:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:8:16: 8:24 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:8:9: 8:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:8:9: 8:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:8:16: 8:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:9:16: 9:32 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:9:9: 9:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:9:9: 9:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:9:16: 9:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:9:17: 9:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:9:16: 9:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:9:16: 9:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:10:16: 10:24 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:10:9: 10:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:10:9: 10:13 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:10:16: 10:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:11:16: 11:32 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:11:9: 11:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:11:9: 11:13 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:11:16: 11:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:11:17: 11:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:11:16: 11:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:11:16: 11:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:14:17: 14:52 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:14:9: 14:14 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:9: 14:14 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:17: 14:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:18: 14:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:18: 14:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:33: 14:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:33: 14:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:17: 14:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:17: 14:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:14:17: 14:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:15:13: 15:48 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:15:9: 15:10 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:9: 15:10 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:13: 15:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:13: 15:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:13: 15:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:28: 15:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:28: 15:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:13: 15:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:43: 15:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:15:13: 15:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:16:17: 16:24 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:16:9: 16:14 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:16:9: 16:14 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:16:17: 16:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:16:17: 16:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:16:17: 16:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:18:16: 18:24 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:18:9: 18:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:18:9: 18:13 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:18:16: 18:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/udiv128.rs:19:17: 19:67 (#0),
                            ),
                        ),
                        pat_span: src/udiv128.rs:19:9: 19:14 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:9: 19:14 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:17: 19:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:18: 19:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:18: 19:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:18: 19:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:33: 19:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:33: 19:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:18: 19:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:48: 19:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:48: 19:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:17: 19:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:17: 19:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:19:17: 19:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:20: 21:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:20: 21:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:35: 21:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/udiv128.rs:21:5: 21:48 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:43: 21:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/udiv128.rs:21:5: 21:48 (#0),
            scope: scope[0],
        },
    },
]