bb0
  0: StorageLive(_2)
    SourceInfo(src/bytes_mut.rs:1114:9-1119:10)
  1: StorageLive(_3)
    SourceInfo(src/bytes_mut.rs:1118:13-1118:55)
  2: StorageLive(_4)
    SourceInfo(src/bytes_mut.rs:1115:17-1115:20)
  3: StorageLive(_5)
    SourceInfo(src/bytes_mut.rs:1115:23-1115:40)
  4: StorageLive(_6)
    SourceInfo(src/bytes_mut.rs:1115:23-1115:31)
  5: _6 = ((*_1).0: core::ptr::NonNull<u8>)
    SourceInfo(src/bytes_mut.rs:1115:23-1115:31)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1115:23-1115:40)
      kind: _5 = core::ptr::NonNull::<u8>::as_ptr(move _6) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_6)
    SourceInfo(src/bytes_mut.rs:1115:39-1115:40)
  1: StorageLive(_7)
    SourceInfo(src/bytes_mut.rs:1115:45-1115:53)
  2: _7 = ((*_1).1: usize)
    SourceInfo(src/bytes_mut.rs:1115:45-1115:53)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1115:23-1115:54)
      kind: _4 = core::ptr::mut_ptr::<impl *mut u8>::add(move _5, move _7) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_7)
    SourceInfo(src/bytes_mut.rs:1115:53-1115:54)
  1: StorageDead(_5)
    SourceInfo(src/bytes_mut.rs:1115:53-1115:54)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/bytes_mut.rs:1115:17-1115:20)
  3: StorageLive(_8)
    SourceInfo(src/bytes_mut.rs:1116:17-1116:20)
  4: StorageLive(_9)
    SourceInfo(src/bytes_mut.rs:1116:23-1116:31)
  5: _9 = ((*_1).2: usize)
    SourceInfo(src/bytes_mut.rs:1116:23-1116:31)
  6: StorageLive(_10)
    SourceInfo(src/bytes_mut.rs:1116:34-1116:42)
  7: _10 = ((*_1).1: usize)
    SourceInfo(src/bytes_mut.rs:1116:34-1116:42)
  8: _11 = SubWithOverflow(_9, _10)
    SourceInfo(src/bytes_mut.rs:1116:23-1116:42)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1116:23-1116:42)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, move _10) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _8 = move (_11.0: usize)
    SourceInfo(src/bytes_mut.rs:1116:23-1116:42)
  1: StorageDead(_10)
    SourceInfo(src/bytes_mut.rs:1116:41-1116:42)
  2: StorageDead(_9)
    SourceInfo(src/bytes_mut.rs:1116:41-1116:42)
  3: FakeRead(ForLet(None), _8)
    SourceInfo(src/bytes_mut.rs:1116:17-1116:20)
  4: StorageLive(_12)
    SourceInfo(src/bytes_mut.rs:1118:13-1118:55)
  5: StorageLive(_13)
    SourceInfo(src/bytes_mut.rs:1118:39-1118:49)
  6: StorageLive(_14)
    SourceInfo(src/bytes_mut.rs:1118:39-1118:42)
  7: _14 = _4
    SourceInfo(src/bytes_mut.rs:1118:39-1118:42)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1118:39-1118:49)
      kind: _13 = core::ptr::mut_ptr::<impl *mut u8>::cast::<core::mem::MaybeUninit<u8>>(move _14) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_14)
    SourceInfo(src/bytes_mut.rs:1118:48-1118:49)
  1: StorageLive(_15)
    SourceInfo(src/bytes_mut.rs:1118:51-1118:54)
  2: _15 = _8
    SourceInfo(src/bytes_mut.rs:1118:51-1118:54)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1118:13-1118:55)
      kind: _12 = core::slice::from_raw_parts_mut::<'_, core::mem::MaybeUninit<u8>>(move _13, move _15) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _3 = &mut (*_12)
    SourceInfo(src/bytes_mut.rs:1118:13-1118:55)
  1: StorageDead(_15)
    SourceInfo(src/bytes_mut.rs:1118:54-1118:55)
  2: StorageDead(_13)
    SourceInfo(src/bytes_mut.rs:1118:54-1118:55)
  3: StorageDead(_8)
    SourceInfo(src/bytes_mut.rs:1119:9-1119:10)
  4: StorageDead(_4)
    SourceInfo(src/bytes_mut.rs:1119:9-1119:10)
  5: _2 = &mut (*_3)
    SourceInfo(src/bytes_mut.rs:1118:13-1118:55)
  6: _0 = &mut (*_2)
    SourceInfo(src/bytes_mut.rs:1114:9-1119:10)
  7: StorageDead(_12)
    SourceInfo(src/bytes_mut.rs:1120:5-1120:6)
  8: StorageDead(_3)
    SourceInfo(src/bytes_mut.rs:1120:5-1120:6)
  9: StorageDead(_2)
    SourceInfo(src/bytes_mut.rs:1120:5-1120:6)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1120:6-1120:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1113:5-1120:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

