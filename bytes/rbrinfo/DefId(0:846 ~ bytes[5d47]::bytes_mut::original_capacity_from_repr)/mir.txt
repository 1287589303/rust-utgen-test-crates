bb0
  0: StorageLive(_2)
    SourceInfo(src/bytes_mut.rs:1491:5-1493:6)
  1: StorageLive(_3)
    SourceInfo(src/bytes_mut.rs:1491:8-1491:17)
  2: StorageLive(_4)
    SourceInfo(src/bytes_mut.rs:1491:8-1491:12)
  3: _4 = _1
    SourceInfo(src/bytes_mut.rs:1491:8-1491:12)
  4: _3 = Eq(move _4, const 0_usize)
    SourceInfo(src/bytes_mut.rs:1491:8-1491:17)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1491:8-1491:17)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(src/bytes_mut.rs:1491:16-1491:17)
  1: _0 = const 0_usize
    SourceInfo(src/bytes_mut.rs:1492:16-1492:17)
  2: StorageDead(_3)
    SourceInfo(src/bytes_mut.rs:1493:5-1493:6)
  3: StorageDead(_2)
    SourceInfo(src/bytes_mut.rs:1493:5-1493:6)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1496:2-1496:2)
      kind: goto -> bb6
  }
  preds [bb0]
  succs [bb6]

bb2
  0: StorageDead(_4)
    SourceInfo(src/bytes_mut.rs:1491:16-1491:17)
  1: _2 = const ()
    SourceInfo(src/bytes_mut.rs:1493:6-1493:6)
  2: StorageDead(_3)
    SourceInfo(src/bytes_mut.rs:1493:5-1493:6)
  3: StorageDead(_2)
    SourceInfo(src/bytes_mut.rs:1493:5-1493:6)
  4: StorageLive(_6)
    SourceInfo(src/bytes_mut.rs:1495:10-1495:52)
  5: StorageLive(_7)
    SourceInfo(src/bytes_mut.rs:1495:11-1495:15)
  6: _7 = _1
    SourceInfo(src/bytes_mut.rs:1495:11-1495:15)
  7: StorageLive(_8)
    SourceInfo(src/bytes_mut.rs:1495:18-1495:51)
  8: _9 = SubWithOverflow(const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH, const 1_usize)
    SourceInfo(src/bytes_mut.rs:1495:18-1495:51)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1495:18-1495:51)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH, const 1_usize) -> [success: bb3, unwind: bb7]
  }
  preds [bb0]
  succs [bb3, bb7]

bb3
  0: _8 = move (_9.0: usize)
    SourceInfo(src/bytes_mut.rs:1495:18-1495:51)
  1: _10 = AddWithOverflow(_7, _8)
    SourceInfo(src/bytes_mut.rs:1495:10-1495:52)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1495:10-1495:52)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _6 = move (_10.0: usize)
    SourceInfo(src/bytes_mut.rs:1495:10-1495:52)
  1: StorageDead(_8)
    SourceInfo(src/bytes_mut.rs:1495:51-1495:52)
  2: StorageDead(_7)
    SourceInfo(src/bytes_mut.rs:1495:51-1495:52)
  3: _11 = Lt(_6, const 64_usize)
    SourceInfo(src/bytes_mut.rs:1495:5-1495:52)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1495:5-1495:52)
      kind: assert(move _11, "attempt to shift left by `{}`, which would overflow", _6) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _0 = Shl(const 1_usize, move _6)
    SourceInfo(src/bytes_mut.rs:1495:5-1495:52)
  1: StorageDead(_6)
    SourceInfo(src/bytes_mut.rs:1495:51-1495:52)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1496:2-1496:2)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1496:2-1496:2)
      kind: return
  }
  preds [bb1, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1490:1-1496:2)
      kind: resume
  }
  preds [bb2, bb3, bb4]
  succs []

