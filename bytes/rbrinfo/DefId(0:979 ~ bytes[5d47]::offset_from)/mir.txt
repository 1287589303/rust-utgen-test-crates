bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:198:5-198:17)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:198:5-198:8)
  2: _4 = _1
    SourceInfo(src/lib.rs:198:5-198:8)
  3: _3 = move _4 as usize (PointerExposeProvenance)
    SourceInfo(src/lib.rs:198:5-198:17)
  4: StorageDead(_4)
    SourceInfo(src/lib.rs:198:16-198:17)
  5: StorageLive(_5)
    SourceInfo(src/lib.rs:198:20-198:37)
  6: StorageLive(_6)
    SourceInfo(src/lib.rs:198:20-198:28)
  7: _6 = _2
    SourceInfo(src/lib.rs:198:20-198:28)
  8: _5 = move _6 as usize (PointerExposeProvenance)
    SourceInfo(src/lib.rs:198:20-198:37)
  9: StorageDead(_6)
    SourceInfo(src/lib.rs:198:36-198:37)
  10: _7 = SubWithOverflow(_3, _5)
    SourceInfo(src/lib.rs:198:5-198:37)
  Terminator {
      source_info: SourceInfo(src/lib.rs:198:5-198:37)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _5) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = move (_7.0: usize)
    SourceInfo(src/lib.rs:198:5-198:37)
  1: StorageDead(_5)
    SourceInfo(src/lib.rs:198:36-198:37)
  2: StorageDead(_3)
    SourceInfo(src/lib.rs:198:36-198:37)
  Terminator {
      source_info: SourceInfo(src/lib.rs:199:2-199:2)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/lib.rs:197:1-199:2)
      kind: resume
  }
  preds [bb0]
  succs []

