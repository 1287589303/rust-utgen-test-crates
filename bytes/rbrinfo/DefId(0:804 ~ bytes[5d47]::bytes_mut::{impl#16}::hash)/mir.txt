bb0
  0: StorageLive(_3)
    SourceInfo(src/bytes_mut.rs:1311:13-1311:14)
  1: StorageLive(_4)
    SourceInfo(src/bytes_mut.rs:1311:24-1311:37)
  2: StorageLive(_5)
    SourceInfo(src/bytes_mut.rs:1311:24-1311:28)
  3: _5 = &(*_1)
    SourceInfo(src/bytes_mut.rs:1311:24-1311:28)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1311:24-1311:37)
      kind: _4 = <bytes_mut::BytesMut as core::convert::AsRef<[u8]>>::as_ref(move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = &(*_4)
    SourceInfo(src/bytes_mut.rs:1311:24-1311:37)
  1: StorageDead(_5)
    SourceInfo(src/bytes_mut.rs:1311:36-1311:37)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/bytes_mut.rs:1311:13-1311:14)
  3: AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(src/bytes_mut.rs:1311:16-1311:21)
  4: StorageDead(_4)
    SourceInfo(src/bytes_mut.rs:1311:37-1311:38)
  5: StorageLive(_6)
    SourceInfo(src/bytes_mut.rs:1312:9-1312:22)
  6: StorageLive(_7)
    SourceInfo(src/bytes_mut.rs:1312:9-1312:10)
  7: _7 = &(*_3)
    SourceInfo(src/bytes_mut.rs:1312:9-1312:10)
  8: StorageLive(_8)
    SourceInfo(src/bytes_mut.rs:1312:16-1312:21)
  9: _8 = &mut (*_2)
    SourceInfo(src/bytes_mut.rs:1312:16-1312:21)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1312:9-1312:22)
      kind: _6 = <[u8] as core::hash::Hash>::hash::<H>(move _7, move _8) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_8)
    SourceInfo(src/bytes_mut.rs:1312:21-1312:22)
  1: StorageDead(_7)
    SourceInfo(src/bytes_mut.rs:1312:21-1312:22)
  2: StorageDead(_6)
    SourceInfo(src/bytes_mut.rs:1312:22-1312:23)
  3: _0 = const ()
    SourceInfo(src/bytes_mut.rs:1310:5-1313:6)
  4: StorageDead(_3)
    SourceInfo(src/bytes_mut.rs:1313:5-1313:6)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1313:6-1313:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1307:5-1313:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

