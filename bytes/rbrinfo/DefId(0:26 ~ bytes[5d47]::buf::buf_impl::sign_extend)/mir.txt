bb0
  0: StorageLive(_3)
    SourceInfo(src/buf/buf_impl.rs:89:9-89:14)
  1: StorageLive(_4)
    SourceInfo(src/buf/buf_impl.rs:89:17-89:29)
  2: StorageLive(_5)
    SourceInfo(src/buf/buf_impl.rs:89:22-89:28)
  3: _5 = _2
    SourceInfo(src/buf/buf_impl.rs:89:22-89:28)
  4: _6 = SubWithOverflow(const 8_usize, _5)
    SourceInfo(src/buf/buf_impl.rs:89:17-89:29)
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:89:17-89:29)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", const 8_usize, move _5) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _4 = move (_6.0: usize)
    SourceInfo(src/buf/buf_impl.rs:89:17-89:29)
  1: StorageDead(_5)
    SourceInfo(src/buf/buf_impl.rs:89:28-89:29)
  2: _7 = MulWithOverflow(_4, const 8_usize)
    SourceInfo(src/buf/buf_impl.rs:89:17-89:33)
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:89:17-89:33)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const 8_usize) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _3 = move (_7.0: usize)
    SourceInfo(src/buf/buf_impl.rs:89:17-89:33)
  1: StorageDead(_4)
    SourceInfo(src/buf/buf_impl.rs:89:32-89:33)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/buf/buf_impl.rs:89:9-89:14)
  3: StorageLive(_8)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:26)
  4: StorageLive(_9)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:19)
  5: StorageLive(_10)
    SourceInfo(src/buf/buf_impl.rs:90:6-90:9)
  6: _10 = _1
    SourceInfo(src/buf/buf_impl.rs:90:6-90:9)
  7: StorageLive(_11)
    SourceInfo(src/buf/buf_impl.rs:90:13-90:18)
  8: _11 = _3
    SourceInfo(src/buf/buf_impl.rs:90:13-90:18)
  9: _12 = Lt(_11, const 64_usize)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:19)
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:90:5-90:19)
      kind: assert(move _12, "attempt to shift left by `{}`, which would overflow", _11) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _9 = Shl(move _10, move _11)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:19)
  1: StorageDead(_11)
    SourceInfo(src/buf/buf_impl.rs:90:18-90:19)
  2: StorageDead(_10)
    SourceInfo(src/buf/buf_impl.rs:90:18-90:19)
  3: _8 = move _9 as i64 (IntToInt)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:26)
  4: StorageDead(_9)
    SourceInfo(src/buf/buf_impl.rs:90:25-90:26)
  5: StorageLive(_13)
    SourceInfo(src/buf/buf_impl.rs:90:30-90:35)
  6: _13 = _3
    SourceInfo(src/buf/buf_impl.rs:90:30-90:35)
  7: _14 = Lt(_13, const 64_usize)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:35)
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:90:5-90:35)
      kind: assert(move _14, "attempt to shift right by `{}`, which would overflow", _13) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _0 = Shr(move _8, move _13)
    SourceInfo(src/buf/buf_impl.rs:90:5-90:35)
  1: StorageDead(_13)
    SourceInfo(src/buf/buf_impl.rs:90:34-90:35)
  2: StorageDead(_8)
    SourceInfo(src/buf/buf_impl.rs:90:34-90:35)
  3: StorageDead(_3)
    SourceInfo(src/buf/buf_impl.rs:91:1-91:2)
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:91:2-91:2)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/buf/buf_impl.rs:88:1-91:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

