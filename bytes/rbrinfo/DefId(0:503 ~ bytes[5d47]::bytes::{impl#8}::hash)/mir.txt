bb0
  0: StorageLive(_3)
    SourceInfo(src/bytes.rs:749:9-749:36)
  1: StorageLive(_4)
    SourceInfo(src/bytes.rs:749:9-749:24)
  2: StorageLive(_5)
    SourceInfo(src/bytes.rs:749:9-749:24)
  3: StorageLive(_6)
    SourceInfo(src/bytes.rs:749:9-749:13)
  4: _6 = &(*_1)
    SourceInfo(src/bytes.rs:749:9-749:13)
  Terminator {
      source_info: SourceInfo(src/bytes.rs:749:9-749:24)
      kind: _5 = bytes::Bytes::as_slice(move _6) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _4 = &(*_5)
    SourceInfo(src/bytes.rs:749:9-749:24)
  1: StorageDead(_6)
    SourceInfo(src/bytes.rs:749:23-749:24)
  2: StorageLive(_7)
    SourceInfo(src/bytes.rs:749:30-749:35)
  3: _7 = &mut (*_2)
    SourceInfo(src/bytes.rs:749:30-749:35)
  Terminator {
      source_info: SourceInfo(src/bytes.rs:749:9-749:36)
      kind: _3 = <[u8] as core::hash::Hash>::hash::<H>(move _4, move _7) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(src/bytes.rs:749:35-749:36)
  1: StorageDead(_4)
    SourceInfo(src/bytes.rs:749:35-749:36)
  2: StorageDead(_5)
    SourceInfo(src/bytes.rs:749:36-749:37)
  3: StorageDead(_3)
    SourceInfo(src/bytes.rs:749:36-749:37)
  4: _0 = const ()
    SourceInfo(src/bytes.rs:748:5-750:6)
  Terminator {
      source_info: SourceInfo(src/bytes.rs:750:6-750:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/bytes.rs:745:5-750:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

