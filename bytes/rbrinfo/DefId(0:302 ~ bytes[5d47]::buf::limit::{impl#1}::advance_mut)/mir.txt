bb0
  0: StorageLive(_3)
    SourceInfo(src/buf/limit.rs:71:9-71:35)
  1: StorageLive(_4)
    SourceInfo(src/buf/limit.rs:71:17-71:34)
  2: StorageLive(_5)
    SourceInfo(src/buf/limit.rs:71:17-71:20)
  3: _5 = _2
    SourceInfo(src/buf/limit.rs:71:17-71:20)
  4: StorageLive(_6)
    SourceInfo(src/buf/limit.rs:71:24-71:34)
  5: _6 = ((*_1).1: usize)
    SourceInfo(src/buf/limit.rs:71:24-71:34)
  6: _4 = Le(move _5, move _6)
    SourceInfo(src/buf/limit.rs:71:17-71:34)
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:71:17-71:34)
      kind: switchInt(move _4) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(src/buf/limit.rs:71:33-71:34)
  1: StorageDead(_5)
    SourceInfo(src/buf/limit.rs:71:33-71:34)
  2: _3 = const ()
    SourceInfo(src/buf/limit.rs:71:35-71:35)
  3: StorageDead(_4)
    SourceInfo(src/buf/limit.rs:71:34-71:35)
  4: StorageDead(_3)
    SourceInfo(src/buf/limit.rs:71:34-71:35)
  5: StorageLive(_8)
    SourceInfo(src/buf/limit.rs:72:9-72:36)
  6: StorageLive(_9)
    SourceInfo(src/buf/limit.rs:72:9-72:19)
  7: _9 = &mut ((*_1).0: T)
    SourceInfo(src/buf/limit.rs:72:9-72:19)
  8: StorageLive(_10)
    SourceInfo(src/buf/limit.rs:72:32-72:35)
  9: _10 = _2
    SourceInfo(src/buf/limit.rs:72:32-72:35)
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:72:9-72:36)
      kind: _8 = <T as buf::buf_mut::BufMut>::advance_mut(move _9, move _10) -> [return: bb3, unwind: bb5]
  }
  preds [bb0]
  succs [bb3, bb5]

bb2
  0: StorageDead(_6)
    SourceInfo(src/buf/limit.rs:71:33-71:34)
  1: StorageDead(_5)
    SourceInfo(src/buf/limit.rs:71:33-71:34)
  2: StorageLive(_7)
    SourceInfo(src/buf/limit.rs:71:9-71:35)
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:71:9-71:35)
      kind: _7 = core::panicking::panic(const "assertion failed: cnt <= self.limit") -> bb5
  }
  preds [bb0]
  succs [bb5]

bb3
  0: StorageDead(_10)
    SourceInfo(src/buf/limit.rs:72:35-72:36)
  1: StorageDead(_9)
    SourceInfo(src/buf/limit.rs:72:35-72:36)
  2: StorageDead(_8)
    SourceInfo(src/buf/limit.rs:72:36-72:37)
  3: StorageLive(_11)
    SourceInfo(src/buf/limit.rs:73:23-73:26)
  4: _11 = _2
    SourceInfo(src/buf/limit.rs:73:23-73:26)
  5: _12 = SubWithOverflow(((*_1).1: usize), _11)
    SourceInfo(src/buf/limit.rs:73:9-73:26)
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:73:9-73:26)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: usize), move _11) -> [success: bb4, unwind: bb5]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: ((*_1).1: usize) = move (_12.0: usize)
    SourceInfo(src/buf/limit.rs:73:9-73:26)
  1: StorageDead(_11)
    SourceInfo(src/buf/limit.rs:73:25-73:26)
  2: _0 = const ()
    SourceInfo(src/buf/limit.rs:70:50-74:6)
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:74:6-74:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/buf/limit.rs:70:5-74:6)
      kind: resume
  }
  preds [bb1, bb2, bb3]
  succs []

