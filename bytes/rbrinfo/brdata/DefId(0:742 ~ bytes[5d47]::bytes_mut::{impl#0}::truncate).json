{
  "name": "bytes::bytes_mut::{impl#0}::truncate",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:434:5:439:6",
  "doc": "/// Shortens the buffer, keeping the first `len` bytes and dropping the\n/// rest.\n///\n/// If `len` is greater than the buffer's current length, this has no\n/// effect.\n///\n/// Existing underlying capacity is preserved.\n///\n/// The [split_off](`Self::split_off()`) method can emulate `truncate`, but this causes the\n/// excess bytes to be returned instead of dropped.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut buf = BytesMut::from(&b\"hello world\"[..]);\n/// buf.truncate(5);\n/// assert_eq!(buf, b\"hello\"[..]);\n/// ```\n",
  "code": [
    "pub fn truncate(&mut self, len: usize) {",
    "    if len <= self.len() {",
    "        // SAFETY: Shrinking the buffer cannot expose uninitialized bytes.",
    "        unsafe { self.set_len(len) };",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "len <= self.len()",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": "len == self.len()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "len <= self.len()",
          "norm": null,
          "value": "false",
          "line": 435,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}