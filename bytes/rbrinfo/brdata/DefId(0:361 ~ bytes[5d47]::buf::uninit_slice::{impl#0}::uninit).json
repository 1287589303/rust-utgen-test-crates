{
  "name": "bytes::buf::uninit_slice::{impl#0}::uninit",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:55:5:57:6",
  "doc": "/// Creates a `&mut UninitSlice` wrapping a slice of uninitialised memory.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n/// use core::mem::MaybeUninit;\n///\n/// let mut buffer = [MaybeUninit::uninit(); 64];\n/// let slice = UninitSlice::uninit(&mut buffer[..]);\n///\n/// let mut vec = Vec::with_capacity(1024);\n/// let spare: &mut UninitSlice = vec.spare_capacity_mut().into();\n/// ```\n",
  "code": [
    "pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {",
    "    unsafe { &mut *(slice as *mut [MaybeUninit<u8>] as *mut UninitSlice) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { &mut *(slice as *mut [MaybeUninit<u8>] as *mut UninitSlice) }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}