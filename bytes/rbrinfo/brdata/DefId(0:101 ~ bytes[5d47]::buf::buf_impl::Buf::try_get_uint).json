{
  "name": "bytes::buf::buf_impl::Buf::try_get_uint",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1975:5:1977:6",
  "doc": "/// Gets an unsigned n-byte integer from `self` in big-endian byte order.\n///\n/// The current position is advanced by `nbytes`.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\n/// assert_eq!(Ok(0x010203_u64), buf.try_get_uint(3));\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf = &b\"\\x01\\x02\\x03\"[..];\n/// assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint(4));\n/// assert_eq!(3, buf.remaining());\n/// ```\n///\n/// # Panics\n///\n/// This function panics if `nbytes` > 8.\n",
  "code": [
    "fn try_get_uint(&mut self, nbytes: usize) -> Result<u64, TryGetError> {",
    "    buf_try_get_impl!(be => self, u64, nbytes);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "SIZE.checked_sub($len_to_read) matches Some(slice_at)",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "$this.try_copy_to_slice(&mut buf[slice_at..])?",
          "norm": null,
          "value": "Err/None",
          "line": 67,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "SIZE.checked_sub($len_to_read) matches Some(slice_at)",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "$this.try_copy_to_slice(&mut buf[slice_at..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 67,
          "bound": null
        }
      ],
      "ret": "Ok($typ::from_be_bytes(buf))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "SIZE.checked_sub($len_to_read) matches None",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}