{
  "name": "bytes::bytes_mut::{impl#0}::with_capacity",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:148:5:150:6",
  "doc": "/// Creates a new `BytesMut` with the specified capacity.\n///\n/// The returned `BytesMut` will be able to hold at least `capacity` bytes\n/// without reallocating.\n///\n/// It is important to note that this function does not specify the length\n/// of the returned `BytesMut`, but only the capacity.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{BytesMut, BufMut};\n///\n/// let mut bytes = BytesMut::with_capacity(64);\n///\n/// // `bytes` contains no data, even though there is capacity\n/// assert_eq!(bytes.len(), 0);\n///\n/// bytes.put(&b\"hello world\"[..]);\n///\n/// assert_eq!(&bytes[..], b\"hello world\");\n/// ```\n",
  "code": [
    "pub fn with_capacity(capacity: usize) -> BytesMut {",
    "    BytesMut::from_vec(Vec::with_capacity(capacity))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}