{
  "name": "bytes::buf::buf_impl::Buf::take",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2394:5:2399:6",
  "doc": "/// Creates an adaptor which will read at most `limit` bytes from `self`.\n///\n/// This function returns a new instance of `Buf` which will read at most\n/// `limit` bytes.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{Buf, BufMut};\n///\n/// let mut buf = b\"hello world\"[..].take(5);\n/// let mut dst = vec![];\n///\n/// dst.put(&mut buf);\n/// assert_eq!(dst, b\"hello\");\n///\n/// let mut buf = buf.into_inner();\n/// dst.clear();\n/// dst.put(&mut buf);\n/// assert_eq!(dst, b\" world\");\n/// ```\n",
  "code": [
    "fn take(self, limit: usize) -> Take<Self>",
    "where",
    "    Self: Sized,",
    "{",
    "    take::new(self, limit)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}