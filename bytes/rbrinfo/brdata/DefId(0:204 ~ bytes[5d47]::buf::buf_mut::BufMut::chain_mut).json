{
  "name": "bytes::buf::buf_mut::BufMut::chain_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1345:5:1350:6",
  "doc": "/// Creates an adapter which will chain this buffer with another.\n///\n/// The returned `BufMut` instance will first write to all bytes from\n/// `self`. Afterwards, it will write to `next`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut a = [0u8; 5];\n/// let mut b = [0u8; 6];\n///\n/// let mut chain = (&mut a[..]).chain_mut(&mut b[..]);\n///\n/// chain.put_slice(b\"hello world\");\n///\n/// assert_eq!(&a[..], b\"hello\");\n/// assert_eq!(&b[..], b\" world\");\n/// ```\n",
  "code": [
    "fn chain_mut<U: BufMut>(self, next: U) -> Chain<Self, U>",
    "where",
    "    Self: Sized,",
    "{",
    "    Chain::new(self, next)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}