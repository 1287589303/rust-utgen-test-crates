{
  "name": "bytes::bytes_mut::{impl#0}::promote_to_shared",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1018:5:1049:6",
  "doc": "",
  "code": [
    "unsafe fn promote_to_shared(&mut self, ref_cnt: usize) {",
    "    debug_assert_eq!(self.kind(), KIND_VEC);",
    "    debug_assert!(ref_cnt == 1 || ref_cnt == 2);",
    "",
    "    let original_capacity_repr =",
    "        (self.data as usize & ORIGINAL_CAPACITY_MASK) >> ORIGINAL_CAPACITY_OFFSET;",
    "",
    "    // The vec offset cannot be concurrently mutated, so there",
    "    // should be no danger reading it.",
    "    let off = (self.data as usize) >> VEC_POS_OFFSET;",
    "",
    "    // First, allocate a new `Shared` instance containing the",
    "    // `Vec` fields. It's important to note that `ptr`, `len`,",
    "    // and `cap` cannot be mutated without having `&mut self`.",
    "    // This means that these fields will not be concurrently",
    "    // updated and since the buffer hasn't been promoted to an",
    "    // `Arc`, those three fields still are the components of the",
    "    // vector.",
    "    let shared = Box::new(Shared {",
    "        vec: rebuild_vec(self.ptr.as_ptr(), self.len, self.cap, off),",
    "        original_capacity_repr,",
    "        ref_count: AtomicUsize::new(ref_cnt),",
    "    });",
    "",
    "    let shared = Box::into_raw(shared);",
    "",
    "    // The pointer should be aligned, so this assert should",
    "    // always succeed.",
    "    debug_assert_eq!(shared as usize & KIND_MASK, KIND_ARC);",
    "",
    "    self.data = shared;",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "ref_cnt == 1",
          "norm": "1 == ref_cnt",
          "value": "false",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "ref_cnt == 1",
          "norm": "1 == ref_cnt",
          "value": "false",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        30,
        33
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "ref_cnt == 1",
          "norm": "1 == ref_cnt",
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "ref_cnt == 2",
          "norm": "2 == ref_cnt",
          "value": "false",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "ref_cnt == 1",
          "norm": "1 == ref_cnt",
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "ref_cnt == 2",
          "norm": "2 == ref_cnt",
          "value": "false",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        30,
        33
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "ref_cnt == 1",
          "norm": "1 == ref_cnt",
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "ref_cnt == 2",
          "norm": "2 == ref_cnt",
          "value": "true",
          "line": 1020,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        9,
        11,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        33
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}