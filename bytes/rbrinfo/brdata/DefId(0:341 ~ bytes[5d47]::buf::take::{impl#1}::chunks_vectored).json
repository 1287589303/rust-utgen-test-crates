{
  "name": "bytes::buf::take::{impl#1}::chunks_vectored",
  "mod_info": {
    "name": "buf::take",
    "loc": "src/buf/mod.rs:24:1:24:10"
  },
  "visible": true,
  "loc": "src/buf/take.rs:160:5:203:6",
  "doc": "",
  "code": [
    "fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {",
    "    if self.limit == 0 {",
    "        return 0;",
    "    }",
    "",
    "    const LEN: usize = 16;",
    "    let mut slices: [IoSlice<'a>; LEN] = [",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "        IoSlice::new(&[]),",
    "    ];",
    "",
    "    let cnt = self",
    "        .inner",
    "        .chunks_vectored(&mut slices[..dst.len().min(LEN)]);",
    "    let mut limit = self.limit;",
    "    for (i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate() {",
    "        if let Some(buf) = slice.get(..limit) {",
    "            // SAFETY: We could do this safely with `IoSlice::advance` if we had a larger MSRV.",
    "            let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(buf) };",
    "            *dst = IoSlice::new(buf);",
    "            return i + 1;",
    "        } else {",
    "            // SAFETY: We could do this safely with `IoSlice::advance` if we had a larger MSRV.",
    "            let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(slice) };",
    "            *dst = IoSlice::new(buf);",
    "            limit -= slice.len();",
    "        }",
    "    }",
    "    cnt",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "false",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        1,
        50
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "(i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate()",
          "norm": null,
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "let Some(buf) = slice.get(..limit)",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        },
        {
          "cond": "(i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate()",
          "norm": null,
          "value": "false",
          "line": 189,
          "bound": null
        }
      ],
      "ret": "cnt",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        36,
        37,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        29,
        30,
        31,
        33,
        35,
        50
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "(i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate()",
          "norm": null,
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "let Some(buf) = slice.get(..limit)",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        }
      ],
      "ret": "i + 1",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        50
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "(i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate()",
          "norm": null,
          "value": "false",
          "line": 189,
          "bound": null
        }
      ],
      "ret": "cnt",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        33,
        35,
        50
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}