{
  "name": "bytes::bytes_mut::{impl#0}::split",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:363:5:366:6",
  "doc": "/// Removes the bytes from the current view, returning them in a new\n/// `BytesMut` handle.\n///\n/// Afterwards, `self` will be empty, but will retain any additional\n/// capacity that it had before the operation. This is identical to\n/// `self.split_to(self.len())`.\n///\n/// This is an `O(1)` operation that just increases the reference count and\n/// sets a few indices.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{BytesMut, BufMut};\n///\n/// let mut buf = BytesMut::with_capacity(1024);\n/// buf.put(&b\"hello world\"[..]);\n///\n/// let other = buf.split();\n///\n/// assert!(buf.is_empty());\n/// assert_eq!(1013, buf.capacity());\n///\n/// assert_eq!(other, b\"hello world\"[..]);\n/// ```\n",
  "code": [
    "pub fn split(&mut self) -> BytesMut {",
    "    let len = self.len();",
    "    self.split_to(len)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}