{
  "name": "bytes::bytes_mut::{impl#0}::unsplit",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:904:5:913:6",
  "doc": "/// Absorbs a `BytesMut` that was previously split off.\n///\n/// If the two `BytesMut` objects were previously contiguous and not mutated\n/// in a way that causes re-allocation i.e., if `other` was created by\n/// calling `split_off` on this `BytesMut`, then this is an `O(1)` operation\n/// that just decreases a reference count and sets a few indices.\n/// Otherwise this method degenerates to\n/// `self.extend_from_slice(other.as_ref())`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut buf = BytesMut::with_capacity(64);\n/// buf.extend_from_slice(b\"aaabbbcccddd\");\n///\n/// let split = buf.split_off(6);\n/// assert_eq!(b\"aaabbb\", &buf[..]);\n/// assert_eq!(b\"cccddd\", &split[..]);\n///\n/// buf.unsplit(split);\n/// assert_eq!(b\"aaabbbcccddd\", &buf[..]);\n/// ```\n",
  "code": [
    "pub fn unsplit(&mut self, other: BytesMut) {",
    "    if self.is_empty() {",
    "        *self = other;",
    "        return;",
    "    }",
    "",
    "    if let Err(other) = self.try_unsplit(other) {",
    "        self.extend_from_slice(other.as_ref());",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "true",
          "line": 905,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "false",
          "line": 905,
          "bound": null
        },
        {
          "cond": "let Err(other) = self.try_unsplit(other)",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        12,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "false",
          "line": 905,
          "bound": null
        },
        {
          "cond": "let Err(other) = self.try_unsplit(other)",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}