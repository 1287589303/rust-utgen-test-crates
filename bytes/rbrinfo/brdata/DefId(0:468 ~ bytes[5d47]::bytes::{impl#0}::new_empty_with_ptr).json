{
  "name": "bytes::bytes::{impl#0}::new_empty_with_ptr",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:189:5:202:6",
  "doc": "/// Creates a new `Bytes` with length zero and the given pointer as the address.\n",
  "code": [
    "fn new_empty_with_ptr(ptr: *const u8) -> Self {",
    "    debug_assert!(!ptr.is_null());",
    "",
    "    // Detach this pointer's provenance from whichever allocation it came from, and reattach it",
    "    // to the provenance of the fake ZST [u8;0] at the same address.",
    "    let ptr = without_provenance(ptr as usize);",
    "",
    "    Bytes {",
    "        ptr,",
    "        len: 0,",
    "        data: AtomicPtr::new(ptr::null_mut()),",
    "        vtable: &STATIC_VTABLE,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "false",
          "line": 190,
          "bound": null
        }
      ],
      "ret": "Bytes {\n            ptr,\n            len: 0,\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: &STATIC_VTABLE,\n        }",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}