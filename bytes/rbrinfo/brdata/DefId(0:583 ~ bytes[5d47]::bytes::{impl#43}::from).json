{
  "name": "bytes::bytes::{impl#43}::from",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:1000:5:1027:6",
  "doc": "",
  "code": [
    "fn from(slice: Box<[u8]>) -> Bytes {",
    "    // Box<[u8]> doesn't contain a heap allocation for empty slices,",
    "    // so the pointer isn't aligned enough for the KIND_VEC stashing to",
    "    // work.",
    "    if slice.is_empty() {",
    "        return Bytes::new();",
    "    }",
    "",
    "    let len = slice.len();",
    "    let ptr = Box::into_raw(slice) as *mut u8;",
    "",
    "    if ptr as usize & 0x1 == 0 {",
    "        let data = ptr_map(ptr, |addr| addr | KIND_VEC);",
    "        Bytes {",
    "            ptr,",
    "            len,",
    "            data: AtomicPtr::new(data.cast()),",
    "            vtable: &PROMOTABLE_EVEN_VTABLE,",
    "        }",
    "    } else {",
    "        Bytes {",
    "            ptr,",
    "            len,",
    "            data: AtomicPtr::new(ptr.cast()),",
    "            vtable: &PROMOTABLE_ODD_VTABLE,",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1004,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1004,
          "bound": null
        },
        {
          "cond": "ptr as usize & 0x1 == 0",
          "norm": "0 == ptr as usize & 0x1",
          "value": "false",
          "line": 1011,
          "bound": null
        }
      ],
      "ret": "Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(data.cast()),\n                vtable: &PROMOTABLE_EVEN_VTABLE,\n            }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "slice.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1004,
          "bound": null
        },
        {
          "cond": "ptr as usize & 0x1 == 0",
          "norm": "0 == ptr as usize & 0x1",
          "value": "true",
          "line": 1011,
          "bound": null
        }
      ],
      "ret": "Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(ptr.cast()),\n                vtable: &PROMOTABLE_ODD_VTABLE,\n            }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}