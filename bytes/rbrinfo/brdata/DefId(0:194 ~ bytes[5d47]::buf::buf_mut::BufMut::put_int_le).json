{
  "name": "bytes::buf::buf_mut::BufMut::put_int_le",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1078:5:1086:6",
  "doc": "/// Writes low `nbytes` of a signed integer to `self` in little-endian byte order.\n///\n/// The current position is advanced by `nbytes`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut buf = vec![];\n/// buf.put_int_le(0x0504010203, 3);\n/// assert_eq!(buf, b\"\\x03\\x02\\x01\");\n/// ```\n///\n/// # Panics\n///\n/// This function panics if there is not enough remaining capacity in\n/// `self` or if `nbytes` is greater than 8.\n",
  "code": [
    "fn put_int_le(&mut self, n: i64, nbytes: usize) {",
    "    let slice = n.to_le_bytes();",
    "    let slice = match slice.get(..nbytes) {",
    "        Some(slice) => slice,",
    "        None => panic_does_not_fit(nbytes, slice.len()),",
    "    };",
    "",
    "    self.put_slice(slice);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice.get(..nbytes) matches Some(slice)",
          "norm": null,
          "value": "true",
          "line": 1080,
          "bound": null
        },
        {
          "cond": "slice.get(..nbytes) matches Some(slice)",
          "norm": null,
          "value": "true",
          "line": 1080,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice.get(..nbytes) matches None",
          "norm": null,
          "value": "true",
          "line": 1080,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}