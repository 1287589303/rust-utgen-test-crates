{
  "name": "bytes::bytes::{impl#0}::try_into_mut",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:641:5:647:6",
  "doc": "/// Try to convert self into `BytesMut`.\n///\n/// If `self` is unique for the entire original buffer, this will succeed\n/// and return a `BytesMut` with the contents of `self` without copying.\n/// If `self` is not unique for the entire original buffer, this will fail\n/// and return self.\n///\n/// This will also always fail if the buffer was constructed via either\n/// [from_owner](Bytes::from_owner) or [from_static](Bytes::from_static).\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{Bytes, BytesMut};\n///\n/// let bytes = Bytes::from(b\"hello\".to_vec());\n/// assert_eq!(bytes.try_into_mut(), Ok(BytesMut::from(&b\"hello\"[..])));\n/// ```\n",
  "code": [
    "pub fn try_into_mut(self) -> Result<BytesMut, Bytes> {",
    "    if self.is_unique() {",
    "        Ok(self.into())",
    "    } else {",
    "        Err(self)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_unique()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        }
      ],
      "ret": "Ok(self.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_unique()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        }
      ],
      "ret": "Err(self)",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}