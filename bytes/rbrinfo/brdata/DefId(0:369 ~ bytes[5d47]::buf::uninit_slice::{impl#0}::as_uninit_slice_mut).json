{
  "name": "bytes::buf::uninit_slice::{impl#0}::as_uninit_slice_mut",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:187:5:189:6",
  "doc": "/// Return a `&mut [MaybeUninit<u8>]` to this slice's buffer.\n///\n/// # Safety\n///\n/// The caller **must not** read from the referenced memory and **must not** write\n/// **uninitialized** bytes to the slice either. This is because `BufMut` implementation\n/// that created the `UninitSlice` knows which parts are initialized. Writing uninitialized\n/// bytes to the slice may cause the `BufMut` to read those bytes and trigger undefined\n/// behavior.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut data = [0, 1, 2];\n/// let mut slice = &mut data[..];\n/// unsafe {\n///     let uninit_slice = BufMut::chunk_mut(&mut slice).as_uninit_slice_mut();\n/// };\n/// ```\n",
  "code": [
    "pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {",
    "    &mut self.0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut self.0",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}