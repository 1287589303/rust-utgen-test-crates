{
  "name": "bytes::bytes_mut::{impl#0}::freeze",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:246:5:265:6",
  "doc": "/// Converts `self` into an immutable `Bytes`.\n///\n/// The conversion is zero cost and is used to indicate that the slice\n/// referenced by the handle will no longer be mutated. Once the conversion\n/// is done, the handle can be cloned and shared across threads.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{BytesMut, BufMut};\n/// use std::thread;\n///\n/// let mut b = BytesMut::with_capacity(64);\n/// b.put(&b\"hello world\"[..]);\n/// let b1 = b.freeze();\n/// let b2 = b1.clone();\n///\n/// let th = thread::spawn(move || {\n///     assert_eq!(&b1[..], b\"hello world\");\n/// });\n///\n/// assert_eq!(&b2[..], b\"hello world\");\n/// th.join().unwrap();\n/// ```\n",
  "code": [
    "pub fn freeze(self) -> Bytes {",
    "    let bytes = ManuallyDrop::new(self);",
    "    if bytes.kind() == KIND_VEC {",
    "        // Just re-use `Bytes` internal Vec vtable",
    "        unsafe {",
    "            let off = bytes.get_vec_pos();",
    "            let vec = rebuild_vec(bytes.ptr.as_ptr(), bytes.len, bytes.cap, off);",
    "            let mut b: Bytes = vec.into();",
    "            b.advance(off);",
    "            b",
    "        }",
    "    } else {",
    "        debug_assert_eq!(bytes.kind(), KIND_ARC);",
    "",
    "        let ptr = bytes.ptr.as_ptr();",
    "        let len = bytes.len;",
    "        let data = AtomicPtr::new(bytes.data.cast());",
    "        unsafe { Bytes::with_vtable(ptr, len, data, &SHARED_VTABLE) }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bytes.kind() == KIND_VEC",
          "norm": "KIND_VEC == bytes.kind()",
          "value": "true",
          "line": 248,
          "bound": null
        }
      ],
      "ret": "b",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bytes.kind() == KIND_VEC",
          "norm": "KIND_VEC == bytes.kind()",
          "value": "false",
          "line": 248,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bytes.kind() == KIND_VEC",
          "norm": "KIND_VEC == bytes.kind()",
          "value": "false",
          "line": 248,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        16,
        17,
        18,
        19,
        21,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}