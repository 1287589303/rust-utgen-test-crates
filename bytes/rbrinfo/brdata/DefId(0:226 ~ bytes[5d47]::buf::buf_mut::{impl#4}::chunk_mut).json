{
  "name": "bytes::buf::buf_mut::{impl#4}::chunk_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1623:5:1636:6",
  "doc": "",
  "code": [
    "fn chunk_mut(&mut self) -> &mut UninitSlice {",
    "    if self.capacity() == self.len() {",
    "        self.reserve(64); // Grow the vec",
    "    }",
    "",
    "    let cap = self.capacity();",
    "    let len = self.len();",
    "",
    "    let ptr = self.as_mut_ptr();",
    "    // SAFETY: Since `ptr` is valid for `cap` bytes, `ptr.add(len)` must be",
    "    // valid for `cap - len` bytes. The subtraction will not underflow since",
    "    // `len <= cap`.",
    "    unsafe { UninitSlice::from_raw_parts_mut(ptr.add(len), cap - len) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.capacity() == self.len()",
          "norm": null,
          "value": "true",
          "line": 1624,
          "bound": null
        }
      ],
      "ret": "unsafe { UninitSlice::from_raw_parts_mut(ptr.add(len), cap - len) }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.capacity() == self.len()",
          "norm": null,
          "value": "false",
          "line": 1624,
          "bound": null
        }
      ],
      "ret": "unsafe { UninitSlice::from_raw_parts_mut(ptr.add(len), cap - len) }",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}