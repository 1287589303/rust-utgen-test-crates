{
  "name": "bytes::bytes_mut::{impl#0}::set_len",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:528:5:531:6",
  "doc": "/// Sets the length of the buffer.\n///\n/// This will explicitly set the size of the buffer without actually\n/// modifying the data, so it is up to the caller to ensure that the data\n/// has been initialized.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut b = BytesMut::from(&b\"hello world\"[..]);\n///\n/// unsafe {\n///     b.set_len(5);\n/// }\n///\n/// assert_eq!(&b[..], b\"hello\");\n///\n/// unsafe {\n///     b.set_len(11);\n/// }\n///\n/// assert_eq!(&b[..], b\"hello world\");\n/// ```\n",
  "code": [
    "pub unsafe fn set_len(&mut self, len: usize) {",
    "    debug_assert!(len <= self.cap, \"set_len out of bounds\");",
    "    self.len = len;",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "len <= self.cap",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": "len == self.cap"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "len <= self.cap",
          "norm": null,
          "value": "false",
          "line": 529,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}