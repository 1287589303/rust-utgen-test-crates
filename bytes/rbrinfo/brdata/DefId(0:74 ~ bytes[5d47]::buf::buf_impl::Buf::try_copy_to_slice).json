{
  "name": "bytes::buf::buf_impl::Buf::try_copy_to_slice",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1161:5:1179:6",
  "doc": "/// Copies bytes from `self` into `dst`.\n///\n/// The cursor is advanced by the number of bytes copied. `self` must have\n/// enough remaining bytes to fill `dst`.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf = &b\"hello world\"[..];\n/// let mut dst = [0; 5];\n///\n/// assert_eq!(Ok(()), buf.try_copy_to_slice(&mut dst));\n/// assert_eq!(&b\"hello\"[..], &dst);\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf = &b\"hello world\"[..];\n/// let mut dst = [0; 12];\n///\n/// assert_eq!(Err(TryGetError{requested: 12, available: 11}), buf.try_copy_to_slice(&mut dst));\n/// assert_eq!(11, buf.remaining());\n/// ```\n",
  "code": [
    "fn try_copy_to_slice(&mut self, mut dst: &mut [u8]) -> Result<(), TryGetError> {",
    "    if self.remaining() < dst.len() {",
    "        return Err(TryGetError {",
    "            requested: dst.len(),",
    "            available: self.remaining(),",
    "        });",
    "    }",
    "",
    "    while !dst.is_empty() {",
    "        let src = self.chunk();",
    "        let cnt = usize::min(src.len(), dst.len());",
    "",
    "        dst[..cnt].copy_from_slice(&src[..cnt]);",
    "        dst = &mut dst[cnt..];",
    "",
    "        self.advance(cnt);",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.remaining() < dst.len()",
          "norm": "dst.len() > self.remaining()",
          "value": "true",
          "line": 1162,
          "bound": null
        }
      ],
      "ret": "Err(TryGetError {\n                requested: dst.len(),\n                available: self.remaining(),\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.remaining() < dst.len()",
          "norm": "dst.len() > self.remaining()",
          "value": "false",
          "line": 1162,
          "bound": "self.remaining() == dst.len()"
        },
        {
          "cond": "dst.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1169,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.remaining() < dst.len()",
          "norm": "dst.len() > self.remaining()",
          "value": "false",
          "line": 1162,
          "bound": "self.remaining() == dst.len()"
        },
        {
          "cond": "dst.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1169,
          "bound": null
        },
        {
          "cond": "dst.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1169,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        7,
        8,
        9,
        10,
        21
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}