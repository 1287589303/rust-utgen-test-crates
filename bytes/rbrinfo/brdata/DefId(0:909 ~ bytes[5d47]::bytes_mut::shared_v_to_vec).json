{
  "name": "bytes::bytes_mut::shared_v_to_vec",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1793:1:1813:2",
  "doc": "",
  "code": [
    "unsafe fn shared_v_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {",
    "    let shared: *mut Shared = data.load(Ordering::Relaxed).cast();",
    "",
    "    if (*shared).is_unique() {",
    "        let shared = &mut *shared;",
    "",
    "        // Drop shared",
    "        let mut vec = mem::replace(&mut shared.vec, Vec::new());",
    "        release_shared(shared);",
    "",
    "        // Copy back buffer",
    "        ptr::copy(ptr, vec.as_mut_ptr(), len);",
    "        vec.set_len(len);",
    "",
    "        vec",
    "    } else {",
    "        let v = slice::from_raw_parts(ptr, len).to_vec();",
    "        release_shared(shared);",
    "        v",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*shared).is_unique()",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        }
      ],
      "ret": "vec",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*shared).is_unique()",
          "norm": null,
          "value": "false",
          "line": 1796,
          "bound": null
        }
      ],
      "ret": "v",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}