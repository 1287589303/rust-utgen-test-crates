{
  "name": "bytes::bytes::shared_to_vec_impl",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:1393:1:1420:2",
  "doc": "",
  "code": [
    "unsafe fn shared_to_vec_impl(shared: *mut Shared, ptr: *const u8, len: usize) -> Vec<u8> {",
    "    // Check that the ref_cnt is 1 (unique).",
    "    //",
    "    // If it is unique, then it is set to 0 with AcqRel fence for the same",
    "    // reason in release_shared.",
    "    //",
    "    // Otherwise, we take the other branch and call release_shared.",
    "    if (*shared)",
    "        .ref_cnt",
    "        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)",
    "        .is_ok()",
    "    {",
    "        // Deallocate the `Shared` instance without running its destructor.",
    "        let shared = *Box::from_raw(shared);",
    "        let shared = ManuallyDrop::new(shared);",
    "        let buf = shared.buf;",
    "        let cap = shared.cap;",
    "",
    "        // Copy back buffer",
    "        ptr::copy(ptr, buf, len);",
    "",
    "        Vec::from_raw_parts(buf, len, cap)",
    "    } else {",
    "        let v = slice::from_raw_parts(ptr, len).to_vec();",
    "        release_shared(shared);",
    "        v",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*shared)\n        .ref_cnt\n        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)\n        .is_ok()",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*shared)\n        .ref_cnt\n        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)\n        .is_ok()",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        }
      ],
      "ret": "v",
      "path": [
        0,
        1,
        2,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}