{
  "name": "bytes::buf::buf_mut::BufMut::put_i16_ne",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:501:5:503:6",
  "doc": "/// Writes a signed 16 bit integer to `self` in native-endian byte order.\n///\n/// The current position is advanced by 2.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut buf = vec![];\n/// buf.put_i16_ne(0x0809);\n/// if cfg!(target_endian = \"big\") {\n///     assert_eq!(buf, b\"\\x08\\x09\");\n/// } else {\n///     assert_eq!(buf, b\"\\x09\\x08\");\n/// }\n/// ```\n///\n/// # Panics\n///\n/// This function panics if there is not enough remaining capacity in\n/// `self`.\n",
  "code": [
    "fn put_i16_ne(&mut self, n: i16) {",
    "    self.put_slice(&n.to_ne_bytes())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}