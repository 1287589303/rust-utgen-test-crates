{
  "name": "bytes::bytes_mut::{impl#0}::zeroed",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:287:5:289:6",
  "doc": "/// Creates a new `BytesMut` containing `len` zeros.\n///\n/// The resulting object has a length of `len` and a capacity greater\n/// than or equal to `len`. The entire length of the object will be filled\n/// with zeros.\n///\n/// On some platforms or allocators this function may be faster than\n/// a manual implementation.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let zeros = BytesMut::zeroed(42);\n///\n/// assert!(zeros.capacity() >= 42);\n/// assert_eq!(zeros.len(), 42);\n/// zeros.into_iter().for_each(|x| assert_eq!(x, 0));\n/// ```\n",
  "code": [
    "pub fn zeroed(len: usize) -> BytesMut {",
    "    BytesMut::from_vec(vec![0; len])",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}