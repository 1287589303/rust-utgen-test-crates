{
  "name": "bytes::bytes::shallow_clone_arc",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:1477:1:1490:2",
  "doc": "",
  "code": [
    "unsafe fn shallow_clone_arc(shared: *mut Shared, ptr: *const u8, len: usize) -> Bytes {",
    "    let old_size = (*shared).ref_cnt.fetch_add(1, Ordering::Relaxed);",
    "",
    "    if old_size > usize::MAX >> 1 {",
    "        crate::abort();",
    "    }",
    "",
    "    Bytes {",
    "        ptr,",
    "        len,",
    "        data: AtomicPtr::new(shared as _),",
    "        vtable: &SHARED_VTABLE,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "old_size > usize::MAX >> 1",
          "norm": null,
          "value": "true",
          "line": 1480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "old_size > usize::MAX >> 1",
          "norm": null,
          "value": "false",
          "line": 1480,
          "bound": "old_size == usize::MAX >> 1"
        }
      ],
      "ret": "Bytes {\n        ptr,\n        len,\n        data: AtomicPtr::new(shared as _),\n        vtable: &SHARED_VTABLE,\n    }",
      "path": [
        0,
        1,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}