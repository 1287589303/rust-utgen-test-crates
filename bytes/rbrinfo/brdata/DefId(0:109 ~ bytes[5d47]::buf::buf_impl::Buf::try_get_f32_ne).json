{
  "name": "bytes::buf::buf_impl::Buf::try_get_f32_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2245:5:2247:6",
  "doc": "/// Gets an IEEE754 single-precision (4 bytes) floating point number from\n/// `self` in native-endian byte order.\n///\n/// The current position is advanced by 4.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n///     true => b\"\\x3F\\x99\\x99\\x9A hello\",\n///     false => b\"\\x9A\\x99\\x99\\x3F hello\",\n/// };\n/// assert_eq!(1.2f32, buf.get_f32_ne());\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf = &b\"\\x3F\\x99\\x99\"[..];\n/// assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_f32_ne());\n/// assert_eq!(3, buf.remaining());\n/// ```\n",
  "code": [
    "fn try_get_f32_ne(&mut self) -> Result<f32, TryGetError> {",
    "    Ok(f32::from_bits(self.try_get_u32_ne()?))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.try_get_u32_ne()?",
          "norm": null,
          "value": "Err/None",
          "line": 2246,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.try_get_u32_ne()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2246,
          "bound": null
        }
      ],
      "ret": "Ok(f32::from_bits(self.try_get_u32_ne()?))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}