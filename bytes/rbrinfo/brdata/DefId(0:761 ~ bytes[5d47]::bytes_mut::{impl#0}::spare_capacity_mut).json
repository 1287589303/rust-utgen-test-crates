{
  "name": "bytes::bytes_mut::{impl#0}::spare_capacity_mut",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1113:5:1120:6",
  "doc": "/// Returns the remaining spare capacity of the buffer as a slice of `MaybeUninit<u8>`.\n///\n/// The returned slice can be used to fill the buffer with data (e.g. by\n/// reading from a file) before marking the data as initialized using the\n/// [`set_len`] method.\n///\n/// [`set_len`]: BytesMut::set_len\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// // Allocate buffer big enough for 10 bytes.\n/// let mut buf = BytesMut::with_capacity(10);\n///\n/// // Fill in the first 3 elements.\n/// let uninit = buf.spare_capacity_mut();\n/// uninit[0].write(0);\n/// uninit[1].write(1);\n/// uninit[2].write(2);\n///\n/// // Mark the first 3 bytes of the buffer as being initialized.\n/// unsafe {\n///     buf.set_len(3);\n/// }\n///\n/// assert_eq!(&buf[..], &[0, 1, 2]);\n/// ```\n",
  "code": [
    "pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<u8>] {",
    "    unsafe {",
    "        let ptr = self.ptr.as_ptr().add(self.len);",
    "        let len = self.cap - self.len;",
    "",
    "        slice::from_raw_parts_mut(ptr.cast(), len)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe {\n            let ptr = self.ptr.as_ptr().add(self.len);\n            let len = self.cap - self.len;\n\n            slice::from_raw_parts_mut(ptr.cast(), len)\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}