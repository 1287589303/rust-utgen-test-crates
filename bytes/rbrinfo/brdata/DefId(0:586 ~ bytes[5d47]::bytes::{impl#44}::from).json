{
  "name": "bytes::bytes::{impl#44}::from",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:1046:5:1049:6",
  "doc": "/// Convert self into `BytesMut`.\n///\n/// If `bytes` is unique for the entire original buffer, this will return a\n/// `BytesMut` with the contents of `bytes` without copying.\n/// If `bytes` is not unique for the entire original buffer, this will make\n/// a copy of `bytes` subset of the original buffer in a new `BytesMut`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{Bytes, BytesMut};\n///\n/// let bytes = Bytes::from(b\"hello\".to_vec());\n/// assert_eq!(BytesMut::from(bytes), BytesMut::from(&b\"hello\"[..]));\n/// ```\n",
  "code": [
    "fn from(bytes: Bytes) -> Self {",
    "    let bytes = ManuallyDrop::new(bytes);",
    "    unsafe { (bytes.vtable.into_mut)(&bytes.data, bytes.ptr, bytes.len) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}