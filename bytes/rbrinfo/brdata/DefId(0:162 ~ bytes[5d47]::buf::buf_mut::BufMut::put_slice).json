{
  "name": "bytes::buf::buf_mut::BufMut::put_slice",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:246:5:264:6",
  "doc": "/// Transfer bytes into `self` from `src` and advance the cursor by the\n/// number of bytes written.\n///\n/// `self` must have enough remaining capacity to contain all of `src`.\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut dst = [0; 6];\n///\n/// {\n///     let mut buf = &mut dst[..];\n///     buf.put_slice(b\"hello\");\n///\n///     assert_eq!(1, buf.remaining_mut());\n/// }\n///\n/// assert_eq!(b\"hello\\0\", &dst);\n/// ```\n",
  "code": [
    "fn put_slice(&mut self, mut src: &[u8]) {",
    "    if self.remaining_mut() < src.len() {",
    "        panic_advance(&TryGetError {",
    "            requested: src.len(),",
    "            available: self.remaining_mut(),",
    "        });",
    "    }",
    "",
    "    while !src.is_empty() {",
    "        let dst = self.chunk_mut();",
    "        let cnt = usize::min(src.len(), dst.len());",
    "",
    "        dst[..cnt].copy_from_slice(&src[..cnt]);",
    "        src = &src[cnt..];",
    "",
    "        // SAFETY: We just initialized `cnt` bytes in `self`.",
    "        unsafe { self.advance_mut(cnt) };",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.remaining_mut() < src.len()",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.remaining_mut() < src.len()",
          "norm": null,
          "value": "false",
          "line": 247,
          "bound": "self.remaining_mut() == src.len()"
        },
        {
          "cond": "src.is_empty()",
          "norm": null,
          "value": "true",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.remaining_mut() < src.len()",
          "norm": null,
          "value": "false",
          "line": 247,
          "bound": "self.remaining_mut() == src.len()"
        },
        {
          "cond": "src.is_empty()",
          "norm": null,
          "value": "false",
          "line": 254,
          "bound": null
        },
        {
          "cond": "src.is_empty()",
          "norm": null,
          "value": "true",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        7,
        8,
        9,
        10
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}