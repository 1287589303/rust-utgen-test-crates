{
  "name": "bytes::buf::buf_impl::Buf::try_get_u16",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1275:5:1277:6",
  "doc": "/// Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n///\n/// The current position is advanced by 2.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf = &b\"\\x08\\x09 hello\"[..];\n/// assert_eq!(Ok(0x0809_u16), buf.try_get_u16());\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf = &b\"\\x08\"[..];\n/// assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_u16());\n/// assert_eq!(1, buf.remaining());\n/// ```\n",
  "code": [
    "fn try_get_u16(&mut self) -> Result<u16, TryGetError> {",
    "    buf_try_get_impl!(self, u16::from_be_bytes)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "$this.remaining() < SIZE",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": "Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })",
      "path": [
        0,
        1,
        2,
        3,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "$this.remaining() < SIZE",
          "norm": null,
          "value": "false",
          "line": 17,
          "bound": "$this.remaining() == SIZE"
        },
        {
          "cond": "let Some(ret) = ret",
          "norm": null,
          "value": "true",
          "line": 32,
          "bound": null
        }
      ],
      "ret": "Ok($typ::$conv(buf))",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "$this.remaining() < SIZE",
          "norm": null,
          "value": "false",
          "line": 17,
          "bound": "$this.remaining() == SIZE"
        },
        {
          "cond": "let Some(ret) = ret",
          "norm": null,
          "value": "true",
          "line": 32,
          "bound": null
        }
      ],
      "ret": "Ok(ret)",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}