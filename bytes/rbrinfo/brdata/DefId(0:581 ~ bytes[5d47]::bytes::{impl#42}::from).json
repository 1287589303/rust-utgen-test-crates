{
  "name": "bytes::bytes::{impl#42}::from",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:965:5:996:6",
  "doc": "",
  "code": [
    "fn from(vec: Vec<u8>) -> Bytes {",
    "    let mut vec = ManuallyDrop::new(vec);",
    "    let ptr = vec.as_mut_ptr();",
    "    let len = vec.len();",
    "    let cap = vec.capacity();",
    "",
    "    // Avoid an extra allocation if possible.",
    "    if len == cap {",
    "        let vec = ManuallyDrop::into_inner(vec);",
    "        return Bytes::from(vec.into_boxed_slice());",
    "    }",
    "",
    "    let shared = Box::new(Shared {",
    "        buf: ptr,",
    "        cap,",
    "        ref_cnt: AtomicUsize::new(1),",
    "    });",
    "",
    "    let shared = Box::into_raw(shared);",
    "    // The pointer should be aligned, so this assert should",
    "    // always succeed.",
    "    debug_assert!(",
    "        0 == (shared as usize & KIND_MASK),",
    "        \"internal: Box<Shared> should have an aligned pointer\",",
    "    );",
    "    Bytes {",
    "        ptr,",
    "        len,",
    "        data: AtomicPtr::new(shared as _),",
    "        vtable: &SHARED_VTABLE,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "len == cap",
          "norm": "cap == len",
          "value": "true",
          "line": 972,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "len == cap",
          "norm": "cap == len",
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "0 == (shared as usize & KIND_MASK)",
          "norm": "(shared as usize & KIND_MASK) == 0",
          "value": "false",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Bytes {\n            ptr,\n            len,\n            data: AtomicPtr::new(shared as _),\n            vtable: &SHARED_VTABLE,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "len == cap",
          "norm": "cap == len",
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "0 == (shared as usize & KIND_MASK)",
          "norm": "(shared as usize & KIND_MASK) == 0",
          "value": "true",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        13,
        14,
        15,
        16,
        18,
        26,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}