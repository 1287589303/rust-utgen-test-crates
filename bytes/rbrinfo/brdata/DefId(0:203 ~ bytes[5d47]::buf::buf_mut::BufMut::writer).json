{
  "name": "bytes::buf::buf_mut::BufMut::writer",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1317:5:1322:6",
  "doc": "/// Creates an adaptor which implements the `Write` trait for `self`.\n///\n/// This function returns a new value which implements `Write` by adapting\n/// the `Write` trait functions to the `BufMut` trait functions. Given that\n/// `BufMut` operations are infallible, none of the `Write` functions will\n/// return with `Err`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n/// use std::io::Write;\n///\n/// let mut buf = vec![].writer();\n///\n/// let num = buf.write(&b\"hello world\"[..]).unwrap();\n/// assert_eq!(11, num);\n///\n/// let buf = buf.into_inner();\n///\n/// assert_eq!(*buf, b\"hello world\"[..]);\n/// ```\n",
  "code": [
    "fn writer(self) -> Writer<Self>",
    "where",
    "    Self: Sized,",
    "{",
    "    writer::new(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}