{
  "name": "bytes::buf::uninit_slice::{impl#0}::from_raw_parts_mut",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:82:5:86:6",
  "doc": "/// Create a `&mut UninitSlice` from a pointer and a length.\n///\n/// # Safety\n///\n/// The caller must ensure that `ptr` references a valid memory region owned\n/// by the caller representing a byte slice for the duration of `'a`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let bytes = b\"hello world\".to_vec();\n/// let ptr = bytes.as_ptr() as *mut _;\n/// let len = bytes.len();\n///\n/// let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };\n/// ```\n",
  "code": [
    "pub unsafe fn from_raw_parts_mut<'a>(ptr: *mut u8, len: usize) -> &'a mut UninitSlice {",
    "    let maybe_init: &mut [MaybeUninit<u8>] =",
    "        core::slice::from_raw_parts_mut(ptr as *mut _, len);",
    "    Self::uninit(maybe_init)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self::uninit(maybe_init)",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}