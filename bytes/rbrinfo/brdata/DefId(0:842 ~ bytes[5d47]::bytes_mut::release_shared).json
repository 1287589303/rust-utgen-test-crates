{
  "name": "bytes::bytes_mut::release_shared",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1433:1:1463:2",
  "doc": "",
  "code": [
    "unsafe fn release_shared(ptr: *mut Shared) {",
    "    // `Shared` storage... follow the drop steps from Arc.",
    "    if (*ptr).ref_count.fetch_sub(1, Ordering::Release) != 1 {",
    "        return;",
    "    }",
    "",
    "    // This fence is needed to prevent reordering of use of the data and",
    "    // deletion of the data.  Because it is marked `Release`, the decreasing",
    "    // of the reference count synchronizes with this `Acquire` fence. This",
    "    // means that use of the data happens before decreasing the reference",
    "    // count, which happens before this fence, which happens before the",
    "    // deletion of the data.",
    "    //",
    "    // As explained in the [Boost documentation][1],",
    "    //",
    "    // > It is important to enforce any possible access to the object in one",
    "    // > thread (through an existing reference) to *happen before* deleting",
    "    // > the object in a different thread. This is achieved by a \"release\"",
    "    // > operation after dropping a reference (any access to the object",
    "    // > through this reference must obviously happened before), and an",
    "    // > \"acquire\" operation before deleting the object.",
    "    //",
    "    // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)",
    "    //",
    "    // Thread sanitizer does not support atomic fences. Use an atomic load",
    "    // instead.",
    "    (*ptr).ref_count.load(Ordering::Acquire);",
    "",
    "    // Drop the data",
    "    drop(Box::from_raw(ptr));",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*ptr).ref_count.fetch_sub(1, Ordering::Release) != 1",
          "norm": null,
          "value": "true",
          "line": 1435,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*ptr).ref_count.fetch_sub(1, Ordering::Release) != 1",
          "norm": null,
          "value": "false",
          "line": 1435,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}