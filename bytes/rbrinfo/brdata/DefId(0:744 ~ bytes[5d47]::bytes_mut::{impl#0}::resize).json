{
  "name": "bytes::bytes_mut::{impl#0}::resize",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:479:5:500:6",
  "doc": "/// Resizes the buffer so that `len` is equal to `new_len`.\n///\n/// If `new_len` is greater than `len`, the buffer is extended by the\n/// difference with each additional byte set to `value`. If `new_len` is\n/// less than `len`, the buffer is simply truncated.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut buf = BytesMut::new();\n///\n/// buf.resize(3, 0x1);\n/// assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);\n///\n/// buf.resize(2, 0x2);\n/// assert_eq!(&buf[..], &[0x1, 0x1]);\n///\n/// buf.resize(4, 0x3);\n/// assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);\n/// ```\n",
  "code": [
    "pub fn resize(&mut self, new_len: usize, value: u8) {",
    "    let additional = if let Some(additional) = new_len.checked_sub(self.len()) {",
    "        additional",
    "    } else {",
    "        self.truncate(new_len);",
    "        return;",
    "    };",
    "",
    "    if additional == 0 {",
    "        return;",
    "    }",
    "",
    "    self.reserve(additional);",
    "    let dst = self.spare_capacity_mut().as_mut_ptr();",
    "    // SAFETY: `spare_capacity_mut` returns a valid, properly aligned pointer and we've",
    "    // reserved enough space to write `additional` bytes.",
    "    unsafe { ptr::write_bytes(dst, value, additional) };",
    "",
    "    // SAFETY: There are at least `new_len` initialized bytes in the buffer so no",
    "    // uninitialized bytes are being exposed.",
    "    unsafe { self.set_len(new_len) };",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(additional) = new_len.checked_sub(self.len())",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(additional) = new_len.checked_sub(self.len())",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "additional == 0",
          "norm": "0 == additional",
          "value": "false",
          "line": 487,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(additional) = new_len.checked_sub(self.len())",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "additional == 0",
          "norm": "0 == additional",
          "value": "true",
          "line": 487,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}