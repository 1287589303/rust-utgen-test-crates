{
  "name": "bytes::buf::buf_mut::BufMut::put_bytes",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:292:5:309:6",
  "doc": "/// Put `cnt` bytes `val` into `self`.\n///\n/// Logically equivalent to calling `self.put_u8(val)` `cnt` times, but may work faster.\n///\n/// `self` must have at least `cnt` remaining capacity.\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut dst = [0; 6];\n///\n/// {\n///     let mut buf = &mut dst[..];\n///     buf.put_bytes(b'a', 4);\n///\n///     assert_eq!(2, buf.remaining_mut());\n/// }\n///\n/// assert_eq!(b\"aaaa\\0\\0\", &dst);\n/// ```\n///\n/// # Panics\n///\n/// This function panics if there is not enough remaining capacity in\n/// `self`.\n",
  "code": [
    "fn put_bytes(&mut self, val: u8, mut cnt: usize) {",
    "    if self.remaining_mut() < cnt {",
    "        panic_advance(&TryGetError {",
    "            requested: cnt,",
    "            available: self.remaining_mut(),",
    "        })",
    "    }",
    "",
    "    while cnt > 0 {",
    "        let dst = self.chunk_mut();",
    "        let dst_len = usize::min(dst.len(), cnt);",
    "        // SAFETY: The pointer is valid for `dst_len <= dst.len()` bytes.",
    "        unsafe { core::ptr::write_bytes(dst.as_mut_ptr(), val, dst_len) };",
    "        // SAFETY: We just initialized `dst_len` bytes in `self`.",
    "        unsafe { self.advance_mut(dst_len) };",
    "        cnt -= dst_len;",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.remaining_mut() < cnt",
          "norm": "cnt > self.remaining_mut()",
          "value": "true",
          "line": 293,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.remaining_mut() < cnt",
          "norm": "cnt > self.remaining_mut()",
          "value": "false",
          "line": 293,
          "bound": "self.remaining_mut() == cnt"
        },
        {
          "cond": "cnt > 0",
          "norm": "0 < cnt",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "cnt > 0",
          "norm": "0 < cnt",
          "value": "false",
          "line": 300,
          "bound": "cnt == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        5,
        6,
        15
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.remaining_mut() < cnt",
          "norm": "cnt > self.remaining_mut()",
          "value": "false",
          "line": 293,
          "bound": "self.remaining_mut() == cnt"
        },
        {
          "cond": "cnt > 0",
          "norm": "0 < cnt",
          "value": "false",
          "line": 300,
          "bound": "cnt == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}