{
  "name": "bytes::bytes::{impl#0}::split_to",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:548:5:571:6",
  "doc": "/// Splits the bytes into two at the given index.\n///\n/// Afterwards `self` contains elements `[at, len)`, and the returned\n/// `Bytes` contains elements `[0, at)`.\n///\n/// This is an `O(1)` operation that just increases the reference count and\n/// sets a few indices.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let mut a = Bytes::from(&b\"hello world\"[..]);\n/// let b = a.split_to(5);\n///\n/// assert_eq!(&a[..], b\" world\");\n/// assert_eq!(&b[..], b\"hello\");\n/// ```\n///\n/// # Panics\n///\n/// Panics if `at > len`.\n",
  "code": [
    "pub fn split_to(&mut self, at: usize) -> Self {",
    "    if at == self.len() {",
    "        let end_ptr = self.ptr.wrapping_add(at);",
    "        return mem::replace(self, Bytes::new_empty_with_ptr(end_ptr));",
    "    }",
    "",
    "    if at == 0 {",
    "        return Bytes::new_empty_with_ptr(self.ptr);",
    "    }",
    "",
    "    assert!(",
    "        at <= self.len(),",
    "        \"split_to out of bounds: {:?} <= {:?}\",",
    "        at,",
    "        self.len(),",
    "    );",
    "",
    "    let mut ret = self.clone();",
    "",
    "    unsafe { self.inc_start(at) };",
    "",
    "    ret.len = at;",
    "    ret",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "at == self.len()",
          "norm": null,
          "value": "true",
          "line": 549,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "at == self.len()",
          "norm": null,
          "value": "false",
          "line": 549,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "false",
          "line": 554,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "at == self.len()",
          "norm": null,
          "value": "false",
          "line": 549,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "at <= self.len()",
          "norm": null,
          "value": "true",
          "line": 559,
          "bound": "at == self.len()"
        }
      ],
      "ret": "ret",
      "path": [
        0,
        1,
        6,
        8,
        10,
        11,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "at == self.len()",
          "norm": null,
          "value": "false",
          "line": 549,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "at <= self.len()",
          "norm": null,
          "value": "false",
          "line": 559,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}