{
  "name": "bytes::buf::buf_impl::Buf::try_get_int_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2151:5:2157:6",
  "doc": "/// Gets a signed n-byte integer from `self` in native-endian byte order.\n///\n/// The current position is advanced by `nbytes`.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n///     true => b\"\\x01\\x02\\x03 hello\",\n///     false => b\"\\x03\\x02\\x01 hello\",\n/// };\n/// assert_eq!(Ok(0x010203_i64), buf.try_get_int_ne(3));\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n///     true => b\"\\x01\\x02\\x03\",\n///     false => b\"\\x03\\x02\\x01\",\n/// };\n/// assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int_ne(4));\n/// assert_eq!(3, buf.remaining());\n/// ```\n///\n/// # Panics\n///\n/// This function panics if `nbytes` is greater than 8.\n",
  "code": [
    "fn try_get_int_ne(&mut self, nbytes: usize) -> Result<i64, TryGetError> {",
    "    if cfg!(target_endian = \"big\") {",
    "        self.try_get_int(nbytes)",
    "    } else {",
    "        self.try_get_int_le(nbytes)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}