{
  "name": "bytes::bytes_mut::invalid_ptr",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1761:1:1765:2",
  "doc": "/// Returns a dangling pointer with the given address. This is used to store\n/// integer data in pointer fields.\n///\n/// It is equivalent to `addr as *mut T`, but this fails on miri when strict\n/// provenance checking is enabled.\n",
  "code": [
    "fn invalid_ptr<T>(addr: usize) -> *mut T {",
    "    let ptr = core::ptr::null_mut::<u8>().wrapping_add(addr);",
    "    debug_assert_eq!(ptr as usize, addr);",
    "    ptr.cast::<T>()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}