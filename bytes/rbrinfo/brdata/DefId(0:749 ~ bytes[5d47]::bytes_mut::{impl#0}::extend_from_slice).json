{
  "name": "bytes::bytes_mut::{impl#0}::extend_from_slice",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:863:5:878:6",
  "doc": "/// Appends given bytes to this `BytesMut`.\n///\n/// If this `BytesMut` object does not have enough capacity, it is resized\n/// first.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut buf = BytesMut::with_capacity(0);\n/// buf.extend_from_slice(b\"aaabbb\");\n/// buf.extend_from_slice(b\"cccddd\");\n///\n/// assert_eq!(b\"aaabbbcccddd\", &buf[..]);\n/// ```\n",
  "code": [
    "pub fn extend_from_slice(&mut self, extend: &[u8]) {",
    "    let cnt = extend.len();",
    "    self.reserve(cnt);",
    "",
    "    unsafe {",
    "        let dst = self.spare_capacity_mut();",
    "        // Reserved above",
    "        debug_assert!(dst.len() >= cnt);",
    "",
    "        ptr::copy_nonoverlapping(extend.as_ptr(), dst.as_mut_ptr().cast(), cnt);",
    "    }",
    "",
    "    unsafe {",
    "        self.advance_mut(cnt);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() >= cnt",
          "norm": "cnt <= dst.len()",
          "value": "true",
          "line": 870,
          "bound": "dst.len() == cnt"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() >= cnt",
          "norm": "cnt <= dst.len()",
          "value": "false",
          "line": 870,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}