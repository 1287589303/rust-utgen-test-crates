{
  "name": "bytes::buf::buf_impl::Buf::get_f64_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1127:5:1129:6",
  "doc": "/// Gets an IEEE754 double-precision (8 bytes) floating point number from\n/// `self` in native-endian byte order.\n///\n/// The current position is advanced by 8.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n///     true => b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\",\n///     false => b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\",\n/// };\n/// assert_eq!(1.2f64, buf.get_f64_ne());\n/// ```\n///\n/// # Panics\n///\n/// This function panics if there is not enough remaining data in `self`.\n",
  "code": [
    "fn get_f64_ne(&mut self) -> f64 {",
    "    f64::from_bits(self.get_u64_ne())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}