{
  "name": "bytes::bytes_mut::{impl#0}::new",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:172:5:174:6",
  "doc": "/// Creates a new `BytesMut` with default capacity.\n///\n/// Resulting object has length 0 and unspecified capacity.\n/// This function does not allocate.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::{BytesMut, BufMut};\n///\n/// let mut bytes = BytesMut::new();\n///\n/// assert_eq!(0, bytes.len());\n///\n/// bytes.reserve(2);\n/// bytes.put_slice(b\"xy\");\n///\n/// assert_eq!(&b\"xy\"[..], &bytes[..]);\n/// ```\n",
  "code": [
    "pub fn new() -> BytesMut {",
    "    BytesMut::with_capacity(0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}