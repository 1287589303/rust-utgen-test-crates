{
  "name": "bytes::bytes::{impl#0}::truncate",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:592:5:605:6",
  "doc": "/// Shortens the buffer, keeping the first `len` bytes and dropping the\n/// rest.\n///\n/// If `len` is greater than the buffer's current length, this has no\n/// effect.\n///\n/// The [split_off](`Self::split_off()`) method can emulate `truncate`, but this causes the\n/// excess bytes to be returned instead of dropped.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let mut buf = Bytes::from(&b\"hello world\"[..]);\n/// buf.truncate(5);\n/// assert_eq!(buf, b\"hello\"[..]);\n/// ```\n",
  "code": [
    "pub fn truncate(&mut self, len: usize) {",
    "    if len < self.len {",
    "        // The Vec \"promotable\" vtables do not store the capacity,",
    "        // so we cannot truncate while using this repr. We *have* to",
    "        // promote using `split_off` so the capacity can be stored.",
    "        if self.vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE",
    "            || self.vtable as *const Vtable == &PROMOTABLE_ODD_VTABLE",
    "        {",
    "            drop(self.split_off(len));",
    "        } else {",
    "            self.len = len;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "len < self.len",
          "norm": null,
          "value": "true",
          "line": 593,
          "bound": null
        },
        {
          "cond": "self.vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE",
          "norm": "&PROMOTABLE_EVEN_VTABLE == self.vtable as *const Vtable",
          "value": "true",
          "line": 597,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "len < self.len",
          "norm": null,
          "value": "true",
          "line": 593,
          "bound": null
        },
        {
          "cond": "self.vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE",
          "norm": "&PROMOTABLE_EVEN_VTABLE == self.vtable as *const Vtable",
          "value": "false",
          "line": 597,
          "bound": null
        },
        {
          "cond": "self.vtable as *const Vtable == &PROMOTABLE_ODD_VTABLE",
          "norm": "&PROMOTABLE_ODD_VTABLE == self.vtable as *const Vtable",
          "value": "true",
          "line": 598,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "len < self.len",
          "norm": null,
          "value": "true",
          "line": 593,
          "bound": null
        },
        {
          "cond": "self.vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE",
          "norm": "&PROMOTABLE_EVEN_VTABLE == self.vtable as *const Vtable",
          "value": "false",
          "line": 597,
          "bound": null
        },
        {
          "cond": "self.vtable as *const Vtable == &PROMOTABLE_ODD_VTABLE",
          "norm": "&PROMOTABLE_ODD_VTABLE == self.vtable as *const Vtable",
          "value": "false",
          "line": 598,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        10,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "len < self.len",
          "norm": null,
          "value": "false",
          "line": 593,
          "bound": "len == self.len"
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}