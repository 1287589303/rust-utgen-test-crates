{
  "name": "bytes::bytes_mut::{impl#28}::is_unique",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1466:5:1478:6",
  "doc": "",
  "code": [
    "fn is_unique(&self) -> bool {",
    "    // The goal is to check if the current handle is the only handle",
    "    // that currently has access to the buffer. This is done by",
    "    // checking if the `ref_count` is currently 1.",
    "    //",
    "    // The `Acquire` ordering synchronizes with the `Release` as",
    "    // part of the `fetch_sub` in `release_shared`. The `fetch_sub`",
    "    // operation guarantees that any mutations done in other threads",
    "    // are ordered before the `ref_count` is decremented. As such,",
    "    // this `Acquire` will guarantee that those mutations are",
    "    // visible to the current thread.",
    "    self.ref_count.load(Ordering::Acquire) == 1",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.ref_count.load(Ordering::Acquire) == 1",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}