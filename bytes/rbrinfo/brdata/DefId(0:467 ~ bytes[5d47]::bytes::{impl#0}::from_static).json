{
  "name": "bytes::bytes::{impl#0}::from_static",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:168:5:175:6",
  "doc": "/// Creates a new `Bytes` from a static slice.\n///\n/// The returned `Bytes` will point directly to the static slice. There is\n/// no allocating or copying.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let b = Bytes::from_static(b\"hello\");\n/// assert_eq!(&b[..], b\"hello\");\n/// ```\n",
  "code": [
    "pub const fn from_static(bytes: &'static [u8]) -> Self {",
    "    Bytes {",
    "        ptr: bytes.as_ptr(),",
    "        len: bytes.len(),",
    "        data: AtomicPtr::new(ptr::null_mut()),",
    "        vtable: &STATIC_VTABLE,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Bytes {\n            ptr: bytes.as_ptr(),\n            len: bytes.len(),\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: &STATIC_VTABLE,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}