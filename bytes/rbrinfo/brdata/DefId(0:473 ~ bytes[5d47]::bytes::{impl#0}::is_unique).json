{
  "name": "bytes::bytes::{impl#0}::is_unique",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:342:5:344:6",
  "doc": "/// Returns true if this is the only reference to the data and\n/// `Into<BytesMut>` would avoid cloning the underlying buffer.\n///\n/// Always returns false if the data is backed by a [static slice](Bytes::from_static),\n/// or an [owner](Bytes::from_owner).\n///\n/// The result of this method may be invalidated immediately if another\n/// thread clones this value while this is being called. Ensure you have\n/// unique access to this value (`&mut Bytes`) first if you need to be\n/// certain the result is valid (i.e. for safety reasons).\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let a = Bytes::from(vec![1, 2, 3]);\n/// assert!(a.is_unique());\n/// let b = a.clone();\n/// assert!(!a.is_unique());\n/// ```\n",
  "code": [
    "pub fn is_unique(&self) -> bool {",
    "    unsafe { (self.vtable.is_unique)(&self.data) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}