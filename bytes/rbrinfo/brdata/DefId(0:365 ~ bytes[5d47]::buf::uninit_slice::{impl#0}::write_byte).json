{
  "name": "bytes::buf::uninit_slice::{impl#0}::write_byte",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:107:5:111:6",
  "doc": "/// Write a single byte at the specified offset.\n///\n/// # Panics\n///\n/// The function panics if `index` is out of bounds.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let mut data = [b'f', b'o', b'o'];\n/// let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };\n///\n/// slice.write_byte(0, b'b');\n///\n/// assert_eq!(b\"boo\", &data[..]);\n/// ```\n",
  "code": [
    "pub fn write_byte(&mut self, index: usize, byte: u8) {",
    "    assert!(index < self.len());",
    "",
    "    unsafe { self[index..].as_mut_ptr().write(byte) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index < self.len()",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index < self.len()",
          "norm": null,
          "value": "false",
          "line": 108,
          "bound": "index == self.len()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}