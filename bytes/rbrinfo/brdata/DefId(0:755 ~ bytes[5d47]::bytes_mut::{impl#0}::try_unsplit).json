{
  "name": "bytes::bytes_mut::{impl#0}::try_unsplit",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:993:5:1011:6",
  "doc": "",
  "code": [
    "fn try_unsplit(&mut self, other: BytesMut) -> Result<(), BytesMut> {",
    "    if other.capacity() == 0 {",
    "        return Ok(());",
    "    }",
    "",
    "    let ptr = unsafe { self.ptr.as_ptr().add(self.len) };",
    "    if ptr == other.ptr.as_ptr()",
    "        && self.kind() == KIND_ARC",
    "        && other.kind() == KIND_ARC",
    "        && self.data == other.data",
    "    {",
    "        // Contiguous blocks, just combine directly",
    "        self.len += other.len;",
    "        self.cap += other.cap;",
    "        Ok(())",
    "    } else {",
    "        Err(other)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "false",
          "line": 994,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "ptr == other.ptr.as_ptr()",
          "norm": "other.ptr.as_ptr() == ptr",
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.kind() == KIND_ARC",
          "norm": "KIND_ARC == self.kind()",
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "other.kind() == KIND_ARC",
          "norm": "KIND_ARC == other.kind()",
          "value": "true",
          "line": 1001,
          "bound": null
        },
        {
          "cond": "self.data == other.data",
          "norm": "other.data == self.data",
          "value": "true",
          "line": 1002,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "ptr == other.ptr.as_ptr()",
          "norm": "other.ptr.as_ptr() == ptr",
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.kind() == KIND_ARC",
          "norm": "KIND_ARC == self.kind()",
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "other.kind() == KIND_ARC",
          "norm": "KIND_ARC == other.kind()",
          "value": "true",
          "line": 1001,
          "bound": null
        },
        {
          "cond": "self.data == other.data",
          "norm": "other.data == self.data",
          "value": "false",
          "line": 1002,
          "bound": null
        }
      ],
      "ret": "Err(other)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "ptr == other.ptr.as_ptr()",
          "norm": "other.ptr.as_ptr() == ptr",
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.kind() == KIND_ARC",
          "norm": "KIND_ARC == self.kind()",
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "other.kind() == KIND_ARC",
          "norm": "KIND_ARC == other.kind()",
          "value": "false",
          "line": 1001,
          "bound": null
        }
      ],
      "ret": "Err(other)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        16,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "ptr == other.ptr.as_ptr()",
          "norm": "other.ptr.as_ptr() == ptr",
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.kind() == KIND_ARC",
          "norm": "KIND_ARC == self.kind()",
          "value": "false",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": "Err(other)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        17,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "other.capacity() == 0",
          "norm": "0 == other.capacity()",
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "ptr == other.ptr.as_ptr()",
          "norm": "other.ptr.as_ptr() == ptr",
          "value": "false",
          "line": 999,
          "bound": null
        }
      ],
      "ret": "Err(other)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}