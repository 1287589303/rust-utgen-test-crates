{
  "name": "bytes::buf::take::{impl#0}::limit",
  "mod_info": {
    "name": "buf::take",
    "loc": "src/buf/mod.rs:24:1:24:10"
  },
  "visible": true,
  "loc": "src/buf/take.rs:102:5:104:6",
  "doc": "/// Returns the maximum number of bytes that can be read.\n///\n/// # Note\n///\n/// If the inner `Buf` has fewer bytes than indicated by this method then\n/// that is the actual number of available bytes.\n///\n/// # Examples\n///\n/// ```rust\n/// use bytes::Buf;\n///\n/// let mut buf = b\"hello world\".take(2);\n///\n/// assert_eq!(2, buf.limit());\n/// assert_eq!(b'h', buf.get_u8());\n/// assert_eq!(1, buf.limit());\n/// ```\n",
  "code": [
    "pub fn limit(&self) -> usize {",
    "    self.limit",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.limit",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}