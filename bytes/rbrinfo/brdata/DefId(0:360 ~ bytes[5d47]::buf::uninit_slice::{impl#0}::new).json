{
  "name": "bytes::buf::uninit_slice::{impl#0}::new",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:36:5:38:6",
  "doc": "/// Creates a `&mut UninitSlice` wrapping a slice of initialised memory.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let mut buffer = [0u8; 64];\n/// let slice = UninitSlice::new(&mut buffer[..]);\n/// ```\n",
  "code": [
    "pub fn new(slice: &mut [u8]) -> &mut UninitSlice {",
    "    unsafe { &mut *(slice as *mut [u8] as *mut [MaybeUninit<u8>] as *mut UninitSlice) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { &mut *(slice as *mut [u8] as *mut [MaybeUninit<u8>] as *mut UninitSlice) }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}