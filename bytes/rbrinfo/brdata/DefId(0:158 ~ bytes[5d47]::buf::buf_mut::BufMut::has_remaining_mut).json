{
  "name": "bytes::buf::buf_mut::BufMut::has_remaining_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:128:5:130:6",
  "doc": "/// Returns true if there is space in `self` for more bytes.\n///\n/// This is equivalent to `self.remaining_mut() != 0`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut dst = [0; 5];\n/// let mut buf = &mut dst[..];\n///\n/// assert!(buf.has_remaining_mut());\n///\n/// buf.put(&b\"hello\"[..]);\n///\n/// assert!(!buf.has_remaining_mut());\n/// ```\n",
  "code": [
    "fn has_remaining_mut(&self) -> bool {",
    "    self.remaining_mut() > 0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.remaining_mut() > 0",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}