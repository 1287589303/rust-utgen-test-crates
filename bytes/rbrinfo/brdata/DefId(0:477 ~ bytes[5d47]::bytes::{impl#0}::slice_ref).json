{
  "name": "bytes::bytes::{impl#0}::slice_ref",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:440:5:471:6",
  "doc": "/// Returns a slice of self that is equivalent to the given `subset`.\n///\n/// When processing a `Bytes` buffer with other tools, one often gets a\n/// `&[u8]` which is in fact a slice of the `Bytes`, i.e. a subset of it.\n/// This function turns that `&[u8]` into another `Bytes`, as if one had\n/// called `self.slice()` with the offsets that correspond to `subset`.\n///\n/// This operation is `O(1)`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let bytes = Bytes::from(&b\"012345678\"[..]);\n/// let as_slice = bytes.as_ref();\n/// let subset = &as_slice[2..6];\n/// let subslice = bytes.slice_ref(&subset);\n/// assert_eq!(&subslice[..], b\"2345\");\n/// ```\n///\n/// # Panics\n///\n/// Requires that the given `sub` slice is in fact contained within the\n/// `Bytes` buffer; otherwise this function will panic.\n",
  "code": [
    "pub fn slice_ref(&self, subset: &[u8]) -> Self {",
    "    // Empty slice and empty Bytes may have their pointers reset",
    "    // so explicitly allow empty slice to be a subslice of any slice.",
    "    if subset.is_empty() {",
    "        return Bytes::new();",
    "    }",
    "",
    "    let bytes_p = self.as_ptr() as usize;",
    "    let bytes_len = self.len();",
    "",
    "    let sub_p = subset.as_ptr() as usize;",
    "    let sub_len = subset.len();",
    "",
    "    assert!(",
    "        sub_p >= bytes_p,",
    "        \"subset pointer ({:p}) is smaller than self pointer ({:p})\",",
    "        subset.as_ptr(),",
    "        self.as_ptr(),",
    "    );",
    "    assert!(",
    "        sub_p + sub_len <= bytes_p + bytes_len,",
    "        \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\",",
    "        self.as_ptr(),",
    "        bytes_len,",
    "        subset.as_ptr(),",
    "        sub_len,",
    "    );",
    "",
    "    let sub_offset = sub_p - bytes_p;",
    "",
    "    self.slice(sub_offset..(sub_offset + sub_len))",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "subset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 443,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "subset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 443,
          "bound": null
        },
        {
          "cond": "sub_p >= bytes_p",
          "norm": "bytes_p <= sub_p",
          "value": "true",
          "line": 454,
          "bound": "sub_p == bytes_p"
        },
        {
          "cond": "sub_p + sub_len <= bytes_p + bytes_len",
          "norm": "bytes_p + bytes_len >= sub_p + sub_len",
          "value": "true",
          "line": 460,
          "bound": "sub_p + sub_len == bytes_p + bytes_len"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        17,
        18,
        19,
        29,
        30,
        31,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "subset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 443,
          "bound": null
        },
        {
          "cond": "sub_p >= bytes_p",
          "norm": "bytes_p <= sub_p",
          "value": "true",
          "line": 454,
          "bound": "sub_p == bytes_p"
        },
        {
          "cond": "sub_p + sub_len <= bytes_p + bytes_len",
          "norm": "bytes_p + bytes_len >= sub_p + sub_len",
          "value": "false",
          "line": 460,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "subset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 443,
          "bound": null
        },
        {
          "cond": "sub_p >= bytes_p",
          "norm": "bytes_p <= sub_p",
          "value": "false",
          "line": 454,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}