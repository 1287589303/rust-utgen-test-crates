{
  "name": "bytes::buf::uninit_slice::{impl#0}::copy_from_slice",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:134:5:142:6",
  "doc": "/// Copies bytes from `src` into `self`.\n///\n/// The length of `src` must be the same as `self`.\n///\n/// # Panics\n///\n/// The function panics if `src` has a different length than `self`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let mut data = [b'f', b'o', b'o'];\n/// let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };\n///\n/// slice.copy_from_slice(b\"bar\");\n///\n/// assert_eq!(b\"bar\", &data[..]);\n/// ```\n",
  "code": [
    "pub fn copy_from_slice(&mut self, src: &[u8]) {",
    "    use core::ptr;",
    "",
    "    assert_eq!(self.len(), src.len());",
    "",
    "    unsafe {",
    "        ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}