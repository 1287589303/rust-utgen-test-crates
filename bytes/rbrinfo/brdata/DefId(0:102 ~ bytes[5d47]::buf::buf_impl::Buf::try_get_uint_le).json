{
  "name": "bytes::buf::buf_impl::Buf::try_get_uint_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2007:5:2009:6",
  "doc": "/// Gets an unsigned n-byte integer from `self` in little-endian byte order.\n///\n/// The current position is advanced by `nbytes`.\n///\n/// Returns `Err(TryGetError)` when there are not enough\n/// remaining bytes to read the value.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Buf;\n///\n/// let mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\n/// assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));\n/// assert_eq!(6, buf.remaining());\n/// ```\n///\n/// ```\n/// use bytes::{Buf, TryGetError};\n///\n/// let mut buf = &b\"\\x01\\x02\\x03\"[..];\n/// assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));\n/// assert_eq!(3, buf.remaining());\n/// ```\n///\n/// # Panics\n///\n/// This function panics if `nbytes` > 8.\n",
  "code": [
    "fn try_get_uint_le(&mut self, nbytes: usize) -> Result<u64, TryGetError> {",
    "    buf_try_get_impl!(le => self, u64, nbytes);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "buf.get_mut(..$len_to_read) matches Some(subslice)",
          "norm": null,
          "value": "true",
          "line": 50,
          "bound": null
        },
        {
          "cond": "$this.try_copy_to_slice(subslice)?",
          "norm": null,
          "value": "Err/None",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        11,
        12,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "buf.get_mut(..$len_to_read) matches Some(subslice)",
          "norm": null,
          "value": "true",
          "line": 50,
          "bound": null
        },
        {
          "cond": "$this.try_copy_to_slice(subslice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Ok($typ::from_le_bytes(buf))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        10,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "buf.get_mut(..$len_to_read) matches None",
          "norm": null,
          "value": "true",
          "line": 50,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}