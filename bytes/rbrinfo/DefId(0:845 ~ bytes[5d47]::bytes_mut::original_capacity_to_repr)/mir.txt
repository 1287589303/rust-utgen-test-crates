bb0
  0: StorageLive(_2)
    SourceInfo(src/bytes_mut.rs:1483:9-1483:14)
  1: StorageLive(_3)
    SourceInfo(src/bytes_mut.rs:1483:29-1483:92)
  2: StorageLive(_4)
    SourceInfo(src/bytes_mut.rs:1483:30-1483:82)
  3: StorageLive(_5)
    SourceInfo(src/bytes_mut.rs:1483:30-1483:66)
  4: StorageLive(_6)
    SourceInfo(src/bytes_mut.rs:1483:31-1483:34)
  5: _6 = _1
    SourceInfo(src/bytes_mut.rs:1483:31-1483:34)
  6: _7 = Lt(const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH, const 64_usize)
    SourceInfo(src/bytes_mut.rs:1483:30-1483:66)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1483:30-1483:66)
      kind: assert(move _7, "attempt to shift right by `{}`, which would overflow", const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _5 = Shr(move _6, const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)
    SourceInfo(src/bytes_mut.rs:1483:30-1483:66)
  1: StorageDead(_6)
    SourceInfo(src/bytes_mut.rs:1483:65-1483:66)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1483:30-1483:82)
      kind: _4 = core::num::<impl usize>::leading_zeros(move _5) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_5)
    SourceInfo(src/bytes_mut.rs:1483:81-1483:82)
  1: _3 = move _4 as usize (IntToInt)
    SourceInfo(src/bytes_mut.rs:1483:29-1483:92)
  2: StorageDead(_4)
    SourceInfo(src/bytes_mut.rs:1483:91-1483:92)
  3: _8 = SubWithOverflow(const bytes_mut::PTR_WIDTH, _3)
    SourceInfo(src/bytes_mut.rs:1483:17-1483:92)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1483:17-1483:92)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", const bytes_mut::PTR_WIDTH, move _3) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _2 = move (_8.0: usize)
    SourceInfo(src/bytes_mut.rs:1483:17-1483:92)
  1: StorageDead(_3)
    SourceInfo(src/bytes_mut.rs:1483:91-1483:92)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(src/bytes_mut.rs:1483:9-1483:14)
  3: StorageLive(_9)
    SourceInfo(src/bytes_mut.rs:1485:9-1485:14)
  4: _9 = _2
    SourceInfo(src/bytes_mut.rs:1485:9-1485:14)
  5: StorageLive(_10)
    SourceInfo(src/bytes_mut.rs:1486:9-1486:66)
  6: _11 = SubWithOverflow(const bytes_mut::MAX_ORIGINAL_CAPACITY_WIDTH, const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)
    SourceInfo(src/bytes_mut.rs:1486:9-1486:66)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1486:9-1486:66)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", const bytes_mut::MAX_ORIGINAL_CAPACITY_WIDTH, const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _10 = move (_11.0: usize)
    SourceInfo(src/bytes_mut.rs:1486:9-1486:66)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1484:5-1487:6)
      kind: _0 = core::cmp::min::<usize>(move _9, move _10) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_10)
    SourceInfo(src/bytes_mut.rs:1487:5-1487:6)
  1: StorageDead(_9)
    SourceInfo(src/bytes_mut.rs:1487:5-1487:6)
  2: StorageDead(_2)
    SourceInfo(src/bytes_mut.rs:1488:1-1488:2)
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1488:2-1488:2)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/bytes_mut.rs:1482:1-1488:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

