{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/bytes/target/debug/build/serde-3a1c1b6abf4f2a00/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/bytes/target/debug/build/serde-06a75ab96ceea28d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/bytes/target/debug/deps/libserde-89fb024451e0eba7.rlib","/home/abezbm/rust-utgen-test-crates/bytes/target/debug/deps/libserde-89fb024451e0eba7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_test@1.0.177","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_test-1.0.177/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_test","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_test-1.0.177/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/bytes/target/debug/deps/libserde_test-cecd648882e48de3.rlib","/home/abezbm/rust-utgen-test-crates/bytes/target/debug/deps/libserde_test-cecd648882e48de3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/bytes#1.10.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/bytes/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/abezbm/rust-utgen-test-crates/bytes/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the type `&mut &[u8]` may not be safely transferred across an unwind boundary\n    --> src/buf/buf_impl.rs:2977:53\n     |\n2977 |     let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());\n     |                            ------------------------ --^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |                            |                        |\n     |                            |                        `&mut &[u8]` may not be safely transferred across an unwind boundary\n     |                            |                        within this `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}`\n     |                            required by a bound introduced by this call\n     |\n     = help: within `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}`, the trait `UnwindSafe` is not implemented for `&mut &[u8]`, which is required by `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}: UnwindSafe`\n     = note: `UnwindSafe` is implemented for `&&[u8]`, but not for `&mut &[u8]`\nnote: required because it's used within this closure\n    --> src/buf/buf_impl.rs:2977:53\n     |\n2977 |     let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());\n     |                                                     ^^\nnote: required by a bound in `std::panic::catch_unwind`\n    --> /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:349:40\n     |\n349  | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n     |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}`, the trait `UnwindSafe` is not implemented for `&mut &[u8]`, which is required by `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}: UnwindSafe`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`UnwindSafe` is implemented for `&&[u8]`, but not for `&mut &[u8]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this closure","rendered":null,"spans":[{"byte_end":86943,"byte_start":86941,"column_end":55,"column_start":53,"expansion":null,"file_name":"src/buf/buf_impl.rs","is_primary":true,"label":null,"line_end":2977,"line_start":2977,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":53,"text":"    let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::panic::catch_unwind`","rendered":null,"spans":[{"byte_end":12215,"byte_start":12205,"column_end":50,"column_start":40,"expansion":null,"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs","is_primary":true,"label":"required by this bound in `catch_unwind`","line_end":349,"line_start":349,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":40,"text":"pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the type `&mut &[u8]` may not be safely transferred across an unwind boundary","spans":[{"byte_end":86970,"byte_start":86941,"column_end":82,"column_start":53,"expansion":null,"file_name":"src/buf/buf_impl.rs","is_primary":true,"label":"`&mut &[u8]` may not be safely transferred across an unwind boundary","line_end":2977,"line_start":2977,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":53,"text":"    let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());"}]},{"byte_end":86943,"byte_start":86941,"column_end":55,"column_start":53,"expansion":null,"file_name":"src/buf/buf_impl.rs","is_primary":false,"label":"within this `{closure@src/buf/buf_impl.rs:2977:53: 2977:55}`","line_end":2977,"line_start":2977,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":53,"text":"    let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());"}]},{"byte_end":86940,"byte_start":86916,"column_end":52,"column_start":28,"expansion":null,"file_name":"src/buf/buf_impl.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":2977,"line_start":2977,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":28,"text":"    let underflow_result = std::panic::catch_unwind(|| buf_underflow.get_f64_ne());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/bytes#1.10.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/bytes/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/abezbm/rust-utgen-test-crates/bytes/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 1 previous error\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 1 previous error","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/bytes#1.10.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/bytes/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/abezbm/rust-utgen-test-crates/bytes/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
