[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:17:12: 17:29 (#93),
                    scope: scope[0],
                },
                kind: _4 = <&mut Self as buf::buf_impl::Buf>::remaining(move _5) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = Lt(move _4, const buf::buf_impl::Buf::try_get_i128_ne::SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:17:12: 17:36 (#93),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:20:28: 20:45 (#93),
                    scope: scope[0],
                },
                kind: _8 = <&mut Self as buf::buf_impl::Buf>::remaining(move _9) -> [return: bb3, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = TryGetError { requested: const buf::buf_impl::Buf::try_get_i128_ne::SIZE, available: move _8 },
            StorageDead(_8),
            _0 = core::result::Result::<i128, TryGetError>::Err(move _7),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:27:19: 28:21 (#93),
                    scope: scope[0],
                },
                kind: _13 = <&mut Self as buf::buf_impl::Buf>::chunk(move _14) -> [return: bb5, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &(*_13),
            StorageDead(_14),
            StorageLive(_15),
            _15 = core::ops::RangeTo::<usize> { end: const buf::buf_impl::Buf::try_get_i128_ne::SIZE },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:27:19: 29:25 (#93),
                    scope: scope[0],
                },
                kind: _11 = core::slice::<impl [u8]>::get::<core::ops::RangeTo<usize>>(move _12, move _15) -> [return: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
            StorageLive(_16),
            _16 = {closure@src/buf/buf_impl.rs:30:18: 30:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:27:19: 30:87 (#93),
                    scope: scope[0],
                },
                kind: _10 = core::option::Option::<&[u8]>::map::<i128, {closure@src/buf/buf_impl.rs:30:18: 30:23}>(move _11, move _16) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_13),
            PlaceMention(_10),
            _17 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:32:16: 32:25 (#93),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [1: bb8, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:32:16: 32:25 (#93),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_10 as Some).0: i128),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:34:13: 34:32 (#93),
                    scope: scope[2],
                },
                kind: _20 = <Self as buf::buf_impl::Buf>::advance(move _21, const buf::buf_impl::Buf::try_get_i128_ne::SIZE) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_22),
            _22 = _18,
            _0 = core::result::Result::<i128, TryGetError>::Ok(move _22),
            StorageDead(_22),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = [const 0_u8; 16],
            FakeRead(ForLet(None), _24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_1),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _24,
            _28 = &mut (*_29),
            _27 = move _28 as &mut [u8] (PointerCoercion(Unsize)),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:39:13: 39:42 (#93),
                    scope: scope[3],
                },
                kind: _25 = <Self as buf::buf_impl::Buf>::copy_to_slice(move _26, move _27) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_29),
            StorageDead(_25),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:40:38: 40:39 (#93),
                    scope: scope[3],
                },
                kind: _30 = core::num::<impl i128>::from_ne_bytes(move _31) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _0 = core::result::Result::<i128, TryGetError>::Ok(move _30),
            StorageDead(_30),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1945:6: 1945:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1943:5: 1945:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<i128, TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1943:38: 1943:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1943:24: 1943:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:17:9: 22:10 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:17:12: 17:36 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:17:12: 17:29 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:17:12: 17:17 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:17:37: 22:10 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: TryGetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:18:24: 21:14 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:20:28: 20:45 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:20:28: 20:33 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:27:19: 30:87 (#93),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:27:13: 27:16 (#93),
                    },
                ),
            ),
        ),
        ty: core::option::Option<i128>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:27:13: 27:16 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:27:19: 29:25 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:27:19: 28:21 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:27:19: 28:21 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:27:19: 27:24 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:29:18: 29:24 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1129 ~ bytes[5d47]::buf::buf_impl::Buf::try_get_i128_ne::{closure#0}),
            [
                Self/#0,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} [u8],)) -> i128, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:30:18: 30:86 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:32:16: 32:25 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                src/buf/buf_impl.rs:32:28: 32:31 (#93),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:32:16: 32:25 (#93),
                    },
                ),
            ),
        ),
        ty: i128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:32:21: 32:24 (#93),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/buf_impl.rs:32:9: 41:10 (#93),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:32:32: 36:10 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:34:13: 34:32 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:34:13: 34:18 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:35:23: 35:26 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/buf_impl.rs:32:9: 41:10 (#93),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:36:16: 41:10 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:38:27: 38:36 (#93),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:38:17: 38:24 (#93),
                    },
                ),
            ),
        ),
        ty: [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:38:17: 38:24 (#93),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:39:13: 39:42 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:39:13: 39:18 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:39:33: 39:41 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:39:33: 39:41 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:39:33: 39:41 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i128,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:40:38: 40:39 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:40:35: 40:38 (#93),
            scope: scope[0],
        },
    },
]