[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: T),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:65:21: 65:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = <T as buf::buf_mut::BufMut>::chunk_mut(move _4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:66:28: 66:39 (#0),
                    scope: scope[1],
                },
                kind: _6 = buf::uninit_slice::UninitSlice::len(move _7) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = ((*_1).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:66:19: 66:52 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::cmp::min::<usize>(move _6, move _8) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_3),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _5,
            _12 = core::ops::RangeTo::<usize> { end: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:67:19: 67:26 (#0),
                    scope: scope[2],
                },
                kind: _10 = <buf::uninit_slice::UninitSlice as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut(move _11, move _12) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _9 = &mut (*_10),
            _2 = &mut (*_9),
            StorageDead(_5),
            StorageDead(_3),
            _0 = &mut (*_2),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:68:6: 68:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/limit.rs:64:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:64:32: 64:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut buf::limit::Limit<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:64:18: 64:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:9: 67:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/limit.rs:65:21: 65:43 (#0),
                            ),
                        ),
                        pat_span: src/buf/limit.rs:65:13: 65:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:65:13: 65:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:65:21: 65:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/limit.rs:66:19: 66:52 (#0),
                            ),
                        ),
                        pat_span: src/buf/limit.rs:66:13: 66:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:66:13: 66:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:66:28: 66:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:66:28: 66:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:66:41: 66:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/limit.rs:67:9: 67:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:9: 67:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/limit.rs:67:9: 67:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:19: 67:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/limit.rs:67:9: 67:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:14: 67:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/limit.rs:67:9: 67:26 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:20: 67:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/limit.rs:67:22: 67:25 (#0),
            scope: scope[0],
        },
    },
]