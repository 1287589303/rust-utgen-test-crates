[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:966:23: 966:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::mem::ManuallyDrop::<alloc::vec::Vec<u8>>::new(move _3) -> [return: bb1, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:967:19: 967:35 (#0),
                    scope: scope[1],
                },
                kind: _6 = <core::mem::ManuallyDrop<alloc::vec::Vec<u8>> as core::ops::DerefMut>::deref_mut(move _7) -> [return: bb2, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:967:19: 967:35 (#0),
                    scope: scope[1],
                },
                kind: _4 = alloc::vec::Vec::<u8>::as_mut_ptr(move _5) -> [return: bb3, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:968:19: 968:28 (#0),
                    scope: scope[2],
                },
                kind: _10 = <core::mem::ManuallyDrop<alloc::vec::Vec<u8>> as core::ops::Deref>::deref(move _11) -> [return: bb4, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:968:19: 968:28 (#0),
                    scope: scope[2],
                },
                kind: _8 = alloc::vec::Vec::<u8>::len(move _9) -> [return: bb5, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageDead(_10),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:969:19: 969:33 (#0),
                    scope: scope[3],
                },
                kind: _14 = <core::mem::ManuallyDrop<alloc::vec::Vec<u8>> as core::ops::Deref>::deref(move _15) -> [return: bb6, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:969:19: 969:33 (#0),
                    scope: scope[3],
                },
                kind: _12 = alloc::vec::Vec::<u8>::capacity(move _13) -> [return: bb7, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _8,
            StorageLive(_19),
            _19 = _12,
            _17 = Eq(move _18, move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:972:12: 972:22 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _17) -> [0: bb12, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_21),
            StorageLive(_22),
            _22 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:973:23: 973:52 (#0),
                    scope: scope[4],
                },
                kind: _21 = core::mem::ManuallyDrop::<alloc::vec::Vec<u8>>::into_inner(move _22) -> [return: bb9, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageLive(_23),
            StorageLive(_24),
            _24 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:974:32: 974:54 (#0),
                    scope: scope[5],
                },
                kind: _23 = alloc::vec::Vec::<u8>::into_boxed_slice(move _24) -> [return: bb10, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:974:20: 974:55 (#0),
                    scope: scope[5],
                },
                kind: _0 = <bytes::Bytes as core::convert::From<alloc::boxed::Box<[u8]>>>::from(move _23) -> [return: bb11, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:975:9: 975:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_21) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = const (),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _4,
            StorageLive(_28),
            _28 = _12,
            StorageLive(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:980:22: 980:41 (#0),
                    scope: scope[4],
                },
                kind: _29 = core::sync::atomic::AtomicUsize::new(const 1_usize) -> [return: bb13, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = bytes::Shared { buf: move _27, cap: move _28, ref_cnt: move _29 },
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:977:22: 981:11 (#0),
                    scope: scope[4],
                },
                kind: _25 = alloc::boxed::Box::<bytes::Shared>::new(move _26) -> [return: bb14, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            FakeRead(ForLet(None), _25),
            StorageLive(_30),
            StorageLive(_31),
            _31 = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:983:22: 983:43 (#0),
                    scope: scope[6],
                },
                kind: _30 = alloc::boxed::Box::<bytes::Shared>::into_raw(move _31) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            FakeRead(ForLet(None), _30),
            StorageLive(_32),
            StorageLive(_33),
            _33 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#175),
                    scope: scope[7],
                },
                kind: switchInt(move _33) -> [0: bb19, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _30,
            _37 = move _38 as usize (PointerExposeProvenance),
            StorageDead(_38),
            _36 = BitAnd(move _37, const bytes::KIND_MASK),
            StorageDead(_37),
            _35 = Eq(const 0_usize, move _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:987:13: 987:47 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _35) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            _34 = const (),
            StorageDead(_35),
            StorageDead(_34),
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#174),
                    scope: scope[7],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageLive(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#179),
                    scope: scope[7],
                },
                kind: _39 = core::panicking::panic(const "internal: Box<Shared> should have an aligned pointer") -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#174),
                    scope: scope[7],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_40),
            StorageLive(_41),
            _41 = _4,
            _40 = move _41 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_41),
            StorageLive(_42),
            _42 = _8,
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = _30,
            _45 = move _46 as *mut () (PtrToPtr),
            AscribeUserType(_45, o, UserTypeProjection { base: UserType(6), projs: [] }),
            _44 = _45,
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:993:19: 993:46 (#0),
                    scope: scope[7],
                },
                kind: _43 = core::sync::atomic::AtomicPtr::<()>::new(move _44) -> [return: bb21, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = const {alloc312: &bytes::Vtable},
            _48 = &(*_49),
            _47 = &(*_48),
            _0 = bytes::Bytes { ptr: move _40, len: move _42, data: move _43, vtable: move _47 },
            StorageDead(_47),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:5: 996:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb22, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:6: 996:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:983:42: 983:43 (#0),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:5: 996:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:981:10: 981:11 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:974:54: 974:55 (#0),
                    scope: scope[5],
                },
                kind: drop(_23) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:974:53: 974:54 (#0),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:975:9: 975:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_21) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:966:44: 966:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:965:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:965:30: 965:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:965:18: 965:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:965:13: 965:16 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:965:13: 965:16 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:965:13: 965:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:966:23: 966:45 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:966:13: 966:20 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<alloc::vec::Vec<u8, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:966:13: 966:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:966:41: 966:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:967:19: 967:35 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:967:13: 967:16 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:967:13: 967:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:967:19: 967:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:967:19: 967:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::mem::ManuallyDrop<alloc::vec::Vec<u8, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:967:19: 967:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:968:19: 968:28 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:968:13: 968:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:968:13: 968:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:968:19: 968:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:968:19: 968:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<alloc::vec::Vec<u8, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:968:19: 968:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:969:19: 969:33 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:969:13: 969:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:969:13: 969:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:969:19: 969:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:969:19: 969:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<alloc::vec::Vec<u8, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:969:19: 969:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:972:9: 975:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:972:12: 972:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:972:12: 972:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:972:19: 972:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:972:23: 975:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:973:23: 973:52 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:973:17: 973:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:973:17: 973:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::mem::ManuallyDrop<alloc::vec::Vec<u8, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:973:48: 973:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<[u8], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:974:32: 974:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:974:32: 974:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:977:22: 981:11 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:977:13: 977:19 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::boxed::Box<bytes::Shared, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:977:13: 977:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:977:31: 981:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:978:18: 978:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:979:13: 979:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:980:22: 980:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:983:22: 983:43 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:983:13: 983:19 (#0),
                    },
                ),
            ),
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:983:13: 983:19 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<bytes::Shared, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:983:36: 983:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#174),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#175),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#176),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:987:13: 987:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:987:18: 987:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:987:19: 987:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:987:19: 987:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#179),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:991:13: 991:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:990:9: 995:10 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:991:13: 991:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:992:13: 992:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:993:19: 993:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:990:9: 995:10 (#0),
                },
            ),
        ),
        ty: *mut (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:993:34: 993:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:990:9: 995:10 (#0),
                },
            ),
        ),
        ty: *mut (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:993:34: 993:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:990:9: 995:10 (#0),
                },
            ),
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:993:34: 993:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:994:21: 994:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:990:9: 995:10 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:994:21: 994:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:647 ~ bytes[5d47]::bytes::SHARED_VTABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:994:22: 994:35 (#0),
            scope: scope[0],
        },
    },
]