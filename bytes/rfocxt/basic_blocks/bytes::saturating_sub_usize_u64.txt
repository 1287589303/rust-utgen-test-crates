[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:118:11: 118:29 (#0),
                    scope: scope[0],
                },
                kind: _3 = <usize as core::convert::TryFrom<u64>>::try_from(move _4) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:118:5: 118:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:118:11: 118:29 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:119:9: 119:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:120:19: 120:20 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = ((_3 as Ok).0: usize),
            StorageLive(_7),
            _7 = _1,
            StorageLive(_8),
            _8 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:119:18: 119:37 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::num::<impl usize>::saturating_sub(move _7, move _8) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:119:36: 119:37 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:122:2: 122:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:116:1: 122:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:50: 116:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:116:32: 116:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:116:29: 116:30 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:116:29: 116:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:29: 116:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:116:42: 116:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:116:39: 116:40 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:116:39: 116:40 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:39: 116:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:118:5: 121:6 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, core::num::TryFromIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:118:11: 118:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:118:5: 121:6 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:118:27: 118:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:119:9: 119:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:118:11: 118:29 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:119:9: 119:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:119:12: 119:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:118:5: 121:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:119:18: 119:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:118:5: 121:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:119:35: 119:36 (#0),
            scope: scope[0],
        },
    },
]