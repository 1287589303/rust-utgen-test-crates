[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).2: core::sync::atomic::AtomicUsize),
            StorageLive(_4),
            _4 = core::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1477:9: 1477:47 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::sync::atomic::AtomicUsize::load(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            _0 = Eq(move _2, const 1_usize),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1478:6: 1478:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1466:5: 1478:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1466:28: 1466:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} bytes_mut::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1466:18: 1466:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1477:9: 1477:52 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1477:9: 1477:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1477:9: 1477:52 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1477:9: 1477:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1477:9: 1477:52 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1477:29: 1477:46 (#0),
            scope: scope[0],
        },
    },
]