[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).2: core::sync::atomic::AtomicUsize),
            StorageLive(_7),
            _7 = core::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1439:8: 1439:49 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::sync::atomic::AtomicUsize::load(move _6, move _7) -> [return: bb1, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            _4 = Eq(move _5, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1439:8: 1439:54 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb16, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1441:23: 1441:44 (#0),
                    scope: scope[0],
                },
                kind: _9 = alloc::boxed::Box::<bytes::Shared>::from_raw(move _10) -> [return: bb3, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = move (*_9),
            FakeRead(ForLet(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1441:44: 1441:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb4, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1442:22: 1442:47 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::mem::ManuallyDrop::<bytes::Shared>::new(move _12) -> [return: bb5, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1443:19: 1443:29 (#0),
                    scope: scope[2],
                },
                kind: _14 = <core::mem::ManuallyDrop<bytes::Shared> as core::ops::Deref>::deref(move _15) -> [return: bb6, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = ((*_14).0: *mut u8),
            FakeRead(ForLet(None), _13),
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1444:19: 1444:29 (#0),
                    scope: scope[3],
                },
                kind: _17 = <core::mem::ManuallyDrop<bytes::Shared> as core::ops::Deref>::deref(move _18) -> [return: bb7, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            _16 = ((*_17).1: usize),
            FakeRead(ForLet(None), _16),
            StorageDead(_17),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _2,
            StorageLive(_21),
            StorageLive(_22),
            _22 = _13,
            _21 = move _22 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1447:19: 1447:40 (#0),
                    scope: scope[4],
                },
                kind: _19 = offset_from(move _20, move _21) -> [return: bb8, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _13,
            StorageLive(_25),
            StorageLive(_26),
            _26 = _3,
            StorageLive(_27),
            _27 = _19,
            _28 = AddWithOverflow(_26, _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1448:42: 1448:51 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, move _27) -> [success: bb9, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = move (_28.0: usize),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_29),
            _29 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1448:17: 1448:57 (#0),
                    scope: scope[5],
                },
                kind: _23 = alloc::vec::Vec::<u8>::from_raw_parts(move _24, move _25, move _29) -> [return: bb10, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_30),
            StorageLive(_31),
            _31 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1450:21: 1450:42 (#0),
                    scope: scope[6],
                },
                kind: _30 = bytes_mut::BytesMut::from_vec(move _31) -> [return: bb11, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            FakeRead(ForLet(None), _30),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut _30,
            StorageLive(_34),
            _34 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1451:9: 1451:33 (#0),
                    scope: scope[7],
                },
                kind: _32 = bytes_mut::BytesMut::advance_unchecked(move _33, move _34) -> [return: bb12, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            _0 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb13, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[5],
                },
                kind: drop(_23) -> [return: bb14, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb15, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _2,
            StorageLive(_39),
            _39 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1455:17: 1455:48 (#0),
                    scope: scope[0],
                },
                kind: _37 = core::slice::from_raw_parts::<'_, u8>(move _38, move _39) -> [return: bb17, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = &(*_37),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1455:17: 1455:57 (#0),
                    scope: scope[0],
                },
                kind: _35 = alloc::slice::<impl [u8]>::to_vec(move _36) -> [return: bb18, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            FakeRead(ForLet(None), _35),
            StorageDead(_37),
            StorageLive(_40),
            StorageLive(_41),
            _41 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1456:9: 1456:31 (#0),
                    scope: scope[8],
                },
                kind: _40 = bytes::release_shared(move _41) -> [return: bb19, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_42),
            _42 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1457:9: 1457:30 (#0),
                    scope: scope[8],
                },
                kind: _0 = bytes_mut::BytesMut::from_vec(move _42) -> [return: bb20, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1458:5: 1458:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_35) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1459:2: 1459:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1457:29: 1457:30 (#0),
                    scope: scope[8],
                },
                kind: drop(_42) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1458:5: 1458:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_35) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1450:41: 1450:42 (#0),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[5],
                },
                kind: drop(_23) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1442:46: 1442:47 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1453:5: 1453:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1426:1: 1459:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1426:82: 1426:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1426:38: 1426:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1426:30: 1426:36 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1426:30: 1426:36 (#0),
                    },
                ),
            ),
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1426:30: 1426:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1426:56: 1426:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1426:51: 1426:54 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1426:51: 1426:54 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1426:51: 1426:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1426:72: 1426:77 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1426:67: 1426:70 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1426:67: 1426:70 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1426:67: 1426:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1439:8: 1439:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1439:8: 1439:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1439:8: 1439:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1439:5: 1458:6 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1439:31: 1439:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1441:22: 1441:44 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1441:13: 1441:19 (#0),
                    },
                ),
            ),
        ),
        ty: bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1441:13: 1441:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<bytes::Shared, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1441:23: 1441:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1441:37: 1441:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1442:22: 1442:47 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1442:13: 1442:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1442:13: 1442:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1442:40: 1442:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1443:19: 1443:29 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1443:13: 1443:16 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1443:13: 1443:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1443:19: 1443:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1443:19: 1443:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1444:19: 1444:29 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1444:13: 1444:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1444:13: 1444:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1444:19: 1444:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1444:19: 1444:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1447:19: 1447:40 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1447:13: 1447:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1447:13: 1447:16 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1447:31: 1447:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1447:36: 1447:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1447:36: 1447:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1448:17: 1448:57 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1448:13: 1448:14 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:13: 1448:14 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:37: 1448:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:42: 1448:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:42: 1448:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:48: 1448:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:42: 1448:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1448:53: 1448:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1450:21: 1450:42 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1450:13: 1450:18 (#0),
                    },
                ),
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1450:13: 1450:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1450:40: 1450:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1451:9: 1451:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1451:9: 1451:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1451:29: 1451:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1455:17: 1455:57 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1455:13: 1455:14 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1455:13: 1455:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1455:17: 1455:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1455:17: 1455:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1455:39: 1455:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1455:44: 1455:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1456:9: 1456:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1456:24: 1456:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1457:9: 1457:30 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1457:28: 1457:29 (#0),
            scope: scope[0],
        },
    },
]