[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_2),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const "Vtable",
            _10 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1069:9: 1069:33 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::fmt::Formatter::<'_>::debug_struct(move _9, move _10) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut _8,
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const "clone",
            _12 = &(*_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = ((*_1).0: for<'a> unsafe fn(&'a core::sync::atomic::AtomicPtr<()>, *const u8, usize) -> bytes::Bytes),
            _17 = move _18 as *const () (FnPtrToPtr),
            StorageDead(_18),
            _16 = &_17,
            _15 = &(*_16),
            _14 = move _15 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1069:9: 1070:56 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::fmt::DebugStruct::<'_, '_>::field(move _7, move _12, move _14) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_7),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "drop",
            _19 = &(*_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = ((*_1).4: for<'a> unsafe fn(&'a mut core::sync::atomic::AtomicPtr<()>, *const u8, usize)),
            _24 = move _25 as *const () (FnPtrToPtr),
            StorageDead(_25),
            _23 = &_24,
            _22 = &(*_23),
            _21 = move _22 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1069:9: 1071:54 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::fmt::DebugStruct::<'_, '_>::field(move _5, move _19, move _21) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::DebugStruct::<'_, '_>::finish(move _3) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1073:6: 1073:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1068:5: 1073:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1068:50: 1068:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1068:12: 1068:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1068:22: 1068:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1068:19: 1068:20 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1068:19: 1068:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1068:19: 1068:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1071:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1071:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1070:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1070:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1069:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1069:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:9: 1069:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:24: 1069:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1069:24: 1069:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:20: 1070:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:20: 1070:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:29: 1070:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:29: 1070:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:29: 1070:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:30: 1070:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: Binder { value: unsafe fn(&'^0.Named(DefId(0:1773 ~ bytes[5d47]::bytes::Vtable::'_), "'_") core::sync::atomic::AtomicPtr<()>, *const u8, usize) -> bytes::Bytes, bound_vars: [Region(BrNamed(DefId(0:1773 ~ bytes[5d47]::bytes::Vtable::'_), '_))] },
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1070:31: 1070:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:20: 1071:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:20: 1071:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:28: 1071:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:28: 1071:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: &'{erased} *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:28: 1071:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: *const (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:29: 1071:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1069:9: 1072:22 (#0),
                },
            ),
        ),
        ty: Binder { value: unsafe fn(&'^0.Named(DefId(0:1777 ~ bytes[5d47]::bytes::Vtable::'_#4), "'_") mut core::sync::atomic::AtomicPtr<()>, *const u8, usize), bound_vars: [Region(BrNamed(DefId(0:1777 ~ bytes[5d47]::bytes::Vtable::'_#4), '_))] },
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1071:30: 1071:39 (#0),
            scope: scope[0],
        },
    },
]