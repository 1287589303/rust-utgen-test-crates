[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            StorageLive(_8),
            _8 = _1,
            _7 = move _8 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1351:15: 1351:39 (#0),
                    scope: scope[0],
                },
                kind: _5 = offset_from(move _6, move _7) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_9),
            _9 = _3,
            _10 = AddWithOverflow(_5, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1351:15: 1351:45 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _9) -> [success: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_10.0: usize),
            StorageDead(_9),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_11),
            _11 = _1,
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1352:18: 1352:49 (#0),
                    scope: scope[1],
                },
                kind: _13 = core::alloc::Layout::from_size_align(move _14, const 1_usize) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1352:18: 1352:58 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::result::Result::<core::alloc::Layout, core::alloc::LayoutError>::unwrap(move _13) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1352:5: 1352:59 (#0),
                    scope: scope[1],
                },
                kind: _0 = alloc::alloc::dealloc(move _11, move _12) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1353:2: 1353:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1350:1: 1353:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1350:72: 1350:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1350:33: 1350:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1350:28: 1350:31 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1350:28: 1350:31 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1350:28: 1350:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1350:50: 1350:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1350:42: 1350:48 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1350:42: 1350:48 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1350:42: 1350:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1350:66: 1350:71 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1350:61: 1350:64 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1350:61: 1350:64 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1350:61: 1350:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1351:15: 1351:45 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1351:9: 1351:12 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:9: 1351:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:15: 1351:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:27: 1351:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:35: 1351:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:35: 1351:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:42: 1351:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1351:15: 1351:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:1352:5: 1352:59 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1352:13: 1352:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:1352:5: 1352:59 (#0),
                },
            ),
        ),
        ty: core::alloc::Layout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1352:18: 1352:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:1352:5: 1352:59 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::alloc::Layout, core::alloc::LayoutError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1352:18: 1352:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:1352:5: 1352:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1352:42: 1352:45 (#0),
            scope: scope[0],
        },
    },
]