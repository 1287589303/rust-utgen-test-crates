[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1079:21: 1079:36 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::num::<impl i64>::to_le_bytes(move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_4,
            _8 = move _9 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _3,
            _10 = core::ops::RangeTo::<usize> { end: move _11 },
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1080:27: 1080:46 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::slice::<impl [u8]>::get::<core::ops::RangeTo<usize>>(move _8, move _10) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            PlaceMention(_7),
            _12 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1080:21: 1080:46 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1080:27: 1080:46 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1081:13: 1081:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = _3,
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_4,
            _17 = move _18 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1082:48: 1082:59 (#0),
                    scope: scope[1],
                },
                kind: _16 = core::slice::<impl [u8]>::len(move _17) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_7 as Some).0: &[u8]),
            _6 = _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _6),
            StorageDead(_7),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut (*_1),
            StorageLive(_21),
            _21 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1085:9: 1085:30 (#0),
                    scope: scope[2],
                },
                kind: _19 = <Self as buf::buf_mut::BufMut>::put_slice(move _20, move _21) -> [return: bb8, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1082:21: 1082:60 (#0),
                    scope: scope[1],
                },
                kind: _14 = panic_does_not_fit(move _15, move _16) -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            _0 = const (),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1086:6: 1086:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_mut.rs:1078:5: 1086:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1078:52: 1078:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1078:19: 1078:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/buf_mut.rs:1078:33: 1078:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_mut.rs:1078:30: 1078:31 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_mut.rs:1078:30: 1078:31 (#0),
                    },
                ),
            ),
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1078:30: 1078:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/buf_mut.rs:1078:46: 1078:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_mut.rs:1078:38: 1078:44 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_mut.rs:1078:38: 1078:44 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1078:38: 1078:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_mut.rs:1079:21: 1079:36 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_mut.rs:1079:13: 1079:18 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1079:13: 1079:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1079:21: 1079:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_mut.rs:1080:21: 1083:10 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_mut.rs:1080:13: 1080:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:13: 1080:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:27: 1080:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:27: 1080:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:27: 1080:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:37: 1080:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1080:39: 1080:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1081:13: 1081:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/buf/buf_mut.rs:1080:27: 1080:46 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_mut.rs:1081:13: 1081:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1081:18: 1081:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1082:21: 1082:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1082:40: 1082:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1082:48: 1082:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1082:48: 1082:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1082:48: 1082:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1085:9: 1085:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1085:9: 1085:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_mut.rs:1085:24: 1085:29 (#0),
            scope: scope[0],
        },
    },
]