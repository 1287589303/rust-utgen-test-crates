[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: T),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:173:21: 173:39 (#0),
                    scope: scope[0],
                },
                kind: _3 = <T as buf::buf_impl::Buf>::remaining(move _4) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
            StorageLive(_7),
            _7 = _2,
            _5 = Ge(move _6, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:174:12: 174:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
            _8 = &mut ((*_1).0: T),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:175:13: 175:38 (#0),
                    scope: scope[1],
                },
                kind: _0 = <T as buf::buf_impl::Buf>::copy_to_bytes(move _8, move _9) -> [return: bb3, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _3,
            _10 = Eq(move _11, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:176:19: 176:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).1: U),
            StorageLive(_13),
            _13 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:177:13: 177:38 (#0),
                    scope: scope[1],
                },
                kind: _0 = <U as buf::buf_impl::Buf>::copy_to_bytes(move _12, move _13) -> [return: bb6, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:176:16: 187:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _2,
            StorageLive(_18),
            _18 = _3,
            _19 = SubWithOverflow(_17, _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:180:17: 180:28 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, move _18) -> [success: bb8, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = move (_19.0: usize),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*_1).1: U),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:180:32: 180:50 (#0),
                    scope: scope[1],
                },
                kind: _20 = <U as buf::buf_impl::Buf>::remaining(move _21) -> [return: bb9, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _15 = Le(move _16, move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:180:17: 180:50 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_16),
            _14 = const (),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:183:27: 183:62 (#0),
                    scope: scope[1],
                },
                kind: _23 = bytes_mut::BytesMut::with_capacity(move _24) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_16),
            StorageLive(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#111),
                    scope: scope[1],
                },
                kind: _22 = core::panicking::panic(const "`len` greater than remaining") -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _23,
            StorageLive(_27),
            _27 = &mut ((*_1).0: T),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:184:13: 184:33 (#0),
                    scope: scope[2],
                },
                kind: _25 = <bytes_mut::BytesMut as buf::buf_mut::BufMut>::put::<&mut T>(move _26, move _27) -> [return: bb13, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _23,
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut ((*_1).1: U),
            _31 = &mut (*_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _2,
            StorageLive(_35),
            _35 = _3,
            _36 = SubWithOverflow(_34, _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:185:40: 185:51 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_36.1: bool), "attempt to compute `{} - {}`, which would overflow", move _34, move _35) -> [success: bb14, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = move (_36.0: usize),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:185:21: 185:52 (#0),
                    scope: scope[2],
                },
                kind: _30 = <&mut U as buf::buf_impl::Buf>::take(move _31, move _33) -> [return: bb15, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:185:13: 185:53 (#0),
                    scope: scope[2],
                },
                kind: _28 = <bytes_mut::BytesMut as buf::buf_mut::BufMut>::put::<buf::take::Take<&mut U>>(move _29, move _30) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_32),
            StorageDead(_28),
            StorageLive(_37),
            _37 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:186:13: 186:25 (#0),
                    scope: scope[2],
                },
                kind: _0 = bytes_mut::BytesMut::freeze(move _37) -> [return: bb17, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:187:9: 187:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb18, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:176:16: 187:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:188:6: 188:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:186:24: 186:25 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:187:9: 187:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/chain.rs:172:5: 188:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:172:48: 172:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut buf::chain::Chain<T/#0, U/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:172:22: 172:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/chain.rs:172:38: 172:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/chain.rs:172:33: 172:36 (#0),
                            ),
                        ),
                        pat_span: src/buf/chain.rs:172:33: 172:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:172:33: 172:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/chain.rs:173:21: 173:39 (#0),
                            ),
                        ),
                        pat_span: src/buf/chain.rs:173:13: 173:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:173:13: 173:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:173:21: 173:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:174:12: 174:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:174:12: 174:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:174:21: 174:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:175:13: 175:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:175:13: 175:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:175:13: 175:38 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:175:34: 175:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:176:19: 176:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:174:9: 187:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:176:19: 176:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:177:13: 177:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:177:13: 177:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:177:13: 177:38 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:177:34: 177:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:179:13: 182:14 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:17: 180:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:17: 180:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:17: 180:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:23: 180:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:17: 180:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:32: 180:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:180:32: 180:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#111),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/chain.rs:183:27: 183:62 (#0),
                            ),
                        ),
                        pat_span: src/buf/chain.rs:183:17: 183:24 (#0),
                    },
                ),
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:183:17: 183:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:183:58: 183:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:184:13: 184:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:184:13: 184:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:184:21: 184:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:13: 185:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:13: 185:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: buf::take::Take<&'{erased} mut U/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:21: 185:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:21: 185:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:21: 185:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:40: 185:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:40: 185:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:46: 185:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:185:40: 185:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/chain.rs:186:13: 186:25 (#0),
                },
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/chain.rs:186:13: 186:16 (#0),
            scope: scope[0],
        },
    },
]