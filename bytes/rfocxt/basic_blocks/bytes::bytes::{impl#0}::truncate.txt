[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
            StorageLive(_5),
            _5 = ((*_1).1: usize),
            _3 = Lt(move _4, move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:593:12: 593:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb12, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &raw const (*((*_1).3: &bytes::Vtable)),
            _7 = &_8,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const {alloc310: &bytes::Vtable},
            _11 = &(*_12),
            _10 = &raw const (*_11),
            _9 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:597:16: 597:71 (#0),
                    scope: scope[0],
                },
                kind: _6 = <*const bytes::Vtable as core::cmp::PartialEq>::eq(move _7, move _9) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:597:16: 597:71 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:599:13: 601:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &raw const (*((*_1).3: &bytes::Vtable)),
            _14 = &_15,
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = const {alloc311: &bytes::Vtable},
            _18 = &(*_19),
            _17 = &raw const (*_18),
            _16 = &_17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:598:20: 598:74 (#0),
                    scope: scope[0],
                },
                kind: _13 = <*const bytes::Vtable as core::cmp::PartialEq>::eq(move _14, move _16) -> [return: bb5, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:598:20: 598:74 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb10, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:599:13: 601:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_1),
            StorageLive(_23),
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:600:22: 600:41 (#0),
                    scope: scope[0],
                },
                kind: _21 = bytes::Bytes::split_off(move _22, move _23) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:600:17: 600:42 (#0),
                    scope: scope[0],
                },
                kind: _20 = core::mem::drop::<bytes::Bytes>(move _21) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:597:13: 603:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_24),
            _24 = _2,
            ((*_1).1: usize) = move _24,
            StorageDead(_24),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:597:13: 603:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:593:9: 604:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:593:9: 604:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:605:6: 605:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:600:41: 600:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_21) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:592:5: 605:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:592:43: 592:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:592:21: 592:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:592:37: 592:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:592:32: 592:35 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:592:32: 592:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:592:32: 592:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:593:9: 604:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:593:12: 593:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:593:9: 604:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:593:12: 593:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:593:9: 604:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:593:18: 593:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:16: 597:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:16: 597:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:16: 597:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:48: 597:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:48: 597:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:48: 597:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:615 ~ bytes[5d47]::bytes::PROMOTABLE_EVEN_VTABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:597:49: 597:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:20: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:20: 598:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:20: 598:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:52: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: *const bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:52: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes.rs:597:13: 603:14 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:52: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:616 ~ bytes[5d47]::bytes::PROMOTABLE_ODD_VTABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:598:53: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:600:17: 600:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:600:22: 600:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:600:22: 600:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:600:37: 600:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:602:28: 602:31 (#0),
            scope: scope[0],
        },
    },
]