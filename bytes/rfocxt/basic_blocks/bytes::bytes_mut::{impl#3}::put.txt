[
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1205:15: 1205:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = <T as buf::buf_impl::Buf>::has_remaining(move _5) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1205:15: 1205:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb9, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1206:21: 1206:32 (#0),
                    scope: scope[0],
                },
                kind: _6 = <T as buf::buf_impl::Buf>::chunk(move _7) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1207:21: 1207:28 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::slice::<impl [u8]>::len(move _9) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_1),
            StorageLive(_12),
            _12 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1208:13: 1208:38 (#0),
                    scope: scope[2],
                },
                kind: _10 = bytes_mut::BytesMut::extend_from_slice(move _11, move _12) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _2,
            StorageLive(_15),
            _15 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1209:13: 1209:27 (#0),
                    scope: scope[2],
                },
                kind: _13 = <T as buf::buf_impl::Buf>::advance(move _14, move _15) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            _3 = const (),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_17),
            _0 = const (),
            StorageDead(_17),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1211:5: 1211:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1211:6: 1211:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1211:5: 1211:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1201:5: 1211:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1201:42: 1201:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1201:20: 1201:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/bytes_mut.rs:1201:40: 1201:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1201:31: 1201:38 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1201:31: 1201:38 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1201:31: 1201:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1201:5: 1211:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1205:15: 1205:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1205:15: 1205:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1206:21: 1206:32 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1206:17: 1206:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1206:17: 1206:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1206:21: 1206:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1207:21: 1207:28 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1207:17: 1207:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1207:17: 1207:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1207:21: 1207:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1208:13: 1208:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1208:13: 1208:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1208:36: 1208:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1209:13: 1209:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1209:13: 1209:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1209:25: 1209:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1205:9: 1210:10 (#723),
            scope: scope[0],
        },
    },
]