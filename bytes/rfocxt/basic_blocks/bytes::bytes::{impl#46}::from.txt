[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1060:21: 1060:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::mem::ManuallyDrop::<bytes::Bytes>::new(move _3) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1061:19: 1061:31 (#0),
                    scope: scope[1],
                },
                kind: _5 = <core::mem::ManuallyDrop<bytes::Bytes> as core::ops::Deref>::deref(move _6) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = ((*((*_5).3: &bytes::Vtable)).1: for<'a> unsafe fn(&'a core::sync::atomic::AtomicPtr<()>, *const u8, usize) -> alloc::vec::Vec<u8>),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1061:43: 1061:53 (#0),
                    scope: scope[1],
                },
                kind: _9 = <core::mem::ManuallyDrop<bytes::Bytes> as core::ops::Deref>::deref(move _10) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = &((*_9).2: core::sync::atomic::AtomicPtr<()>),
            _7 = &(*_8),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1061:55: 1061:64 (#0),
                    scope: scope[1],
                },
                kind: _12 = <core::mem::ManuallyDrop<bytes::Bytes> as core::ops::Deref>::deref(move _13) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = ((*_12).0: *const u8),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1061:66: 1061:75 (#0),
                    scope: scope[1],
                },
                kind: _15 = <core::mem::ManuallyDrop<bytes::Bytes> as core::ops::Deref>::deref(move _16) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _14 = ((*_15).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                    scope: scope[1],
                },
                kind: _0 = move _4(move _7, move _11, move _14) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1062:6: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1060:44: 1060:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1059:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1059:30: 1059:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1059:20: 1059:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1059:13: 1059:18 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1059:13: 1059:18 (#0),
                    },
                ),
            ),
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1059:13: 1059:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1060:21: 1060:45 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1060:13: 1060:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<bytes::Bytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1060:13: 1060:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1060:39: 1060:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: Binder { value: unsafe fn(&'^0.Named(DefId(0:1774 ~ bytes[5d47]::bytes::Vtable::'_#1), "'_") core::sync::atomic::AtomicPtr<()>, *const u8, usize) -> alloc::vec::Vec<u8, alloc::alloc::Global>, bound_vars: [Region(BrNamed(DefId(0:1774 ~ bytes[5d47]::bytes::Vtable::'_#1), '_))] },
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:18: 1061:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:19: 1061:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Bytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:19: 1061:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:42: 1061:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:42: 1061:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:43: 1061:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Bytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:43: 1061:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:55: 1061:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:55: 1061:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Bytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:55: 1061:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:66: 1061:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:66: 1061:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1061:18: 1061:76 (#0),
                },
            ),
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Bytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1061:66: 1061:71 (#0),
            scope: scope[0],
        },
    },
]