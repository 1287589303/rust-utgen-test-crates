[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            StorageLive(_8),
            _8 = &_3,
            _6 = {closure@src/bytes.rs:1324:19: 1324:27} { ptr: move _7, len: move _8 },
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1324:5: 1335:7 (#0),
                    scope: scope[0],
                },
                kind: _4 = <core::sync::atomic::AtomicPtr<()> as loom::sync::atomic::AtomicMut<()>>::with_mut::<{closure@src/bytes.rs:1324:19: 1324:27}, ()>(move _5, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1336:2: 1336:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1323:1: 1336:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1323:84: 1323:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1323:37: 1323:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1323:31: 1323:35 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1323:31: 1323:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1323:31: 1323:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1323:62: 1323:71 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1323:57: 1323:60 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1323:57: 1323:60 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1323:57: 1323:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1323:78: 1323:83 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1323:73: 1323:76 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1323:73: 1323:76 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1323:73: 1323:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1324:5: 1335:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1324:5: 1324:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:636 ~ bytes[5d47]::bytes::promotable_odd_drop::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'^0 mut *mut (),)), bound_vars: [Region(BrAnon)] },
                (&'{erased} *const u8, &'{erased} usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1324:19: 1335:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1324:19: 1335:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1324:19: 1335:6 (#0),
            scope: scope[0],
        },
    },
]