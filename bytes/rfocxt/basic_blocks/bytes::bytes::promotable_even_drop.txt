[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            StorageLive(_8),
            _8 = &_3,
            _6 = {closure@src/bytes.rs:1289:19: 1289:27} { ptr: move _7, len: move _8 },
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1289:5: 1300:7 (#0),
                    scope: scope[0],
                },
                kind: _4 = <core::sync::atomic::AtomicPtr<()> as loom::sync::atomic::AtomicMut<()>>::with_mut::<{closure@src/bytes.rs:1289:19: 1289:27}, ()>(move _5, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1301:2: 1301:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1288:1: 1301:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1288:85: 1288:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1288:38: 1288:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1288:32: 1288:36 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1288:32: 1288:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1288:32: 1288:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1288:63: 1288:72 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1288:58: 1288:61 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1288:58: 1288:61 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1288:58: 1288:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1288:79: 1288:84 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1288:74: 1288:77 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1288:74: 1288:77 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1288:74: 1288:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1289:5: 1300:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1289:5: 1289:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:628 ~ bytes[5d47]::bytes::promotable_even_drop::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'^0 mut *mut (),)), bound_vars: [Region(BrAnon)] },
                (&'{erased} *const u8, &'{erased} usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1289:19: 1300:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1289:19: 1300:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1289:19: 1300:6 (#0),
            scope: scope[0],
        },
    },
]