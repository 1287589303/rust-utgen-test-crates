[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:108:25: 108:35 (#0),
                    scope: scope[0],
                },
                kind: _7 = buf::uninit_slice::UninitSlice::len(move _8) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _5 = Lt(move _6, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:108:17: 108:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_1),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
            _14 = core::ops::RangeFrom::<usize> { start: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:110:22: 110:31 (#0),
                    scope: scope[0],
                },
                kind: _12 = <buf::uninit_slice::UninitSlice as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _13, move _14) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:108:9: 108:36 (#124),
                    scope: scope[0],
                },
                kind: _9 = core::panicking::panic(const "assertion failed: index < self.len()") -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &mut (*_12),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:110:18: 110:44 (#0),
                    scope: scope[0],
                },
                kind: _10 = buf::uninit_slice::UninitSlice::as_mut_ptr(move _11) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_16),
            _16 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::ptr::mut_ptr::<impl *mut u8>::write(move _10, move _16) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_10),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:111:6: 111:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/uninit_slice.rs:107:5: 111:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:107:57: 107:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:107:23: 107:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/uninit_slice.rs:107:41: 107:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/uninit_slice.rs:107:34: 107:39 (#0),
                            ),
                        ),
                        pat_span: src/buf/uninit_slice.rs:107:34: 107:39 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:107:34: 107:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/uninit_slice.rs:107:54: 107:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/uninit_slice.rs:107:48: 107:52 (#0),
                            ),
                        ),
                        pat_span: src/buf/uninit_slice.rs:107:48: 107:52 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:107:48: 107:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:9: 108:36 (#124),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:17: 108:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:17: 108:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:25: 108:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:25: 108:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:108:9: 108:36 (#124),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:108:9: 108:36 (#124),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:18: 110:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:18: 110:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:22: 110:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut buf::uninit_slice::UninitSlice,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:18: 110:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:23: 110:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:23: 110:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/buf/uninit_slice.rs:110:18: 110:56 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/uninit_slice.rs:110:51: 110:55 (#0),
            scope: scope[0],
        },
    },
]