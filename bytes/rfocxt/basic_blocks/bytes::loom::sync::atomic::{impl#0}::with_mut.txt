[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:20:19: 20:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::sync::atomic::AtomicPtr::<T>::get_mut(move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_7),
            _4 = (move _5,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:20:17: 20:34 (#0),
                    scope: scope[0],
                },
                kind: _0 = <F as core::ops::FnOnce<(&mut *mut T,)>>::call_once(move _3, move _4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:21:13: 21:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:21:14: 21:14 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:20:33: 20:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:21:13: 21:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/loom.rs:16:13: 21:14 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:16:51: 16:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:16:31: 16:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/loom.rs:16:45: 16:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/loom.rs:16:42: 16:43 (#0),
                            ),
                        ),
                        pat_span: src/loom.rs:16:42: 16:43 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:16:42: 16:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/loom.rs:20:17: 20:34 (#0),
                },
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:20:17: 20:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/loom.rs:20:17: 20:34 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut *mut T/#0,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:20:17: 20:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/loom.rs:20:17: 20:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:20:19: 20:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/loom.rs:20:17: 20:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:20:19: 20:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/loom.rs:20:17: 20:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::sync::atomic::AtomicPtr<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/loom.rs:20:19: 20:23 (#0),
            scope: scope[0],
        },
    },
]