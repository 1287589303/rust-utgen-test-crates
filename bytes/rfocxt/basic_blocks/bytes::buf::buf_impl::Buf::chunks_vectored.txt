[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:208:12: 208:26 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [std::io::IoSlice<'_>]>::is_empty(move _5) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:208:12: 208:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = const 0_usize,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:218:6: 218:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:212:12: 212:32 (#0),
                    scope: scope[0],
                },
                kind: _7 = <Self as buf::buf_impl::Buf>::has_remaining(move _8) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:212:12: 212:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb9, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:213:35: 213:47 (#0),
                    scope: scope[0],
                },
                kind: _11 = <Self as buf::buf_impl::Buf>::chunk(move _12) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:213:22: 213:48 (#0),
                    scope: scope[0],
                },
                kind: _9 = std::io::IoSlice::<'_>::new(move _10) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_13),
            _13 = const 0_usize,
            _14 = Len((*_2)),
            _15 = Lt(_13, _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:213:13: 213:19 (#0),
                    scope: scope[0],
                },
                kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2)[_13] = move _9,
            StorageDead(_9),
            StorageDead(_13),
            StorageDead(_11),
            _0 = const 1_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:212:9: 217:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _0 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:212:9: 217:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:218:6: 218:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:218:6: 218:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:207:5: 218:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:207:66: 207:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:207:28: 207:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/buf_impl.rs:207:43: 207:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:207:38: 207:41 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:207:38: 207:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [std::io::IoSlice<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:207:38: 207:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:208:9: 210:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:208:12: 208:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [std::io::IoSlice<'{erased}>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:208:12: 208:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:208:27: 210:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/buf_impl.rs:212:9: 217:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:212:12: 212:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/buf/buf_impl.rs:212:9: 217:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:212:12: 212:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::io::IoSlice<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:22: 213:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:35: 213:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:35: 213:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:35: 213:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:17: 213:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:13: 213:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:213:13: 213:19 (#0),
            scope: scope[0],
        },
    },
]