[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).2: core::sync::atomic::AtomicUsize),
            StorageLive(_8),
            _8 = core::sync::atomic::Ordering::AcqRel,
            StorageLive(_9),
            _9 = core::sync::atomic::Ordering::Relaxed,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1400:8: 1402:69 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::sync::atomic::AtomicUsize::compare_exchange(move _7, const 1_usize, const 0_usize, move _8, move _9) -> [return: bb1, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &_6,
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1400:8: 1403:17 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::result::Result::<usize, usize>::is_ok(move _5) -> [return: bb2, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1400:8: 1403:17 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb12, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1406:23: 1406:44 (#0),
                    scope: scope[0],
                },
                kind: _11 = alloc::boxed::Box::<bytes::Shared>::from_raw(move _12) -> [return: bb4, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = move (*_11),
            FakeRead(ForLet(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1406:44: 1406:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb5, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            _14 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1407:22: 1407:47 (#0),
                    scope: scope[1],
                },
                kind: _13 = core::mem::ManuallyDrop::<bytes::Shared>::new(move _14) -> [return: bb6, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1408:19: 1408:29 (#0),
                    scope: scope[2],
                },
                kind: _16 = <core::mem::ManuallyDrop<bytes::Shared> as core::ops::Deref>::deref(move _17) -> [return: bb7, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = ((*_16).0: *mut u8),
            FakeRead(ForLet(None), _15),
            StorageDead(_16),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1409:19: 1409:29 (#0),
                    scope: scope[3],
                },
                kind: _19 = <core::mem::ManuallyDrop<bytes::Shared> as core::ops::Deref>::deref(move _20) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = ((*_19).1: usize),
            FakeRead(ForLet(None), _18),
            StorageDead(_19),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _2,
            StorageLive(_23),
            _23 = _15,
            StorageLive(_24),
            _24 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1412:9: 1412:33 (#0),
                    scope: scope[4],
                },
                kind: _21 = core::intrinsics::copy::<u8>(move _22, move _23, move _24) -> [return: bb9, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_25),
            _25 = _15,
            StorageLive(_26),
            _26 = _3,
            StorageLive(_27),
            _27 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1414:9: 1414:43 (#0),
                    scope: scope[4],
                },
                kind: _0 = alloc::vec::Vec::<u8>::from_raw_parts(move _25, move _26, move _27) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1415:5: 1415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb11, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _2,
            StorageLive(_32),
            _32 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1416:17: 1416:48 (#0),
                    scope: scope[0],
                },
                kind: _30 = core::slice::from_raw_parts::<'_, u8>(move _31, move _32) -> [return: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &(*_30),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1416:17: 1416:57 (#0),
                    scope: scope[0],
                },
                kind: _28 = alloc::slice::<impl [u8]>::to_vec(move _29) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageDead(_30),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1417:9: 1417:31 (#0),
                    scope: scope[5],
                },
                kind: _33 = bytes::release_shared(move _34) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _0 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1419:5: 1419:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_28) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1420:2: 1420:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1419:5: 1419:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_28) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1407:46: 1407:47 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1415:5: 1415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes.rs:1393:1: 1420:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1393:82: 1393:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1393:38: 1393:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1393:30: 1393:36 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1393:30: 1393:36 (#0),
                    },
                ),
            ),
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1393:30: 1393:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1393:56: 1393:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1393:51: 1393:54 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1393:51: 1393:54 (#0),
                    },
                ),
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1393:51: 1393:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes.rs:1393:72: 1393:77 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1393:67: 1393:70 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1393:67: 1393:70 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1393:67: 1393:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1400:8: 1403:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: &'{erased} core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1400:8: 1402:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1400:8: 1402:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1400:8: 1401:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1402:33: 1402:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1400:5: 1419:6 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1402:51: 1402:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1406:22: 1406:44 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1406:13: 1406:19 (#0),
                    },
                ),
            ),
        ),
        ty: bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1406:13: 1406:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<bytes::Shared, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1406:23: 1406:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1406:37: 1406:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1407:22: 1407:47 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1407:13: 1407:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1407:13: 1407:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1407:40: 1407:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1408:19: 1408:29 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1408:13: 1408:16 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1408:13: 1408:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1408:19: 1408:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1408:19: 1408:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1409:19: 1409:29 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1409:13: 1409:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1409:13: 1409:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1409:19: 1409:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes::Shared>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1409:19: 1409:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1412:9: 1412:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1412:19: 1412:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1412:24: 1412:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1412:29: 1412:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1414:9: 1414:43 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1414:29: 1414:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1414:9: 1414:43 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1414:34: 1414:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes.rs:1414:9: 1414:43 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1414:39: 1414:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes.rs:1416:17: 1416:57 (#0),
                            ),
                        ),
                        pat_span: src/bytes.rs:1416:13: 1416:14 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1416:13: 1416:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1416:17: 1416:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1416:17: 1416:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1416:39: 1416:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1416:44: 1416:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1417:9: 1417:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes.rs:1417:24: 1417:30 (#0),
            scope: scope[0],
        },
    },
]