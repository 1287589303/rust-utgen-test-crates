[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            _3 = Eq(move _4, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1491:8: 1491:17 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = const 0_usize,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1496:2: 1496:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
            StorageLive(_8),
            _9 = SubWithOverflow(const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1495:18: 1495:51 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH, const 1_usize) -> [success: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_9.0: usize),
            _10 = AddWithOverflow(_7, _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1495:10: 1495:52 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_10.0: usize),
            StorageDead(_8),
            StorageDead(_7),
            _11 = Lt(_6, const 64_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1495:5: 1495:52 (#0),
                    scope: scope[0],
                },
                kind: assert(move _11, "attempt to shift left by `{}`, which would overflow", _6) -> [success: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = Shl(const 1_usize, move _6),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1496:2: 1496:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1496:2: 1496:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1490:1: 1496:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1490:48: 1490:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes_mut.rs:1490:38: 1490:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1490:32: 1490:36 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1490:32: 1490:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1490:32: 1490:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1491:5: 1493:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1491:8: 1491:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1491:8: 1491:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1491:18: 1493:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1495:5: 1495:52 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:10: 1495:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1495:5: 1495:52 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:11: 1495:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1495:5: 1495:52 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:18: 1495:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:18: 1495:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:10: 1495:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1495:5: 1495:52 (#0),
            scope: scope[0],
        },
    },
]