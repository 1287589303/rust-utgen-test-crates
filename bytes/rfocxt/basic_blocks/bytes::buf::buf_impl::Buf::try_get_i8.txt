[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1240:12: 1240:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = <&mut Self as buf::buf_impl::Buf>::remaining(move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = Lt(move _4, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1240:12: 1240:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1243:28: 1243:44 (#0),
                    scope: scope[0],
                },
                kind: _8 = <&mut Self as buf::buf_impl::Buf>::remaining(move _9) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = TryGetError { requested: const 1_usize, available: move _8 },
            StorageDead(_8),
            _0 = core::result::Result::<i8, TryGetError>::Err(move _7),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1249:6: 1249:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1246:19: 1246:31 (#0),
                    scope: scope[0],
                },
                kind: _12 = <&mut Self as buf::buf_impl::Buf>::chunk(move _13) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            _14 = const 0_usize,
            _15 = Len((*_12)),
            _16 = Lt(_14, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1246:19: 1246:34 (#0),
                    scope: scope[0],
                },
                kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = (*_12)[_14],
            _10 = move _11 as i8 (IntToInt),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1247:9: 1247:24 (#0),
                    scope: scope[1],
                },
                kind: _17 = <Self as buf::buf_impl::Buf>::advance(move _18, const 1_usize) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_19),
            _19 = _10,
            _0 = core::result::Result::<i8, TryGetError>::Ok(move _19),
            StorageDead(_19),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1249:6: 1249:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1249:6: 1249:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:1239:5: 1249:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<i8, TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1239:33: 1239:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1239:19: 1239:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1240:9: 1245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1240:12: 1240:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1240:12: 1240:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1240:12: 1240:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1240:33: 1245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: TryGetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1241:24: 1244:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1243:28: 1243:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1243:28: 1243:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:1246:19: 1246:40 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:1246:13: 1246:16 (#0),
                    },
                ),
            ),
        ),
        ty: i8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:13: 1246:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:19: 1246:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:19: 1246:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:19: 1246:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:32: 1246:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:19: 1246:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1246:19: 1246:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1247:9: 1247:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1247:9: 1247:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:1248:12: 1248:15 (#0),
            scope: scope[0],
        },
    },
]