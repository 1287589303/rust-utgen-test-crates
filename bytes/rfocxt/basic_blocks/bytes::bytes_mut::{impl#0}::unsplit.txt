[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:905:12: 905:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = bytes_mut::BytesMut::is_empty(move _5) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:905:12: 905:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb6, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:906:13: 906:18 (#0),
                    scope: scope[0],
                },
                kind: drop((*_1)) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_1) = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:906:25: 906:26 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb5, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_1) = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:906:25: 906:26 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = const (),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_1),
            StorageLive(_10),
            _10 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:29: 910:52 (#0),
                    scope: scope[1],
                },
                kind: _8 = bytes_mut::BytesMut::try_unsplit(move _9, move _10) -> [return: bb7, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:16: 910:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [1: bb8, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:16: 910:26 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_8 as Err).0: bytes_mut::BytesMut),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_1),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:911:36: 911:50 (#0),
                    scope: scope[1],
                },
                kind: _16 = <bytes_mut::BytesMut as core::convert::AsRef<[u8]>>::as_ref(move _17) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:911:13: 911:51 (#0),
                    scope: scope[1],
                },
                kind: _13 = bytes_mut::BytesMut::extend_from_slice(move _14, move _15) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_16),
            StorageDead(_13),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:912:9: 912:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:9: 912:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:9: 912:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:6: 913:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:912:9: 912:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:910:51: 910:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:913:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:904:5: 913:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:904:47: 904:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:904:20: 904:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/bytes_mut.rs:904:38: 904:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:904:31: 904:36 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:904:31: 904:36 (#0),
                    },
                ),
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:904:31: 904:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:905:9: 908:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:905:12: 905:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:905:12: 905:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:905:28: 908:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:906:21: 906:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:910:9: 912:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:910:29: 910:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:910:9: 912:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:910:29: 910:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/bytes_mut.rs:910:9: 912:10 (#0),
                },
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:910:46: 910:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:910:16: 910:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/bytes_mut.rs:910:29: 910:52 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:910:16: 910:26 (#0),
                    },
                ),
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:910:20: 910:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:911:13: 911:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:911:13: 911:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:911:36: 911:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:911:36: 911:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:911:36: 911:41 (#0),
            scope: scope[0],
        },
    },
]