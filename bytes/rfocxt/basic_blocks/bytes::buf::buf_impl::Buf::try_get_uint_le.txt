[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = [const 0_u8; 8],
            FakeRead(ForLet(None), _5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _5,
            _8 = move _9 as &mut [u8] (PointerCoercion(Unsize)),
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _2,
            _10 = core::ops::RangeTo::<usize> { end: move _11 },
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:50:30: 50:57 (#95),
                    scope: scope[1],
                },
                kind: _7 = core::slice::<impl [u8]>::get_mut::<core::ops::RangeTo<usize>>(move _8, move _10) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            PlaceMention(_7),
            _12 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:50:24: 50:57 (#95),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:50:30: 50:57 (#95),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:51:13: 51:27 (#95),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:52:21: 52:59 (#95),
                    scope: scope[1],
                },
                kind: _14 = panic_does_not_fit(const buf::buf_impl::Buf::try_get_uint_le::SIZE, move _15) -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_7 as Some).0: &mut [u8]),
            _6 = move _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _6),
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_1),
            StorageLive(_20),
            _20 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:9: 55:42 (#95),
                    scope: scope[2],
                },
                kind: _18 = <Self as buf::buf_impl::Buf>::try_copy_to_slice(move _19, move _20) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:9: 55:43 (#474),
                    scope: scope[2],
                },
                kind: _17 = <core::result::Result<(), TryGetError> as core::ops::Try>::branch(move _18) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _21 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:9: 55:9 (#95),
                    scope: scope[2],
                },
                kind: switchInt(move _21) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:9: 55:43 (#474),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_17 as Continue).0: ()),
            _16 = _25,
            StorageDead(_25),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:56:25: 56:43 (#95),
                    scope: scope[2],
                },
                kind: _26 = core::num::<impl u64>::from_le_bytes(move _27) -> [return: bb13, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_17 as Break).0: core::result::Result<core::convert::Infallible, TryGetError>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:55:9: 55:43 (#474),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<u64, TryGetError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, TryGetError>>>::from_residual(move _24) -> [return: bb12, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _0 = core::result::Result::<u64, TryGetError>::Ok(move _26),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:56:9: 56:44 (#95),
                    scope: scope[2],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:2009:6: 2009:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/buf/buf_impl.rs:2007:5: 2009:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u64, TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2007:53: 2007:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2007:24: 2007:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/buf/buf_impl.rs:2007:43: 2007:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:2007:35: 2007:41 (#0),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:2007:35: 2007:41 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2007:35: 2007:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2007:78: 2009:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:43:57: 57:6 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:48:23: 48:32 (#95),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:48:13: 48:20 (#95),
                    },
                ),
            ),
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:48:13: 48:20 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/buf/buf_impl.rs:50:24: 53:10 (#95),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:50:13: 50:21 (#95),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:50:13: 50:21 (#95),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:50:30: 50:57 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:50:30: 50:33 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:50:30: 50:33 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:50:42: 50:44 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2008:44: 2008:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:51:13: 51:27 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/buf/buf_impl.rs:50:30: 50:57 (#95),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:51:13: 51:27 (#95),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:51:18: 51:26 (#95),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:52:21: 52:59 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:2008:44: 2008:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:9: 55:43 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, TryGetError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:9: 55:43 (#474),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:9: 55:42 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:9: 55:14 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:33: 55:41 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/buf/buf_impl.rs:55:9: 55:43 (#474),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, TryGetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:42: 55:43 (#475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/buf/buf_impl.rs:55:9: 55:43 (#474),
                            ),
                        ),
                        pat_span: src/buf/buf_impl.rs:55:9: 55:43 (#474),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:55:9: 55:43 (#95),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:56:25: 56:43 (#95),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/buf/buf_impl.rs:56:39: 56:42 (#95),
            scope: scope[0],
        },
    },
]