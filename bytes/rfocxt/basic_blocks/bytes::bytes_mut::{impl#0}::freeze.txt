[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:247:21: 247:44 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::mem::ManuallyDrop::<bytes_mut::BytesMut>::new(move _3) -> [return: bb1, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:248:12: 248:24 (#0),
                    scope: scope[1],
                },
                kind: _7 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _8) -> [return: bb2, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:248:12: 248:24 (#0),
                    scope: scope[1],
                },
                kind: _5 = bytes_mut::BytesMut::kind(move _6) -> [return: bb3, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = Eq(move _5, const bytes_mut::KIND_VEC),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:248:12: 248:36 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _4) -> [0: bb16, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:251:27: 251:46 (#0),
                    scope: scope[1],
                },
                kind: _11 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _12) -> [return: bb5, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:251:27: 251:46 (#0),
                    scope: scope[1],
                },
                kind: _9 = bytes_mut::BytesMut::get_vec_pos(move _10) -> [return: bb6, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:252:39: 252:48 (#0),
                    scope: scope[2],
                },
                kind: _16 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _17) -> [return: bb7, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = ((*_16).0: core::ptr::NonNull<u8>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:252:39: 252:57 (#0),
                    scope: scope[2],
                },
                kind: _14 = core::ptr::NonNull::<u8>::as_ptr(move _15) -> [return: bb8, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:252:59: 252:68 (#0),
                    scope: scope[2],
                },
                kind: _19 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _20) -> [return: bb9, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = ((*_19).1: usize),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:252:70: 252:79 (#0),
                    scope: scope[2],
                },
                kind: _22 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _23) -> [return: bb10, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _21 = ((*_22).2: usize),
            StorageLive(_24),
            _24 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:252:27: 252:85 (#0),
                    scope: scope[2],
                },
                kind: _13 = bytes_mut::rebuild_vec(move _14, move _18, move _21, move _24) -> [return: bb11, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_16),
            StorageLive(_25),
            StorageLive(_26),
            _26 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:253:36: 253:46 (#0),
                    scope: scope[3],
                },
                kind: _25 = <alloc::vec::Vec<u8> as core::convert::Into<bytes::Bytes>>::into(move _26) -> [return: bb12, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            FakeRead(ForLet(None), _25),
            AscribeUserType(_25, o, UserTypeProjection { base: UserType(2), projs: [] }),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut _25,
            StorageLive(_29),
            _29 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:254:17: 254:31 (#0),
                    scope: scope[4],
                },
                kind: _27 = <bytes::Bytes as buf::buf_impl::Buf>::advance(move _28, move _29) -> [return: bb13, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            _0 = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:256:13: 256:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb14, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:256:13: 256:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb15, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_30),
            StorageLive(_31),
            _31 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#215),
                    scope: scope[1],
                },
                kind: switchInt(move _31) -> [0: bb22, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:258:30: 258:42 (#0),
                    scope: scope[1],
                },
                kind: _37 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _38) -> [return: bb18, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = &(*_37),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:258:30: 258:42 (#0),
                    scope: scope[1],
                },
                kind: _35 = bytes_mut::BytesMut::kind(move _36) -> [return: bb19, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            _34 = &_35,
            StorageLive(_39),
            StorageLive(_40),
            _40 = const bytes_mut::KIND_ARC,
            _39 = &_40,
            _33 = (move _34, move _39),
            StorageDead(_39),
            StorageDead(_34),
            PlaceMention(_33),
            StorageLive(_41),
            _41 = (_33.0: &usize),
            StorageLive(_42),
            _42 = (_33.1: &usize),
            StorageLive(_43),
            StorageLive(_44),
            _44 = (*_41),
            StorageLive(_45),
            _45 = (*_42),
            _43 = Eq(move _44, move _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#216),
                    scope: scope[5],
                },
                kind: switchInt(move _43) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            _32 = const (),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#214),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageLive(_47),
            _47 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = move _47,
            StorageLive(_50),
            StorageLive(_51),
            _51 = &(*_41),
            _50 = &(*_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_42),
            _52 = &(*_53),
            StorageLive(_54),
            _54 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#216),
                    scope: scope[6],
                },
                kind: _48 = core::panicking::assert_failed::<usize, usize>(move _49, move _50, move _52, move _54) -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#214),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:260:23: 260:32 (#0),
                    scope: scope[1],
                },
                kind: _57 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _58) -> [return: bb24, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            _56 = ((*_57).0: core::ptr::NonNull<u8>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:260:23: 260:41 (#0),
                    scope: scope[1],
                },
                kind: _55 = core::ptr::NonNull::<u8>::as_ptr(move _56) -> [return: bb25, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageDead(_57),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:261:23: 261:32 (#0),
                    scope: scope[7],
                },
                kind: _60 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _61) -> [return: bb26, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            _59 = ((*_60).1: usize),
            FakeRead(ForLet(None), _59),
            StorageDead(_60),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:262:39: 262:49 (#0),
                    scope: scope[8],
                },
                kind: _65 = <core::mem::ManuallyDrop<bytes_mut::BytesMut> as core::ops::Deref>::deref(move _66) -> [return: bb27, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            _64 = ((*_65).3: *mut bytes_mut::Shared),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:262:39: 262:56 (#0),
                    scope: scope[8],
                },
                kind: _63 = core::ptr::mut_ptr::<impl *mut bytes_mut::Shared>::cast::<()>(move _64) -> [return: bb28, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:262:24: 262:57 (#0),
                    scope: scope[8],
                },
                kind: _62 = core::sync::atomic::AtomicPtr::<()>::new(move _63) -> [return: bb29, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            FakeRead(ForLet(None), _62),
            StorageDead(_65),
            StorageLive(_67),
            StorageLive(_68),
            _68 = _55,
            _67 = move _68 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_68),
            StorageLive(_69),
            _69 = _59,
            StorageLive(_70),
            _70 = move _62,
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = const {alloc313: &bytes::Vtable},
            _72 = &(*_73),
            _71 = &(*_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                    scope: scope[9],
                },
                kind: _0 = bytes::Bytes::with_vtable(move _67, move _69, move _70, move _71) -> [return: bb30, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_67),
            StorageDead(_62),
            StorageDead(_59),
            StorageDead(_55),
            StorageDead(_73),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb32, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:265:6: 265:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:256:13: 256:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:253:45: 253:46 (#0),
                    scope: scope[3],
                },
                kind: drop(_26) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:256:13: 256:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:247:43: 247:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:246:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:246:28: 246:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:246:19: 246:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:247:21: 247:44 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:247:13: 247:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:247:13: 247:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:247:39: 247:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:248:12: 248:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:248:12: 248:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:248:12: 248:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:248:12: 248:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:248:9: 264:10 (#0),
                },
            ),
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:248:12: 248:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:251:27: 251:46 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:251:21: 251:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:251:21: 251:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:251:27: 251:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:251:27: 251:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:251:27: 251:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:252:27: 252:85 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:252:21: 252:24 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:21: 252:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:39: 252:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ptr::NonNull<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:39: 252:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:39: 252:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:39: 252:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:59: 252:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:59: 252:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:59: 252:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:70: 252:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:70: 252:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:70: 252:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:252:81: 252:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:253:36: 253:46 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:253:21: 253:26 (#0),
                    },
                ),
            ),
        ),
        ty: bytes::Bytes,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(1),
                            projs: [],
                        },
                        src/bytes_mut.rs:253:28: 253:33 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/bytes_mut.rs:253:21: 253:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:253:36: 253:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:254:17: 254:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bytes::Bytes,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:254:17: 254:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:254:27: 254:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#214),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:258:30: 258:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:258:30: 258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:258:30: 258:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:258:30: 258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:720 ~ bytes[5d47]::bytes_mut::KIND_ARC),
            },
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:258:44: 258:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#216),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#216),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#216),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#216),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#216),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#216),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#216),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#216),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#216),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#216),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#216),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#216),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#216),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:260:23: 260:41 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:260:17: 260:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:260:17: 260:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ptr::NonNull<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:260:23: 260:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:260:23: 260:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:260:23: 260:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:261:23: 261:32 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:261:17: 261:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:261:17: 261:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:261:23: 261:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:261:23: 261:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:262:24: 262:57 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:262:17: 262:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:262:17: 262:21 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:262:39: 262:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut bytes_mut::Shared,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:262:39: 262:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:262:39: 262:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<bytes_mut::BytesMut>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:262:39: 262:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:41: 263:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:41: 263:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:46: 263:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::AtomicPtr<()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:51: 263:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:57: 263:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:263:22: 263:72 (#0),
                },
            ),
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:57: 263:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:907 ~ bytes[5d47]::bytes_mut::SHARED_VTABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} bytes::Vtable,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:263:58: 263:71 (#0),
            scope: scope[0],
        },
    },
]