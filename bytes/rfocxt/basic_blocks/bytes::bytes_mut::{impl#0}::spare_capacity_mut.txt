[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = ((*_1).0: core::ptr::NonNull<u8>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1115:23: 1115:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::ptr::NonNull::<u8>::as_ptr(move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = ((*_1).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1115:23: 1115:54 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::ptr::mut_ptr::<impl *mut u8>::add(move _5, move _7) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = ((*_1).2: usize),
            StorageLive(_10),
            _10 = ((*_1).1: usize),
            _11 = SubWithOverflow(_9, _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1116:23: 1116:42 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, move _10) -> [success: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_11.0: usize),
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1118:39: 1118:49 (#0),
                    scope: scope[2],
                },
                kind: _13 = core::ptr::mut_ptr::<impl *mut u8>::cast::<core::mem::MaybeUninit<u8>>(move _14) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
                    scope: scope[2],
                },
                kind: _12 = core::slice::from_raw_parts_mut::<'_, core::mem::MaybeUninit<u8>>(move _13, move _15) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_12),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_4),
            _2 = &mut (*_3),
            _0 = &mut (*_2),
            StorageDead(_12),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1120:6: 1120:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/bytes_mut.rs:1113:5: 1120:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::mem::MaybeUninit<u8>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1113:45: 1113:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut bytes_mut::BytesMut,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1113:31: 1113:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::mem::MaybeUninit<u8>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1114:9: 1119:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1114:9: 1119:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::mem::MaybeUninit<u8>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1115:23: 1115:54 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1115:17: 1115:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1115:17: 1115:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1115:23: 1115:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ptr::NonNull<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1115:23: 1115:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1115:45: 1115:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/bytes_mut.rs:1116:23: 1116:42 (#0),
                            ),
                        ),
                        pat_span: src/bytes_mut.rs:1116:17: 1116:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1116:17: 1116:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1116:23: 1116:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1116:34: 1116:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1116:23: 1116:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::mem::MaybeUninit<u8>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
                },
            ),
        ),
        ty: *mut core::mem::MaybeUninit<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1118:39: 1118:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1118:39: 1118:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/bytes_mut.rs:1118:13: 1118:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/bytes_mut.rs:1118:51: 1118:54 (#0),
            scope: scope[0],
        },
    },
]