{
  "name": "bytes::bytes::shared_to_vec",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:1422:1:1424:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "data: valid AtomicPtr pointing to a Shared structure; ptr: valid non-null pointer to u8 data; len: non-negative value indicating the number of bytes to copy, with an upper limit defined by the capacity of the Shared structure.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "        cap: 10,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "",
                "    let data = AtomicPtr::new(shared);",
                "    ",
                "    let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "}"
              ],
              "oracle": [
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(1), }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert_eq!(result.len(), 10);",
                "    assert_eq!(unsafe { *result.get_unchecked(0) }, 0);",
                "    assert_eq!(unsafe { *result.get_unchecked(9) }, 0);",
                "    assert!(data.load(Ordering::Relaxed).is_null());",
                "    let shared_after = data.load(Ordering::Relaxed);",
                "    assert_eq!(shared_after, ptr);",
                "    let cap = unsafe { (*shared_after.cast::<Shared>()).cap };",
                "    assert_eq!(cap, 10);"
              ],
              "code": [
                "{",
                "   let shared = Box::into_raw(Box::new(Shared {",
                "       buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "       cap: 10,",
                "       ref_cnt: AtomicUsize::new(1),",
                "   }));",
                "   ",
                "   let ptr: *const u8 = shared as *const Shared as *const u8;",
                "   let len = 10;",
                "",
                "   let data = AtomicPtr::new(shared as *mut Shared as *mut ());",
                "   ",
                "   let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "   let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(1), }));",
                "   let ptr: *const u8 = shared as *const Shared as *const u8;",
                "   let len = 10;",
                "   let data = AtomicPtr::new(shared as *mut Shared as *mut ());",
                "   let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "   assert_eq!(result.len(), 10);",
                "   assert_eq!(unsafe { *result.get_unchecked(0) }, 0);",
                "   assert_eq!(unsafe { *result.get_unchecked(9) }, 0);",
                "   assert!(data.load(Ordering::Relaxed).is_null());",
                "  let shared_after = data.load(Ordering::Relaxed);",
                "  assert_eq!(shared_after as *const u8, ptr);",
                "   let cap = unsafe { (*shared_after.cast::<Shared>()).cap };",
                "   assert_eq!(cap, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "        cap: 10,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 0;",
                "",
                "    let data = AtomicPtr::new(shared);",
                "",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert!(result.is_empty());",
                "}"
              ],
              "oracle": [
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(1), }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.as_slice(), &[0u8; 10]);",
                "    let shared_non_unique = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([1u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(2), }));",
                "    let ptr_non_unique: *const u8 = shared_non_unique as *const Shared as *const u8;",
                "    let result_non_unique = unsafe { shared_to_vec(&data, ptr_non_unique, len) };",
                "    assert_eq!(result_non_unique.len(), len);",
                "    assert_eq!(result_non_unique.as_slice(), &[1u8; 10]);",
                "    let shared_zero_len = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([])) as *mut u8, cap: 0, ref_cnt: AtomicUsize::new(1), }));",
                "    let ptr_zero_len: *const u8 = shared_zero_len as *const Shared as *const u8;",
                "    let result_zero_len = unsafe { shared_to_vec(&data, ptr_zero_len, 0) };",
                "    assert!(result_zero_len.is_empty());"
              ],
              "code": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "        cap: 10,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 0;",
                "",
                "    let data = AtomicPtr::new(shared);",
                "",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert!(result.is_empty());",
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(1), }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.as_slice(), &[0u8; 10]);",
                "    let shared_non_unique = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([1u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(2), }));",
                "    let ptr_non_unique: *const u8 = shared_non_unique as *const Shared as *const u8;",
                "    let result_non_unique = unsafe { shared_to_vec(&data, ptr_non_unique, len) };",
                "    assert_eq!(result_non_unique.len(), len);",
                "    assert_eq!(result_non_unique.as_slice(), &[1u8; 10]);",
                "    let shared_zero_len = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([])) as *mut u8, cap: 0, ref_cnt: AtomicUsize::new(1), }));",
                "    let ptr_zero_len: *const u8 = shared_zero_len as *const Shared as *const u8;",
                "    let result_zero_len = unsafe { shared_to_vec(&data, ptr_zero_len, 0) };",
                "    assert!(result_zero_len.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 5])) as *mut u8,",
                "        cap: 5,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "",
                "    let data = AtomicPtr::new(shared);",
                "",
                "    let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "}"
              ],
              "oracle": [
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 5])) as *mut u8, cap: 5, ref_cnt: AtomicUsize::new(1) }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let _result = unsafe { shared_to_vec(&data, ptr, len) };"
              ],
              "code": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 5])) as *mut u8,",
                "        cap: 5,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "",
                "   let data = AtomicPtr::new(shared as *mut Shared as *mut ());",
                "   ",
                "   let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 5])) as *mut u8, cap: 5, ref_cnt: AtomicUsize::new(1) }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "        cap: 10,",
                "        ref_cnt: AtomicUsize::new(2),",
                "    }));",
                "    ",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "",
                "    let data = AtomicPtr::new(shared);",
                "",
                "    let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "}"
              ],
              "oracle": [
                "    let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(2), }));",
                "    let ptr: *const u8 = shared as *const Shared as *const u8;",
                "    let len = 10;",
                "    let data = AtomicPtr::new(shared);",
                "    let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.capacity(), 10);",
                "    assert_eq!(result.as_slice(), &[0u8; 10]);"
              ],
              "code": [
                "{",
                "   let shared = Box::into_raw(Box::new(Shared {",
                "       buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8,",
                "       cap: 10,",
                "       ref_cnt: AtomicUsize::new(2),",
                "   }));",
                "   ",
                "   let ptr: *const u8 = shared as *const Shared as *const u8;",
                "   let len = 10;",
                "",
                "   let data = AtomicPtr::new(shared.cast::<()>()); // Corrected here",
                "",
                "   let _result = unsafe { shared_to_vec(&data, ptr, len) };",
                "   let shared = Box::into_raw(Box::new(Shared { buf: Box::into_raw(Box::new([0u8; 10])) as *mut u8, cap: 10, ref_cnt: AtomicUsize::new(2), }));",
                "   let ptr: *const u8 = shared as *const Shared as *const u8;",
                "   let len = 10;",
                "   let data = AtomicPtr::new(shared.cast::<>()); // Corrected here",
                "   let result = unsafe { shared_to_vec(&data, ptr, len) };",
                "   assert_eq!(result.len(), len);",
                "   assert_eq!(result.capacity(), 10);",
                "   assert_eq!(result.as_slice(), &[0u8; 10]);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}