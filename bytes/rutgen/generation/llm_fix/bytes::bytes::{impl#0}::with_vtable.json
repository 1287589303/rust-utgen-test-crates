{
  "name": "bytes::bytes::{impl#0}::with_vtable",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:650:5:662:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Bytes {\n            ptr,\n            len,\n            data,\n            vtable,\n        }\n"
      ],
      "input_infer": "ptr: non-null *const u8, len: usize >= 0, data: AtomicPtr<()>, vtable: &'static Vtable where 'static Vtable must be one of OWNED_VTABLE, PROMOTABLE_EVEN_VTABLE, PROMOTABLE_ODD_VTABLE, SHARED_VTABLE, STATIC_VTABLE\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Hello, world!\" as *const u8;",
                "    let len = 13;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &STATIC_VTABLE) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::Relaxed), std::ptr::null_mut());",
                "    assert_eq!(result.vtable, &STATIC_VTABLE);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Hello, world!\" as *const u8;",
                "    let len = 13;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &STATIC_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::Relaxed), std::ptr::null_mut());",
                "    assert_eq!(result.vtable, &STATIC_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Owned Data\" as *const u8;",
                "    let len = 10;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &OWNED_VTABLE) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), std::ptr::null_mut());",
                "    assert_eq!(result.vtable, &OWNED_VTABLE);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Owned Data\" as *const u8;",
                "    let len = 10;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &OWNED_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), std::ptr::null_mut());",
                "    assert_eq!(result.vtable, &OWNED_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Even\" as *const u8;",
                "    let len = 15;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_EVEN_VTABLE) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::Relaxed), data.load(Ordering::Relaxed));",
                "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Even\" as *const u8;",
                "    let len = 15;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_EVEN_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::Relaxed), data.load(Ordering::Relaxed));",
                "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Odd!\" as *const u8;",
                "    let len = 16;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
                "}"
              ],
              "oracle": [
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Odd!\" as *const u8;",
                "    let len = 16;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), data.load(Ordering::SeqCst));",
                "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Odd!\" as *const u8;",
                "    let len = 16;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Promotable Odd!\" as *const u8;",
                "    let len = 16;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), data.load(Ordering::SeqCst));",
                "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Shared Data!\" as *const u8;",
                "    let len = 12;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
                "}"
              ],
              "oracle": [
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Shared Data!\" as *const u8;",
                "    let len = 12;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert!(result.data.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Shared Data!\" as *const u8;",
                "    let len = 12;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
                "    let data = AtomicPtr::new(std::ptr::null_mut());",
                "    let bytes = b\"Shared Data!\" as *const u8;",
                "    let len = 12;",
                "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
                "    assert_eq!(result.ptr, bytes);",
                "    assert_eq!(result.len, len);",
                "    assert!(result.data.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}