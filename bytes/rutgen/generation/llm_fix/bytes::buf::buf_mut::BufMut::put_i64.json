{
  "name": "bytes::buf::buf_mut::BufMut::put_i64",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:743:5:745:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.remaining_mut() must be at least 8; n must be a valid signed 64-bit integer value (i64); edge case with n as i64::MIN (-2^63) and i64::MAX (2^63 - 1); self must be mutable and initialized with sufficient capacity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        pos: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                buf: vec![0; capacity],",
                "                pos: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    buf.put_i64(0x0102030405060708);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.buf, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_eq!(buf.pos, 8);",
                "    let mut buf2 = TestBuf::new(7);",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf2.put_i64(0x0102030405060708);",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "   fn test_put_i64_00()",
                "   {",
                "       struct TestBuf {",
                "           buf: Vec<u8>,",
                "           pos: usize,",
                "       }",
                "       ",
                "       impl TestBuf {",
                "           fn new(capacity: usize) -> Self {",
                "               TestBuf {",
                "                   buf: vec![0; capacity],",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    buf.put_i64(0x0102030405060708);",
                "    assert_eq!(buf.buf, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_eq!(buf.pos, 8);",
                "    let mut buf2 = TestBuf::new(7);",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf2.put_i64(0x0102030405060708);",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        pos: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                buf: vec![0; capacity],",
                "                pos: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    buf.put_i64(i64::MIN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.buf, vec![0; 8]);",
                "    buf.put_i64(0x0102030405060708);",
                "    assert_eq!(buf.buf, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
                "    buf.put_i64(i64::MAX);",
                "    assert!(std::panic::catch_unwind(|| buf.put_i64(0x0102030405060708)).is_err());",
                "    buf.put_slice(&[0; 8]);",
                "    assert_eq!(buf.pos, 8);",
                "    buf.put_slice(&[1, 2, 3, 4, 5, 6, 7, 8]);"
              ],
              "code": [
                "   fn test_put_i64_01()  ",
                "   {  ",
                "       struct TestBuf {  ",
                "           buf: Vec<u8>,  ",
                "           pos: usize,  ",
                "       }  ",
                " ",
                "       impl TestBuf {  ",
                "           fn new(capacity: usize) -> Self {  ",
                "               TestBuf {  ",
                "                   buf: vec![0; capacity],  ",
                "                   pos: 0,  ",
                "               }  ",
                "           }  ",
                " ",
                "           fn remaining_mut(&self) -> usize {  ",
                "               self.buf.len() - self.pos  ",
                "           }  ",
                " ",
                "           unsafe fn advance_mut(&mut self, cnt: usize) {  ",
                "               self.pos += cnt;  ",
                "           }  ",
                " ",
                "           fn put_slice(&mut self, src: &[u8]) {  ",
                "               assert!(self.remaining_mut() >= src.len());  ",
                "               let dst = &mut self.buf[self.pos..self.pos + src.len()];  ",
                "               dst.copy_from_slice(src);  ",
                "               unsafe { self.advance_mut(src.len()) };  ",
                "           }  ",
                "       }  ",
                " ",
                "       let mut buf = TestBuf::new(8);  ",
                "       buf.put_i64(i64::MIN);  ",
                "       assert_eq!(buf.buf, vec![0; 8]);  ",
                "       buf.put_i64(0x0102030405060708);  ",
                "    buf.put_i64(i64::MAX);",
                "    assert!(std::panic::catch_unwind(|| buf.put_i64(0x0102030405060708)).is_err());",
                "    buf.put_slice(&[0; 8]);",
                "    assert_eq!(buf.pos, 8);",
                "    buf.put_slice(&[1, 2, 3, 4, 5, 6, 7, 8]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        pos: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                buf: vec![0; capacity],",
                "                pos: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    buf.put_i64(i64::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.buf, vec![0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);",
                "    assert!(buf.remaining_mut() == 0);",
                "    assert!(panic::catch_unwind(|| buf.put_i64(1)).is_err());",
                "    buf.pos = 0; // Reset position for further tests",
                "    buf.put_i64(i64::MIN);",
                "    assert_eq!(buf.buf, vec![0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);",
                "    assert!(panic::catch_unwind(|| buf.put_i64(1)).is_err());"
              ],
              "code": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        pos: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                buf: vec![0; capacity],",
                "                pos: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(7);",
                "    buf.put_i64(0x0102030405060708);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    let result = std::panic::catch_unwind(|| buf.put_i64(0x0102030405060708));",
                "    assert!(result.is_err());",
                "    buf.advance_mut(7);",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    buf.put_slice(&[0; 8]);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        pos: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                buf: vec![0; capacity],",
                "                pos: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.buf.len() - self.pos",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.pos += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            assert!(self.remaining_mut() >= src.len());",
                "            let dst = &mut self.buf[self.pos..self.pos + src.len()];",
                "            dst.copy_from_slice(src);",
                "            unsafe { self.advance_mut(src.len()) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(7);",
                "    buf.put_i64(0x0102030405060708);",
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    let result = std::panic::catch_unwind(|| buf.put_i64(0x0102030405060708));",
                "    assert!(result.is_err());",
                "    buf.advance_mut(7);",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    buf.put_slice(&[0; 8]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}