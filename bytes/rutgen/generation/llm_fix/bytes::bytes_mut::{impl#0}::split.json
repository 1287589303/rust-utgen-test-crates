{
  "name": "bytes::bytes_mut::{impl#0}::split",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:363:5:366:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "BytesMut instances with various lengths (0, 1, 1024), ensure preconditions cover empty, single byte, and large capacity cases; additionally, verify returned BytesMut content matches original before split and assert capacities after split.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::new();",
                "    let other = buf.split();",
                "}"
              ],
              "oracle": [
                "    assert!(buf.is_empty());",
                "    assert_eq!(0, buf.len());",
                "    assert_eq!(0, buf.capacity());",
                "    assert_eq!(other.len(), 0);",
                "    assert_eq!(other.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::new();",
                "    let other = buf.split();",
                "    assert!(buf.is_empty());",
                "    assert_eq!(0, buf.len());",
                "    assert_eq!(0, buf.capacity());",
                "    assert_eq!(other.len(), 0);",
                "    assert_eq!(other.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(1);",
                "    buf.resize(1, 0u8);",
                "    let other = buf.split();",
                "}"
              ],
              "oracle": [
                "    assert!(buf.is_empty());",
                "    assert_eq!(1, buf.capacity());",
                "    assert_eq!(other.len(), 1);",
                "    assert_eq!(other.as_slice()[0], 0u8);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(1);",
                "    buf.resize(1, 0u8);",
                "    let other = buf.split();",
                "    assert!(buf.is_empty());",
                "    assert_eq!(1, buf.capacity());",
                "    assert_eq!(other.len(), 1);",
                "    assert_eq!(other.as_slice()[0], 0u8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(1024);",
                "    let data = b\"hello world\";",
                "    buf.extend_from_slice(data);",
                "    let other = buf.split();",
                "}"
              ],
              "oracle": [
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.capacity(), 1024 - data.len());",
                "    assert_eq!(other.as_slice(), data);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(1024);",
                "    let data = b\"hello world\";",
                "    buf.extend_from_slice(data);",
                "    let other = buf.split();",
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.capacity(), 1024 - data.len());",
                "    assert_eq!(other.as_slice(), data);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}