{
  "name": "bytes::bytes_mut::{impl#22}::into_iter",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1364:5:1366:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: BytesMut with non-null pointer (ptr not null), length (len) > 0, capacity (cap) >= len, and valid memory allocation for data.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([1u8, 2, 3, 4, 5]))).unwrap(),",
                "        len: 5,",
                "        cap: 5,",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.len(), 5);",
                "    assert_eq!(*_iter.next().unwrap(), 1);",
                "    assert_eq!(*_iter.next().unwrap(), 2);",
                "    assert_eq!(*_iter.next().unwrap(), 3);",
                "    assert_eq!(*_iter.next().unwrap(), 4);",
                "    assert_eq!(*_iter.next().unwrap(), 5);",
                "    assert!(_iter.next().is_none());"
              ],
              "code": [
                "{",
                "  let bytes: BytesMut = BytesMut {  ",
                "      ptr: NonNull::new(Box::into_raw(Box::new([1u8, 2, 3, 4, 5])) as *mut [u8; 5] as *mut u8).unwrap(),  ",
                "      len: 5,  ",
                "      cap: 5,  ",
                "      data: core::ptr::null_mut(),  ",
                "  };  ",
                "   let mut _iter = bytes.into_iter();",
                "   assert_eq!(_iter.len(), 5);",
                "   assert_eq!(_iter.next().unwrap(), 1);",
                "   assert_eq!(_iter.next().unwrap(), 2);",
                "   assert_eq!(_iter.next().unwrap(), 3);",
                "   assert_eq!(_iter.next().unwrap(), 4);",
                "   assert_eq!(_iter.next().unwrap(), 5);",
                "   assert!(_iter.next().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([1u8, 2, 3, 4, 5, 0, 0]))).unwrap(),",
                "        len: 5,",
                "        cap: 7,",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.len(), 5);",
                "    assert_eq!(_iter.next(), Some(&1));",
                "    assert_eq!(_iter.next(), Some(&2));",
                "    assert_eq!(_iter.next(), Some(&3));",
                "    assert_eq!(_iter.next(), Some(&4));",
                "    assert_eq!(_iter.next(), Some(&5));",
                "    assert_eq!(_iter.next(), None);"
              ],
              "code": [
                "{",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([1u8, 2, 3, 4, 5, 0, 0]))).unwrap(),",
                "        len: 5,",
                "        cap: 7,",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "    assert_eq!(_iter.len(), 5);",
                "   assert_eq!(_iter.next(), Some(1));",
                "   assert_eq!(_iter.next(), Some(2));",
                "   assert_eq!(_iter.next(), Some(3));",
                "   assert_eq!(_iter.next(), Some(4));",
                "   assert_eq!(_iter.next(), Some(5));",
                "    assert_eq!(_iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([10u8, 20, 30]))).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.len(), 3);",
                "    assert_eq!(_iter.next(), Some(&10));",
                "    assert_eq!(_iter.next(), Some(&20));",
                "    assert_eq!(_iter.next(), Some(&30));",
                "    assert_eq!(_iter.next(), None);"
              ],
              "code": [
                "{",
                "   let bytes: BytesMut = BytesMut {",
                "       ptr: NonNull::new(Box::into_raw(Box::new([10u8, 20, 30]))).unwrap().cast::<u8>(),",
                "       len: 3,",
                "       cap: 3,",
                "       data: core::ptr::null_mut(),",
                "   };",
                "   let mut _iter = bytes.into_iter();",
                "   assert_eq!(_iter.len(), 3);",
                "   assert_eq!(_iter.next(), Some(10));",
                "   assert_eq!(_iter.next(), Some(20));",
                "   assert_eq!(_iter.next(), Some(30));",
                "   assert_eq!(_iter.next(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = (0..1024).map(|i| i as u8).collect::<Vec<u8>>();",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(data.as_ptr() as *mut u8).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "}"
              ],
              "oracle": [
                "    let data = (0..1024).map(|i| i as u8).collect::<Vec<u8>>();",
                "    let bytes: BytesMut = BytesMut { ptr: NonNull::new(data.as_ptr() as *mut u8).unwrap(), len: data.len(), cap: data.len(), data: core::ptr::null_mut(), };",
                "    let iter = bytes.into_iter();",
                "    assert_eq!(iter.len(), bytes.len());",
                "    for (i, item) in iter.enumerate() { assert_eq!(item, &data[i]); }",
                "    assert!(bytes.has_remaining());"
              ],
              "code": [
                "{",
                "    let data = (0..1024).map(|i| i as u8).collect::<Vec<u8>>();",
                "    let bytes: BytesMut = BytesMut {",
                "        ptr: NonNull::new(data.as_ptr() as *mut u8).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: core::ptr::null_mut(),",
                "    };",
                "    let _iter = bytes.into_iter();",
                "    let data = (0..1024).map(|i| i as u8).collect::<Vec<u8>>();",
                "    let bytes: BytesMut = BytesMut { ptr: NonNull::new(data.as_ptr() as *mut u8).unwrap(), len: data.len(), cap: data.len(), data: core::ptr::null_mut(), };",
                "    let iter = bytes.into_iter();",
                "    assert_eq!(iter.len(), bytes.len());",
                "    for (i, item) in iter.enumerate() { assert_eq!(item, &data[i]); }",
                "    assert!(bytes.has_remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}