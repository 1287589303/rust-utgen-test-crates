{
  "name": "bytes::buf::buf_mut::BufMut::writer",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1317:5:1322:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The test input conditions or ranges are: the initial buffer must be mutable and able to accommodate at least 11 bytes, and the input byte slice should be a valid reference to at least 11 bytes of data.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = vec![0; 11].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(num, 11);",
                "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);"
              ],
              "code": [
                "{",
                "    let mut buf = vec![0; 11].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "    assert_eq!(num, 11);",
                "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = vec![0; 20].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut buf = vec![0; 20].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "    assert_eq!(num, 11);",
                "    let buf_inner = buf.into_inner();",
                "    assert_eq!(*buf_inner, b\"hello world\"[..]);",
                "    assert_eq!(buf.remaining_mut(), 9);",
                "    assert!(buf.has_remaining_mut());",
                "    buf.advance_mut(num);",
                "    assert_eq!(buf.remaining_mut(), 9);"
              ],
              "code": [
                "{",
                "    let mut buf = vec![0; 20].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "    let mut buf = vec![0; 20].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "    assert_eq!(num, 11);",
                "    let buf_inner = buf.into_inner();",
                "    assert_eq!(*buf_inner, b\"hello world\"[..]);",
                "    assert_eq!(buf.remaining_mut(), 9);",
                "    assert!(buf.has_remaining_mut());",
                "    buf.advance_mut(num);",
                "    assert_eq!(buf.remaining_mut(), 9);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = vec![0; 11].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(num, 11);",
                "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);"
              ],
              "code": [
                "{",
                "    let mut buf = vec![0; 11].writer();",
                "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
                "    assert_eq!(num, 11);",
                "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = Vec::<u8>::new().writer();",
                "    buf.put_slice(&b\"hello world\"[..]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 11);",
                "    assert!(buf.has_remaining_mut());",
                "    buf.advance_mut(11);",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    assert!(!buf.has_remaining_mut());"
              ],
              "code": [
                "{",
                "   let mut buf = Vec::<u8>::new().writer();",
                "   buf.put_slice(&b\"hello world\"[..]);",
                "   assert_eq!(buf.get_mut().remaining_mut(), 11);",
                "   assert!(buf.get_mut().has_remaining_mut());",
                "   buf.get_mut().advance_mut(11);",
                "   assert_eq!(buf.get_mut().remaining_mut(), 0);",
                "   assert!(!buf.get_mut().has_remaining_mut());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}