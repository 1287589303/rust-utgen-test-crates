{
  "name": "bytes::buf::uninit_slice::{impl#0}::write_byte",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:107:5:111:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index < self.len() at line 108 is true\n"
      ],
      "input_infer": "index: 0 to len - 1, byte: 0 to 255, with len being a positive integer greater than 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(0, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[0], 1);",
                "    assert_eq!(data[1], 0);",
                "    assert_eq!(data[2], 0);",
                "    assert_eq!(slice.len(), 3);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(0, 1);",
                "    assert_eq!(data[0], 1);",
                "    assert_eq!(data[1], 0);",
                "    assert_eq!(data[2], 0);",
                "    assert_eq!(slice.len(), 3);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(1, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[1], 2);",
                "    assert_eq!(data[0], 0);",
                "    assert_eq!(data[2], 0);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(std::mem::maybe_uninit::MaybeUninit::uninit().assume_init().len() == 0);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(1, 2);",
                "    assert_eq!(data[1], 2);",
                "    assert_eq!(data[0], 0);",
                "    assert_eq!(data[2], 0);",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(std::mem::maybe_uninit::MaybeUninit::uninit().assume_init().len() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(2, 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[2], 3);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(2, 3);",
                "    assert_eq!(data[2], 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 5];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 5) };",
                "    slice.write_byte(4, 255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[4], 255);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 5];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 5) };",
                "    slice.write_byte(4, 255);",
                "    assert_eq!(data[4], 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index < self.len() at line 108 is false, with bound index == self.len()\n"
      ],
      "input_infer": "index == 0, index == self.len() (for edge case), byte in range 0..=255, len = 0 to len = N (N > 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    ",
                "    slice.write_byte(3, 255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(3, 255);",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    ",
                "    slice.write_byte(3, 255);",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.write_byte(3, 255);",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data: [MaybeUninit<u8>; 0] = [];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
                "    ",
                "    slice.write_byte(0, 255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let mut data: [MaybeUninit<u8>; 0] = [];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
                "    slice.write_byte(0, 255);",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "  let mut data: [MaybeUninit<u8>; 0] = [];",
                "  let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr() as *mut u8, 0) };",
                "  ",
                "  slice.write_byte(0, 255);",
                "  assert_eq!(std::panic::catch_unwind(|| {",
                "   let mut data: [MaybeUninit<u8>; 0] = [];",
                "   let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr() as *mut u8, 0) };",
                "   slice.write_byte(0, 255);",
                "   }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}