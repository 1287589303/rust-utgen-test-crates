{
  "name": "bytes::buf::buf_mut::BufMut::put_u128",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:816:5:818:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "remaining_mut is greater than or equal to 16 and n is a valid u128 value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "                data: vec![0; size],",
                "                position: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            &mut UninitSlice::from(&mut self.data[self.position..])",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!(\"Not enough remaining capacity\");",
                "            }",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(16);",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");",
                "    ",
                "    let mut buf = TestBuf::new(15);",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "    });",
                "    assert!(result.is_err());",
                "    ",
                "    let mut buf = TestBuf::new(16);",
                "    unsafe { buf.advance_mut(16) };",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "   struct TestBuf {",
                "       data: Vec<u8>,",
                "       position: usize,",
                "   }",
                "",
                "   impl TestBuf {",
                "       fn new(size: usize) -> Self {",
                "           Self {",
                "              data: std::vec![0; size],  ",
                "              position: 0,  ",
                "          }  ",
                "       }",
                "       ",
                "       fn remaining_mut(&self) -> usize {",
                "           self.data.len() - self.position",
                "       }",
                "       ",
                "       unsafe fn advance_mut(&mut self, cnt: usize) {",
                "           self.position += cnt;",
                "       }",
                "       ",
                "       fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "           UninitSlice::new(&mut self.data[self.position..])",
                "       }",
                "       ",
                "       fn put_slice(&mut self, src: &[u8]) {",
                "           if self.remaining_mut() < src.len() {",
                "               panic!(\"Not enough remaining capacity\");",
                "           }",
                "           let cnt = usize::min(src.len(), self.remaining_mut());",
                "           self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "           unsafe { self.advance_mut(cnt) };",
                "       }",
                "       ",
                "       fn put_u128(&mut self, value: u128) {",
                "           self.put_slice(&value.to_be_bytes());",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(16);",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "    assert_eq!(buf.data, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");",
                "    ",
                "   let mut buf = TestBuf::new(15);",
                "   let result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {",
                "       buf.put_u128(0x01020304050607080910111213141516);",
                "   }));",
                "   assert!(result.is_err());",
                "   ",
                "   let mut buf = TestBuf::new(16);",
                "   unsafe { buf.advance_mut(16) };",
                "   let result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {",
                "       buf.put_u128(0x01020304050607080910111213141516);",
                "   }));",
                "   assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "                data: vec![0; size],",
                "                position: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            &mut UninitSlice::from(&mut self.data[self.position..])",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!(\"Not enough remaining capacity\");",
                "            }",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(32);",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");",
                "    assert_eq!(buf.position, 16);",
                "    let mut buf_small = TestBuf::new(15);",
                "    let result = std::panic::catch_unwind(|| { buf_small.put_u128(0x01020304050607080910111213141516); });",
                "    assert!(result.is_err());",
                "    let mut buf_exact = TestBuf::new(16);",
                "    buf_exact.put_u128(0x01020304050607080910111213141516);",
                "    assert_eq!(buf_exact.data, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");",
                "    assert_eq!(buf_exact.position, 16);",
                "    let mut buf_zero = TestBuf::new(0);",
                "    let result_zero = std::panic::catch_unwind(|| { buf_zero.put_u128(0x01020304050607080910111213141516); });",
                "    assert!(result_zero.is_err());"
              ],
              "code": [
                "   {",
                "      struct TestBuf {",
                "          data: Vec<u8>,",
                "          position: usize,",
                "      }",
                "",
                "      impl TestBuf {",
                "          fn new(size: usize) -> Self {",
                "              Self {",
                "                  data: std::vec![0; size],",
                "                  position: 0,",
                "              }",
                "       }",
                "",
                "       fn remaining_mut(&self) -> usize {",
                "           self.data.len() - self.position",
                "       }",
                "",
                "       unsafe fn advance_mut(&mut self, cnt: usize) {",
                "           self.position += cnt;",
                "       }",
                "",
                "       fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "           UninitSlice::new(&mut self.data[self.position..])",
                "       }",
                "",
                "       fn put_slice(&mut self, src: &[u8]) {",
                "           if self.remaining_mut() < src.len() {",
                "               panic!(\"Not enough remaining capacity\");",
                "           }",
                "           let cnt = usize::min(src.len(), self.remaining_mut());",
                "           self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "           unsafe { self.advance_mut(cnt) };",
                "       }",
                "       ",
                "       fn put_u128(&mut self, value: u128) {",
                "           let bytes: [u8; 16] = value.to_le_bytes();",
                "           self.put_slice(&bytes);",
                "       }",
                "   }",
                "",
                "   let mut buf = TestBuf::new(32);",
                "   buf.put_u128(0x01020304050607080910111213141516);",
                "   assert_eq!(buf.data, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");",
                "   assert_eq!(buf.position, 16);",
                "  let mut buf_small = TestBuf::new(15);  ",
                "  let result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| { buf_small.put_u128(0x01020304050607080910111213141516); }));  ",
                "  assert!(result.is_err());  ",
                "   let mut buf_exact = TestBuf::new(16);",
                "   buf_exact.put_u128(0x01020304050607080910111213141516);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "                data: vec![0; size],",
                "                position: 0,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            &mut UninitSlice::from(&mut self.data[self.position..])",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!(\"Not enough remaining capacity\");",
                "            }",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(15);",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 15);",
                "    assert_eq!(buf.data, vec![0; 15]);",
                "    #[should_panic]",
                "    let result = panic::catch_unwind(|| buf.put_u128(0x01020304050607080910111213141516));",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "               data: std::vec![0; size], // Use std::vec directly",
                "               position: 0,",
                "           }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "       fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "           UninitSlice::new(&mut self.data[self.position..])",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!(\"Not enough remaining capacity\");",
                "            }",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.chunk_mut()[..cnt].copy_from_slice(&src[..cnt]);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(15);",
                "    buf.put_u128(0x01020304050607080910111213141516);",
                "    assert_eq!(buf.remaining_mut(), 15);",
                "    assert_eq!(buf.data, vec![0; 15]);",
                "    #[should_panic]",
                "    let result = panic::catch_unwind(|| buf.put_u128(0x01020304050607080910111213141516));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}