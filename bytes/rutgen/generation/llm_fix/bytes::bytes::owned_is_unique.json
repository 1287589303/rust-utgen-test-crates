{
  "name": "bytes::bytes::owned_is_unique",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:1155:1:1157:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: false\n"
      ],
      "input_infer": "_data: &AtomicPtr<()> with any valid pointer value (null or non-null)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let null_ptr: AtomicPtr<()> = AtomicPtr::new(std::ptr::null_mut());",
                "    unsafe {",
                "        owned_is_unique(&null_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unsafe { owned_is_unique(&null_ptr) }, false);"
              ],
              "code": [
                "{",
                "    let null_ptr: AtomicPtr<()> = AtomicPtr::new(std::ptr::null_mut());",
                "    unsafe {",
                "        owned_is_unique(&null_ptr);",
                "    }",
                "    assert_eq!(unsafe { owned_is_unique(&null_ptr) }, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Box::new(42);",
                "    let non_null_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
                "    unsafe {",
                "        owned_is_unique(&non_null_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unsafe { owned_is_unique(&non_null_ptr) }, false);"
              ],
              "code": [
                "{",
                "    let value = Box::new(42);",
                "    let non_null_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
                "    unsafe {",
                "        owned_is_unique(&non_null_ptr);",
                "    }",
                "    assert_eq!(unsafe { owned_is_unique(&non_null_ptr) }, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Box::new(100);",
                "    let ownership_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
                "    unsafe {",
                "        owned_is_unique(&ownership_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unsafe { owned_is_unique(&ownership_ptr) }, false);"
              ],
              "code": [
                "{",
                "    let value = Box::new(100);",
                "    let ownership_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
                "    unsafe {",
                "        owned_is_unique(&ownership_ptr);",
                "    }",
                "    assert_eq!(unsafe { owned_is_unique(&ownership_ptr) }, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}