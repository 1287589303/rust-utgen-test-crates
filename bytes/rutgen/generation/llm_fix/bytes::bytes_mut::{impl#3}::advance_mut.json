{
  "name": "bytes::bytes_mut::{impl#3}::advance_mut",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1178:5:1188:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: cnt > remaining at line 1180 is true\n"
      ],
      "input_infer": "cnt = remaining + 1 to ensure the condition at line 1180 is true, with remaining values ranging from 0 to self.cap.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.advance_mut(bytes_mut.capacity() + 1); // cnt > remaining",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    unsafe { bytes_mut.advance_mut(bytes_mut.capacity() + 1); }",
                "    }).is_err());",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.advance_mut(bytes_mut.capacity() + 1); // cnt > remaining",
                "    }",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    unsafe { bytes_mut.advance_mut(bytes_mut.capacity() + 1); }",
                "    }).is_err());",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    bytes_mut.resize(5, 0); // Fill to capacity",
                "    unsafe {",
                "        bytes_mut.advance_mut(6); // cnt > remaining",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    bytes_mut.resize(5, 0);",
                "    unsafe {",
                "    bytes_mut.advance_mut(6);",
                "    }",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    bytes_mut.resize(5, 0); // Fill to capacity",
                "    unsafe {",
                "        bytes_mut.advance_mut(6); // cnt > remaining",
                "    }",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    bytes_mut.resize(5, 0);",
                "    unsafe {",
                "    bytes_mut.advance_mut(6);",
                "    }",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: cnt > remaining at line 1180 is false, with bound cnt == remaining\n"
      ],
      "input_infer": "cnt >= 0 and cnt <= self.cap - self.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.set_len(10);",
                "        bytes_mut.advance_mut(0);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(bytes_mut.len() == 10);",
                "    assert!(bytes_mut.remaining_mut() == 0);",
                "    assert!(bytes_mut.cap == 10);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.set_len(10);",
                "        bytes_mut.advance_mut(0);",
                "    }",
                "    assert!(bytes_mut.len() == 10);",
                "    assert!(bytes_mut.remaining_mut() == 0);",
                "    assert!(bytes_mut.cap == 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(20);",
                "    unsafe {",
                "        bytes_mut.set_len(10);",
                "        bytes_mut.advance_mut(10);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 20);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 20);",
                "    assert!(unsafe { bytes_mut.as_slice_mut() }.len() >= 10);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(20);",
                "    unsafe {",
                "        bytes_mut.set_len(10);",
                "        bytes_mut.advance_mut(10);",
                "    }",
                "    assert_eq!(bytes_mut.len(), 20);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 20);",
                "    assert!(unsafe { bytes_mut.as_slice_mut() }.len() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(15);",
                "    unsafe {",
                "        bytes_mut.set_len(5);",
                "        bytes_mut.advance_mut(10);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 15);",
                "    assert!(bytes_mut.cap() >= 15);",
                "    assert!(bytes_mut.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(15);",
                "    unsafe {",
                "        bytes_mut.set_len(5);",
                "        bytes_mut.advance_mut(10);",
                "    }",
                "    assert_eq!(bytes_mut.len(), 15);",
                "    assert!(bytes_mut.cap() >= 15);",
                "    assert!(bytes_mut.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}