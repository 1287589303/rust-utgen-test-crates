{
  "name": "bytes::buf::buf_impl::Buf::get_i128_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:832:5:834:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Buffer length must be at least 16 bytes, and the values must be within the range of a signed 128-bit integer (-2^127 to 2^127-1), including boundary values and varying byte orders.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x01020304050607080910111213141516);",
                "    assert_panics!(buf.get_i128_le());",
                "    buf.advance(16);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(1);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buffer.is_empty());",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(buf.copy_to_slice(&mut [0; 16]).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.get_i128_le();",
                "    assert_eq!(result, 0x01020304050607080910111213141516);",
                "    assert_panics!(buf.get_i128_le());",
                "    buf.advance(16);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(1);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buffer.is_empty());",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(buf.copy_to_slice(&mut [0; 16]).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\"[..];",
                "    let result = buf.get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x80000000000000000000000000000000);",
                "    assert_eq!(buf.remaining(), 0);",
                "    let error_result = std::panic::catch_unwind(|| { buf.get_i128_le() });",
                "    assert!(error_result.is_err());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\"[..];",
                "    let result = buf.get_i128_le();",
                "    assert_eq!(result, 0x80000000000000000000000000000000);",
                "    assert_eq!(buf.remaining(), 0);",
                "    let error_result = std::panic::catch_unwind(|| { buf.get_i128_le() });",
                "    assert!(error_result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"[..];",
                "    let result = buf.get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(panic_does_not_fit(buf.remaining(), 16));",
                "    assert!(buf.has_remaining() == false);",
                "    assert_eq!(buf.chunk(), &b\"\"[..]);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"[..];",
                "    let result = buf.get_i128_le();",
                "    assert_eq!(result, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(panic_does_not_fit(buf.remaining(), 16));",
                "    assert!(buf.has_remaining() == false);",
                "    assert_eq!(buf.chunk(), &b\"\"[..]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x00\"[..];",
                "    let result = buf.get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, -1);  // Expect a panic due to insufficient data in the buffer."
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x00\"[..];",
                "    let result = buf.get_i128_le();",
                "    assert_eq!(result, -1);  // Expect a panic due to insufficient data in the buffer.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| { let mut buf = &b\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..]; buf.get_i128_le(); }).is_err());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.get_i128_le();",
                "    assert!(std::panic::catch_unwind(|| { let mut buf = &b\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..]; buf.get_i128_le(); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}