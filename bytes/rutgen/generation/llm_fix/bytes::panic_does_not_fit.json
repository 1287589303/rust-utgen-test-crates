{
  "name": "bytes::panic_does_not_fit",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:199:2"
  },
  "visible": true,
  "loc": "src/lib.rs:179:1:184:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "size: [1, 8]; nbytes: [size + 1, 16]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 1;",
                "    let nbytes: usize = 2; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(1, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(std::usize::MAX, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(0, 0)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(8, 9)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(128, 256)).is_err(), true);"
              ],
              "code": [
                "{",
                "    let size: usize = 1;",
                "    let nbytes: usize = 2; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(1, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(std::usize::MAX, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(0, 0)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(8, 9)).is_err(), true);",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(128, 256)).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 2;",
                "    let nbytes: usize = 3; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(size, nbytes)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(size, nbytes)).unwrap_err().downcast_ref::<&str>(), Some(&\"size too large: the integer type can fit 2 bytes, but nbytes is 3\"));"
              ],
              "code": [
                "{",
                "    let size: usize = 2;",
                "    let nbytes: usize = 3; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert!(std::panic::catch_unwind(|| panic_does_not_fit(size, nbytes)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(size, nbytes)).unwrap_err().downcast_ref::<&str>(), Some(&\"size too large: the integer type can fit 2 bytes, but nbytes is 3\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 3;",
                "    let nbytes: usize = 4; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(3, 4)).is_err(), true);"
              ],
              "code": [
                "{",
                "    let size: usize = 3;",
                "    let nbytes: usize = 4; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert_eq!(std::panic::catch_unwind(|| panic_does_not_fit(3, 4)).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 4;",
                "    let nbytes: usize = 5; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_does_not_fit(4, 5), panic!(\"size too large: the integer type can fit 4 bytes, but nbytes is 5\"));"
              ],
              "code": [
                "{",
                "    let size: usize = 4;",
                "    let nbytes: usize = 5; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert_eq!(panic_does_not_fit(4, 5), panic!(\"size too large: the integer type can fit 4 bytes, but nbytes is 5\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 5;",
                "    let nbytes: usize = 6; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    panic_does_not_fit(5, 6);"
              ],
              "code": [
                "{",
                "    let size: usize = 5;",
                "    let nbytes: usize = 6; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    panic_does_not_fit(5, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 6;",
                "    let nbytes: usize = 7; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_does_not_fit(6, 7), panic!(\"size too large: the integer type can fit 6 bytes, but nbytes is 7\"));"
              ],
              "code": [
                "{",
                "    let size: usize = 6;",
                "    let nbytes: usize = 7; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert_eq!(panic_does_not_fit(6, 7), panic!(\"size too large: the integer type can fit 6 bytes, but nbytes is 7\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 7;",
                "    let nbytes: usize = 8; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    panic_does_not_fit(7, 8);"
              ],
              "code": [
                "{",
                "    let size: usize = 7;",
                "    let nbytes: usize = 8; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    panic_does_not_fit(7, 8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 8;",
                "    let nbytes: usize = 9; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_does_not_fit(8, 9), std::panic::catch_unwind(|| panic_does_not_fit(8, 9)).is_err());"
              ],
              "code": [
                "{",
                "    let size: usize = 8;",
                "    let nbytes: usize = 9; // size + 1",
                "    panic_does_not_fit(size, nbytes);",
                "    assert_eq!(panic_does_not_fit(8, 9), std::panic::catch_unwind(|| panic_does_not_fit(8, 9)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 1;",
                "    let nbytes: usize = 16; // upper limit",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 1;",
                "    let nbytes: usize = 16;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 8;",
                "    let nbytes: usize = 64;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 0;",
                "    let nbytes: usize = 1;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = usize::MAX;",
                "    let nbytes: usize = usize::MAX - 1;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 10;",
                "    let nbytes: usize = 10;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let size: usize = 1;",
                "    let nbytes: usize = 16; // upper limit",
                "    panic_does_not_fit(size, nbytes);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 1;",
                "    let nbytes: usize = 16;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 8;",
                "    let nbytes: usize = 64;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 0;",
                "    let nbytes: usize = 1;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = usize::MAX;",
                "    let nbytes: usize = usize::MAX - 1;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let size: usize = 10;",
                "    let nbytes: usize = 10;",
                "    panic_does_not_fit(size, nbytes);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let size: usize = 8;",
                "    let nbytes: usize = 16; // upper limit",
                "    panic_does_not_fit(size, nbytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_does_not_fit(8, 16).is_err(), true);",
                "    assert!(panic_does_not_fit(8, 16).to_string().contains(\"size too large: the integer type can fit 8 bytes, but nbytes is 16\"));"
              ],
              "code": [
                "   {  ",
                "       let size: usize = 8;  ",
                "       let nbytes: usize = 16; // upper limit  ",
                "       let result = std::panic::catch_unwind(|| {  ",
                "           panic_does_not_fit(size, nbytes);  ",
                "       });  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}