{
  "name": "bytes::bytes_mut::{impl#21}::into_iter",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1355:5:1357:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test input conditions for the function `into_iter(self) -> Self::IntoIter` are: a `BytesMut` instance with `len` within the range [0, MAX_VEC_POS], where `cap` >= `len` and ptr is a valid NonNull pointer.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([0u8; 0]))).unwrap(),",
                "        len: 0,",
                "        cap: 0,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.get_ref().len(), 0);",
                "    assert_eq!(_iter.get_mut().len(), 0);",
                "    assert_eq!(_iter.into_inner().len, 0);",
                "    assert!(ptr::eq(_iter.get_ref().as_ptr(), bytes_mut.ptr.as_ptr()));"
              ],
              "code": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([0u8; 0]))).unwrap(),",
                "        len: 0,",
                "        cap: 0,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "    assert_eq!(_iter.get_ref().len(), 0);",
                "    assert_eq!(_iter.get_mut().len(), 0);",
                "    assert_eq!(_iter.into_inner().len, 0);",
                "    assert!(ptr::eq(_iter.get_ref().as_ptr(), bytes_mut.ptr.as_ptr()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec = vec![1, 2, 3];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.into_inner().len(), 3);",
                "    assert_eq!(_iter.get_ref().len(), 3);",
                "    assert_eq!(_iter.get_mut().len(), 3);",
                "    assert_eq!(_iter.get_ref().inner.len(), 3);",
                "    assert_eq!(_iter.get_mut().inner.len(), 3);",
                "    assert!(!_iter.get_ref().inner.is_empty());",
                "    assert!(!_iter.get_mut().inner.is_empty());",
                "    assert!(ptr::eq(bytes_mut.ptr.as_ptr(), _iter.get_ref().inner.ptr.as_ptr()));"
              ],
              "code": [
                "{",
                "    let vec = vec![1, 2, 3];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "    assert_eq!(_iter.into_inner().len(), 3);",
                "    assert_eq!(_iter.get_ref().len(), 3);",
                "    assert_eq!(_iter.get_mut().len(), 3);",
                "   assert_eq!(_iter.get_ref().len(), 3);",
                "   assert_eq!(_iter.get_mut().len(), 3);",
                "   assert!(!_iter.get_ref().is_empty());",
                "   assert!(!_iter.get_mut().is_empty());",
                "   assert!(ptr::eq(bytes_mut.ptr.as_ptr(), _iter.get_ref().as_ptr()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec = vec![0; MAX_VEC_POS];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: MAX_VEC_POS,",
                "        cap: MAX_VEC_POS,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "}"
              ],
              "oracle": [
                "    let vec = vec![0; MAX_VEC_POS];",
                "    let bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(), len: MAX_VEC_POS, cap: MAX_VEC_POS, data: ptr::null_mut(), };",
                "    let iter = bytes_mut.into_iter();",
                "    assert_eq!(iter.get_ref(), &bytes_mut);",
                "    assert_eq!(iter.get_mut(), &mut bytes_mut);",
                "    assert_eq!(iter.into_inner(), bytes_mut);",
                "    assert!(iter.len() == MAX_VEC_POS);",
                "    assert!(iter.is_empty() == false);",
                "    assert!(iter.capacity() == MAX_VEC_POS);"
              ],
              "code": [
                "{",
                "    let vec = vec![0; MAX_VEC_POS];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: MAX_VEC_POS,",
                "        cap: MAX_VEC_POS,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "    let vec = vec![0; MAX_VEC_POS];",
                "    let bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(), len: MAX_VEC_POS, cap: MAX_VEC_POS, data: ptr::null_mut(), };",
                "    let iter = bytes_mut.into_iter();",
                "    assert_eq!(iter.get_ref(), &bytes_mut);",
                "    assert_eq!(iter.get_mut(), &mut bytes_mut);",
                "    assert_eq!(iter.into_inner(), bytes_mut);",
                "   assert!(iter.len() == MAX_VEC_POS);  ",
                "   assert!(iter.len() > 0);  ",
                "   assert!(iter.capacity() == MAX_VEC_POS);  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec = vec![255; 100];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: 100,",
                "        cap: 100,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let _iter = bytes_mut.into_iter();",
                "}"
              ],
              "oracle": [
                "    let vec = vec![255; 100];",
                "    let bytes_mut = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "    len: 100,",
                "    cap: 100,",
                "    data: ptr::null_mut(),",
                "    };",
                "    assert_eq!(bytes_mut.len, 100);",
                "    let _iter = bytes_mut.into_iter();",
                "    assert_eq!(_iter.get_ref(), &bytes_mut);",
                "    assert_eq!(_iter.get_mut(), &mut bytes_mut);",
                "    let inner = _iter.into_inner();",
                "    assert_eq!(inner.len, 100);",
                "    assert_eq!(inner.cap, 100);"
              ],
              "code": [
                "{",
                "    let vec = vec![255; 100];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "        len: 100,",
                "        cap: 100,",
                "        data: ptr::null_mut(),",
                "    };",
                "   let mut _iter = bytes_mut.into_iter();",
                "   let vec = vec![255; 100];",
                "   let bytes_mut = BytesMut {",
                "       ptr: NonNull::new(Box::into_raw(vec.into_boxed_slice()) as *mut u8).unwrap(),",
                "       len: 100,",
                "       cap: 100,",
                "       data: ptr::null_mut(),",
                "   };",
                "   assert_eq!(bytes_mut.len, 100);",
                "   let mut _iter = bytes_mut.into_iter();",
                "   assert_eq!(_iter.get_ref(), &bytes_mut);",
                "   assert_eq!(_iter.get_mut(), &mut bytes_mut);",
                "    let inner = _iter.into_inner();",
                "    assert_eq!(inner.len, 100);",
                "    assert_eq!(inner.cap, 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}