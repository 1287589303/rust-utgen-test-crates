{
  "name": "bytes::bytes_mut::{impl#0}::extend_from_slice",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:863:5:878:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: dst.len() >= cnt at line 870 is true, with bound dst.len() == cnt\n"
      ],
      "input_infer": "capacity >= cnt and cnt >= 0, where cnt is the length of the byte slice being appended to ensure sufficient capacity for the extension operation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(6);",
                "    buf.resize(6, 0);",
                "    buf.extend_from_slice(b\"abc\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 6);",
                "    assert_eq!(buf.as_slice(), b\"abc\\0\\0\\0\");",
                "    assert_eq!(buf.capacity(), 6);",
                "    assert!(!buf.is_empty());",
                "    assert_eq!(buf.spare_capacity_mut().len(), 3);",
                "    assert!(buf.spare_capacity_mut().iter().all(|&x| x == MaybeUninit::new(0)));"
              ],
              "code": [
                "{",
                "   let mut buf = BytesMut::with_capacity(6);",
                "   buf.resize(6, 0);",
                "   buf.extend_from_slice(b\"abc\");",
                "   assert_eq!(buf.len(), 6);",
                "   assert_eq!(buf.as_slice(), b\"abc\\0\\0\\0\");",
                "   assert_eq!(buf.capacity(), 6);",
                "   assert!(!buf.is_empty());",
                "   assert_eq!(buf.spare_capacity_mut().len(), 3);",
                "   assert!(buf.spare_capacity_mut().iter().all(|x| x.as_ptr() == MaybeUninit::new(0).as_ptr()));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(4, 0);",
                "    buf.extend_from_slice(b\"abcd\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 8);",
                "    assert_eq!(buf.as_slice(), b\"abcd\\x00\\x00\");"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(4, 0);",
                "    buf.extend_from_slice(b\"abcd\");",
                "    assert_eq!(buf.len(), 8);",
                "    assert_eq!(buf.as_slice(), b\"abcd\\x00\\x00\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(2, 0);",
                "    buf.extend_from_slice(b\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], b\"\\x00\\x00\");",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.remaining_mut() == 3);",
                "    assert!(buf.spare_capacity_mut().len() == 3);",
                "    assert!(buf.try_reclaim(3) == true);",
                "    assert!(buf.len() == 2);",
                "    assert!(buf.capacity() == 5);",
                "    assert!(buf.remaining_mut() == 3);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(2, 0);",
                "    buf.extend_from_slice(b\"\");",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], b\"\\x00\\x00\");",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.remaining_mut() == 3);",
                "    assert!(buf.spare_capacity_mut().len() == 3);",
                "    assert!(buf.try_reclaim(3) == true);",
                "    assert!(buf.len() == 2);",
                "    assert!(buf.capacity() == 5);",
                "    assert!(buf.remaining_mut() == 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(50);",
                "    buf.resize(20, 0);",
                "    buf.extend_from_slice(b\"123456\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 26);",
                "    assert_eq!(buf.capacity(), 50);",
                "    assert_eq!(&buf[..], b\"123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
                "    assert!(buf.spare_capacity_mut().len() >= 24);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(50);",
                "    buf.resize(20, 0);",
                "    buf.extend_from_slice(b\"123456\");",
                "    assert_eq!(buf.len(), 26);",
                "    assert_eq!(buf.capacity(), 50);",
                "    assert_eq!(&buf[..], b\"123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
                "    assert!(buf.spare_capacity_mut().len() >= 24);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: dst.len() >= cnt at line 870 is false\n"
      ],
      "input_infer": "self.len() + extend.len() > self.capacity() and extend.len() > 0 and self is initialized with a capacity that is initially less than extend.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5); // initial capacity is less than the extend length",
                "    buf.extend_from_slice(b\"abcde\"); // extend with length greater than capacity",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 5);",
                "    assert_eq!(&buf[..], b\"abcde\");",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.spare_capacity_mut().len() > 0);",
                "    assert!(buf.remaining_mut() > 0);",
                "    assert!(buf.try_reclaim(1) == true);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5); // initial capacity is less than the extend length",
                "    buf.extend_from_slice(b\"abcde\"); // extend with length greater than capacity",
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 5);",
                "    assert_eq!(&buf[..], b\"abcde\");",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.spare_capacity_mut().len() > 0);",
                "    assert!(buf.remaining_mut() > 0);",
                "    assert!(buf.try_reclaim(1) == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5); // initial capacity",
                "    buf.extend_from_slice(b\"abc\"); // fill part of the capacity",
                "    buf.extend_from_slice(b\"de\"); // now extending to hit the exact capacity",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 5);",
                "    assert_eq!(&buf[..], b\"abcde\");",
                "    assert!(buf.spare_capacity_mut().len() < 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5); // initial capacity",
                "    buf.extend_from_slice(b\"abc\"); // fill part of the capacity",
                "    buf.extend_from_slice(b\"de\"); // now extending to hit the exact capacity",
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 5);",
                "    assert_eq!(&buf[..], b\"abcde\");",
                "    assert!(buf.spare_capacity_mut().len() < 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::new(); // Starts with 0 capacity",
                "    buf.extend_from_slice(b\"hello\"); // Extend with a length greater than initial capacity",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 0);",
                "    assert_eq!(&buf[..], b\"hello\");",
                "    assert!(buf.spare_capacity_mut().len() > 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::new(); // Starts with 0 capacity",
                "    buf.extend_from_slice(b\"hello\"); // Extend with a length greater than initial capacity",
                "    assert_eq!(buf.len(), 5);",
                "    assert!(buf.capacity() > 0);",
                "    assert_eq!(&buf[..], b\"hello\");",
                "    assert!(buf.spare_capacity_mut().len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}