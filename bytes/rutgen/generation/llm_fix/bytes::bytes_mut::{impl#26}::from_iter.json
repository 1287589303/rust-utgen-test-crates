{
  "name": "bytes::bytes_mut::{impl#26}::from_iter",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1408:5:1410:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1 <= capacity <= 65536, 0 <= length of iterable <= 256, elements of iterable are of type u8, capacity >= length of iterable\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = Vec::new();",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    assert!(bytes_mut.is_empty());"
              ],
              "code": [
                "{",
                "    let iter: Vec<u8> = Vec::new();",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = vec![42];",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(bytes_mut.capacity(), 1);",
                "    assert_eq!(bytes_mut.is_empty(), false);",
                "    assert_eq!(bytes_mut.as_slice(), &[42]);"
              ],
              "code": [
                "{",
                "    let iter: Vec<u8> = vec![42];",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(bytes_mut.capacity(), 1);",
                "    assert_eq!(bytes_mut.is_empty(), false);",
                "    assert_eq!(bytes_mut.as_slice(), &[42]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = (0..256).collect();",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 256);",
                "    assert_eq!(bytes_mut.capacity(), 256);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.as_slice(), (0..256).collect::<Vec<u8>>().as_slice());"
              ],
              "code": [
                "   {  ",
                "       let iter: Vec<u8> = (0..=255).collect();  ",
                "       let bytes_mut = BytesMut::from_iter(iter);  ",
                "       assert_eq!(bytes_mut.len(), 256);  ",
                "       assert_eq!(bytes_mut.capacity(), 256);  ",
                "       assert!(!bytes_mut.is_empty());  ",
                "       assert_eq!(bytes_mut.as_slice(), (0..=255).collect::<Vec<u8>>().as_slice());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = (0..260).collect(); // boundary case",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 260);",
                "    assert_eq!(bytes_mut.capacity(), 260);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.as_slice(), (0..260).collect::<Vec<u8>>().as_slice());",
                "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
                "    assert!(unsafe { bytes_mut.ptr.as_ptr().is_null() } == false);"
              ],
              "code": [
                "{",
                "    let iter: Vec<u8> = (0..260).collect(); // boundary case",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    assert_eq!(bytes_mut.len(), 260);",
                "    assert_eq!(bytes_mut.capacity(), 260);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.as_slice(), (0..260).collect::<Vec<u8>>().as_slice());",
                "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
                "    assert!(unsafe { bytes_mut.ptr.as_ptr().is_null() } == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = vec![255; 10]; // 10 elements",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 10);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
                "    assert!(!bytes_mut.is_empty());"
              ],
              "code": [
                "{",
                "    let iter: Vec<u8> = vec![255; 10]; // 10 elements",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    assert_eq!(bytes_mut.len(), 10);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
                "    assert!(!bytes_mut.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = (0..256).collect();",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    let capacity = bytes_mut.capacity();",
                "    assert!(capacity >= 256);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 256);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 256);",
                "    let slice = bytes_mut.as_slice();",
                "    assert_eq!(slice.len(), 256);",
                "    assert_eq!(slice[0], 0);",
                "    assert_eq!(slice[255], 255);"
              ],
              "code": [
                "   {  ",
                "       let iter: Vec<u8> = (0..=255).collect();  ",
                "       let bytes_mut = BytesMut::from_iter(iter);  ",
                "    let capacity = bytes_mut.capacity();",
                "    assert!(capacity >= 256);",
                "    assert_eq!(bytes_mut.len(), 256);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 256);",
                "    let slice = bytes_mut.as_slice();",
                "    assert_eq!(slice.len(), 256);",
                "    assert_eq!(slice[0], 0);",
                "    assert_eq!(slice[255], 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<u8> = (0..255).collect();",
                "    let bytes_mut = BytesMut::from_iter(iter);",
                "    let capacity = bytes_mut.capacity();",
                "    assert!(capacity >= 255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 255);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert!(bytes_mut.as_slice() == &iter[..]);",
                "    assert!(bytes_mut.capacity() >= 255);"
              ],
              "code": [
                "{",
                "   let iter: Vec<u8> = (0..255).collect();",
                "   let bytes_mut = BytesMut::from_iter(iter.clone());",
                "   let capacity = bytes_mut.capacity();",
                "   assert!(capacity >= 255);",
                "   assert_eq!(bytes_mut.len(), 255);",
                "   assert!(!bytes_mut.is_empty());",
                "   assert!(bytes_mut.as_slice() == &iter[..]);",
                "    assert!(bytes_mut.capacity() >= 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}