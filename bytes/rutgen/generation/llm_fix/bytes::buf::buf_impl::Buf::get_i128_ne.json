{
  "name": "bytes::buf::buf_impl::Buf::get_i128_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:855:5:857:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "buffer length >= 16 bytes, buffer must contain valid i128 data in native-endian format, valid memory allocation for mutable buffers.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\";",
                "    let _ = buf.get_i128_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0x01020304050607080910111213141516, buf.get_i128_ne());",
                "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
                "    let _ = buf.get_i128_ne();"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_get_i128_ne_insufficient_bytes() {",
                "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
                "    let _ = buf.get_i128_ne();",
                "}",
                "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\";",
                "    let _ = buf.get_i128_ne();",
                "    assert_eq!(0x01020304050607080910111213141516, buf.get_i128_ne());",
                "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
                "    let _ = buf.get_i128_ne();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
                "    let _ = buf.get_i128_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.get_i128_ne(), 0x161514131211100907060504030201);",
                "    assert_panics!(buf.get_i128_ne());",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining());",
                "    assert!(buf.copy_to_slice(&mut [0; 16]).is_ok());",
                "    assert!(buf.try_get_i128_ne().is_err());"
              ],
              "code": [
                "{",
                "   #[should_panic]",
                "   fn test_get_i128_ne_insufficient_bytes() {",
                "       let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
                "       let _ = buf.get_i128_ne();",
                "   }",
                "       let mut buf: &[u8] = b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
                "       let _ = buf.get_i128_ne();",
                "       assert_eq!(buf.get_i128_ne(), 0x161514131211100907060504030201);",
                "       test_get_i128_ne_insufficient_bytes(); // Ensure this panics",
                "       assert_eq!(buf.remaining(), 0);",
                "       assert!(buf.has_remaining());",
                "       buf.copy_to_slice(&mut [0; 16]);",
                "       assert!(buf.try_get_i128_ne().is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}