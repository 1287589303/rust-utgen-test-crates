{
  "name": "bytes::bytes_mut::{impl#0}::with_capacity",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:148:5:150:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity: 0, 1, 10, 17, 64, usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(0);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 0);",
                "    ",
                "    let bytes_64 = BytesMut::with_capacity(64);",
                "    let len_64 = bytes_64.len();",
                "    let cap_64 = bytes_64.capacity();",
                "    assert_eq!(len_64, 0);",
                "    assert!(cap_64 >= 64);"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(0);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 0);",
                "    ",
                "    let bytes_64 = BytesMut::with_capacity(64);",
                "    let len_64 = bytes_64.len();",
                "    let cap_64 = bytes_64.capacity();",
                "    assert_eq!(len_64, 0);",
                "    assert!(cap_64 >= 64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(1);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 1);",
                "    assert!(cap == bytes.capacity());",
                "    assert!(bytes.is_empty());"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(1);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 1);",
                "    assert!(cap == bytes.capacity());",
                "    assert!(bytes.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(10);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 10);"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(10);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(17);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 17);",
                "    assert!(cap > len);"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(17);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 17);",
                "    assert!(cap > len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(64);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 64);"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(64);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= 64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes = BytesMut::with_capacity(usize::MAX);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(cap >= usize::MAX);",
                "    assert!(cap > 0);",
                "    assert!(cap >= 64);",
                "    assert!(cap <= usize::MAX);",
                "    assert!(bytes.is_empty());"
              ],
              "code": [
                "{",
                "    let bytes = BytesMut::with_capacity(usize::MAX);",
                "    let len = bytes.len();",
                "    let cap = bytes.capacity();",
                "    assert_eq!(len, 0);",
                "    assert!(cap >= usize::MAX);",
                "    assert!(cap > 0);",
                "    assert!(cap >= 64);",
                "    assert!(cap <= usize::MAX);",
                "    assert!(bytes.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}