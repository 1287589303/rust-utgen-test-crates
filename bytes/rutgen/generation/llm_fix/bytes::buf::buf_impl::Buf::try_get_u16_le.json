{
  "name": "bytes::buf::buf_impl::Buf::try_get_u16_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1303:5:1305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining < 2, requested = 2, available = 0 to 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(buf: Vec<u8>) -> Self {",
                "            Self { buf, position: 0 }",
                "        }",
                "",
                "        fn remaining(&self) -> usize {",
                "            self.buf.len() - self.position",
                "        }",
                "",
                "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(vec![0x08]);",
                "    let result = buf.try_get_u16_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError{requested: 2, available: 1}));"
              ],
              "code": [
                "   fn test_try_get_u16_le_00()  ",
                "   {  ",
                "       struct TestBuf {  ",
                "           buf: Vec<u8>,  ",
                "           position: usize,  ",
                "       }  ",
                " ",
                "       impl TestBuf {  ",
                "           fn new(buf: Vec<u8>) -> Self {  ",
                "               Self { buf, position: 0 }  ",
                "           }  ",
                " ",
                "           fn remaining(&self) -> usize {  ",
                "               self.buf.len() - self.position  ",
                "           }  ",
                " ",
                "           fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {  ",
                "               if self.remaining() < 2 {  ",
                "                   return Err(TryGetError {  ",
                "                       requested: 2,  ",
                "                       available: self.remaining(),  ",
                "                   });  ",
                "               }  ",
                "               let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);  ",
                "               self.position += 2;  ",
                "               Ok(value)  ",
                "           }  ",
                "       }  ",
                " ",
                "       let mut buf = TestBuf::new(vec![0x08]);  ",
                "       let result = buf.try_get_u16_le();  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        buf: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(buf: Vec<u8>) -> Self {",
                "            Self { buf, position: 0 }",
                "        }",
                "",
                "        fn remaining(&self) -> usize {",
                "            self.buf.len() - self.position",
                "        }",
                "",
                "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(vec![]);",
                "    let result = buf.try_get_u16_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_le());"
              ],
              "code": [
                "fn test_try_get_u16_le_01()  ",
                "{  ",
                "   struct TestBuf {  ",
                "       buf: Vec<u8>,  ",
                "       position: usize,  ",
                "   }  ",
                " ",
                "   impl TestBuf {  ",
                "       fn new(buf: Vec<u8>) -> Self {  ",
                "           Self { buf, position: 0 }  ",
                "       }  ",
                " ",
                "       fn remaining(&self) -> usize {  ",
                "           self.buf.len() - self.position  ",
                "       }  ",
                " ",
                "       fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {  ",
                "           if self.remaining() < 2 {  ",
                "               return Err(TryGetError {  ",
                "                   requested: 2,  ",
                "                   available: self.remaining(),  ",
                "               });  ",
                "           }  ",
                "           let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);  ",
                "           self.position += 2;  ",
                "           Ok(value)  ",
                "       }  ",
                "   }  ",
                "   let mut buf = TestBuf::new(vec![]);  ",
                "   let result = buf.try_get_u16_le();  ",
                "   assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_le());  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining() >= 2 and remaining() < 6 for Ok(ret), remaining() == 1 for Err(TryGetError{requested: 2, available: 1})\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02 hello\"[..]; // remaining() == 8",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0201_u16), buf.try_get_u16_le());",
                "    assert_eq!(6, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02 hello\"[..]; // remaining() == 8",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "    assert_eq!(Ok(0x0201_u16), buf.try_get_u16_le());",
                "    assert_eq!(6, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x03\\x04\"[..]; // remaining() == 2",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 2);",
                "    assert_eq!(result, Ok(0x0403_u16);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x03\\x04\"[..]; // remaining() == 2",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "   assert_eq!(buf.remaining(), 2);",
                "   assert_eq!(result, Ok(0x0403_u16));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x05\"[..]; // remaining() == 1",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
                "    assert_eq!(buf.remaining(), 1);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x05\"[..]; // remaining() == 1",
                "    let result = buf.try_get_u16_le();",
                "    // Calling the function to demonstrate the test",
                "    let _ = result;",
                "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
                "    assert_eq!(buf.remaining(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}